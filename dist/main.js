/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js":
/*!********************************************************************!*\
  !*** ./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process, Buffer, module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * @license Asciidoctor.js 2.2.1 | MIT | https://github.com/asciidoctor/asciidoctor.js\n */\n(function(undefined) {\n  // @note\n  //   A few conventions for the documentation of this file:\n  //   1. Always use \"//\" (in contrast with \"/**/\")\n  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)\n  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to\n  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.\n  //   4. `nil` and `null` being unambiguous refer to the respective\n  //      objects/values in Ruby and JavaScript\n  //   5. This is still WIP :) so please give feedback and suggestions on how\n  //      to improve or for alternative solutions\n  //\n  //   The way the code is digested before going through Yardoc is a secret kept\n  //   in the docs repo (https://github.com/opal/docs/tree/master).\n\n  var global_object = this, console;\n\n  // Detect the global object\n  if (typeof(global) !== 'undefined') { global_object = global; }\n  if (typeof(window) !== 'undefined') { global_object = window; }\n\n  // Setup a dummy console object if missing\n  if (typeof(global_object.console) === 'object') {\n    console = global_object.console;\n  } else if (global_object.console == null) {\n    console = global_object.console = {};\n  } else {\n    console = {};\n  }\n\n  if (!('log' in console)) { console.log = function () {}; }\n  if (!('warn' in console)) { console.warn = console.log; }\n\n  if (typeof(this.Opal) !== 'undefined') {\n    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');\n    return this.Opal;\n  }\n\n  var nil;\n\n  // The actual class for BasicObject\n  var BasicObject;\n\n  // The actual Object class.\n  // The leading underscore is to avoid confusion with window.Object()\n  var _Object;\n\n  // The actual Module class\n  var Module;\n\n  // The actual Class class\n  var Class;\n\n  // The Opal object that is exposed globally\n  var Opal = this.Opal = {};\n\n  // This is a useful reference to global object inside ruby files\n  Opal.global = global_object;\n  global_object.Opal = Opal;\n\n  // Configure runtime behavior with regards to require and unsupported fearures\n  Opal.config = {\n    missing_require_severity: 'error',        // error, warning, ignore\n    unsupported_features_severity: 'warning', // error, warning, ignore\n    enable_stack_trace: true                  // true, false\n  }\n\n  // Minify common function calls\n  var $hasOwn       = Object.hasOwnProperty;\n  var $bind         = Function.prototype.bind;\n  var $setPrototype = Object.setPrototypeOf;\n  var $slice        = Array.prototype.slice;\n  var $splice       = Array.prototype.splice;\n\n  // Nil object id is always 4\n  var nil_id = 4;\n\n  // Generates even sequential numbers greater than 4\n  // (nil_id) to serve as unique ids for ruby objects\n  var unique_id = nil_id;\n\n  // Return next unique id\n  Opal.uid = function() {\n    unique_id += 2;\n    return unique_id;\n  };\n\n  // Retrieve or assign the id of an object\n  Opal.id = function(obj) {\n    if (obj.$$is_number) return (obj * 2)+1;\n    if (obj.$$id != null) {\n      return obj.$$id;\n    };\n    $defineProperty(obj, '$$id', Opal.uid());\n    return obj.$$id;\n  };\n\n  // Globals table\n  Opal.gvars = {};\n\n  // Exit function, this should be replaced by platform specific implementation\n  // (See nodejs and chrome for examples)\n  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };\n\n  // keeps track of exceptions for $!\n  Opal.exceptions = [];\n\n  // @private\n  // Pops an exception from the stack and updates `$!`.\n  Opal.pop_exception = function() {\n    Opal.gvars[\"!\"] = Opal.exceptions.pop() || nil;\n  }\n\n  // Inspect any kind of object, including non Ruby ones\n  Opal.inspect = function(obj) {\n    if (obj === undefined) {\n      return \"undefined\";\n    }\n    else if (obj === null) {\n      return \"null\";\n    }\n    else if (!obj.$$class) {\n      return obj.toString();\n    }\n    else {\n      return obj.$inspect();\n    }\n  }\n\n  function $defineProperty(object, name, initialValue) {\n    if (typeof(object) === \"string\") {\n      // Special case for:\n      //   s = \"string\"\n      //   def s.m; end\n      // String class is the only class that:\n      // + compiles to JS primitive\n      // + allows method definition directly on instances\n      // numbers, true, false and nil do not support it.\n      object[name] = initialValue;\n    } else {\n      Object.defineProperty(object, name, {\n        value: initialValue,\n        enumerable: false,\n        configurable: true,\n        writable: true\n      });\n    }\n  }\n\n  Opal.defineProperty = $defineProperty;\n\n  Opal.slice = $slice;\n\n\n  // Truth\n  // -----\n\n  Opal.truthy = function(val) {\n    return (val !== nil && val != null && (!val.$$is_boolean || val == true));\n  };\n\n  Opal.falsy = function(val) {\n    return (val === nil || val == null || (val.$$is_boolean && val == false))\n  };\n\n\n  // Constants\n  // ---------\n  //\n  // For future reference:\n  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)\n  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)\n  //\n  // Legend of MRI concepts/names:\n  // - constant reference (cref): the module/class that acts as a namespace\n  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside\n  //            `module A; module B::C; end; end` is `[B::C, A]`\n\n  // Get the constant in the scope of the current cref\n  function const_get_name(cref, name) {\n    if (cref) return cref.$$const[name];\n  }\n\n  // Walk up the nesting array looking for the constant\n  function const_lookup_nesting(nesting, name) {\n    var i, ii, result, constant;\n\n    if (nesting.length === 0) return;\n\n    // If the nesting is not empty the constant is looked up in its elements\n    // and in order. The ancestors of those elements are ignored.\n    for (i = 0, ii = nesting.length; i < ii; i++) {\n      constant = nesting[i].$$const[name];\n      if (constant != null) return constant;\n    }\n  }\n\n  // Walk up the ancestors chain looking for the constant\n  function const_lookup_ancestors(cref, name) {\n    var i, ii, result, ancestors;\n\n    if (cref == null) return;\n\n    ancestors = Opal.ancestors(cref);\n\n    for (i = 0, ii = ancestors.length; i < ii; i++) {\n      if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {\n        return ancestors[i].$$const[name];\n      }\n    }\n  }\n\n  // Walk up Object's ancestors chain looking for the constant,\n  // but only if cref is missing or a module.\n  function const_lookup_Object(cref, name) {\n    if (cref == null || cref.$$is_module) {\n      return const_lookup_ancestors(_Object, name);\n    }\n  }\n\n  // Call const_missing if nothing else worked\n  function const_missing(cref, name, skip_missing) {\n    if (!skip_missing) {\n      return (cref || _Object).$const_missing(name);\n    }\n  }\n\n  // Look for the constant just in the current cref or call `#const_missing`\n  Opal.const_get_local = function(cref, name, skip_missing) {\n    var result;\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      throw new Opal.TypeError(cref.toString() + \" is not a class/module\");\n    }\n\n    result = const_get_name(cref, name);              if (result != null) return result;\n    result = const_missing(cref, name, skip_missing); if (result != null) return result;\n  }\n\n  // Look for the constant relative to a cref or call `#const_missing` (when the\n  // constant is prefixed by `::`).\n  Opal.const_get_qualified = function(cref, name, skip_missing) {\n    var result, cache, cached, current_version = Opal.const_cache_version;\n\n    if (cref == null) return;\n\n    if (cref === '::') cref = _Object;\n\n    if (!cref.$$is_module && !cref.$$is_class) {\n      throw new Opal.TypeError(cref.toString() + \" is not a class/module\");\n    }\n\n    if ((cache = cref.$$const_cache) == null) {\n      $defineProperty(cref, '$$const_cache', Object.create(null));\n      cache = cref.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null);\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null ? result : const_missing(cref, name, skip_missing);\n  };\n\n  // Initialize the top level constant cache generation counter\n  Opal.const_cache_version = 1;\n\n  // Look for the constant in the open using the current nesting and the nearest\n  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).\n  Opal.const_get_relative = function(nesting, name, skip_missing) {\n    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;\n\n    if ((cache = nesting.$$const_cache) == null) {\n      $defineProperty(nesting, '$$const_cache', Object.create(null));\n      cache = nesting.$$const_cache;\n    }\n    cached = cache[name];\n\n    if (cached == null || cached[0] !== current_version) {\n      ((result = const_get_name(cref, name))              != null) ||\n      ((result = const_lookup_nesting(nesting, name))     != null) ||\n      ((result = const_lookup_ancestors(cref, name))      != null) ||\n      ((result = const_lookup_Object(cref, name))         != null);\n\n      cache[name] = [current_version, result];\n    } else {\n      result = cached[1];\n    }\n\n    return result != null ? result : const_missing(cref, name, skip_missing);\n  };\n\n  // Register the constant on a cref and opportunistically set the name of\n  // unnamed classes/modules.\n  Opal.const_set = function(cref, name, value) {\n    if (cref == null || cref === '::') cref = _Object;\n\n    if (value.$$is_a_module) {\n      if (value.$$name == null || value.$$name === nil) value.$$name = name;\n      if (value.$$base_module == null) value.$$base_module = cref;\n    }\n\n    cref.$$const = (cref.$$const || Object.create(null));\n    cref.$$const[name] = value;\n\n    // Add a short helper to navigate constants manually.\n    // @example\n    //   Opal.$$.Regexp.$$.IGNORECASE\n    cref.$$ = cref.$$const;\n\n    Opal.const_cache_version++;\n\n    // Expose top level constants onto the Opal object\n    if (cref === _Object) Opal[name] = value;\n\n    // Name new class directly onto current scope (Opal.Foo.Baz = klass)\n    $defineProperty(cref, name, value);\n\n    return value;\n  };\n\n  // Get all the constants reachable from a given cref, by default will include\n  // inherited constants.\n  Opal.constants = function(cref, inherit) {\n    if (inherit == null) inherit = true;\n\n    var module, modules = [cref], module_constants, i, ii, constants = {}, constant;\n\n    if (inherit) modules = modules.concat(Opal.ancestors(cref));\n    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));\n\n    for (i = 0, ii = modules.length; i < ii; i++) {\n      module = modules[i];\n\n      // Don not show Objects constants unless we're querying Object itself\n      if (cref !== _Object && module == _Object) break;\n\n      for (constant in module.$$const) {\n        constants[constant] = true;\n      }\n    }\n\n    return Object.keys(constants);\n  };\n\n  // Remove a constant from a cref.\n  Opal.const_remove = function(cref, name) {\n    Opal.const_cache_version++;\n\n    if (cref.$$const[name] != null) {\n      var old = cref.$$const[name];\n      delete cref.$$const[name];\n      return old;\n    }\n\n    if (cref.$$autoload != null && cref.$$autoload[name] != null) {\n      delete cref.$$autoload[name];\n      return nil;\n    }\n\n    throw Opal.NameError.$new(\"constant \"+cref+\"::\"+cref.$name()+\" not defined\");\n  };\n\n\n  // Modules & Classes\n  // -----------------\n\n  // A `class Foo; end` expression in ruby is compiled to call this runtime\n  // method which either returns an existing class of the given name, or creates\n  // a new class in the given `base` scope.\n  //\n  // If a constant with the given name exists, then we check to make sure that\n  // it is a class and also that the superclasses match. If either of these\n  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one\n  // was not specified in the ruby code.\n  //\n  // We pass a constructor to this method of the form `function ClassName() {}`\n  // simply so that classes show up with nicely formatted names inside debuggers\n  // in the web browser (or node/sprockets).\n  //\n  // The `scope` is the current `self` value where the class is being created\n  // from. We use this to get the scope for where the class should be created.\n  // If `scope` is an object (not a class/module), we simple get its class and\n  // use that as the scope instead.\n  //\n  // @param scope        [Object] where the class is being created\n  // @param superclass  [Class,null] superclass of the new class (may be null)\n  // @param id          [String] the name of the class to be created\n  // @param constructor [JS.Function] function to use as constructor\n  //\n  // @return new [Class]  or existing ruby class\n  //\n  Opal.allocate_class = function(name, superclass) {\n    var klass, constructor;\n\n    if (superclass != null && superclass.$$bridge) {\n      // Inheritance from bridged classes requires\n      // calling original JS constructors\n      constructor = function() {\n        var args = $slice.call(arguments),\n            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();\n\n        // and replacing a __proto__ manually\n        $setPrototype(self, klass.$$prototype);\n        return self;\n      }\n    } else {\n      constructor = function(){};\n    }\n\n    if (name) {\n      $defineProperty(constructor, 'displayName', '::'+name);\n    }\n\n    klass = constructor;\n\n    $defineProperty(klass, '$$name', name);\n    $defineProperty(klass, '$$constructor', constructor);\n    $defineProperty(klass, '$$prototype', constructor.prototype);\n    $defineProperty(klass, '$$const', {});\n    $defineProperty(klass, '$$is_class', true);\n    $defineProperty(klass, '$$is_a_module', true);\n    $defineProperty(klass, '$$super', superclass);\n    $defineProperty(klass, '$$cvars', {});\n    $defineProperty(klass, '$$own_included_modules', []);\n    $defineProperty(klass, '$$own_prepended_modules', []);\n    $defineProperty(klass, '$$ancestors', []);\n    $defineProperty(klass, '$$ancestors_cache_version', null);\n\n    $defineProperty(klass.$$prototype, '$$class', klass);\n\n    // By default if there are no singleton class methods\n    // __proto__ is Class.prototype\n    // Later singleton methods generate a singleton_class\n    // and inject it into ancestors chain\n    if (Opal.Class) {\n      $setPrototype(klass, Opal.Class.prototype);\n    }\n\n    if (superclass != null) {\n      $setPrototype(klass.$$prototype, superclass.$$prototype);\n\n      if (superclass.$$meta) {\n        // If superclass has metaclass then we have explicitely inherit it.\n        Opal.build_class_singleton_class(klass);\n      }\n    };\n\n    return klass;\n  }\n\n\n  function find_existing_class(scope, name) {\n    // Try to find the class in the current scope\n    var klass = const_get_name(scope, name);\n\n    // If the class exists in the scope, then we must use that\n    if (klass) {\n      // Make sure the existing constant is a class, or raise error\n      if (!klass.$$is_class) {\n        throw Opal.TypeError.$new(name + \" is not a class\");\n      }\n\n      return klass;\n    }\n  }\n\n  function ensureSuperclassMatch(klass, superclass) {\n    if (klass.$$super !== superclass) {\n      throw Opal.TypeError.$new(\"superclass mismatch for class \" + klass.$$name);\n    }\n  }\n\n  Opal.klass = function(scope, superclass, name) {\n    var bridged;\n\n    if (scope == null) {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    // If the superclass is not an Opal-generated class then we're bridging a native JS class\n    if (superclass != null && !superclass.hasOwnProperty('$$is_class')) {\n      bridged = superclass;\n      superclass = _Object;\n    }\n\n    var klass = find_existing_class(scope, name);\n\n    if (klass) {\n      if (superclass) {\n        // Make sure existing class has same superclass\n        ensureSuperclassMatch(klass, superclass);\n      }\n      return klass;\n    }\n\n    // Class doesn't exist, create a new one with given superclass...\n\n    // Not specifying a superclass means we can assume it to be Object\n    if (superclass == null) {\n      superclass = _Object;\n    }\n\n    // Create the class object (instance of Class)\n    klass = Opal.allocate_class(name, superclass);\n    Opal.const_set(scope, name, klass);\n\n    // Call .inherited() hook with new class on the superclass\n    if (superclass.$inherited) {\n      superclass.$inherited(klass);\n    }\n\n    if (bridged) {\n      Opal.bridge(bridged, klass);\n    }\n\n    return klass;\n  }\n\n  // Define new module (or return existing module). The given `scope` is basically\n  // the current `self` value the `module` statement was defined in. If this is\n  // a ruby module or class, then it is used, otherwise if the scope is a ruby\n  // object then that objects real ruby class is used (e.g. if the scope is the\n  // main object, then the top level `Object` class is used as the scope).\n  //\n  // If a module of the given name is already defined in the scope, then that\n  // instance is just returned.\n  //\n  // If there is a class of the given name in the scope, then an error is\n  // generated instead (cannot have a class and module of same name in same scope).\n  //\n  // Otherwise, a new module is created in the scope with the given name, and that\n  // new instance is returned back (to be referenced at runtime).\n  //\n  // @param  scope [Module, Class] class or module this definition is inside\n  // @param  id   [String] the name of the new (or existing) module\n  //\n  // @return [Module]\n  Opal.allocate_module = function(name) {\n    var constructor = function(){};\n    if (name) {\n      $defineProperty(constructor, 'displayName', name+'.$$constructor');\n    }\n\n    var module = constructor;\n\n    if (name)\n      $defineProperty(constructor, 'displayName', name+'.constructor');\n\n    $defineProperty(module, '$$name', name);\n    $defineProperty(module, '$$prototype', constructor.prototype);\n    $defineProperty(module, '$$const', {});\n    $defineProperty(module, '$$is_module', true);\n    $defineProperty(module, '$$is_a_module', true);\n    $defineProperty(module, '$$cvars', {});\n    $defineProperty(module, '$$iclasses', []);\n    $defineProperty(module, '$$own_included_modules', []);\n    $defineProperty(module, '$$own_prepended_modules', []);\n    $defineProperty(module, '$$ancestors', [module]);\n    $defineProperty(module, '$$ancestors_cache_version', null);\n\n    $setPrototype(module, Opal.Module.prototype);\n\n    return module;\n  }\n\n  function find_existing_module(scope, name) {\n    var module = const_get_name(scope, name);\n    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);\n\n    if (module) {\n      if (!module.$$is_module && module !== _Object) {\n        throw Opal.TypeError.$new(name + \" is not a module\");\n      }\n    }\n\n    return module;\n  }\n\n  Opal.module = function(scope, name) {\n    var module;\n\n    if (scope == null) {\n      // Global scope\n      scope = _Object;\n    } else if (!scope.$$is_class && !scope.$$is_module) {\n      // Scope is an object, use its class\n      scope = scope.$$class;\n    }\n\n    module = find_existing_module(scope, name);\n\n    if (module) {\n      return module;\n    }\n\n    // Module doesnt exist, create a new one...\n    module = Opal.allocate_module(name);\n    Opal.const_set(scope, name, module);\n\n    return module;\n  }\n\n  // Return the singleton class for the passed object.\n  //\n  // If the given object alredy has a singleton class, then it will be stored on\n  // the object as the `$$meta` property. If this exists, then it is simply\n  // returned back.\n  //\n  // Otherwise, a new singleton object for the class or object is created, set on\n  // the object at `$$meta` for future use, and then returned.\n  //\n  // @param object [Object] the ruby object\n  // @return [Class] the singleton class for object\n  Opal.get_singleton_class = function(object) {\n    if (object.$$meta) {\n      return object.$$meta;\n    }\n\n    if (object.hasOwnProperty('$$is_class')) {\n      return Opal.build_class_singleton_class(object);\n    } else if (object.hasOwnProperty('$$is_module')) {\n      return Opal.build_module_singletin_class(object);\n    } else {\n      return Opal.build_object_singleton_class(object);\n    }\n  };\n\n  // Build the singleton class for an existing class. Class object are built\n  // with their singleton class already in the prototype chain and inheriting\n  // from their superclass object (up to `Class` itself).\n  //\n  // NOTE: Actually in MRI a class' singleton class inherits from its\n  // superclass' singleton class which in turn inherits from Class.\n  //\n  // @param klass [Class]\n  // @return [Class]\n  Opal.build_class_singleton_class = function(klass) {\n    var superclass, meta;\n\n    if (klass.$$meta) {\n      return klass.$$meta;\n    }\n\n    // The singleton_class superclass is the singleton_class of its superclass;\n    // but BasicObject has no superclass (its `$$super` is null), thus we\n    // fallback on `Class`.\n    superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);\n\n    meta = Opal.allocate_class(null, superclass, function(){});\n\n    $defineProperty(meta, '$$is_singleton', true);\n    $defineProperty(meta, '$$singleton_of', klass);\n    $defineProperty(klass, '$$meta', meta);\n    $setPrototype(klass, meta.$$prototype);\n    // Restoring ClassName.class\n    $defineProperty(klass, '$$class', Opal.Class);\n\n    return meta;\n  };\n\n  Opal.build_module_singletin_class = function(mod) {\n    if (mod.$$meta) {\n      return mod.$$meta;\n    }\n\n    var meta = Opal.allocate_class(null, Opal.Module, function(){});\n\n    $defineProperty(meta, '$$is_singleton', true);\n    $defineProperty(meta, '$$singleton_of', mod);\n    $defineProperty(mod, '$$meta', meta);\n    $setPrototype(mod, meta.$$prototype);\n    // Restoring ModuleName.class\n    $defineProperty(mod, '$$class', Opal.Module);\n\n    return meta;\n  }\n\n  // Build the singleton class for a Ruby (non class) Object.\n  //\n  // @param object [Object]\n  // @return [Class]\n  Opal.build_object_singleton_class = function(object) {\n    var superclass = object.$$class,\n        klass = Opal.allocate_class(nil, superclass, function(){});\n\n    $defineProperty(klass, '$$is_singleton', true);\n    $defineProperty(klass, '$$singleton_of', object);\n\n    delete klass.$$prototype.$$class;\n\n    $defineProperty(object, '$$meta', klass);\n\n    $setPrototype(object, object.$$meta.$$prototype);\n\n    return klass;\n  };\n\n  Opal.is_method = function(prop) {\n    return (prop[0] === '$' && prop[1] !== '$');\n  }\n\n  Opal.instance_methods = function(mod) {\n    var exclude = [], results = [], ancestors = Opal.ancestors(mod);\n\n    for (var i = 0, l = ancestors.length; i < l; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      var props = Object.getOwnPropertyNames(proto);\n\n      for (var j = 0, ll = props.length; j < ll; j++) {\n        var prop = props[j];\n\n        if (Opal.is_method(prop)) {\n          var method_name = prop.slice(1),\n              method = proto[prop];\n\n          if (method.$$stub && exclude.indexOf(method_name) === -1) {\n            exclude.push(method_name);\n          }\n\n          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {\n            results.push(method_name);\n          }\n        }\n      }\n    }\n\n    return results;\n  }\n\n  Opal.own_instance_methods = function(mod) {\n    var results = [],\n        proto = mod.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0, length = props.length; i < length; i++) {\n      var prop = props[i];\n\n      if (Opal.is_method(prop)) {\n        var method = proto[prop];\n\n        if (!method.$$stub) {\n          var method_name = prop.slice(1);\n          results.push(method_name);\n        }\n      }\n    }\n\n    return results;\n  }\n\n  Opal.methods = function(obj) {\n    return Opal.instance_methods(Opal.get_singleton_class(obj));\n  }\n\n  Opal.own_methods = function(obj) {\n    return Opal.own_instance_methods(Opal.get_singleton_class(obj));\n  }\n\n  Opal.receiver_methods = function(obj) {\n    var mod = Opal.get_singleton_class(obj);\n    var singleton_methods = Opal.own_instance_methods(mod);\n    var instance_methods = Opal.own_instance_methods(mod.$$super);\n    return singleton_methods.concat(instance_methods);\n  }\n\n  // Returns an object containing all pairs of names/values\n  // for all class variables defined in provided +module+\n  // and its ancestors.\n  //\n  // @param module [Module]\n  // @return [Object]\n  Opal.class_variables = function(module) {\n    var ancestors = Opal.ancestors(module),\n        i, length = ancestors.length,\n        result = {};\n\n    for (i = length - 1; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      for (var cvar in ancestor.$$cvars) {\n        result[cvar] = ancestor.$$cvars[cvar];\n      }\n    }\n\n    return result;\n  }\n\n  // Sets class variable with specified +name+ to +value+\n  // in provided +module+\n  //\n  // @param module [Module]\n  // @param name [String]\n  // @param value [Object]\n  Opal.class_variable_set = function(module, name, value) {\n    var ancestors = Opal.ancestors(module),\n        i, length = ancestors.length;\n\n    for (i = length - 2; i >= 0; i--) {\n      var ancestor = ancestors[i];\n\n      if ($hasOwn.call(ancestor.$$cvars, name)) {\n        ancestor.$$cvars[name] = value;\n        return value;\n      }\n    }\n\n    module.$$cvars[name] = value;\n\n    return value;\n  }\n\n  function isRoot(proto) {\n    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');\n  }\n\n  function own_included_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    while (proto) {\n      if (proto.hasOwnProperty('$$class')) {\n        // superclass\n        break;\n      }\n      mod = protoToModule(proto);\n      if (mod) {\n        result.push(mod);\n      }\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    return result;\n  }\n\n  function own_prepended_modules(module) {\n    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);\n\n    if (module.$$prototype.hasOwnProperty('$$dummy')) {\n      while (proto) {\n        if (proto === module.$$prototype.$$define_methods_on) {\n          break;\n        }\n\n        mod = protoToModule(proto);\n        if (mod) {\n          result.push(mod);\n        }\n\n        proto = Object.getPrototypeOf(proto);\n      }\n    }\n\n    return result;\n  }\n\n\n  // The actual inclusion of a module into a class.\n  //\n  // ## Class `$$parent` and `iclass`\n  //\n  // To handle `super` calls, every class has a `$$parent`. This parent is\n  // used to resolve the next class for a super call. A normal class would\n  // have this point to its superclass. However, if a class includes a module\n  // then this would need to take into account the module. The module would\n  // also have to then point its `$$parent` to the actual superclass. We\n  // cannot modify modules like this, because it might be included in more\n  // then one class. To fix this, we actually insert an `iclass` as the class'\n  // `$$parent` which can then point to the superclass. The `iclass` acts as\n  // a proxy to the actual module, so the `super` chain can then search it for\n  // the required method.\n  //\n  // @param module [Module] the module to include\n  // @param includer [Module] the target class to include module into\n  // @return [null]\n  Opal.append_features = function(module, includer) {\n    var module_ancestors = Opal.ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(includer) !== -1) {\n      throw Opal.ArgumentError.$new('cyclic include detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $defineProperty(iclass, '$$included', true);\n      iclasses.push(iclass);\n    }\n    var includer_ancestors = Opal.ancestors(includer),\n        chain = chain_iclasses(iclasses),\n        start_chain_after,\n        end_chain_on;\n\n    if (includer_ancestors.indexOf(module) === -1) {\n      // first time include\n\n      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent\n      start_chain_after = includer.$$prototype;\n      end_chain_on = Object.getPrototypeOf(includer.$$prototype);\n    } else {\n      // The module has been already included,\n      // we don't need to put it into the ancestors chain again,\n      // but this module may have new included modules.\n      // If it's true we need to copy them.\n      //\n      // The simplest way is to replace ancestors chain from\n      //          parent\n      //            |\n      //   `module` iclass (has a $$root flag)\n      //            |\n      //   ...previos chain of module.included_modules ...\n      //            |\n      //  \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // to\n      //          parent\n      //            |\n      //    `module` iclass (has a $$root flag)\n      //            |\n      //   ...regenerated chain of module.included_modules\n      //            |\n      //   \"next ancestor\" (has a $$root flag or is a real class)\n      //\n      // because there are no intermediate classes between `parent` and `next ancestor`.\n      // It doesn't break any prototypes of other objects as we don't change class references.\n\n      var proto = includer.$$prototype, parent = proto, module_iclass = Object.getPrototypeOf(parent);\n\n      while (module_iclass != null) {\n        if (isRoot(module_iclass) && module_iclass.$$module === module) {\n          break;\n        }\n\n        parent = module_iclass;\n        module_iclass = Object.getPrototypeOf(module_iclass);\n      }\n\n      var next_ancestor = Object.getPrototypeOf(module_iclass);\n\n      // skip non-root iclasses (that were recursively included)\n      while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {\n        next_ancestor = Object.getPrototypeOf(next_ancestor);\n      }\n\n      start_chain_after = parent;\n      end_chain_on = next_ancestor;\n    }\n\n    $setPrototype(start_chain_after, chain.first);\n    $setPrototype(chain.last, end_chain_on);\n\n    // recalculate own_included_modules cache\n    includer.$$own_included_modules = own_included_modules(includer);\n\n    Opal.const_cache_version++;\n  }\n\n  Opal.prepend_features = function(module, prepender) {\n    // Here we change the ancestors chain from\n    //\n    //   prepender\n    //      |\n    //    parent\n    //\n    // to:\n    //\n    // dummy(prepender)\n    //      |\n    //  iclass(module)\n    //      |\n    // iclass(prepender)\n    //      |\n    //    parent\n    var module_ancestors = Opal.ancestors(module);\n    var iclasses = [];\n\n    if (module_ancestors.indexOf(prepender) !== -1) {\n      throw Opal.ArgumentError.$new('cyclic prepend detected');\n    }\n\n    for (var i = 0, length = module_ancestors.length; i < length; i++) {\n      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);\n      $defineProperty(iclass, '$$prepended', true);\n      iclasses.push(iclass);\n    }\n\n    var chain = chain_iclasses(iclasses),\n        dummy_prepender = prepender.$$prototype,\n        previous_parent = Object.getPrototypeOf(dummy_prepender),\n        prepender_iclass,\n        start_chain_after,\n        end_chain_on;\n\n    if (dummy_prepender.hasOwnProperty('$$dummy')) {\n      // The module already has some prepended modules\n      // which means that we don't need to make it \"dummy\"\n      prepender_iclass = dummy_prepender.$$define_methods_on;\n    } else {\n      // Making the module \"dummy\"\n      prepender_iclass = create_dummy_iclass(prepender);\n      flush_methods_in(prepender);\n      $defineProperty(dummy_prepender, '$$dummy', true);\n      $defineProperty(dummy_prepender, '$$define_methods_on', prepender_iclass);\n\n      // Converting\n      //   dummy(prepender) -> previous_parent\n      // to\n      //   dummy(prepender) -> iclass(prepender) -> previous_parent\n      $setPrototype(dummy_prepender, prepender_iclass);\n      $setPrototype(prepender_iclass, previous_parent);\n    }\n\n    var prepender_ancestors = Opal.ancestors(prepender);\n\n    if (prepender_ancestors.indexOf(module) === -1) {\n      // first time prepend\n\n      start_chain_after = dummy_prepender;\n\n      // next $$root or prepender_iclass or non-$$iclass\n      end_chain_on = Object.getPrototypeOf(dummy_prepender);\n      while (end_chain_on != null) {\n        if (\n          end_chain_on.hasOwnProperty('$$root') ||\n          end_chain_on === prepender_iclass ||\n          !end_chain_on.hasOwnProperty('$$iclass')\n        ) {\n          break;\n        }\n\n        end_chain_on = Object.getPrototypeOf(end_chain_on);\n      }\n    } else {\n      throw Opal.RuntimeError.$new(\"Prepending a module multiple times is not supported\");\n    }\n\n    $setPrototype(start_chain_after, chain.first);\n    $setPrototype(chain.last, end_chain_on);\n\n    // recalculate own_prepended_modules cache\n    prepender.$$own_prepended_modules = own_prepended_modules(prepender);\n\n    Opal.const_cache_version++;\n  }\n\n  function flush_methods_in(module) {\n    var proto = module.$$prototype,\n        props = Object.getOwnPropertyNames(proto);\n\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n      if (Opal.is_method(prop)) {\n        delete proto[prop];\n      }\n    }\n  }\n\n  function create_iclass(module) {\n    var iclass = create_dummy_iclass(module);\n\n    if (module.$$is_module) {\n      module.$$iclasses.push(iclass);\n    }\n\n    return iclass;\n  }\n\n  // Dummy iclass doesn't receive updates when the module gets a new method.\n  function create_dummy_iclass(module) {\n    var iclass = {},\n        proto = module.$$prototype;\n\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n\n    var props = Object.getOwnPropertyNames(proto),\n        length = props.length, i;\n\n    for (i = 0; i < length; i++) {\n      var prop = props[i];\n      $defineProperty(iclass, prop, proto[prop]);\n    }\n\n    $defineProperty(iclass, '$$iclass', true);\n    $defineProperty(iclass, '$$module', module);\n\n    return iclass;\n  }\n\n  function chain_iclasses(iclasses) {\n    var length = iclasses.length, first = iclasses[0];\n\n    $defineProperty(first, '$$root', true);\n\n    if (length === 1) {\n      return { first: first, last: first };\n    }\n\n    var previous = first;\n\n    for (var i = 1; i < length; i++) {\n      var current = iclasses[i];\n      $setPrototype(previous, current);\n      previous = current;\n    }\n\n\n    return { first: iclasses[0], last: iclasses[length - 1] };\n  }\n\n  // For performance, some core Ruby classes are toll-free bridged to their\n  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).\n  //\n  // This method is used to setup a native constructor (e.g. Array), to have\n  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is\n  // created using the native constructor so that its prototype is set as the\n  // target for the new class. Note: all bridged classes are set to inherit\n  // from Object.\n  //\n  // Example:\n  //\n  //    Opal.bridge(self, Function);\n  //\n  // @param klass       [Class] the Ruby class to bridge\n  // @param constructor [JS.Function] native JavaScript constructor to use\n  // @return [Class] returns the passed Ruby class\n  //\n  Opal.bridge = function(native_klass, klass) {\n    if (native_klass.hasOwnProperty('$$bridge')) {\n      throw Opal.ArgumentError.$new(\"already bridged\");\n    }\n\n    var klass_to_inject, klass_reference;\n\n    klass_to_inject = klass.$$super || Opal.Object;\n    klass_reference = klass;\n    var original_prototype = klass.$$prototype;\n\n    // constructor is a JS function with a prototype chain like:\n    // - constructor\n    //   - super\n    //\n    // What we need to do is to inject our class (with its prototype chain)\n    // between constructor and super. For example, after injecting ::Object\n    // into JS String we get:\n    //\n    // - constructor (window.String)\n    //   - Opal.Object\n    //     - Opal.Kernel\n    //       - Opal.BasicObject\n    //         - super (window.Object)\n    //           - null\n    //\n    $defineProperty(native_klass, '$$bridge', klass);\n    $setPrototype(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);\n    $defineProperty(klass, '$$prototype', native_klass.prototype);\n\n    $defineProperty(klass.$$prototype, '$$class', klass);\n    $defineProperty(klass, '$$constructor', native_klass);\n    $defineProperty(klass, '$$bridge', true);\n  };\n\n  function protoToModule(proto) {\n    if (proto.hasOwnProperty('$$dummy')) {\n      return;\n    } else if (proto.hasOwnProperty('$$iclass')) {\n      return proto.$$module;\n    } else if (proto.hasOwnProperty('$$class')) {\n      return proto.$$class;\n    }\n  }\n\n  function own_ancestors(module) {\n    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);\n  }\n\n  // The Array of ancestors for a given module/class\n  Opal.ancestors = function(module) {\n    if (!module) { return []; }\n\n    if (module.$$ancestors_cache_version === Opal.const_cache_version) {\n      return module.$$ancestors;\n    }\n\n    var result = [], i, mods, length;\n\n    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {\n      result.push(mods[i]);\n    }\n\n    if (module.$$super) {\n      for (i = 0, mods = Opal.ancestors(module.$$super), length = mods.length; i < length; i++) {\n        result.push(mods[i]);\n      }\n    }\n\n    module.$$ancestors_cache_version = Opal.const_cache_version;\n    module.$$ancestors = result;\n\n    return result;\n  }\n\n  Opal.included_modules = function(module) {\n    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);\n\n    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {\n      mod = protoToModule(proto);\n      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {\n        result.push(mod);\n      }\n    }\n\n    return result;\n  }\n\n\n  // Method Missing\n  // --------------\n\n  // Methods stubs are used to facilitate method_missing in opal. A stub is a\n  // placeholder function which just calls `method_missing` on the receiver.\n  // If no method with the given name is actually defined on an object, then it\n  // is obvious to say that the stub will be called instead, and then in turn\n  // method_missing will be called.\n  //\n  // When a file in ruby gets compiled to javascript, it includes a call to\n  // this function which adds stubs for every method name in the compiled file.\n  // It should then be safe to assume that method_missing will work for any\n  // method call detected.\n  //\n  // Method stubs are added to the BasicObject prototype, which every other\n  // ruby object inherits, so all objects should handle method missing. A stub\n  // is only added if the given property name (method name) is not already\n  // defined.\n  //\n  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will\n  // have this prefix as well (to make this method more performant).\n  //\n  //    Opal.add_stubs([\"$foo\", \"$bar\", \"$baz=\"]);\n  //\n  // All stub functions will have a private `$$stub` property set to true so\n  // that other internal methods can detect if a method is just a stub or not.\n  // `Kernel#respond_to?` uses this property to detect a methods presence.\n  //\n  // @param stubs [Array] an array of method stubs to add\n  // @return [undefined]\n  Opal.add_stubs = function(stubs) {\n    var proto = Opal.BasicObject.$$prototype;\n\n    for (var i = 0, length = stubs.length; i < length; i++) {\n      var stub = stubs[i], existing_method = proto[stub];\n\n      if (existing_method == null || existing_method.$$stub) {\n        Opal.add_stub_for(proto, stub);\n      }\n    }\n  };\n\n  // Add a method_missing stub function to the given prototype for the\n  // given name.\n  //\n  // @param prototype [Prototype] the target prototype\n  // @param stub [String] stub name to add (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.add_stub_for = function(prototype, stub) {\n    var method_missing_stub = Opal.stub_for(stub);\n    $defineProperty(prototype, stub, method_missing_stub);\n  };\n\n  // Generate the method_missing stub for a given method name.\n  //\n  // @param method_name [String] The js-name of the method to stub (e.g. \"$foo\")\n  // @return [undefined]\n  Opal.stub_for = function(method_name) {\n    function method_missing_stub() {\n      // Copy any given block onto the method_missing dispatcher\n      this.$method_missing.$$p = method_missing_stub.$$p;\n\n      // Set block property to null ready for the next call (stop false-positives)\n      method_missing_stub.$$p = null;\n\n      // call method missing with correct args (remove '$' prefix on method name)\n      var args_ary = new Array(arguments.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }\n\n      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));\n    }\n\n    method_missing_stub.$$stub = true;\n\n    return method_missing_stub;\n  };\n\n\n  // Methods\n  // -------\n\n  // Arity count error dispatcher for methods\n  //\n  // @param actual [Fixnum] number of arguments given to method\n  // @param expected [Fixnum] expected number of arguments\n  // @param object [Object] owner of the method +meth+\n  // @param meth [String] method name that got wrong number of arguments\n  // @raise [ArgumentError]\n  Opal.ac = function(actual, expected, object, meth) {\n    var inspect = '';\n    if (object.$$is_a_module) {\n      inspect += object.$$name + '.';\n    }\n    else {\n      inspect += object.$$class.$$name + '#';\n    }\n    inspect += meth;\n\n    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');\n  };\n\n  // Arity count error dispatcher for blocks\n  //\n  // @param actual [Fixnum] number of arguments given to block\n  // @param expected [Fixnum] expected number of arguments\n  // @param context [Object] context of the block definition\n  // @raise [ArgumentError]\n  Opal.block_ac = function(actual, expected, context) {\n    var inspect = \"`block in \" + context + \"'\";\n\n    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');\n  };\n\n  // Super dispatcher\n  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {\n    var jsid = '$' + mid, ancestors, super_method;\n\n    if (obj.hasOwnProperty('$$meta')) {\n      ancestors = Opal.ancestors(obj.$$meta);\n    } else {\n      ancestors = Opal.ancestors(obj.$$class);\n    }\n\n    var current_index = ancestors.indexOf(current_func.$$owner);\n\n    for (var i = current_index + 1; i < ancestors.length; i++) {\n      var ancestor = ancestors[i],\n          proto = ancestor.$$prototype;\n\n      if (proto.hasOwnProperty('$$dummy')) {\n        proto = proto.$$define_methods_on;\n      }\n\n      if (proto.hasOwnProperty(jsid)) {\n        var method = proto[jsid];\n\n        if (!method.$$stub) {\n          super_method = method;\n        }\n        break;\n      }\n    }\n\n    if (!defcheck && super_method == null && Opal.Kernel.$method_missing === obj.$method_missing) {\n      // method_missing hasn't been explicitly defined\n      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+\"' for \"+obj, mid);\n    }\n\n    return super_method;\n  };\n\n  // Iter dispatcher for super in a block\n  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {\n    var call_jsid = jsid;\n\n    if (!current_func) {\n      throw Opal.RuntimeError.$new(\"super called outside of method\");\n    }\n\n    if (implicit && current_func.$$define_meth) {\n      throw Opal.RuntimeError.$new(\"implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly\");\n    }\n\n    if (current_func.$$def) {\n      call_jsid = current_func.$$jsid;\n    }\n\n    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);\n  };\n\n  // Used to return as an expression. Sometimes, we can't simply return from\n  // a javascript function as if we were a method, as the return is used as\n  // an expression, or even inside a block which must \"return\" to the outer\n  // method. This helper simply throws an error which is then caught by the\n  // method. This approach is expensive, so it is only used when absolutely\n  // needed.\n  //\n  Opal.ret = function(val) {\n    Opal.returner.$v = val;\n    throw Opal.returner;\n  };\n\n  // Used to break out of a block.\n  Opal.brk = function(val, breaker) {\n    breaker.$v = val;\n    throw breaker;\n  };\n\n  // Builds a new unique breaker, this is to avoid multiple nested breaks to get\n  // in the way of each other.\n  Opal.new_brk = function() {\n    return new Error('unexpected break');\n  };\n\n  // handles yield calls for 1 yielded arg\n  Opal.yield1 = function(block, arg) {\n    if (typeof(block) !== \"function\") {\n      throw Opal.LocalJumpError.$new(\"no block given\");\n    }\n\n    var has_mlhs = block.$$has_top_level_mlhs_arg,\n        has_trailing_comma = block.$$has_trailing_comma_in_args;\n\n    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {\n      arg = Opal.to_ary(arg);\n    }\n\n    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {\n      return block.apply(null, arg);\n    }\n    else {\n      return block(arg);\n    }\n  };\n\n  // handles yield for > 1 yielded arg\n  Opal.yieldX = function(block, args) {\n    if (typeof(block) !== \"function\") {\n      throw Opal.LocalJumpError.$new(\"no block given\");\n    }\n\n    if (block.length > 1 && args.length === 1) {\n      if (args[0].$$is_array) {\n        return block.apply(null, args[0]);\n      }\n    }\n\n    if (!args.$$is_array) {\n      var args_ary = new Array(args.length);\n      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n      return block.apply(null, args_ary);\n    }\n\n    return block.apply(null, args);\n  };\n\n  // Finds the corresponding exception match in candidates.  Each candidate can\n  // be a value, or an array of values.  Returns null if not found.\n  Opal.rescue = function(exception, candidates) {\n    for (var i = 0; i < candidates.length; i++) {\n      var candidate = candidates[i];\n\n      if (candidate.$$is_array) {\n        var result = Opal.rescue(exception, candidate);\n\n        if (result) {\n          return result;\n        }\n      }\n      else if (candidate === Opal.JS.Error) {\n        return candidate;\n      }\n      else if (candidate['$==='](exception)) {\n        return candidate;\n      }\n    }\n\n    return null;\n  };\n\n  Opal.is_a = function(object, klass) {\n    if (klass != null && object.$$meta === klass || object.$$class === klass) {\n      return true;\n    }\n\n    if (object.$$is_number && klass.$$is_number_class) {\n      return true;\n    }\n\n    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));\n\n    for (i = 0, length = ancestors.length; i < length; i++) {\n      if (ancestors[i] === klass) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  // Helpers for extracting kwsplats\n  // Used for: { **h }\n  Opal.to_hash = function(value) {\n    if (value.$$is_hash) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_hash', true)) {\n      var hash = value.$to_hash();\n      if (hash.$$is_hash) {\n        return hash;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Hash (\" + value.$$class + \"#to_hash gives \" + hash.$$class + \")\");\n      }\n    }\n    else {\n      throw Opal.TypeError.$new(\"no implicit conversion of \" + value.$$class + \" into Hash\");\n    }\n  };\n\n  // Helpers for implementing multiple assignment\n  // Our code for extracting the values and assigning them only works if the\n  // return value is a JS array.\n  // So if we get an Array subclass, extract the wrapped JS array from it\n\n  // Used for: a, b = something (no splat)\n  Opal.to_ary = function(value) {\n    if (value.$$is_array) {\n      return value;\n    }\n    else if (value['$respond_to?']('to_ary', true)) {\n      var ary = value.$to_ary();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_ary gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for: a, b = *something (with splat)\n  Opal.to_a = function(value) {\n    if (value.$$is_array) {\n      // A splatted array must be copied\n      return value.slice();\n    }\n    else if (value['$respond_to?']('to_a', true)) {\n      var ary = value.$to_a();\n      if (ary === nil) {\n        return [value];\n      }\n      else if (ary.$$is_array) {\n        return ary;\n      }\n      else {\n        throw Opal.TypeError.$new(\"Can't convert \" + value.$$class +\n          \" to Array (\" + value.$$class + \"#to_a gives \" + ary.$$class + \")\");\n      }\n    }\n    else {\n      return [value];\n    }\n  };\n\n  // Used for extracting keyword arguments from arguments passed to\n  // JS function. If provided +arguments+ list doesn't have a Hash\n  // as a last item, returns a blank Hash.\n  //\n  // @param parameters [Array]\n  // @return [Hash]\n  //\n  Opal.extract_kwargs = function(parameters) {\n    var kwargs = parameters[parameters.length - 1];\n    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {\n      $splice.call(parameters, parameters.length - 1, 1);\n      return kwargs.$to_hash();\n    }\n    else {\n      return Opal.hash2([], {});\n    }\n  }\n\n  // Used to get a list of rest keyword arguments. Method takes the given\n  // keyword args, i.e. the hash literal passed to the method containing all\n  // keyword arguemnts passed to method, as well as the used args which are\n  // the names of required and optional arguments defined. This method then\n  // just returns all key/value pairs which have not been used, in a new\n  // hash literal.\n  //\n  // @param given_args [Hash] all kwargs given to method\n  // @param used_args [Object<String: true>] all keys used as named kwargs\n  // @return [Hash]\n  //\n  Opal.kwrestargs = function(given_args, used_args) {\n    var keys      = [],\n        map       = {},\n        key       = null,\n        given_map = given_args.$$smap;\n\n    for (key in given_map) {\n      if (!used_args[key]) {\n        keys.push(key);\n        map[key] = given_map[key];\n      }\n    }\n\n    return Opal.hash2(keys, map);\n  };\n\n  // Calls passed method on a ruby object with arguments and block:\n  //\n  // Can take a method or a method name.\n  //\n  // 1. When method name gets passed it invokes it by its name\n  //    and calls 'method_missing' when object doesn't have this method.\n  //    Used internally by Opal to invoke method that takes a block or a splat.\n  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'\n  //    because it doesn't know the name of the actual method.\n  //    Used internally by Opal to invoke 'super'.\n  //\n  // @example\n  //   var my_array = [1, 2, 3, 4]\n  //   Opal.send(my_array, 'length')                    # => 4\n  //   Opal.send(my_array, my_array.$length)            # => 4\n  //\n  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]\n  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]\n  //\n  // @param recv [Object] ruby object\n  // @param method [Function, String] method body or name of the method\n  // @param args [Array] arguments that will be passed to the method call\n  // @param block [Function] ruby block\n  // @return [Object] returning value of the method call\n  Opal.send = function(recv, method, args, block) {\n    var body = (typeof(method) === 'string') ? recv['$'+method] : method;\n\n    if (body != null) {\n      if (typeof block === 'function') {\n        body.$$p = block;\n      }\n      return body.apply(recv, args);\n    }\n\n    return recv.$method_missing.apply(recv, [method].concat(args));\n  }\n\n  Opal.lambda = function(block) {\n    block.$$is_lambda = true;\n    return block;\n  }\n\n  // Used to define methods on an object. This is a helper method, used by the\n  // compiled source to define methods on special case objects when the compiler\n  // can not determine the destination object, or the object is a Module\n  // instance. This can get called by `Module#define_method` as well.\n  //\n  // ## Modules\n  //\n  // Any method defined on a module will come through this runtime helper.\n  // The method is added to the module body, and the owner of the method is\n  // set to be the module itself. This is used later when choosing which\n  // method should show on a class if more than 1 included modules define\n  // the same method. Finally, if the module is in `module_function` mode,\n  // then the method is also defined onto the module itself.\n  //\n  // ## Classes\n  //\n  // This helper will only be called for classes when a method is being\n  // defined indirectly; either through `Module#define_method`, or by a\n  // literal `def` method inside an `instance_eval` or `class_eval` body. In\n  // either case, the method is simply added to the class' prototype. A special\n  // exception exists for `BasicObject` and `Object`. These two classes are\n  // special because they are used in toll-free bridged classes. In each of\n  // these two cases, extra work is required to define the methods on toll-free\n  // bridged class' prototypes as well.\n  //\n  // ## Objects\n  //\n  // If a simple ruby object is the object, then the method is simply just\n  // defined on the object as a singleton method. This would be the case when\n  // a method is defined inside an `instance_eval` block.\n  //\n  // @param obj  [Object, Class] the actual obj to define method for\n  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')\n  // @param body [JS.Function] the literal JavaScript function used as method\n  // @return [null]\n  //\n  Opal.def = function(obj, jsid, body) {\n    // Special case for a method definition in the\n    // top-level namespace\n    if (obj === Opal.top) {\n      Opal.defn(Opal.Object, jsid, body)\n    }\n    // if instance_eval is invoked on a module/class, it sets inst_eval_mod\n    else if (!obj.$$eval && obj.$$is_a_module) {\n      Opal.defn(obj, jsid, body);\n    }\n    else {\n      Opal.defs(obj, jsid, body);\n    }\n  };\n\n  // Define method on a module or class (see Opal.def).\n  Opal.defn = function(module, jsid, body) {\n    body.displayName = jsid;\n    body.$$owner = module;\n\n    var proto = module.$$prototype;\n    if (proto.hasOwnProperty('$$dummy')) {\n      proto = proto.$$define_methods_on;\n    }\n    $defineProperty(proto, jsid, body);\n\n    if (module.$$is_module) {\n      if (module.$$module_function) {\n        Opal.defs(module, jsid, body)\n      }\n\n      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {\n        var iclass = iclasses[i];\n        $defineProperty(iclass, jsid, body);\n      }\n    }\n\n    var singleton_of = module.$$singleton_of;\n    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {\n      module.$method_added(jsid.substr(1));\n    }\n    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {\n      singleton_of.$singleton_method_added(jsid.substr(1));\n    }\n  }\n\n  // Define a singleton method on the given object (see Opal.def).\n  Opal.defs = function(obj, jsid, body) {\n    if (obj.$$is_string || obj.$$is_number) {\n      throw Opal.TypeError.$new(\"can't define singleton\");\n    }\n    Opal.defn(Opal.get_singleton_class(obj), jsid, body)\n  };\n\n  // Called from #remove_method.\n  Opal.rdef = function(obj, jsid) {\n    if (!$hasOwn.call(obj.$$prototype, jsid)) {\n      throw Opal.NameError.$new(\"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    delete obj.$$prototype[jsid];\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {\n        obj.$$prototype.$singleton_method_removed(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_removed && !obj.$method_removed.$$stub) {\n        obj.$method_removed(jsid.substr(1));\n      }\n    }\n  };\n\n  // Called from #undef_method.\n  Opal.udef = function(obj, jsid) {\n    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {\n      throw Opal.NameError.$new(\"method '\" + jsid.substr(1) + \"' not defined in \" + obj.$name());\n    }\n\n    Opal.add_stub_for(obj.$$prototype, jsid);\n\n    if (obj.$$is_singleton) {\n      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {\n        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));\n      }\n    }\n    else {\n      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {\n        obj.$method_undefined(jsid.substr(1));\n      }\n    }\n  };\n\n  function is_method_body(body) {\n    return (typeof(body) === \"function\" && !body.$$stub);\n  }\n\n  Opal.alias = function(obj, name, old) {\n    var id     = '$' + name,\n        old_id = '$' + old,\n        body   = obj.$$prototype['$' + old],\n        alias;\n\n    // When running inside #instance_eval the alias refers to class methods.\n    if (obj.$$eval) {\n      return Opal.alias(Opal.get_singleton_class(obj), name, old);\n    }\n\n    if (!is_method_body(body)) {\n      var ancestor = obj.$$super;\n\n      while (typeof(body) !== \"function\" && ancestor) {\n        body     = ancestor[old_id];\n        ancestor = ancestor.$$super;\n      }\n\n      if (!is_method_body(body) && obj.$$is_module) {\n        // try to look into Object\n        body = Opal.Object.$$prototype[old_id]\n      }\n\n      if (!is_method_body(body)) {\n        throw Opal.NameError.$new(\"undefined method `\" + old + \"' for class `\" + obj.$name() + \"'\")\n      }\n    }\n\n    // If the body is itself an alias use the original body\n    // to keep the max depth at 1.\n    if (body.$$alias_of) body = body.$$alias_of;\n\n    // We need a wrapper because otherwise properties\n    // would be ovrewritten on the original body.\n    alias = function() {\n      var block = alias.$$p, args, i, ii;\n\n      args = new Array(arguments.length);\n      for(i = 0, ii = arguments.length; i < ii; i++) {\n        args[i] = arguments[i];\n      }\n\n      if (block != null) { alias.$$p = null }\n\n      return Opal.send(this, body, args, block);\n    };\n\n    // Try to make the browser pick the right name\n    alias.displayName       = name;\n    alias.length            = body.length;\n    alias.$$arity           = body.$$arity;\n    alias.$$parameters      = body.$$parameters;\n    alias.$$source_location = body.$$source_location;\n    alias.$$alias_of        = body;\n    alias.$$alias_name      = name;\n\n    Opal.defn(obj, id, alias);\n\n    return obj;\n  };\n\n  Opal.alias_native = function(obj, name, native_name) {\n    var id   = '$' + name,\n        body = obj.$$prototype[native_name];\n\n    if (typeof(body) !== \"function\" || body.$$stub) {\n      throw Opal.NameError.$new(\"undefined native method `\" + native_name + \"' for class `\" + obj.$name() + \"'\")\n    }\n\n    Opal.defn(obj, id, body);\n\n    return obj;\n  };\n\n\n  // Hashes\n  // ------\n\n  Opal.hash_init = function(hash) {\n    hash.$$smap = Object.create(null);\n    hash.$$map  = Object.create(null);\n    hash.$$keys = [];\n  };\n\n  Opal.hash_clone = function(from_hash, to_hash) {\n    to_hash.$$none = from_hash.$$none;\n    to_hash.$$proc = from_hash.$$proc;\n\n    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {\n      key = keys[i];\n\n      if (key.$$is_string) {\n        value = smap[key];\n      } else {\n        value = key.value;\n        key = key.key;\n      }\n\n      Opal.hash_put(to_hash, key, value);\n    }\n  };\n\n  Opal.hash_put = function(hash, key, value) {\n    if (key.$$is_string) {\n      if (!$hasOwn.call(hash.$$smap, key)) {\n        hash.$$keys.push(key);\n      }\n      hash.$$smap[key] = value;\n      return;\n    }\n\n    var key_hash, bucket, last_bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if (!$hasOwn.call(hash.$$map, key_hash)) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      hash.$$map[key_hash] = bucket;\n      return;\n    }\n\n    bucket = hash.$$map[key_hash];\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        last_bucket = undefined;\n        bucket.value = value;\n        break;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n\n    if (last_bucket) {\n      bucket = {key: key, key_hash: key_hash, value: value};\n      hash.$$keys.push(bucket);\n      last_bucket.next = bucket;\n    }\n  };\n\n  Opal.hash_get = function(hash, key) {\n    if (key.$$is_string) {\n      if ($hasOwn.call(hash.$$smap, key)) {\n        return hash.$$smap[key];\n      }\n      return;\n    }\n\n    var key_hash, bucket;\n    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();\n\n    if ($hasOwn.call(hash.$$map, key_hash)) {\n      bucket = hash.$$map[key_hash];\n\n      while (bucket) {\n        if (key === bucket.key || key['$eql?'](bucket.key)) {\n          return bucket.value;\n        }\n        bucket = bucket.next;\n      }\n    }\n  };\n\n  Opal.hash_delete = function(hash, key) {\n    var i, keys = hash.$$keys, length = keys.length, value;\n\n    if (key.$$is_string) {\n      if (!$hasOwn.call(hash.$$smap, key)) {\n        return;\n      }\n\n      for (i = 0; i < length; i++) {\n        if (keys[i] === key) {\n          keys.splice(i, 1);\n          break;\n        }\n      }\n\n      value = hash.$$smap[key];\n      delete hash.$$smap[key];\n      return value;\n    }\n\n    var key_hash = key.$hash();\n\n    if (!$hasOwn.call(hash.$$map, key_hash)) {\n      return;\n    }\n\n    var bucket = hash.$$map[key_hash], last_bucket;\n\n    while (bucket) {\n      if (key === bucket.key || key['$eql?'](bucket.key)) {\n        value = bucket.value;\n\n        for (i = 0; i < length; i++) {\n          if (keys[i] === bucket) {\n            keys.splice(i, 1);\n            break;\n          }\n        }\n\n        if (last_bucket && bucket.next) {\n          last_bucket.next = bucket.next;\n        }\n        else if (last_bucket) {\n          delete last_bucket.next;\n        }\n        else if (bucket.next) {\n          hash.$$map[key_hash] = bucket.next;\n        }\n        else {\n          delete hash.$$map[key_hash];\n        }\n\n        return value;\n      }\n      last_bucket = bucket;\n      bucket = bucket.next;\n    }\n  };\n\n  Opal.hash_rehash = function(hash) {\n    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {\n\n      if (hash.$$keys[i].$$is_string) {\n        continue;\n      }\n\n      key_hash = hash.$$keys[i].key.$hash();\n\n      if (key_hash === hash.$$keys[i].key_hash) {\n        continue;\n      }\n\n      bucket = hash.$$map[hash.$$keys[i].key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          if (last_bucket && bucket.next) {\n            last_bucket.next = bucket.next;\n          }\n          else if (last_bucket) {\n            delete last_bucket.next;\n          }\n          else if (bucket.next) {\n            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;\n          }\n          else {\n            delete hash.$$map[hash.$$keys[i].key_hash];\n          }\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      hash.$$keys[i].key_hash = key_hash;\n\n      if (!$hasOwn.call(hash.$$map, key_hash)) {\n        hash.$$map[key_hash] = hash.$$keys[i];\n        continue;\n      }\n\n      bucket = hash.$$map[key_hash];\n      last_bucket = undefined;\n\n      while (bucket) {\n        if (bucket === hash.$$keys[i]) {\n          last_bucket = undefined;\n          break;\n        }\n        last_bucket = bucket;\n        bucket = bucket.next;\n      }\n\n      if (last_bucket) {\n        last_bucket.next = hash.$$keys[i];\n      }\n    }\n  };\n\n  Opal.hash = function() {\n    var arguments_length = arguments.length, args, hash, i, length, key, value;\n\n    if (arguments_length === 1 && arguments[0].$$is_hash) {\n      return arguments[0];\n    }\n\n    hash = new Opal.Hash();\n    Opal.hash_init(hash);\n\n    if (arguments_length === 1 && arguments[0].$$is_array) {\n      args = arguments[0];\n      length = args.length;\n\n      for (i = 0; i < length; i++) {\n        if (args[i].length !== 2) {\n          throw Opal.ArgumentError.$new(\"value not of length 2: \" + args[i].$inspect());\n        }\n\n        key = args[i][0];\n        value = args[i][1];\n\n        Opal.hash_put(hash, key, value);\n      }\n\n      return hash;\n    }\n\n    if (arguments_length === 1) {\n      args = arguments[0];\n      for (key in args) {\n        if ($hasOwn.call(args, key)) {\n          value = args[key];\n\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    }\n\n    if (arguments_length % 2 !== 0) {\n      throw Opal.ArgumentError.$new(\"odd number of arguments for Hash\");\n    }\n\n    for (i = 0; i < arguments_length; i += 2) {\n      key = arguments[i];\n      value = arguments[i + 1];\n\n      Opal.hash_put(hash, key, value);\n    }\n\n    return hash;\n  };\n\n  // A faster Hash creator for hashes that just use symbols and\n  // strings as keys. The map and keys array can be constructed at\n  // compile time, so they are just added here by the constructor\n  // function.\n  //\n  Opal.hash2 = function(keys, smap) {\n    var hash = new Opal.Hash();\n\n    hash.$$smap = smap;\n    hash.$$map  = Object.create(null);\n    hash.$$keys = keys;\n\n    return hash;\n  };\n\n  // Create a new range instance with first and last values, and whether the\n  // range excludes the last value.\n  //\n  Opal.range = function(first, last, exc) {\n    var range         = new Opal.Range();\n        range.begin   = first;\n        range.end     = last;\n        range.excl    = exc;\n\n    return range;\n  };\n\n  // Get the ivar name for a given name.\n  // Mostly adds a trailing $ to reserved names.\n  //\n  Opal.ivar = function(name) {\n    if (\n        // properties\n        name === \"constructor\" ||\n        name === \"displayName\" ||\n        name === \"__count__\" ||\n        name === \"__noSuchMethod__\" ||\n        name === \"__parent__\" ||\n        name === \"__proto__\" ||\n\n        // methods\n        name === \"hasOwnProperty\" ||\n        name === \"valueOf\"\n       )\n    {\n      return name + \"$\";\n    }\n\n    return name;\n  };\n\n\n  // Regexps\n  // -------\n\n  // Escape Regexp special chars letting the resulting string be used to build\n  // a new Regexp.\n  //\n  Opal.escape_regexp = function(str) {\n    return str.replace(/([-[\\]\\/{}()*+?.^$\\\\| ])/g, '\\\\$1')\n              .replace(/[\\n]/g, '\\\\n')\n              .replace(/[\\r]/g, '\\\\r')\n              .replace(/[\\f]/g, '\\\\f')\n              .replace(/[\\t]/g, '\\\\t');\n  };\n\n  // Create a global Regexp from a RegExp object and cache the result\n  // on the object itself ($$g attribute).\n  //\n  Opal.global_regexp = function(pattern) {\n    if (pattern.global) {\n      return pattern; // RegExp already has the global flag\n    }\n    if (pattern.$$g == null) {\n      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));\n    } else {\n      pattern.$$g.lastIndex = null; // reset lastIndex property\n    }\n    return pattern.$$g;\n  };\n\n  // Create a global multiline Regexp from a RegExp object and cache the result\n  // on the object itself ($$gm or $$g attribute).\n  //\n  Opal.global_multiline_regexp = function(pattern) {\n    var result;\n    if (pattern.multiline) {\n      if (pattern.global) {\n        return pattern; // RegExp already has the global and multiline flag\n      }\n      // we are using the $$g attribute because the Regexp is already multiline\n      if (pattern.$$g != null) {\n        result = pattern.$$g;\n      } else {\n        result = pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\n      }\n    } else if (pattern.$$gm != null) {\n      result = pattern.$$gm;\n    } else {\n      result = pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));\n    }\n    result.lastIndex = null; // reset lastIndex property\n    return result;\n  };\n\n  // Require system\n  // --------------\n\n  Opal.modules         = {};\n  Opal.loaded_features = ['corelib/runtime'];\n  Opal.current_dir     = '.';\n  Opal.require_table   = {'corelib/runtime': true};\n\n  Opal.normalize = function(path) {\n    var parts, part, new_parts = [], SEPARATOR = '/';\n\n    if (Opal.current_dir !== '.') {\n      path = Opal.current_dir.replace(/\\/*$/, '/') + path;\n    }\n\n    path = path.replace(/^\\.\\//, '');\n    path = path.replace(/\\.(rb|opal|js)$/, '');\n    parts = path.split(SEPARATOR);\n\n    for (var i = 0, ii = parts.length; i < ii; i++) {\n      part = parts[i];\n      if (part === '') continue;\n      (part === '..') ? new_parts.pop() : new_parts.push(part)\n    }\n\n    return new_parts.join(SEPARATOR);\n  };\n\n  Opal.loaded = function(paths) {\n    var i, l, path;\n\n    for (i = 0, l = paths.length; i < l; i++) {\n      path = Opal.normalize(paths[i]);\n\n      if (Opal.require_table[path]) {\n        continue;\n      }\n\n      Opal.loaded_features.push(path);\n      Opal.require_table[path] = true;\n    }\n  };\n\n  Opal.load = function(path) {\n    path = Opal.normalize(path);\n\n    Opal.loaded([path]);\n\n    var module = Opal.modules[path];\n\n    if (module) {\n      module(Opal);\n    }\n    else {\n      var severity = Opal.config.missing_require_severity;\n      var message  = 'cannot load such file -- ' + path;\n\n      if (severity === \"error\") {\n        if (Opal.LoadError) {\n          throw Opal.LoadError.$new(message)\n        } else {\n          throw message\n        }\n      }\n      else if (severity === \"warning\") {\n        console.warn('WARNING: LoadError: ' + message);\n      }\n    }\n\n    return true;\n  };\n\n  Opal.require = function(path) {\n    path = Opal.normalize(path);\n\n    if (Opal.require_table[path]) {\n      return false;\n    }\n\n    return Opal.load(path);\n  };\n\n\n  // Initialization\n  // --------------\n  function $BasicObject() {};\n  function $Object() {};\n  function $Module() {};\n  function $Class() {};\n\n  Opal.BasicObject = BasicObject = Opal.allocate_class('BasicObject', null, $BasicObject);\n  Opal.Object      = _Object     = Opal.allocate_class('Object', Opal.BasicObject, $Object);\n  Opal.Module      = Module      = Opal.allocate_class('Module', Opal.Object, $Module);\n  Opal.Class       = Class       = Opal.allocate_class('Class', Opal.Module, $Class);\n\n  $setPrototype(Opal.BasicObject, Opal.Class.$$prototype);\n  $setPrototype(Opal.Object, Opal.Class.$$prototype);\n  $setPrototype(Opal.Module, Opal.Class.$$prototype);\n  $setPrototype(Opal.Class, Opal.Class.$$prototype);\n\n  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic\n  BasicObject.$$const[\"BasicObject\"] = BasicObject;\n\n  // Assign basic constants\n  Opal.const_set(_Object, \"BasicObject\",  BasicObject);\n  Opal.const_set(_Object, \"Object\",       _Object);\n  Opal.const_set(_Object, \"Module\",       Module);\n  Opal.const_set(_Object, \"Class\",        Class);\n\n  // Fix booted classes to have correct .class value\n  BasicObject.$$class = Class;\n  _Object.$$class     = Class;\n  Module.$$class      = Class;\n  Class.$$class       = Class;\n\n  // Forward .toString() to #to_s\n  $defineProperty(_Object.$$prototype, 'toString', function() {\n    var to_s = this.$to_s();\n    if (to_s.$$is_string && typeof(to_s) === 'object') {\n      // a string created using new String('string')\n      return to_s.valueOf();\n    } else {\n      return to_s;\n    }\n  });\n\n  // Make Kernel#require immediately available as it's needed to require all the\n  // other corelib files.\n  $defineProperty(_Object.$$prototype, '$require', Opal.require);\n\n  // Add a short helper to navigate constants manually.\n  // @example\n  //   Opal.$$.Regexp.$$.IGNORECASE\n  Opal.$$ = _Object.$$;\n\n  // Instantiate the main object\n  Opal.top = new _Object();\n  Opal.top.$to_s = Opal.top.$inspect = function() { return 'main' };\n\n\n  // Nil\n  function $NilClass() {};\n  Opal.NilClass = Opal.allocate_class('NilClass', Opal.Object, $NilClass);\n  Opal.const_set(_Object, 'NilClass', Opal.NilClass);\n  nil = Opal.nil = new Opal.NilClass();\n  nil.$$id = nil_id;\n  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };\n\n  // Errors\n  Opal.breaker  = new Error('unexpected break (old)');\n  Opal.returner = new Error('unexpected return');\n  TypeError.$$super = Error;\n}).call(this);\nOpal.loaded([\"corelib/runtime.js\"]);\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/helpers\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$coerce_to!', '$!=', '$[]', '$upcase']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Opal');\n\n    var $nesting = [self].concat($parent_nesting), $Opal_bridge$1, $Opal_type_error$2, $Opal_coerce_to$3, $Opal_coerce_to$excl$4, $Opal_coerce_to$ques$5, $Opal_try_convert$6, $Opal_compare$7, $Opal_destructure$8, $Opal_respond_to$ques$9, $Opal_inspect_obj$10, $Opal_instance_variable_name$excl$11, $Opal_class_variable_name$excl$12, $Opal_const_name$excl$13, $Opal_pristine$14;\n\n    \n    Opal.defs(self, '$bridge', $Opal_bridge$1 = function $$bridge(constructor, klass) {\n      var self = this;\n\n      return Opal.bridge(constructor, klass);\n    }, $Opal_bridge$1.$$arity = 2);\n    Opal.defs(self, '$type_error', $Opal_type_error$2 = function $$type_error(object, type, method, coerced) {\n      var $a, self = this;\n\n      \n      \n      if (method == null) {\n        method = nil;\n      };\n      \n      if (coerced == null) {\n        coerced = nil;\n      };\n      if ($truthy(($truthy($a = method) ? coerced : $a))) {\n        return $$($nesting, 'TypeError').$new(\"\" + \"can't convert \" + (object.$class()) + \" into \" + (type) + \" (\" + (object.$class()) + \"#\" + (method) + \" gives \" + (coerced.$class()) + \")\")\n      } else {\n        return $$($nesting, 'TypeError').$new(\"\" + \"no implicit conversion of \" + (object.$class()) + \" into \" + (type))\n      };\n    }, $Opal_type_error$2.$$arity = -3);\n    Opal.defs(self, '$coerce_to', $Opal_coerce_to$3 = function $$coerce_to(object, type, method) {\n      var self = this;\n\n      \n      if ($truthy(type['$==='](object))) {\n        return object};\n      if ($truthy(object['$respond_to?'](method))) {\n      } else {\n        self.$raise(self.$type_error(object, type))\n      };\n      return object.$__send__(method);\n    }, $Opal_coerce_to$3.$$arity = 3);\n    Opal.defs(self, '$coerce_to!', $Opal_coerce_to$excl$4 = function(object, type, method) {\n      var self = this, coerced = nil;\n\n      \n      coerced = self.$coerce_to(object, type, method);\n      if ($truthy(type['$==='](coerced))) {\n      } else {\n        self.$raise(self.$type_error(object, type, method, coerced))\n      };\n      return coerced;\n    }, $Opal_coerce_to$excl$4.$$arity = 3);\n    Opal.defs(self, '$coerce_to?', $Opal_coerce_to$ques$5 = function(object, type, method) {\n      var self = this, coerced = nil;\n\n      \n      if ($truthy(object['$respond_to?'](method))) {\n      } else {\n        return nil\n      };\n      coerced = self.$coerce_to(object, type, method);\n      if ($truthy(coerced['$nil?']())) {\n        return nil};\n      if ($truthy(type['$==='](coerced))) {\n      } else {\n        self.$raise(self.$type_error(object, type, method, coerced))\n      };\n      return coerced;\n    }, $Opal_coerce_to$ques$5.$$arity = 3);\n    Opal.defs(self, '$try_convert', $Opal_try_convert$6 = function $$try_convert(object, type, method) {\n      var self = this;\n\n      \n      if ($truthy(type['$==='](object))) {\n        return object};\n      if ($truthy(object['$respond_to?'](method))) {\n        return object.$__send__(method)\n      } else {\n        return nil\n      };\n    }, $Opal_try_convert$6.$$arity = 3);\n    Opal.defs(self, '$compare', $Opal_compare$7 = function $$compare(a, b) {\n      var self = this, compare = nil;\n\n      \n      compare = a['$<=>'](b);\n      if ($truthy(compare === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (a.$class()) + \" with \" + (b.$class()) + \" failed\")};\n      return compare;\n    }, $Opal_compare$7.$$arity = 2);\n    Opal.defs(self, '$destructure', $Opal_destructure$8 = function $$destructure(args) {\n      var self = this;\n\n      \n      if (args.length == 1) {\n        return args[0];\n      }\n      else if (args.$$is_array) {\n        return args;\n      }\n      else {\n        var args_ary = new Array(args.length);\n        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }\n\n        return args_ary;\n      }\n    \n    }, $Opal_destructure$8.$$arity = 1);\n    Opal.defs(self, '$respond_to?', $Opal_respond_to$ques$9 = function(obj, method, include_all) {\n      var self = this;\n\n      \n      \n      if (include_all == null) {\n        include_all = false;\n      };\n      \n      if (obj == null || !obj.$$class) {\n        return false;\n      }\n    ;\n      return obj['$respond_to?'](method, include_all);\n    }, $Opal_respond_to$ques$9.$$arity = -3);\n    Opal.defs(self, '$inspect_obj', $Opal_inspect_obj$10 = function $$inspect_obj(obj) {\n      var self = this;\n\n      return Opal.inspect(obj);\n    }, $Opal_inspect_obj$10.$$arity = 1);\n    Opal.defs(self, '$instance_variable_name!', $Opal_instance_variable_name$excl$11 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {\n      } else {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"'\" + (name) + \"' is not allowed as an instance variable name\", name))\n      };\n      return name;\n    }, $Opal_instance_variable_name$excl$11.$$arity = 1);\n    Opal.defs(self, '$class_variable_name!', $Opal_class_variable_name$excl$12 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"`\" + (name) + \"' is not allowed as a class variable name\", name))};\n      return name;\n    }, $Opal_class_variable_name$excl$12.$$arity = 1);\n    Opal.defs(self, '$const_name!', $Opal_const_name$excl$13 = function(const_name) {\n      var self = this;\n\n      \n      const_name = $$($nesting, 'Opal')['$coerce_to!'](const_name, $$($nesting, 'String'), \"to_str\");\n      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {\n        self.$raise($$($nesting, 'NameError'), \"\" + \"wrong constant name \" + (const_name))};\n      return const_name;\n    }, $Opal_const_name$excl$13.$$arity = 1);\n    Opal.defs(self, '$pristine', $Opal_pristine$14 = function $$pristine(owner_class, $a) {\n      var $post_args, method_names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      method_names = $post_args;;\n      \n      var method_name, method;\n      for (var i = method_names.length - 1; i >= 0; i--) {\n        method_name = method_names[i];\n        method = owner_class.$$prototype['$'+method_name];\n\n        if (method && !method.$$stub) {\n          method.$$pristine = true;\n        }\n      }\n    ;\n      return nil;\n    }, $Opal_pristine$14.$$arity = -2);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/module\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$module_eval', '$to_proc', '$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!~', '$start_with?', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$any?', '$prepend_features', '$prepended', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Module');\n\n    var $nesting = [self].concat($parent_nesting), $Module_allocate$1, $Module_initialize$2, $Module_$eq_eq_eq$3, $Module_$lt$4, $Module_$lt_eq$5, $Module_$gt$6, $Module_$gt_eq$7, $Module_$lt_eq_gt$8, $Module_alias_method$9, $Module_alias_native$10, $Module_ancestors$11, $Module_append_features$12, $Module_attr_accessor$13, $Module_attr_reader$14, $Module_attr_writer$15, $Module_autoload$16, $Module_class_variables$17, $Module_class_variable_get$18, $Module_class_variable_set$19, $Module_class_variable_defined$ques$20, $Module_remove_class_variable$21, $Module_constants$22, $Module_constants$23, $Module_nesting$24, $Module_const_defined$ques$25, $Module_const_get$26, $Module_const_missing$28, $Module_const_set$29, $Module_public_constant$30, $Module_define_method$31, $Module_remove_method$33, $Module_singleton_class$ques$34, $Module_include$35, $Module_included_modules$36, $Module_include$ques$37, $Module_instance_method$38, $Module_instance_methods$39, $Module_included$40, $Module_extended$41, $Module_extend_object$42, $Module_method_added$43, $Module_method_removed$44, $Module_method_undefined$45, $Module_module_eval$46, $Module_module_exec$48, $Module_method_defined$ques$49, $Module_module_function$50, $Module_name$51, $Module_prepend$52, $Module_prepend_features$53, $Module_prepended$54, $Module_remove_const$55, $Module_to_s$56, $Module_undef_method$57, $Module_instance_variables$58, $Module_dup$59, $Module_copy_class_variables$60, $Module_copy_constants$61;\n\n    \n    Opal.defs(self, '$allocate', $Module_allocate$1 = function $$allocate() {\n      var self = this;\n\n      \n      var module = Opal.allocate_module(nil, function(){});\n      // Link the prototype of Module subclasses\n      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);\n      return module;\n    \n    }, $Module_allocate$1.$$arity = 0);\n    \n    Opal.def(self, '$initialize', $Module_initialize$2 = function $$initialize() {\n      var $iter = $Module_initialize$2.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Module_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Module_initialize$2.$$p = null;;\n      if ((block !== nil)) {\n        return $send(self, 'module_eval', [], block.$to_proc())\n      } else {\n        return nil\n      };\n    }, $Module_initialize$2.$$arity = 0);\n    \n    Opal.def(self, '$===', $Module_$eq_eq_eq$3 = function(object) {\n      var self = this;\n\n      \n      if ($truthy(object == null)) {\n        return false};\n      return Opal.is_a(object, self);;\n    }, $Module_$eq_eq_eq$3.$$arity = 1);\n    \n    Opal.def(self, '$<', $Module_$lt$4 = function(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Module')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"compared with non class/module\")\n      };\n      \n      var working = self,\n          ancestors,\n          i, length;\n\n      if (working === other) {\n        return false;\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === other) {\n          return true;\n        }\n      }\n\n      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {\n        if (ancestors[i] === self) {\n          return false;\n        }\n      }\n\n      return nil;\n    ;\n    }, $Module_$lt$4.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Module_$lt_eq$5 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))\n    }, $Module_$lt_eq$5.$$arity = 1);\n    \n    Opal.def(self, '$>', $Module_$gt$6 = function(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Module')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"compared with non class/module\")\n      };\n      return $rb_lt(other, self);\n    }, $Module_$gt$6.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Module_$gt_eq$7 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))\n    }, $Module_$gt_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $Module_$lt_eq_gt$8 = function(other) {\n      var self = this, lt = nil;\n\n      \n      \n      if (self === other) {\n        return 0;\n      }\n    ;\n      if ($truthy($$($nesting, 'Module')['$==='](other))) {\n      } else {\n        return nil\n      };\n      lt = $rb_lt(self, other);\n      if ($truthy(lt['$nil?']())) {\n        return nil};\n      if ($truthy(lt)) {\n        return -1\n      } else {\n        return 1\n      };\n    }, $Module_$lt_eq_gt$8.$$arity = 1);\n    \n    Opal.def(self, '$alias_method', $Module_alias_method$9 = function $$alias_method(newname, oldname) {\n      var self = this;\n\n      \n      Opal.alias(self, newname, oldname);\n      return self;\n    }, $Module_alias_method$9.$$arity = 2);\n    \n    Opal.def(self, '$alias_native', $Module_alias_native$10 = function $$alias_native(mid, jsid) {\n      var self = this;\n\n      \n      \n      if (jsid == null) {\n        jsid = mid;\n      };\n      Opal.alias_native(self, mid, jsid);\n      return self;\n    }, $Module_alias_native$10.$$arity = -2);\n    \n    Opal.def(self, '$ancestors', $Module_ancestors$11 = function $$ancestors() {\n      var self = this;\n\n      return Opal.ancestors(self);\n    }, $Module_ancestors$11.$$arity = 0);\n    \n    Opal.def(self, '$append_features', $Module_append_features$12 = function $$append_features(includer) {\n      var self = this;\n\n      \n      Opal.append_features(self, includer);\n      return self;\n    }, $Module_append_features$12.$$arity = 1);\n    \n    Opal.def(self, '$attr_accessor', $Module_attr_accessor$13 = function $$attr_accessor($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      $send(self, 'attr_reader', Opal.to_a(names));\n      return $send(self, 'attr_writer', Opal.to_a(names));\n    }, $Module_attr_accessor$13.$$arity = -1);\n    Opal.alias(self, \"attr\", \"attr_accessor\");\n    \n    Opal.def(self, '$attr_reader', $Module_attr_reader$14 = function $$attr_reader($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = '$' + name,\n            ivar = Opal.ivar(name);\n\n        // the closure here is needed because name will change at the next\n        // cycle, I wish we could use let.\n        var body = (function(ivar) {\n          return function() {\n            if (this[ivar] == null) {\n              return nil;\n            }\n            else {\n              return this[ivar];\n            }\n          };\n        })(ivar);\n\n        // initialize the instance variable as nil\n        Opal.defineProperty(proto, ivar, nil);\n\n        body.$$parameters = [];\n        body.$$arity = 0;\n\n        Opal.defn(self, id, body);\n      }\n    ;\n      return nil;\n    }, $Module_attr_reader$14.$$arity = -1);\n    \n    Opal.def(self, '$attr_writer', $Module_attr_writer$15 = function $$attr_writer($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      var proto = self.$$prototype;\n\n      for (var i = names.length - 1; i >= 0; i--) {\n        var name = names[i],\n            id   = '$' + name + '=',\n            ivar = Opal.ivar(name);\n\n        // the closure here is needed because name will change at the next\n        // cycle, I wish we could use let.\n        var body = (function(ivar){\n          return function(value) {\n            return this[ivar] = value;\n          }\n        })(ivar);\n\n        body.$$parameters = [['req']];\n        body.$$arity = 1;\n\n        // initialize the instance variable as nil\n        Opal.defineProperty(proto, ivar, nil);\n\n        Opal.defn(self, id, body);\n      }\n    ;\n      return nil;\n    }, $Module_attr_writer$15.$$arity = -1);\n    \n    Opal.def(self, '$autoload', $Module_autoload$16 = function $$autoload(const$, path) {\n      var self = this;\n\n      \n      if (self.$$autoload == null) self.$$autoload = {};\n      Opal.const_cache_version++;\n      self.$$autoload[const$] = path;\n      return nil;\n    \n    }, $Module_autoload$16.$$arity = 2);\n    \n    Opal.def(self, '$class_variables', $Module_class_variables$17 = function $$class_variables() {\n      var self = this;\n\n      return Object.keys(Opal.class_variables(self));\n    }, $Module_class_variables$17.$$arity = 0);\n    \n    Opal.def(self, '$class_variable_get', $Module_class_variable_get$18 = function $$class_variable_get(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      \n      var value = Opal.class_variables(self)[name];\n      if (value == null) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"uninitialized class variable \" + (name) + \" in \" + (self), name))\n      }\n      return value;\n    ;\n    }, $Module_class_variable_get$18.$$arity = 1);\n    \n    Opal.def(self, '$class_variable_set', $Module_class_variable_set$19 = function $$class_variable_set(name, value) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      return Opal.class_variable_set(self, name, value);;\n    }, $Module_class_variable_set$19.$$arity = 2);\n    \n    Opal.def(self, '$class_variable_defined?', $Module_class_variable_defined$ques$20 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      return Opal.class_variables(self).hasOwnProperty(name);;\n    }, $Module_class_variable_defined$ques$20.$$arity = 1);\n    \n    Opal.def(self, '$remove_class_variable', $Module_remove_class_variable$21 = function $$remove_class_variable(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$class_variable_name!'](name);\n      \n      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {\n        var value = self.$$cvars[name];\n        delete self.$$cvars[name];\n        return value;\n      } else {\n        self.$raise($$($nesting, 'NameError'), \"\" + \"cannot remove \" + (name) + \" for \" + (self))\n      }\n    ;\n    }, $Module_remove_class_variable$21.$$arity = 1);\n    \n    Opal.def(self, '$constants', $Module_constants$22 = function $$constants(inherit) {\n      var self = this;\n\n      \n      \n      if (inherit == null) {\n        inherit = true;\n      };\n      return Opal.constants(self, inherit);;\n    }, $Module_constants$22.$$arity = -1);\n    Opal.defs(self, '$constants', $Module_constants$23 = function $$constants(inherit) {\n      var self = this;\n\n      \n      ;\n      \n      if (inherit == null) {\n        var nesting = (self.$$nesting || []).concat(Opal.Object),\n            constant, constants = {},\n            i, ii;\n\n        for(i = 0, ii = nesting.length; i < ii; i++) {\n          for (constant in nesting[i].$$const) {\n            constants[constant] = true;\n          }\n        }\n        return Object.keys(constants);\n      } else {\n        return Opal.constants(self, inherit)\n      }\n    ;\n    }, $Module_constants$23.$$arity = -1);\n    Opal.defs(self, '$nesting', $Module_nesting$24 = function $$nesting() {\n      var self = this;\n\n      return self.$$nesting || [];\n    }, $Module_nesting$24.$$arity = 0);\n    \n    Opal.def(self, '$const_defined?', $Module_const_defined$ques$25 = function(name, inherit) {\n      var self = this;\n\n      \n      \n      if (inherit == null) {\n        inherit = true;\n      };\n      name = $$($nesting, 'Opal')['$const_name!'](name);\n      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {\n      } else {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"wrong constant name \" + (name), name))\n      };\n      \n      var module, modules = [self], module_constants, i, ii;\n\n      // Add up ancestors if inherit is true\n      if (inherit) {\n        modules = modules.concat(Opal.ancestors(self));\n\n        // Add Object's ancestors if it's a module – modules have no ancestors otherwise\n        if (self.$$is_module) {\n          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));\n        }\n      }\n\n      for (i = 0, ii = modules.length; i < ii; i++) {\n        module = modules[i];\n        if (module.$$const[name] != null) {\n          return true;\n        }\n      }\n\n      return false;\n    ;\n    }, $Module_const_defined$ques$25.$$arity = -2);\n    \n    Opal.def(self, '$const_get', $Module_const_get$26 = function $$const_get(name, inherit) {\n      var $$27, self = this;\n\n      \n      \n      if (inherit == null) {\n        inherit = true;\n      };\n      name = $$($nesting, 'Opal')['$const_name!'](name);\n      \n      if (name.indexOf('::') === 0 && name !== '::'){\n        name = name.slice(2);\n      }\n    ;\n      if ($truthy(name.indexOf('::') != -1 && name != '::')) {\n        return $send(name.$split(\"::\"), 'inject', [self], ($$27 = function(o, c){var self = $$27.$$s || this;\n\n        \n          \n          if (o == null) {\n            o = nil;\n          };\n          \n          if (c == null) {\n            c = nil;\n          };\n          return o.$const_get(c);}, $$27.$$s = self, $$27.$$arity = 2, $$27))};\n      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {\n      } else {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"wrong constant name \" + (name), name))\n      };\n      \n      if (inherit) {\n        return $$([self], name);\n      } else {\n        return Opal.const_get_local(self, name);\n      }\n    ;\n    }, $Module_const_get$26.$$arity = -2);\n    \n    Opal.def(self, '$const_missing', $Module_const_missing$28 = function $$const_missing(name) {\n      var self = this, full_const_name = nil;\n\n      \n      \n      if (self.$$autoload) {\n        var file = self.$$autoload[name];\n\n        if (file) {\n          self.$require(file);\n\n          return self.$const_get(name);\n        }\n      }\n    ;\n      full_const_name = (function() {if (self['$==']($$($nesting, 'Object'))) {\n        return name\n      } else {\n        return \"\" + (self) + \"::\" + (name)\n      }; return nil; })();\n      return self.$raise($$($nesting, 'NameError').$new(\"\" + \"uninitialized constant \" + (full_const_name), name));\n    }, $Module_const_missing$28.$$arity = 1);\n    \n    Opal.def(self, '$const_set', $Module_const_set$29 = function $$const_set(name, value) {\n      var $a, self = this;\n\n      \n      name = $$($nesting, 'Opal')['$const_name!'](name);\n      if ($truthy(($truthy($a = name['$!~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP'))) ? $a : name['$start_with?'](\"::\")))) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"wrong constant name \" + (name), name))};\n      Opal.const_set(self, name, value);\n      return value;\n    }, $Module_const_set$29.$$arity = 2);\n    \n    Opal.def(self, '$public_constant', $Module_public_constant$30 = function $$public_constant(const_name) {\n      var self = this;\n\n      return nil\n    }, $Module_public_constant$30.$$arity = 1);\n    \n    Opal.def(self, '$define_method', $Module_define_method$31 = function $$define_method(name, method) {\n      var $iter = $Module_define_method$31.$$p, block = $iter || nil, $a, $$32, self = this, $case = nil;\n\n      if ($iter) $Module_define_method$31.$$p = null;\n      \n      \n      if ($iter) $Module_define_method$31.$$p = null;;\n      ;\n      if ($truthy(method === undefined && block === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"tried to create a Proc object without a block\")};\n      block = ($truthy($a = block) ? $a : (function() {$case = method;\n      if ($$($nesting, 'Proc')['$===']($case)) {return method}\n      else if ($$($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}\n      else if ($$($nesting, 'UnboundMethod')['$===']($case)) {return $lambda(($$32 = function($b){var self = $$32.$$s || this, $post_args, args, bound = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        bound = method.$bind(self);\n        return $send(bound, 'call', Opal.to_a(args));}, $$32.$$s = self, $$32.$$arity = -1, $$32))}\n      else {return self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (block.$class()) + \" (expected Proc/Method)\")}})());\n      \n      var id = '$' + name;\n\n      block.$$jsid        = name;\n      block.$$s           = null;\n      block.$$def         = block;\n      block.$$define_meth = true;\n\n      Opal.defn(self, id, block);\n\n      return name;\n    ;\n    }, $Module_define_method$31.$$arity = -2);\n    \n    Opal.def(self, '$remove_method', $Module_remove_method$33 = function $$remove_method($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      for (var i = 0, length = names.length; i < length; i++) {\n        Opal.rdef(self, \"$\" + names[i]);\n      }\n    ;\n      return self;\n    }, $Module_remove_method$33.$$arity = -1);\n    \n    Opal.def(self, '$singleton_class?', $Module_singleton_class$ques$34 = function() {\n      var self = this;\n\n      return !!self.$$is_singleton;\n    }, $Module_singleton_class$ques$34.$$arity = 0);\n    \n    Opal.def(self, '$include', $Module_include$35 = function $$include($a) {\n      var $post_args, mods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      mods = $post_args;;\n      \n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$append_features(self);\n        (mod).$included(self);\n      }\n    ;\n      return self;\n    }, $Module_include$35.$$arity = -1);\n    \n    Opal.def(self, '$included_modules', $Module_included_modules$36 = function $$included_modules() {\n      var self = this;\n\n      return Opal.included_modules(self);\n    }, $Module_included_modules$36.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Module_include$ques$37 = function(mod) {\n      var self = this;\n\n      \n      if (!mod.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n      }\n\n      var i, ii, mod2, ancestors = Opal.ancestors(self);\n\n      for (i = 0, ii = ancestors.length; i < ii; i++) {\n        mod2 = ancestors[i];\n        if (mod2 === mod && mod2 !== self) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    }, $Module_include$ques$37.$$arity = 1);\n    \n    Opal.def(self, '$instance_method', $Module_instance_method$38 = function $$instance_method(name) {\n      var self = this;\n\n      \n      var meth = self.$$prototype['$' + name];\n\n      if (!meth || meth.$$stub) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"undefined method `\" + (name) + \"' for class `\" + (self.$name()) + \"'\", name));\n      }\n\n      return $$($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);\n    \n    }, $Module_instance_method$38.$$arity = 1);\n    \n    Opal.def(self, '$instance_methods', $Module_instance_methods$39 = function $$instance_methods(include_super) {\n      var self = this;\n\n      \n      \n      if (include_super == null) {\n        include_super = true;\n      };\n      \n      if ($truthy(include_super)) {\n        return Opal.instance_methods(self);\n      } else {\n        return Opal.own_instance_methods(self);\n      }\n    ;\n    }, $Module_instance_methods$39.$$arity = -1);\n    \n    Opal.def(self, '$included', $Module_included$40 = function $$included(mod) {\n      var self = this;\n\n      return nil\n    }, $Module_included$40.$$arity = 1);\n    \n    Opal.def(self, '$extended', $Module_extended$41 = function $$extended(mod) {\n      var self = this;\n\n      return nil\n    }, $Module_extended$41.$$arity = 1);\n    \n    Opal.def(self, '$extend_object', $Module_extend_object$42 = function $$extend_object(object) {\n      var self = this;\n\n      return nil\n    }, $Module_extend_object$42.$$arity = 1);\n    \n    Opal.def(self, '$method_added', $Module_method_added$43 = function $$method_added($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_method_added$43.$$arity = -1);\n    \n    Opal.def(self, '$method_removed', $Module_method_removed$44 = function $$method_removed($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_method_removed$44.$$arity = -1);\n    \n    Opal.def(self, '$method_undefined', $Module_method_undefined$45 = function $$method_undefined($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_method_undefined$45.$$arity = -1);\n    \n    Opal.def(self, '$module_eval', $Module_module_eval$46 = function $$module_eval($a) {\n      var $iter = $Module_module_eval$46.$$p, block = $iter || nil, $post_args, args, $b, $$47, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;\n\n      if ($iter) $Module_module_eval$46.$$p = null;\n      \n      \n      if ($iter) $Module_module_eval$46.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {\n        \n        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {\n        } else {\n          $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        };\n        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;\n        default_eval_options = $hash2([\"file\", \"eval\"], {\"file\": ($truthy($b = file) ? $b : \"(eval)\"), \"eval\": true});\n        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);\n        compiled = $$($nesting, 'Opal').$compile(string, compiling_options);\n        block = $send($$($nesting, 'Kernel'), 'proc', [], ($$47 = function(){var self = $$47.$$s || this;\n\n        \n          return (function(self) {\n            return eval(compiled);\n          })(self)\n        }, $$47.$$s = self, $$47.$$arity = 0, $$47));\n      } else if ($truthy(args['$any?']())) {\n        $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), \"\" + (\"\" + \"wrong number of arguments (\" + (args.$size()) + \" for 0)\") + \"\\n\\n  NOTE:If you want to enable passing a String argument please add \\\"require 'opal-parser'\\\" to your script\\n\")};\n      \n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n      result = block.apply(self, [self]);\n      block.$$s = old;\n\n      return result;\n    ;\n    }, $Module_module_eval$46.$$arity = -1);\n    Opal.alias(self, \"class_eval\", \"module_eval\");\n    \n    Opal.def(self, '$module_exec', $Module_module_exec$48 = function $$module_exec($a) {\n      var $iter = $Module_module_exec$48.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Module_module_exec$48.$$p = null;\n      \n      \n      if ($iter) $Module_module_exec$48.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      if (block === nil) {\n        self.$raise($$($nesting, 'LocalJumpError'), \"no block given\")\n      }\n\n      var block_self = block.$$s, result;\n\n      block.$$s = null;\n      result = block.apply(self, args);\n      block.$$s = block_self;\n\n      return result;\n    ;\n    }, $Module_module_exec$48.$$arity = -1);\n    Opal.alias(self, \"class_exec\", \"module_exec\");\n    \n    Opal.def(self, '$method_defined?', $Module_method_defined$ques$49 = function(method) {\n      var self = this;\n\n      \n      var body = self.$$prototype['$' + method];\n      return (!!body) && !body.$$stub;\n    \n    }, $Module_method_defined$ques$49.$$arity = 1);\n    \n    Opal.def(self, '$module_function', $Module_module_function$50 = function $$module_function($a) {\n      var $post_args, methods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      methods = $post_args;;\n      \n      if (methods.length === 0) {\n        self.$$module_function = true;\n      }\n      else {\n        for (var i = 0, length = methods.length; i < length; i++) {\n          var meth = methods[i],\n              id   = '$' + meth,\n              func = self.$$prototype[id];\n\n          Opal.defs(self, id, func);\n        }\n      }\n\n      return self;\n    ;\n    }, $Module_module_function$50.$$arity = -1);\n    \n    Opal.def(self, '$name', $Module_name$51 = function $$name() {\n      var self = this;\n\n      \n      if (self.$$full_name) {\n        return self.$$full_name;\n      }\n\n      var result = [], base = self;\n\n      while (base) {\n        // Give up if any of the ancestors is unnamed\n        if (base.$$name === nil || base.$$name == null) return nil;\n\n        result.unshift(base.$$name);\n\n        base = base.$$base_module;\n\n        if (base === Opal.Object) {\n          break;\n        }\n      }\n\n      if (result.length === 0) {\n        return nil;\n      }\n\n      return self.$$full_name = result.join('::');\n    \n    }, $Module_name$51.$$arity = 0);\n    \n    Opal.def(self, '$prepend', $Module_prepend$52 = function $$prepend($a) {\n      var $post_args, mods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      mods = $post_args;;\n      \n      if (mods.length === 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (given 0, expected 1+)\")\n      }\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$prepend_features(self);\n        (mod).$prepended(self);\n      }\n    ;\n      return self;\n    }, $Module_prepend$52.$$arity = -1);\n    \n    Opal.def(self, '$prepend_features', $Module_prepend_features$53 = function $$prepend_features(prepender) {\n      var self = this;\n\n      \n      \n      if (!self.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (self.$class()) + \" (expected Module)\");\n      }\n\n      Opal.prepend_features(self, prepender)\n    ;\n      return self;\n    }, $Module_prepend_features$53.$$arity = 1);\n    \n    Opal.def(self, '$prepended', $Module_prepended$54 = function $$prepended(mod) {\n      var self = this;\n\n      return nil\n    }, $Module_prepended$54.$$arity = 1);\n    \n    Opal.def(self, '$remove_const', $Module_remove_const$55 = function $$remove_const(name) {\n      var self = this;\n\n      return Opal.const_remove(self, name);\n    }, $Module_remove_const$55.$$arity = 1);\n    \n    Opal.def(self, '$to_s', $Module_to_s$56 = function $$to_s() {\n      var $a, self = this;\n\n      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : \"\" + \"#<\" + (self.$$is_module ? 'Module' : 'Class') + \":0x\" + (self.$__id__().$to_s(16)) + \">\")\n    }, $Module_to_s$56.$$arity = 0);\n    \n    Opal.def(self, '$undef_method', $Module_undef_method$57 = function $$undef_method($a) {\n      var $post_args, names, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      names = $post_args;;\n      \n      for (var i = 0, length = names.length; i < length; i++) {\n        Opal.udef(self, \"$\" + names[i]);\n      }\n    ;\n      return self;\n    }, $Module_undef_method$57.$$arity = -1);\n    \n    Opal.def(self, '$instance_variables', $Module_instance_variables$58 = function $$instance_variables() {\n      var self = this, consts = nil;\n\n      \n      consts = (Opal.Module.$$nesting = $nesting, self.$constants());\n      \n      var result = [];\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {\n          result.push('@' + name);\n        }\n      }\n\n      return result;\n    ;\n    }, $Module_instance_variables$58.$$arity = 0);\n    \n    Opal.def(self, '$dup', $Module_dup$59 = function $$dup() {\n      var $iter = $Module_dup$59.$$p, $yield = $iter || nil, self = this, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Module_dup$59.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      copy = $send(self, Opal.find_super_dispatcher(self, 'dup', $Module_dup$59, false), $zuper, $iter);\n      copy.$copy_class_variables(self);\n      copy.$copy_constants(self);\n      return copy;\n    }, $Module_dup$59.$$arity = 0);\n    \n    Opal.def(self, '$copy_class_variables', $Module_copy_class_variables$60 = function $$copy_class_variables(other) {\n      var self = this;\n\n      \n      for (var name in other.$$cvars) {\n        self.$$cvars[name] = other.$$cvars[name];\n      }\n    \n    }, $Module_copy_class_variables$60.$$arity = 1);\n    return (Opal.def(self, '$copy_constants', $Module_copy_constants$61 = function $$copy_constants(other) {\n      var self = this;\n\n      \n      var name, other_constants = other.$$const;\n\n      for (name in other_constants) {\n        Opal.const_set(self, name, other_constants[name]);\n      }\n    \n    }, $Module_copy_constants$61.$$arity = 1), nil) && 'copy_constants';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/class\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$class_eval', '$to_proc', '$initialize_copy', '$allocate', '$name', '$to_s']);\n  \n  self.$require(\"corelib/module\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Class');\n\n    var $nesting = [self].concat($parent_nesting), $Class_new$1, $Class_allocate$2, $Class_inherited$3, $Class_initialize_dup$4, $Class_new$5, $Class_superclass$6, $Class_to_s$7;\n\n    \n    Opal.defs(self, '$new', $Class_new$1 = function(superclass) {\n      var $iter = $Class_new$1.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Class_new$1.$$p = null;\n      \n      \n      if ($iter) $Class_new$1.$$p = null;;\n      \n      if (superclass == null) {\n        superclass = $$($nesting, 'Object');\n      };\n      \n      if (!superclass.$$is_class) {\n        throw Opal.TypeError.$new(\"superclass must be a Class\");\n      }\n\n      var klass = Opal.allocate_class(nil, superclass);\n      superclass.$inherited(klass);\n      (function() {if ((block !== nil)) {\n        return $send((klass), 'class_eval', [], block.$to_proc())\n      } else {\n        return nil\n      }; return nil; })()\n      return klass;\n    ;\n    }, $Class_new$1.$$arity = -1);\n    \n    Opal.def(self, '$allocate', $Class_allocate$2 = function $$allocate() {\n      var self = this;\n\n      \n      var obj = new self.$$constructor();\n      obj.$$id = Opal.uid();\n      return obj;\n    \n    }, $Class_allocate$2.$$arity = 0);\n    \n    Opal.def(self, '$inherited', $Class_inherited$3 = function $$inherited(cls) {\n      var self = this;\n\n      return nil\n    }, $Class_inherited$3.$$arity = 1);\n    \n    Opal.def(self, '$initialize_dup', $Class_initialize_dup$4 = function $$initialize_dup(original) {\n      var self = this;\n\n      \n      self.$initialize_copy(original);\n      \n      self.$$name = null;\n      self.$$full_name = null;\n    ;\n    }, $Class_initialize_dup$4.$$arity = 1);\n    \n    Opal.def(self, '$new', $Class_new$5 = function($a) {\n      var $iter = $Class_new$5.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Class_new$5.$$p = null;\n      \n      \n      if ($iter) $Class_new$5.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var object = self.$allocate();\n      Opal.send(object, object.$initialize, args, block);\n      return object;\n    ;\n    }, $Class_new$5.$$arity = -1);\n    \n    Opal.def(self, '$superclass', $Class_superclass$6 = function $$superclass() {\n      var self = this;\n\n      return self.$$super || nil;\n    }, $Class_superclass$6.$$arity = 0);\n    return (Opal.def(self, '$to_s', $Class_to_s$7 = function $$to_s() {\n      var $iter = $Class_to_s$7.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Class_to_s$7.$$p = null;\n      \n      var singleton_of = self.$$singleton_of;\n\n      if (singleton_of && (singleton_of.$$is_a_module)) {\n        return \"\" + \"#<Class:\" + ((singleton_of).$name()) + \">\";\n      }\n      else if (singleton_of) {\n        // a singleton class created from an object\n        return \"\" + \"#<Class:#<\" + ((singleton_of.$$class).$name()) + \":0x\" + ((Opal.id(singleton_of)).$to_s(16)) + \">>\";\n      }\n      return $send(self, Opal.find_super_dispatcher(self, 'to_s', $Class_to_s$7, false), [], null);\n    \n    }, $Class_to_s$7.$$arity = 0), nil) && 'to_s';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/basic_object\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;\n\n  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$any?', '$inspect', '$new']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'BasicObject');\n\n    var $nesting = [self].concat($parent_nesting), $BasicObject_initialize$1, $BasicObject_$eq_eq$2, $BasicObject_eql$ques$3, $BasicObject___id__$4, $BasicObject___send__$5, $BasicObject_$excl$6, $BasicObject_$not_eq$7, $BasicObject_instance_eval$8, $BasicObject_instance_exec$10, $BasicObject_singleton_method_added$11, $BasicObject_singleton_method_removed$12, $BasicObject_singleton_method_undefined$13, $BasicObject_class$14, $BasicObject_method_missing$15;\n\n    \n    \n    Opal.def(self, '$initialize', $BasicObject_initialize$1 = function $$initialize($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_initialize$1.$$arity = -1);\n    \n    Opal.def(self, '$==', $BasicObject_$eq_eq$2 = function(other) {\n      var self = this;\n\n      return self === other;\n    }, $BasicObject_$eq_eq$2.$$arity = 1);\n    \n    Opal.def(self, '$eql?', $BasicObject_eql$ques$3 = function(other) {\n      var self = this;\n\n      return self['$=='](other)\n    }, $BasicObject_eql$ques$3.$$arity = 1);\n    Opal.alias(self, \"equal?\", \"==\");\n    \n    Opal.def(self, '$__id__', $BasicObject___id__$4 = function $$__id__() {\n      var self = this;\n\n      \n      if (self.$$id != null) {\n        return self.$$id;\n      }\n      Opal.defineProperty(self, '$$id', Opal.uid());\n      return self.$$id;\n    \n    }, $BasicObject___id__$4.$$arity = 0);\n    \n    Opal.def(self, '$__send__', $BasicObject___send__$5 = function $$__send__(symbol, $a) {\n      var $iter = $BasicObject___send__$5.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $BasicObject___send__$5.$$p = null;\n      \n      \n      if ($iter) $BasicObject___send__$5.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      args = $post_args;;\n      \n      var func = self['$' + symbol]\n\n      if (func) {\n        if (block !== nil) {\n          func.$$p = block;\n        }\n\n        return func.apply(self, args);\n      }\n\n      if (block !== nil) {\n        self.$method_missing.$$p = block;\n      }\n\n      return self.$method_missing.apply(self, [symbol].concat(args));\n    ;\n    }, $BasicObject___send__$5.$$arity = -2);\n    \n    Opal.def(self, '$!', $BasicObject_$excl$6 = function() {\n      var self = this;\n\n      return false\n    }, $BasicObject_$excl$6.$$arity = 0);\n    \n    Opal.def(self, '$!=', $BasicObject_$not_eq$7 = function(other) {\n      var self = this;\n\n      return self['$=='](other)['$!']()\n    }, $BasicObject_$not_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$instance_eval', $BasicObject_instance_eval$8 = function $$instance_eval($a) {\n      var $iter = $BasicObject_instance_eval$8.$$p, block = $iter || nil, $post_args, args, $b, $$9, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;\n\n      if ($iter) $BasicObject_instance_eval$8.$$p = null;\n      \n      \n      if ($iter) $BasicObject_instance_eval$8.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {\n        \n        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {\n        } else {\n          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        };\n        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;\n        default_eval_options = $hash2([\"file\", \"eval\"], {\"file\": ($truthy($b = file) ? $b : \"(eval)\"), \"eval\": true});\n        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);\n        compiled = $$$('::', 'Opal').$compile(string, compiling_options);\n        block = $send($$$('::', 'Kernel'), 'proc', [], ($$9 = function(){var self = $$9.$$s || this;\n\n        \n          return (function(self) {\n            return eval(compiled);\n          })(self)\n        }, $$9.$$s = self, $$9.$$arity = 0, $$9));\n      } else if ($truthy(args['$any?']())) {\n        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (args.$size()) + \" for 0)\")};\n      \n      var old = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      // Need to pass $$eval so that method definitions know if this is\n      // being done on a class/module. Cannot be compiler driven since\n      // send(:instance_eval) needs to work.\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.call(self, self);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.call(self, self);\n      }\n\n      block.$$s = old;\n\n      return result;\n    ;\n    }, $BasicObject_instance_eval$8.$$arity = -1);\n    \n    Opal.def(self, '$instance_exec', $BasicObject_instance_exec$10 = function $$instance_exec($a) {\n      var $iter = $BasicObject_instance_exec$10.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $BasicObject_instance_exec$10.$$p = null;\n      \n      \n      if ($iter) $BasicObject_instance_exec$10.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(block)) {\n      } else {\n        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), \"no block given\")\n      };\n      \n      var block_self = block.$$s,\n          result;\n\n      block.$$s = null;\n\n      if (self.$$is_a_module) {\n        self.$$eval = true;\n        try {\n          result = block.apply(self, args);\n        }\n        finally {\n          self.$$eval = false;\n        }\n      }\n      else {\n        result = block.apply(self, args);\n      }\n\n      block.$$s = block_self;\n\n      return result;\n    ;\n    }, $BasicObject_instance_exec$10.$$arity = -1);\n    \n    Opal.def(self, '$singleton_method_added', $BasicObject_singleton_method_added$11 = function $$singleton_method_added($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_singleton_method_added$11.$$arity = -1);\n    \n    Opal.def(self, '$singleton_method_removed', $BasicObject_singleton_method_removed$12 = function $$singleton_method_removed($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_singleton_method_removed$12.$$arity = -1);\n    \n    Opal.def(self, '$singleton_method_undefined', $BasicObject_singleton_method_undefined$13 = function $$singleton_method_undefined($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $BasicObject_singleton_method_undefined$13.$$arity = -1);\n    \n    Opal.def(self, '$class', $BasicObject_class$14 = function() {\n      var self = this;\n\n      return self.$$class;\n    }, $BasicObject_class$14.$$arity = 0);\n    return (Opal.def(self, '$method_missing', $BasicObject_method_missing$15 = function $$method_missing(symbol, $a) {\n      var $iter = $BasicObject_method_missing$15.$$p, block = $iter || nil, $post_args, args, self = this, message = nil;\n\n      if ($iter) $BasicObject_method_missing$15.$$p = null;\n      \n      \n      if ($iter) $BasicObject_method_missing$15.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      args = $post_args;;\n      message = (function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {\n        return \"\" + \"undefined method `\" + (symbol) + \"' for \" + (self.$inspect()) + \":\" + (self.$$class)\n      } else {\n        return \"\" + \"undefined method `\" + (symbol) + \"' for \" + (self.$$class)\n      }; return nil; })();\n      return $$$('::', 'Kernel').$raise($$$('::', 'NoMethodError').$new(message, symbol));\n    }, $BasicObject_method_missing$15.$$arity = -2), nil) && 'method_missing';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/kernel\"] = function(Opal) {\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send, $klass = Opal.klass;\n\n  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$empty?', '$pop', '$call', '$coerce_to', '$append_features', '$extend_object', '$extended', '$__id__', '$to_s', '$instance_variable_name!', '$respond_to?', '$to_int', '$coerce_to!', '$Integer', '$nil?', '$===', '$enum_for', '$result', '$any?', '$print', '$format', '$puts', '$each', '$<=', '$length', '$[]', '$exception', '$is_a?', '$rand', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$new_seed', '$srand', '$sym', '$arg', '$open', '$include']);\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_method_missing$1, $Kernel_$eq_tilde$2, $Kernel_$excl_tilde$3, $Kernel_$eq_eq_eq$4, $Kernel_$lt_eq_gt$5, $Kernel_method$6, $Kernel_methods$7, $Kernel_public_methods$8, $Kernel_Array$9, $Kernel_at_exit$10, $Kernel_caller$11, $Kernel_class$12, $Kernel_copy_instance_variables$13, $Kernel_copy_singleton_methods$14, $Kernel_clone$15, $Kernel_initialize_clone$16, $Kernel_define_singleton_method$17, $Kernel_dup$18, $Kernel_initialize_dup$19, $Kernel_enum_for$20, $Kernel_equal$ques$21, $Kernel_exit$22, $Kernel_extend$23, $Kernel_hash$24, $Kernel_initialize_copy$25, $Kernel_inspect$26, $Kernel_instance_of$ques$27, $Kernel_instance_variable_defined$ques$28, $Kernel_instance_variable_get$29, $Kernel_instance_variable_set$30, $Kernel_remove_instance_variable$31, $Kernel_instance_variables$32, $Kernel_Integer$33, $Kernel_Float$34, $Kernel_Hash$35, $Kernel_is_a$ques$36, $Kernel_itself$37, $Kernel_lambda$38, $Kernel_load$39, $Kernel_loop$40, $Kernel_nil$ques$42, $Kernel_printf$43, $Kernel_proc$44, $Kernel_puts$45, $Kernel_p$46, $Kernel_print$48, $Kernel_warn$49, $Kernel_raise$50, $Kernel_rand$51, $Kernel_respond_to$ques$52, $Kernel_respond_to_missing$ques$53, $Kernel_require$54, $Kernel_require_relative$55, $Kernel_require_tree$56, $Kernel_singleton_class$57, $Kernel_sleep$58, $Kernel_srand$59, $Kernel_String$60, $Kernel_tap$61, $Kernel_to_proc$62, $Kernel_to_s$63, $Kernel_catch$64, $Kernel_throw$65, $Kernel_open$66, $Kernel_yield_self$67;\n\n    \n    \n    Opal.def(self, '$method_missing', $Kernel_method_missing$1 = function $$method_missing(symbol, $a) {\n      var $iter = $Kernel_method_missing$1.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Kernel_method_missing$1.$$p = null;\n      \n      \n      if ($iter) $Kernel_method_missing$1.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      args = $post_args;;\n      return self.$raise($$($nesting, 'NoMethodError').$new(\"\" + \"undefined method `\" + (symbol) + \"' for \" + (self.$inspect()), symbol, args));\n    }, $Kernel_method_missing$1.$$arity = -2);\n    \n    Opal.def(self, '$=~', $Kernel_$eq_tilde$2 = function(obj) {\n      var self = this;\n\n      return false\n    }, $Kernel_$eq_tilde$2.$$arity = 1);\n    \n    Opal.def(self, '$!~', $Kernel_$excl_tilde$3 = function(obj) {\n      var self = this;\n\n      return self['$=~'](obj)['$!']()\n    }, $Kernel_$excl_tilde$3.$$arity = 1);\n    \n    Opal.def(self, '$===', $Kernel_$eq_eq_eq$4 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))\n    }, $Kernel_$eq_eq_eq$4.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $Kernel_$lt_eq_gt$5 = function(other) {\n      var self = this;\n\n      \n      // set guard for infinite recursion\n      self.$$comparable = true;\n\n      var x = self['$=='](other);\n\n      if (x && x !== nil) {\n        return 0;\n      }\n\n      return nil;\n    \n    }, $Kernel_$lt_eq_gt$5.$$arity = 1);\n    \n    Opal.def(self, '$method', $Kernel_method$6 = function $$method(name) {\n      var self = this;\n\n      \n      var meth = self['$' + name];\n\n      if (!meth || meth.$$stub) {\n        self.$raise($$($nesting, 'NameError').$new(\"\" + \"undefined method `\" + (name) + \"' for class `\" + (self.$class()) + \"'\", name));\n      }\n\n      return $$($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);\n    \n    }, $Kernel_method$6.$$arity = 1);\n    \n    Opal.def(self, '$methods', $Kernel_methods$7 = function $$methods(all) {\n      var self = this;\n\n      \n      \n      if (all == null) {\n        all = true;\n      };\n      \n      if ($truthy(all)) {\n        return Opal.methods(self);\n      } else {\n        return Opal.own_methods(self);\n      }\n    ;\n    }, $Kernel_methods$7.$$arity = -1);\n    \n    Opal.def(self, '$public_methods', $Kernel_public_methods$8 = function $$public_methods(all) {\n      var self = this;\n\n      \n      \n      if (all == null) {\n        all = true;\n      };\n      \n      if ($truthy(all)) {\n        return Opal.methods(self);\n      } else {\n        return Opal.receiver_methods(self);\n      }\n    ;\n    }, $Kernel_public_methods$8.$$arity = -1);\n    \n    Opal.def(self, '$Array', $Kernel_Array$9 = function $$Array(object) {\n      var self = this;\n\n      \n      var coerced;\n\n      if (object === nil) {\n        return [];\n      }\n\n      if (object.$$is_array) {\n        return object;\n      }\n\n      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), \"to_ary\");\n      if (coerced !== nil) { return coerced; }\n\n      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), \"to_a\");\n      if (coerced !== nil) { return coerced; }\n\n      return [object];\n    \n    }, $Kernel_Array$9.$$arity = 1);\n    \n    Opal.def(self, '$at_exit', $Kernel_at_exit$10 = function $$at_exit() {\n      var $iter = $Kernel_at_exit$10.$$p, block = $iter || nil, $a, self = this;\n      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;\n\n      if ($iter) $Kernel_at_exit$10.$$p = null;\n      \n      \n      if ($iter) $Kernel_at_exit$10.$$p = null;;\n      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);\n      return $gvars.__at_exit__['$<<'](block);\n    }, $Kernel_at_exit$10.$$arity = 0);\n    \n    Opal.def(self, '$caller', $Kernel_caller$11 = function $$caller($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return [];\n    }, $Kernel_caller$11.$$arity = -1);\n    \n    Opal.def(self, '$class', $Kernel_class$12 = function() {\n      var self = this;\n\n      return self.$$class;\n    }, $Kernel_class$12.$$arity = 0);\n    \n    Opal.def(self, '$copy_instance_variables', $Kernel_copy_instance_variables$13 = function $$copy_instance_variables(other) {\n      var self = this;\n\n      \n      var keys = Object.keys(other), i, ii, name;\n      for (i = 0, ii = keys.length; i < ii; i++) {\n        name = keys[i];\n        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    \n    }, $Kernel_copy_instance_variables$13.$$arity = 1);\n    \n    Opal.def(self, '$copy_singleton_methods', $Kernel_copy_singleton_methods$14 = function $$copy_singleton_methods(other) {\n      var self = this;\n\n      \n      var i, name, names, length;\n\n      if (other.hasOwnProperty('$$meta')) {\n        var other_singleton_class = Opal.get_singleton_class(other);\n        var self_singleton_class = Opal.get_singleton_class(self);\n        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);\n\n        for (i = 0, length = names.length; i < length; i++) {\n          name = names[i];\n          if (Opal.is_method(name)) {\n            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];\n          }\n        }\n\n        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);\n        Object.setPrototypeOf(\n          self_singleton_class.$$prototype,\n          Object.getPrototypeOf(other_singleton_class.$$prototype)\n        );\n      }\n\n      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {\n        name = names[i];\n        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {\n          self[name] = other[name];\n        }\n      }\n    \n    }, $Kernel_copy_singleton_methods$14.$$arity = 1);\n    \n    Opal.def(self, '$clone', $Kernel_clone$15 = function $$clone($kwargs) {\n      var freeze, self = this, copy = nil;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      copy = self.$class().$allocate();\n      copy.$copy_instance_variables(self);\n      copy.$copy_singleton_methods(self);\n      copy.$initialize_clone(self);\n      return copy;\n    }, $Kernel_clone$15.$$arity = -1);\n    \n    Opal.def(self, '$initialize_clone', $Kernel_initialize_clone$16 = function $$initialize_clone(other) {\n      var self = this;\n\n      return self.$initialize_copy(other)\n    }, $Kernel_initialize_clone$16.$$arity = 1);\n    \n    Opal.def(self, '$define_singleton_method', $Kernel_define_singleton_method$17 = function $$define_singleton_method(name, method) {\n      var $iter = $Kernel_define_singleton_method$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_define_singleton_method$17.$$p = null;\n      \n      \n      if ($iter) $Kernel_define_singleton_method$17.$$p = null;;\n      ;\n      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());\n    }, $Kernel_define_singleton_method$17.$$arity = -2);\n    \n    Opal.def(self, '$dup', $Kernel_dup$18 = function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = self.$class().$allocate();\n      copy.$copy_instance_variables(self);\n      copy.$initialize_dup(self);\n      return copy;\n    }, $Kernel_dup$18.$$arity = 0);\n    \n    Opal.def(self, '$initialize_dup', $Kernel_initialize_dup$19 = function $$initialize_dup(other) {\n      var self = this;\n\n      return self.$initialize_copy(other)\n    }, $Kernel_initialize_dup$19.$$arity = 1);\n    \n    Opal.def(self, '$enum_for', $Kernel_enum_for$20 = function $$enum_for($a, $b) {\n      var $iter = $Kernel_enum_for$20.$$p, block = $iter || nil, $post_args, method, args, self = this;\n\n      if ($iter) $Kernel_enum_for$20.$$p = null;\n      \n      \n      if ($iter) $Kernel_enum_for$20.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      if ($post_args.length > 0) {\n        method = $post_args[0];\n        $post_args.splice(0, 1);\n      }\n      if (method == null) {\n        method = \"each\";\n      };\n      \n      args = $post_args;;\n      return $send($$($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());\n    }, $Kernel_enum_for$20.$$arity = -1);\n    Opal.alias(self, \"to_enum\", \"enum_for\");\n    \n    Opal.def(self, '$equal?', $Kernel_equal$ques$21 = function(other) {\n      var self = this;\n\n      return self === other;\n    }, $Kernel_equal$ques$21.$$arity = 1);\n    \n    Opal.def(self, '$exit', $Kernel_exit$22 = function $$exit(status) {\n      var $a, self = this, block = nil;\n      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;\n\n      \n      \n      if (status == null) {\n        status = true;\n      };\n      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);\n      while (!($truthy($gvars.__at_exit__['$empty?']()))) {\n        \n        block = $gvars.__at_exit__.$pop();\n        block.$call();\n      };\n      \n      if (status.$$is_boolean) {\n        status = status ? 0 : 1;\n      } else {\n        status = $$($nesting, 'Opal').$coerce_to(status, $$($nesting, 'Integer'), \"to_int\")\n      }\n\n      Opal.exit(status);\n    ;\n      return nil;\n    }, $Kernel_exit$22.$$arity = -1);\n    \n    Opal.def(self, '$extend', $Kernel_extend$23 = function $$extend($a) {\n      var $post_args, mods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      mods = $post_args;;\n      \n      var singleton = self.$singleton_class();\n\n      for (var i = mods.length - 1; i >= 0; i--) {\n        var mod = mods[i];\n\n        if (!mod.$$is_module) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((mod).$class()) + \" (expected Module)\");\n        }\n\n        (mod).$append_features(singleton);\n        (mod).$extend_object(self);\n        (mod).$extended(self);\n      }\n    ;\n      return self;\n    }, $Kernel_extend$23.$$arity = -1);\n    \n    Opal.def(self, '$hash', $Kernel_hash$24 = function $$hash() {\n      var self = this;\n\n      return self.$__id__()\n    }, $Kernel_hash$24.$$arity = 0);\n    \n    Opal.def(self, '$initialize_copy', $Kernel_initialize_copy$25 = function $$initialize_copy(other) {\n      var self = this;\n\n      return nil\n    }, $Kernel_initialize_copy$25.$$arity = 1);\n    \n    Opal.def(self, '$inspect', $Kernel_inspect$26 = function $$inspect() {\n      var self = this;\n\n      return self.$to_s()\n    }, $Kernel_inspect$26.$$arity = 0);\n    \n    Opal.def(self, '$instance_of?', $Kernel_instance_of$ques$27 = function(klass) {\n      var self = this;\n\n      \n      if (!klass.$$is_class && !klass.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"class or module required\");\n      }\n\n      return self.$$class === klass;\n    \n    }, $Kernel_instance_of$ques$27.$$arity = 1);\n    \n    Opal.def(self, '$instance_variable_defined?', $Kernel_instance_variable_defined$ques$28 = function(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      return Opal.hasOwnProperty.call(self, name.substr(1));;\n    }, $Kernel_instance_variable_defined$ques$28.$$arity = 1);\n    \n    Opal.def(self, '$instance_variable_get', $Kernel_instance_variable_get$29 = function $$instance_variable_get(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      \n      var ivar = self[Opal.ivar(name.substr(1))];\n\n      return ivar == null ? nil : ivar;\n    ;\n    }, $Kernel_instance_variable_get$29.$$arity = 1);\n    \n    Opal.def(self, '$instance_variable_set', $Kernel_instance_variable_set$30 = function $$instance_variable_set(name, value) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      return self[Opal.ivar(name.substr(1))] = value;;\n    }, $Kernel_instance_variable_set$30.$$arity = 2);\n    \n    Opal.def(self, '$remove_instance_variable', $Kernel_remove_instance_variable$31 = function $$remove_instance_variable(name) {\n      var self = this;\n\n      \n      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);\n      \n      var key = Opal.ivar(name.substr(1)),\n          val;\n      if (self.hasOwnProperty(key)) {\n        val = self[key];\n        delete self[key];\n        return val;\n      }\n    ;\n      return self.$raise($$($nesting, 'NameError'), \"\" + \"instance variable \" + (name) + \" not defined\");\n    }, $Kernel_remove_instance_variable$31.$$arity = 1);\n    \n    Opal.def(self, '$instance_variables', $Kernel_instance_variables$32 = function $$instance_variables() {\n      var self = this;\n\n      \n      var result = [], ivar;\n\n      for (var name in self) {\n        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {\n          if (name.substr(-1) === '$') {\n            ivar = name.slice(0, name.length - 1);\n          } else {\n            ivar = name;\n          }\n          result.push('@' + ivar);\n        }\n      }\n\n      return result;\n    \n    }, $Kernel_instance_variables$32.$$arity = 0);\n    \n    Opal.def(self, '$Integer', $Kernel_Integer$33 = function $$Integer(value, base) {\n      var self = this;\n\n      \n      ;\n      \n      var i, str, base_digits;\n\n      if (!value.$$is_string) {\n        if (base !== undefined) {\n          self.$raise($$($nesting, 'ArgumentError'), \"base specified for non string value\")\n        }\n        if (value === nil) {\n          self.$raise($$($nesting, 'TypeError'), \"can't convert nil into Integer\")\n        }\n        if (value.$$is_number) {\n          if (value === Infinity || value === -Infinity || isNaN(value)) {\n            self.$raise($$($nesting, 'FloatDomainError'), value)\n          }\n          return Math.floor(value);\n        }\n        if (value['$respond_to?'](\"to_int\")) {\n          i = value.$to_int();\n          if (i !== nil) {\n            return i;\n          }\n        }\n        return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Integer'), \"to_i\");\n      }\n\n      if (value === \"0\") {\n        return 0;\n      }\n\n      if (base === undefined) {\n        base = 0;\n      } else {\n        base = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), \"to_int\");\n        if (base === 1 || base < 0 || base > 36) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (base))\n        }\n      }\n\n      str = value.toLowerCase();\n\n      str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n      str = str.replace(/^(\\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {\n        switch (flag) {\n        case '0b':\n          if (base === 0 || base === 2) {\n            base = 2;\n            return head;\n          }\n        case '0':\n        case '0o':\n          if (base === 0 || base === 8) {\n            base = 8;\n            return head;\n          }\n        case '0d':\n          if (base === 0 || base === 10) {\n            base = 10;\n            return head;\n          }\n        case '0x':\n          if (base === 0 || base === 16) {\n            base = 16;\n            return head;\n          }\n        }\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      });\n\n      base = (base === 0 ? 10 : base);\n\n      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));\n\n      if (!(new RegExp('^\\\\s*[+-]?[' + base_digits + ']+\\\\s*$')).test(str)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      }\n\n      i = parseInt(str, base);\n\n      if (isNaN(i)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Integer(): \\\"\" + (value) + \"\\\"\")\n      }\n\n      return i;\n    ;\n    }, $Kernel_Integer$33.$$arity = -2);\n    \n    Opal.def(self, '$Float', $Kernel_Float$34 = function $$Float(value) {\n      var self = this;\n\n      \n      var str;\n\n      if (value === nil) {\n        self.$raise($$($nesting, 'TypeError'), \"can't convert nil into Float\")\n      }\n\n      if (value.$$is_string) {\n        str = value.toString();\n\n        str = str.replace(/(\\d)_(?=\\d)/g, '$1');\n\n        //Special case for hex strings only:\n        if (/^\\s*[-+]?0[xX][0-9a-fA-F]+\\s*$/.test(str)) {\n          return self.$Integer(str);\n        }\n\n        if (!/^\\s*[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?\\s*$/.test(str)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid value for Float(): \\\"\" + (value) + \"\\\"\")\n        }\n\n        return parseFloat(str);\n      }\n\n      return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Float'), \"to_f\");\n    \n    }, $Kernel_Float$34.$$arity = 1);\n    \n    Opal.def(self, '$Hash', $Kernel_Hash$35 = function $$Hash(arg) {\n      var $a, self = this;\n\n      \n      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {\n        return $hash2([], {})};\n      if ($truthy($$($nesting, 'Hash')['$==='](arg))) {\n        return arg};\n      return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'Hash'), \"to_hash\");\n    }, $Kernel_Hash$35.$$arity = 1);\n    \n    Opal.def(self, '$is_a?', $Kernel_is_a$ques$36 = function(klass) {\n      var self = this;\n\n      \n      if (!klass.$$is_class && !klass.$$is_module) {\n        self.$raise($$($nesting, 'TypeError'), \"class or module required\");\n      }\n\n      return Opal.is_a(self, klass);\n    \n    }, $Kernel_is_a$ques$36.$$arity = 1);\n    \n    Opal.def(self, '$itself', $Kernel_itself$37 = function $$itself() {\n      var self = this;\n\n      return self\n    }, $Kernel_itself$37.$$arity = 0);\n    Opal.alias(self, \"kind_of?\", \"is_a?\");\n    \n    Opal.def(self, '$lambda', $Kernel_lambda$38 = function $$lambda() {\n      var $iter = $Kernel_lambda$38.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_lambda$38.$$p = null;\n      \n      \n      if ($iter) $Kernel_lambda$38.$$p = null;;\n      return Opal.lambda(block);;\n    }, $Kernel_lambda$38.$$arity = 0);\n    \n    Opal.def(self, '$load', $Kernel_load$39 = function $$load(file) {\n      var self = this;\n\n      \n      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), \"to_str\");\n      return Opal.load(file);\n    }, $Kernel_load$39.$$arity = 1);\n    \n    Opal.def(self, '$loop', $Kernel_loop$40 = function $$loop() {\n      var $$41, $a, $iter = $Kernel_loop$40.$$p, $yield = $iter || nil, self = this, e = nil;\n\n      if ($iter) $Kernel_loop$40.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"loop\"], ($$41 = function(){var self = $$41.$$s || this;\n\n        return $$$($$($nesting, 'Float'), 'INFINITY')}, $$41.$$s = self, $$41.$$arity = 0, $$41))\n      };\n      while ($truthy(true)) {\n        \n        try {\n          Opal.yieldX($yield, [])\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StopIteration')])) {e = $err;\n            try {\n              return e.$result()\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      };\n      return self;\n    }, $Kernel_loop$40.$$arity = 0);\n    \n    Opal.def(self, '$nil?', $Kernel_nil$ques$42 = function() {\n      var self = this;\n\n      return false\n    }, $Kernel_nil$ques$42.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    \n    Opal.def(self, '$printf', $Kernel_printf$43 = function $$printf($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(args['$any?']())) {\n        self.$print($send(self, 'format', Opal.to_a(args)))};\n      return nil;\n    }, $Kernel_printf$43.$$arity = -1);\n    \n    Opal.def(self, '$proc', $Kernel_proc$44 = function $$proc() {\n      var $iter = $Kernel_proc$44.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_proc$44.$$p = null;\n      \n      \n      if ($iter) $Kernel_proc$44.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"tried to create Proc object without a block\")\n      };\n      block.$$is_lambda = false;\n      return block;\n    }, $Kernel_proc$44.$$arity = 0);\n    \n    Opal.def(self, '$puts', $Kernel_puts$45 = function $$puts($a) {\n      var $post_args, strs, self = this;\n      if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      strs = $post_args;;\n      return $send($gvars.stdout, 'puts', Opal.to_a(strs));\n    }, $Kernel_puts$45.$$arity = -1);\n    \n    Opal.def(self, '$p', $Kernel_p$46 = function $$p($a) {\n      var $post_args, args, $$47, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      $send(args, 'each', [], ($$47 = function(obj){var self = $$47.$$s || this;\n        if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n        \n        if (obj == null) {\n          obj = nil;\n        };\n        return $gvars.stdout.$puts(obj.$inspect());}, $$47.$$s = self, $$47.$$arity = 1, $$47));\n      if ($truthy($rb_le(args.$length(), 1))) {\n        return args['$[]'](0)\n      } else {\n        return args\n      };\n    }, $Kernel_p$46.$$arity = -1);\n    \n    Opal.def(self, '$print', $Kernel_print$48 = function $$print($a) {\n      var $post_args, strs, self = this;\n      if ($gvars.stdout == null) $gvars.stdout = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      strs = $post_args;;\n      return $send($gvars.stdout, 'print', Opal.to_a(strs));\n    }, $Kernel_print$48.$$arity = -1);\n    \n    Opal.def(self, '$warn', $Kernel_warn$49 = function $$warn($a) {\n      var $post_args, strs, $b, self = this;\n      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;\n      if ($gvars.stderr == null) $gvars.stderr = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      strs = $post_args;;\n      if ($truthy(($truthy($b = $gvars.VERBOSE['$nil?']()) ? $b : strs['$empty?']()))) {\n        return nil\n      } else {\n        return $send($gvars.stderr, 'puts', Opal.to_a(strs))\n      };\n    }, $Kernel_warn$49.$$arity = -1);\n    \n    Opal.def(self, '$raise', $Kernel_raise$50 = function $$raise(exception, string, _backtrace) {\n      var self = this;\n      if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n      \n      ;\n      \n      if (string == null) {\n        string = nil;\n      };\n      \n      if (_backtrace == null) {\n        _backtrace = nil;\n      };\n      \n      if (exception == null && $gvars[\"!\"] !== nil) {\n        throw $gvars[\"!\"];\n      }\n      if (exception == null) {\n        exception = $$($nesting, 'RuntimeError').$new();\n      }\n      else if (exception.$$is_string) {\n        exception = $$($nesting, 'RuntimeError').$new(exception);\n      }\n      // using respond_to? and not an undefined check to avoid method_missing matching as true\n      else if (exception.$$is_class && exception['$respond_to?'](\"exception\")) {\n        exception = exception.$exception(string);\n      }\n      else if (exception['$is_a?']($$($nesting, 'Exception'))) {\n        // exception is fine\n      }\n      else {\n        exception = $$($nesting, 'TypeError').$new(\"exception class/object expected\");\n      }\n\n      if ($gvars[\"!\"] !== nil) {\n        Opal.exceptions.push($gvars[\"!\"]);\n      }\n\n      $gvars[\"!\"] = exception;\n\n      throw exception;\n    ;\n    }, $Kernel_raise$50.$$arity = -1);\n    Opal.alias(self, \"fail\", \"raise\");\n    \n    Opal.def(self, '$rand', $Kernel_rand$51 = function $$rand(max) {\n      var self = this;\n\n      \n      ;\n      \n      if (max === undefined) {\n        return $$$($$($nesting, 'Random'), 'DEFAULT').$rand();\n      }\n\n      if (max.$$is_number) {\n        if (max < 0) {\n          max = Math.abs(max);\n        }\n\n        if (max % 1 !== 0) {\n          max = max.$to_i();\n        }\n\n        if (max === 0) {\n          max = undefined;\n        }\n      }\n    ;\n      return $$$($$($nesting, 'Random'), 'DEFAULT').$rand(max);\n    }, $Kernel_rand$51.$$arity = -1);\n    \n    Opal.def(self, '$respond_to?', $Kernel_respond_to$ques$52 = function(name, include_all) {\n      var self = this;\n\n      \n      \n      if (include_all == null) {\n        include_all = false;\n      };\n      if ($truthy(self['$respond_to_missing?'](name, include_all))) {\n        return true};\n      \n      var body = self['$' + name];\n\n      if (typeof(body) === \"function\" && !body.$$stub) {\n        return true;\n      }\n    ;\n      return false;\n    }, $Kernel_respond_to$ques$52.$$arity = -2);\n    \n    Opal.def(self, '$respond_to_missing?', $Kernel_respond_to_missing$ques$53 = function(method_name, include_all) {\n      var self = this;\n\n      \n      \n      if (include_all == null) {\n        include_all = false;\n      };\n      return false;\n    }, $Kernel_respond_to_missing$ques$53.$$arity = -2);\n    \n    Opal.def(self, '$require', $Kernel_require$54 = function $$require(file) {\n      var self = this;\n\n      \n      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), \"to_str\");\n      return Opal.require(file);\n    }, $Kernel_require$54.$$arity = 1);\n    \n    Opal.def(self, '$require_relative', $Kernel_require_relative$55 = function $$require_relative(file) {\n      var self = this;\n\n      \n      $$($nesting, 'Opal')['$try_convert!'](file, $$($nesting, 'String'), \"to_str\");\n      file = $$($nesting, 'File').$expand_path($$($nesting, 'File').$join(Opal.current_file, \"..\", file));\n      return Opal.require(file);\n    }, $Kernel_require_relative$55.$$arity = 1);\n    \n    Opal.def(self, '$require_tree', $Kernel_require_tree$56 = function $$require_tree(path) {\n      var self = this;\n\n      \n      var result = [];\n\n      path = $$($nesting, 'File').$expand_path(path)\n      path = Opal.normalize(path);\n      if (path === '.') path = '';\n      for (var name in Opal.modules) {\n        if ((name)['$start_with?'](path)) {\n          result.push([name, Opal.require(name)]);\n        }\n      }\n\n      return result;\n    \n    }, $Kernel_require_tree$56.$$arity = 1);\n    Opal.alias(self, \"send\", \"__send__\");\n    Opal.alias(self, \"public_send\", \"__send__\");\n    \n    Opal.def(self, '$singleton_class', $Kernel_singleton_class$57 = function $$singleton_class() {\n      var self = this;\n\n      return Opal.get_singleton_class(self);\n    }, $Kernel_singleton_class$57.$$arity = 0);\n    \n    Opal.def(self, '$sleep', $Kernel_sleep$58 = function $$sleep(seconds) {\n      var self = this;\n\n      \n      \n      if (seconds == null) {\n        seconds = nil;\n      };\n      \n      if (seconds === nil) {\n        self.$raise($$($nesting, 'TypeError'), \"can't convert NilClass into time interval\")\n      }\n      if (!seconds.$$is_number) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't convert \" + (seconds.$class()) + \" into time interval\")\n      }\n      if (seconds < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"time interval must be positive\")\n      }\n      var get_time = Opal.global.performance ?\n        function() {return performance.now()} :\n        function() {return new Date()}\n\n      var t = get_time();\n      while (get_time() - t <= seconds * 1000);\n      return seconds;\n    ;\n    }, $Kernel_sleep$58.$$arity = -1);\n    \n    Opal.def(self, '$srand', $Kernel_srand$59 = function $$srand(seed) {\n      var self = this;\n\n      \n      \n      if (seed == null) {\n        seed = $$($nesting, 'Random').$new_seed();\n      };\n      return $$($nesting, 'Random').$srand(seed);\n    }, $Kernel_srand$59.$$arity = -1);\n    \n    Opal.def(self, '$String', $Kernel_String$60 = function $$String(str) {\n      var $a, self = this;\n\n      return ($truthy($a = $$($nesting, 'Opal')['$coerce_to?'](str, $$($nesting, 'String'), \"to_str\")) ? $a : $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), \"to_s\"))\n    }, $Kernel_String$60.$$arity = 1);\n    \n    Opal.def(self, '$tap', $Kernel_tap$61 = function $$tap() {\n      var $iter = $Kernel_tap$61.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Kernel_tap$61.$$p = null;\n      \n      \n      if ($iter) $Kernel_tap$61.$$p = null;;\n      Opal.yield1(block, self);\n      return self;\n    }, $Kernel_tap$61.$$arity = 0);\n    \n    Opal.def(self, '$to_proc', $Kernel_to_proc$62 = function $$to_proc() {\n      var self = this;\n\n      return self\n    }, $Kernel_to_proc$62.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Kernel_to_s$63 = function $$to_s() {\n      var self = this;\n\n      return \"\" + \"#<\" + (self.$class()) + \":0x\" + (self.$__id__().$to_s(16)) + \">\"\n    }, $Kernel_to_s$63.$$arity = 0);\n    \n    Opal.def(self, '$catch', $Kernel_catch$64 = function(sym) {\n      var $iter = $Kernel_catch$64.$$p, $yield = $iter || nil, self = this, e = nil;\n\n      if ($iter) $Kernel_catch$64.$$p = null;\n      try {\n        return Opal.yieldX($yield, []);\n      } catch ($err) {\n        if (Opal.rescue($err, [$$($nesting, 'UncaughtThrowError')])) {e = $err;\n          try {\n            \n            if (e.$sym()['$=='](sym)) {\n              return e.$arg()};\n            return self.$raise();\n          } finally { Opal.pop_exception() }\n        } else { throw $err; }\n      }\n    }, $Kernel_catch$64.$$arity = 1);\n    \n    Opal.def(self, '$throw', $Kernel_throw$65 = function($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return self.$raise($$($nesting, 'UncaughtThrowError'), args);\n    }, $Kernel_throw$65.$$arity = -1);\n    \n    Opal.def(self, '$open', $Kernel_open$66 = function $$open($a) {\n      var $iter = $Kernel_open$66.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Kernel_open$66.$$p = null;\n      \n      \n      if ($iter) $Kernel_open$66.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send($$($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc());\n    }, $Kernel_open$66.$$arity = -1);\n    \n    Opal.def(self, '$yield_self', $Kernel_yield_self$67 = function $$yield_self() {\n      var $$68, $iter = $Kernel_yield_self$67.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Kernel_yield_self$67.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"yield_self\"], ($$68 = function(){var self = $$68.$$s || this;\n\n        return 1}, $$68.$$s = self, $$68.$$arity = 0, $$68))\n      };\n      return Opal.yield1($yield, self);;\n    }, $Kernel_yield_self$67.$$arity = 0);\n  })($nesting[0], $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Object');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return self.$include($$($nesting, 'Kernel'))\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/error\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$raise', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Exception');\n\n    var $nesting = [self].concat($parent_nesting), $Exception_new$1, $Exception_exception$2, $Exception_initialize$3, $Exception_backtrace$4, $Exception_exception$5, $Exception_message$6, $Exception_inspect$7, $Exception_set_backtrace$8, $Exception_to_s$9;\n\n    self.$$prototype.message = nil;\n    \n    var stack_trace_limit;\n    Opal.defs(self, '$new', $Exception_new$1 = function($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var message   = (args.length > 0) ? args[0] : nil;\n      var error     = new self.$$constructor(message);\n      error.name    = self.$$name;\n      error.message = message;\n      Opal.send(error, error.$initialize, args);\n\n      // Error.captureStackTrace() will use .name and .toString to build the\n      // first line of the stack trace so it must be called after the error\n      // has been initialized.\n      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html\n      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {\n        // Passing Kernel.raise will cut the stack trace from that point above\n        Error.captureStackTrace(error, stack_trace_limit);\n      }\n\n      return error;\n    ;\n    }, $Exception_new$1.$$arity = -1);\n    stack_trace_limit = self.$new;\n    Opal.defs(self, '$exception', $Exception_exception$2 = function $$exception($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send(self, 'new', Opal.to_a(args));\n    }, $Exception_exception$2.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $Exception_initialize$3 = function $$initialize($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return self.message = (args.length > 0) ? args[0] : nil;;\n    }, $Exception_initialize$3.$$arity = -1);\n    \n    Opal.def(self, '$backtrace', $Exception_backtrace$4 = function $$backtrace() {\n      var self = this;\n\n      \n      if (self.backtrace) {\n        // nil is a valid backtrace\n        return self.backtrace;\n      }\n\n      var backtrace = self.stack;\n\n      if (typeof(backtrace) === 'string') {\n        return backtrace.split(\"\\n\").slice(0, 15);\n      }\n      else if (backtrace) {\n        return backtrace.slice(0, 15);\n      }\n\n      return [];\n    \n    }, $Exception_backtrace$4.$$arity = 0);\n    \n    Opal.def(self, '$exception', $Exception_exception$5 = function $$exception(str) {\n      var self = this;\n\n      \n      \n      if (str == null) {\n        str = nil;\n      };\n      \n      if (str === nil || self === str) {\n        return self;\n      }\n\n      var cloned = self.$clone();\n      cloned.message = str;\n      return cloned;\n    ;\n    }, $Exception_exception$5.$$arity = -1);\n    \n    Opal.def(self, '$message', $Exception_message$6 = function $$message() {\n      var self = this;\n\n      return self.$to_s()\n    }, $Exception_message$6.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $Exception_inspect$7 = function $$inspect() {\n      var self = this, as_str = nil;\n\n      \n      as_str = self.$to_s();\n      if ($truthy(as_str['$empty?']())) {\n        return self.$class().$to_s()\n      } else {\n        return \"\" + \"#<\" + (self.$class().$to_s()) + \": \" + (self.$to_s()) + \">\"\n      };\n    }, $Exception_inspect$7.$$arity = 0);\n    \n    Opal.def(self, '$set_backtrace', $Exception_set_backtrace$8 = function $$set_backtrace(backtrace) {\n      var self = this;\n\n      \n      var valid = true, i, ii;\n\n      if (backtrace === nil) {\n        self.backtrace = nil;\n      } else if (backtrace.$$is_string) {\n        self.backtrace = [backtrace];\n      } else {\n        if (backtrace.$$is_array) {\n          for (i = 0, ii = backtrace.length; i < ii; i++) {\n            if (!backtrace[i].$$is_string) {\n              valid = false;\n              break;\n            }\n          }\n        } else {\n          valid = false;\n        }\n\n        if (valid === false) {\n          self.$raise($$($nesting, 'TypeError'), \"backtrace must be Array of String\")\n        }\n\n        self.backtrace = backtrace;\n      }\n\n      return backtrace;\n    \n    }, $Exception_set_backtrace$8.$$arity = 1);\n    return (Opal.def(self, '$to_s', $Exception_to_s$9 = function $$to_s() {\n      var $a, $b, self = this;\n\n      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())\n    }, $Exception_to_s$9.$$arity = 0), nil) && 'to_s';\n  })($nesting[0], Error, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'ScriptError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SyntaxError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'LoadError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NotImplementedError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SystemExit');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NoMemoryError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SignalException');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Interrupt');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SecurityError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StandardError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'Exception'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'EncodingError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'ZeroDivisionError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NameError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NoMethodError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'NameError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'RuntimeError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'FrozenError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'RuntimeError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'LocalJumpError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'TypeError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'ArgumentError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IndexError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StopIteration');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'IndexError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'KeyError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'IndexError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'RangeError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'FloatDomainError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'RangeError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IOError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'SystemCallError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Errno');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'EINVAL');\n\n      var $nesting = [self].concat($parent_nesting), $EINVAL_new$10;\n\n      return (Opal.defs(self, '$new', $EINVAL_new$10 = function(name) {\n        var $iter = $EINVAL_new$10.$$p, $yield = $iter || nil, self = this, message = nil;\n\n        if ($iter) $EINVAL_new$10.$$p = null;\n        \n        \n        if (name == null) {\n          name = nil;\n        };\n        message = \"Invalid argument\";\n        if ($truthy(name)) {\n          message = $rb_plus(message, \"\" + \" - \" + (name))};\n        return $send(self, Opal.find_super_dispatcher(self, 'new', $EINVAL_new$10, false, self.$$class.$$prototype), [message], null);\n      }, $EINVAL_new$10.$$arity = -1), nil) && 'new'\n    })($nesting[0], $$($nesting, 'SystemCallError'), $nesting)\n  })($nesting[0], $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'UncaughtThrowError');\n\n    var $nesting = [self].concat($parent_nesting), $UncaughtThrowError_initialize$11;\n\n    self.$$prototype.sym = nil;\n    \n    self.$attr_reader(\"sym\", \"arg\");\n    return (Opal.def(self, '$initialize', $UncaughtThrowError_initialize$11 = function $$initialize(args) {\n      var $iter = $UncaughtThrowError_initialize$11.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $UncaughtThrowError_initialize$11.$$p = null;\n      \n      self.sym = args['$[]'](0);\n      if ($truthy($rb_gt(args.$length(), 1))) {\n        self.arg = args['$[]'](1)};\n      return $send(self, Opal.find_super_dispatcher(self, 'initialize', $UncaughtThrowError_initialize$11, false), [\"\" + \"uncaught throw \" + (self.sym.$inspect())], null);\n    }, $UncaughtThrowError_initialize$11.$$arity = 1), nil) && 'initialize';\n  })($nesting[0], $$($nesting, 'ArgumentError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NameError');\n\n    var $nesting = [self].concat($parent_nesting), $NameError_initialize$12;\n\n    \n    self.$attr_reader(\"name\");\n    return (Opal.def(self, '$initialize', $NameError_initialize$12 = function $$initialize(message, name) {\n      var $iter = $NameError_initialize$12.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $NameError_initialize$12.$$p = null;\n      \n      \n      if (name == null) {\n        name = nil;\n      };\n      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NameError_initialize$12, false), [message], null);\n      return (self.name = name);\n    }, $NameError_initialize$12.$$arity = -2), nil) && 'initialize';\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NoMethodError');\n\n    var $nesting = [self].concat($parent_nesting), $NoMethodError_initialize$13;\n\n    \n    self.$attr_reader(\"args\");\n    return (Opal.def(self, '$initialize', $NoMethodError_initialize$13 = function $$initialize(message, name, args) {\n      var $iter = $NoMethodError_initialize$13.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $NoMethodError_initialize$13.$$p = null;\n      \n      \n      if (name == null) {\n        name = nil;\n      };\n      \n      if (args == null) {\n        args = [];\n      };\n      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NoMethodError_initialize$13, false), [message, name], null);\n      return (self.args = args);\n    }, $NoMethodError_initialize$13.$$arity = -2), nil) && 'initialize';\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StopIteration');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return self.$attr_reader(\"result\")\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'KeyError');\n\n    var $nesting = [self].concat($parent_nesting), $KeyError_initialize$14, $KeyError_receiver$15, $KeyError_key$16;\n\n    self.$$prototype.receiver = self.$$prototype.key = nil;\n    \n    \n    Opal.def(self, '$initialize', $KeyError_initialize$14 = function $$initialize(message, $kwargs) {\n      var receiver, key, $iter = $KeyError_initialize$14.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $KeyError_initialize$14.$$p = null;\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      receiver = $kwargs.$$smap[\"receiver\"];\n      if (receiver == null) {\n        receiver = nil\n      };\n      \n      key = $kwargs.$$smap[\"key\"];\n      if (key == null) {\n        key = nil\n      };\n      $send(self, Opal.find_super_dispatcher(self, 'initialize', $KeyError_initialize$14, false), [message], null);\n      self.receiver = receiver;\n      return (self.key = key);\n    }, $KeyError_initialize$14.$$arity = -2);\n    \n    Opal.def(self, '$receiver', $KeyError_receiver$15 = function $$receiver() {\n      var $a, self = this;\n\n      return ($truthy($a = self.receiver) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"no receiver is available\"))\n    }, $KeyError_receiver$15.$$arity = 0);\n    return (Opal.def(self, '$key', $KeyError_key$16 = function $$key() {\n      var $a, self = this;\n\n      return ($truthy($a = self.key) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"no key is available\"))\n    }, $KeyError_key$16.$$arity = 0), nil) && 'key';\n  })($nesting[0], null, $nesting);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'JS');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Error');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return nil\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/constants\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  \n  Opal.const_set($nesting[0], 'RUBY_PLATFORM', \"opal\");\n  Opal.const_set($nesting[0], 'RUBY_ENGINE', \"opal\");\n  Opal.const_set($nesting[0], 'RUBY_VERSION', \"2.5.1\");\n  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', \"0.11.99.dev\");\n  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', \"2018-12-25\");\n  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);\n  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);\n  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', \"opal - Copyright (C) 2013-2018 Adam Beynon and the Opal contributors\");\n  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', \"\" + \"opal \" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + \" (\" + ($$($nesting, 'RUBY_RELEASE_DATE')) + \" revision \" + ($$($nesting, 'RUBY_REVISION')) + \")\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"opal/base\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"corelib/runtime\");\n  self.$require(\"corelib/helpers\");\n  self.$require(\"corelib/module\");\n  self.$require(\"corelib/class\");\n  self.$require(\"corelib/basic_object\");\n  self.$require(\"corelib/kernel\");\n  self.$require(\"corelib/error\");\n  return self.$require(\"corelib/constants\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/nil\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$raise', '$name', '$new', '$>', '$length', '$Rational']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NilClass');\n\n    var $nesting = [self].concat($parent_nesting), $NilClass_$excl$2, $NilClass_$$3, $NilClass_$$4, $NilClass_$$5, $NilClass_$eq_eq$6, $NilClass_dup$7, $NilClass_clone$8, $NilClass_inspect$9, $NilClass_nil$ques$10, $NilClass_singleton_class$11, $NilClass_to_a$12, $NilClass_to_h$13, $NilClass_to_i$14, $NilClass_to_s$15, $NilClass_to_c$16, $NilClass_rationalize$17, $NilClass_to_r$18, $NilClass_instance_variables$19;\n\n    \n    self.$$prototype.$$meta = self;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$1.$$arity = 0);\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$!', $NilClass_$excl$2 = function() {\n      var self = this;\n\n      return true\n    }, $NilClass_$excl$2.$$arity = 0);\n    \n    Opal.def(self, '$&', $NilClass_$$3 = function(other) {\n      var self = this;\n\n      return false\n    }, $NilClass_$$3.$$arity = 1);\n    \n    Opal.def(self, '$|', $NilClass_$$4 = function(other) {\n      var self = this;\n\n      return other !== false && other !== nil;\n    }, $NilClass_$$4.$$arity = 1);\n    \n    Opal.def(self, '$^', $NilClass_$$5 = function(other) {\n      var self = this;\n\n      return other !== false && other !== nil;\n    }, $NilClass_$$5.$$arity = 1);\n    \n    Opal.def(self, '$==', $NilClass_$eq_eq$6 = function(other) {\n      var self = this;\n\n      return other === nil;\n    }, $NilClass_$eq_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$dup', $NilClass_dup$7 = function $$dup() {\n      var self = this;\n\n      return nil\n    }, $NilClass_dup$7.$$arity = 0);\n    \n    Opal.def(self, '$clone', $NilClass_clone$8 = function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      return nil;\n    }, $NilClass_clone$8.$$arity = -1);\n    \n    Opal.def(self, '$inspect', $NilClass_inspect$9 = function $$inspect() {\n      var self = this;\n\n      return \"nil\"\n    }, $NilClass_inspect$9.$$arity = 0);\n    \n    Opal.def(self, '$nil?', $NilClass_nil$ques$10 = function() {\n      var self = this;\n\n      return true\n    }, $NilClass_nil$ques$10.$$arity = 0);\n    \n    Opal.def(self, '$singleton_class', $NilClass_singleton_class$11 = function $$singleton_class() {\n      var self = this;\n\n      return $$($nesting, 'NilClass')\n    }, $NilClass_singleton_class$11.$$arity = 0);\n    \n    Opal.def(self, '$to_a', $NilClass_to_a$12 = function $$to_a() {\n      var self = this;\n\n      return []\n    }, $NilClass_to_a$12.$$arity = 0);\n    \n    Opal.def(self, '$to_h', $NilClass_to_h$13 = function $$to_h() {\n      var self = this;\n\n      return Opal.hash();\n    }, $NilClass_to_h$13.$$arity = 0);\n    \n    Opal.def(self, '$to_i', $NilClass_to_i$14 = function $$to_i() {\n      var self = this;\n\n      return 0\n    }, $NilClass_to_i$14.$$arity = 0);\n    Opal.alias(self, \"to_f\", \"to_i\");\n    \n    Opal.def(self, '$to_s', $NilClass_to_s$15 = function $$to_s() {\n      var self = this;\n\n      return \"\"\n    }, $NilClass_to_s$15.$$arity = 0);\n    \n    Opal.def(self, '$to_c', $NilClass_to_c$16 = function $$to_c() {\n      var self = this;\n\n      return $$($nesting, 'Complex').$new(0, 0)\n    }, $NilClass_to_c$16.$$arity = 0);\n    \n    Opal.def(self, '$rationalize', $NilClass_rationalize$17 = function $$rationalize($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy($rb_gt(args.$length(), 1))) {\n        self.$raise($$($nesting, 'ArgumentError'))};\n      return self.$Rational(0, 1);\n    }, $NilClass_rationalize$17.$$arity = -1);\n    \n    Opal.def(self, '$to_r', $NilClass_to_r$18 = function $$to_r() {\n      var self = this;\n\n      return self.$Rational(0, 1)\n    }, $NilClass_to_r$18.$$arity = 0);\n    return (Opal.def(self, '$instance_variables', $NilClass_instance_variables$19 = function $$instance_variables() {\n      var self = this;\n\n      return []\n    }, $NilClass_instance_variables$19.$$arity = 0), nil) && 'instance_variables';\n  })($nesting[0], null, $nesting);\n  return Opal.const_set($nesting[0], 'NIL', nil);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/boolean\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$raise', '$name']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Boolean');\n\n    var $nesting = [self].concat($parent_nesting), $Boolean___id__$2, $Boolean_$excl$3, $Boolean_$$4, $Boolean_$$5, $Boolean_$$6, $Boolean_$eq_eq$7, $Boolean_singleton_class$8, $Boolean_to_s$9, $Boolean_dup$10, $Boolean_clone$11;\n\n    \n    Opal.defineProperty(self.$$prototype, '$$is_boolean', true);\n    Opal.defineProperty(self.$$prototype, '$$meta', self);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$1.$$arity = 0);\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$__id__', $Boolean___id__$2 = function $$__id__() {\n      var self = this;\n\n      return self.valueOf() ? 2 : 0;\n    }, $Boolean___id__$2.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    \n    Opal.def(self, '$!', $Boolean_$excl$3 = function() {\n      var self = this;\n\n      return self != true;\n    }, $Boolean_$excl$3.$$arity = 0);\n    \n    Opal.def(self, '$&', $Boolean_$$4 = function(other) {\n      var self = this;\n\n      return (self == true) ? (other !== false && other !== nil) : false;\n    }, $Boolean_$$4.$$arity = 1);\n    \n    Opal.def(self, '$|', $Boolean_$$5 = function(other) {\n      var self = this;\n\n      return (self == true) ? true : (other !== false && other !== nil);\n    }, $Boolean_$$5.$$arity = 1);\n    \n    Opal.def(self, '$^', $Boolean_$$6 = function(other) {\n      var self = this;\n\n      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);\n    }, $Boolean_$$6.$$arity = 1);\n    \n    Opal.def(self, '$==', $Boolean_$eq_eq$7 = function(other) {\n      var self = this;\n\n      return (self == true) === other.valueOf();\n    }, $Boolean_$eq_eq$7.$$arity = 1);\n    Opal.alias(self, \"equal?\", \"==\");\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$singleton_class', $Boolean_singleton_class$8 = function $$singleton_class() {\n      var self = this;\n\n      return $$($nesting, 'Boolean')\n    }, $Boolean_singleton_class$8.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Boolean_to_s$9 = function $$to_s() {\n      var self = this;\n\n      return (self == true) ? 'true' : 'false';\n    }, $Boolean_to_s$9.$$arity = 0);\n    \n    Opal.def(self, '$dup', $Boolean_dup$10 = function $$dup() {\n      var self = this;\n\n      return self\n    }, $Boolean_dup$10.$$arity = 0);\n    return (Opal.def(self, '$clone', $Boolean_clone$11 = function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      return self;\n    }, $Boolean_clone$11.$$arity = -1), nil) && 'clone';\n  })($nesting[0], Boolean, $nesting);\n  Opal.const_set($nesting[0], 'TrueClass', $$($nesting, 'Boolean'));\n  Opal.const_set($nesting[0], 'FalseClass', $$($nesting, 'Boolean'));\n  Opal.const_set($nesting[0], 'TRUE', true);\n  return Opal.const_set($nesting[0], 'FALSE', false);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/comparable\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$normalize', '$raise', '$class']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Comparable');\n\n    var $nesting = [self].concat($parent_nesting), $Comparable_normalize$1, $Comparable_$eq_eq$2, $Comparable_$gt$3, $Comparable_$gt_eq$4, $Comparable_$lt$5, $Comparable_$lt_eq$6, $Comparable_between$ques$7, $Comparable_clamp$8;\n\n    \n    Opal.defs(self, '$normalize', $Comparable_normalize$1 = function $$normalize(what) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](what))) {\n        return what};\n      if ($truthy($rb_gt(what, 0))) {\n        return 1};\n      if ($truthy($rb_lt(what, 0))) {\n        return -1};\n      return 0;\n    }, $Comparable_normalize$1.$$arity = 1);\n    \n    Opal.def(self, '$==', $Comparable_$eq_eq$2 = function(other) {\n      var self = this, cmp = nil;\n\n      try {\n        \n        if ($truthy(self['$equal?'](other))) {\n          return true};\n        \n      if (self[\"$<=>\"] == Opal.Kernel[\"$<=>\"]) {\n        return false;\n      }\n\n      // check for infinite recursion\n      if (self.$$comparable) {\n        delete self.$$comparable;\n        return false;\n      }\n    ;\n        if ($truthy((cmp = self['$<=>'](other)))) {\n        } else {\n          return false\n        };\n        return $$($nesting, 'Comparable').$normalize(cmp) == 0;\n      } catch ($err) {\n        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n          try {\n            return false\n          } finally { Opal.pop_exception() }\n        } else { throw $err; }\n      }\n    }, $Comparable_$eq_eq$2.$$arity = 1);\n    \n    Opal.def(self, '$>', $Comparable_$gt$3 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) > 0;\n    }, $Comparable_$gt$3.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Comparable_$gt_eq$4 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) >= 0;\n    }, $Comparable_$gt_eq$4.$$arity = 1);\n    \n    Opal.def(self, '$<', $Comparable_$lt$5 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) < 0;\n    }, $Comparable_$lt$5.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Comparable_$lt_eq$6 = function(other) {\n      var self = this, cmp = nil;\n\n      \n      if ($truthy((cmp = self['$<=>'](other)))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")\n      };\n      return $$($nesting, 'Comparable').$normalize(cmp) <= 0;\n    }, $Comparable_$lt_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$between?', $Comparable_between$ques$7 = function(min, max) {\n      var self = this;\n\n      \n      if ($rb_lt(self, min)) {\n        return false};\n      if ($rb_gt(self, max)) {\n        return false};\n      return true;\n    }, $Comparable_between$ques$7.$$arity = 2);\n    \n    Opal.def(self, '$clamp', $Comparable_clamp$8 = function $$clamp(min, max) {\n      var self = this, cmp = nil;\n\n      \n      cmp = min['$<=>'](max);\n      if ($truthy(cmp)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (min.$class()) + \" with \" + (max.$class()) + \" failed\")\n      };\n      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(cmp), 0))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"min argument must be smaller than max argument\")};\n      if ($truthy($rb_lt($$($nesting, 'Comparable').$normalize(self['$<=>'](min)), 0))) {\n        return min};\n      if ($truthy($rb_gt($$($nesting, 'Comparable').$normalize(self['$<=>'](max)), 0))) {\n        return max};\n      return self;\n    }, $Comparable_clamp$8.$$arity = 2);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/regexp\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'RegexpError');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return nil\n  })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Regexp');\n\n    var $nesting = [self].concat($parent_nesting), $Regexp_$eq_eq$6, $Regexp_$eq_eq_eq$7, $Regexp_$eq_tilde$8, $Regexp_inspect$9, $Regexp_match$10, $Regexp_match$ques$11, $Regexp_$$12, $Regexp_source$13, $Regexp_options$14, $Regexp_casefold$ques$15;\n\n    \n    Opal.const_set($nesting[0], 'IGNORECASE', 1);\n    Opal.const_set($nesting[0], 'EXTENDED', 2);\n    Opal.const_set($nesting[0], 'MULTILINE', 4);\n    Opal.defineProperty(self.$$prototype, '$$is_regexp', true);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1, $escape$2, $last_match$3, $union$4, $new$5;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var $iter = $allocate$1.$$p, $yield = $iter || nil, self = this, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $allocate$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        allocated = $send(self, Opal.find_super_dispatcher(self, 'allocate', $allocate$1, false), $zuper, $iter);\n        allocated.uninitialized = true;\n        return allocated;\n      }, $allocate$1.$$arity = 0);\n      \n      Opal.def(self, '$escape', $escape$2 = function $$escape(string) {\n        var self = this;\n\n        return Opal.escape_regexp(string);\n      }, $escape$2.$$arity = 1);\n      \n      Opal.def(self, '$last_match', $last_match$3 = function $$last_match(n) {\n        var self = this;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        \n        if (n == null) {\n          n = nil;\n        };\n        if ($truthy(n['$nil?']())) {\n          return $gvars[\"~\"]\n        } else {\n          return $gvars[\"~\"]['$[]'](n)\n        };\n      }, $last_match$3.$$arity = -1);\n      Opal.alias(self, \"quote\", \"escape\");\n      \n      Opal.def(self, '$union', $union$4 = function $$union($a) {\n        var $post_args, parts, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        parts = $post_args;;\n        \n        var is_first_part_array, quoted_validated, part, options, each_part_options;\n        if (parts.length == 0) {\n          return /(?!)/;\n        }\n        // return fast if there's only one element\n        if (parts.length == 1 && parts[0].$$is_regexp) {\n          return parts[0];\n        }\n        // cover the 2 arrays passed as arguments case\n        is_first_part_array = parts[0].$$is_array;\n        if (parts.length > 1 && is_first_part_array) {\n          self.$raise($$($nesting, 'TypeError'), \"no implicit conversion of Array into String\")\n        }\n        // deal with splat issues (related to https://github.com/opal/opal/issues/858)\n        if (is_first_part_array) {\n          parts = parts[0];\n        }\n        options = undefined;\n        quoted_validated = [];\n        for (var i=0; i < parts.length; i++) {\n          part = parts[i];\n          if (part.$$is_string) {\n            quoted_validated.push(self.$escape(part));\n          }\n          else if (part.$$is_regexp) {\n            each_part_options = (part).$options();\n            if (options != undefined && options != each_part_options) {\n              self.$raise($$($nesting, 'TypeError'), \"All expressions must use the same options\")\n            }\n            options = each_part_options;\n            quoted_validated.push('('+part.source+')');\n          }\n          else {\n            quoted_validated.push(self.$escape((part).$to_str()));\n          }\n        }\n      ;\n        return self.$new((quoted_validated).$join(\"|\"), options);\n      }, $union$4.$$arity = -1);\n      return (Opal.def(self, '$new', $new$5 = function(regexp, options) {\n        var self = this;\n\n        \n        ;\n        \n        if (regexp.$$is_regexp) {\n          return new RegExp(regexp);\n        }\n\n        regexp = $$($nesting, 'Opal')['$coerce_to!'](regexp, $$($nesting, 'String'), \"to_str\");\n\n        if (regexp.charAt(regexp.length - 1) === '\\\\' && regexp.charAt(regexp.length - 2) !== '\\\\') {\n          self.$raise($$($nesting, 'RegexpError'), \"\" + \"too short escape sequence: /\" + (regexp) + \"/\")\n        }\n\n        if (options === undefined || options['$!']()) {\n          return new RegExp(regexp);\n        }\n\n        if (options.$$is_number) {\n          var temp = '';\n          if ($$($nesting, 'IGNORECASE') & options) { temp += 'i'; }\n          if ($$($nesting, 'MULTILINE')  & options) { temp += 'm'; }\n          options = temp;\n        }\n        else {\n          options = 'i';\n        }\n\n        return new RegExp(regexp, options);\n      ;\n      }, $new$5.$$arity = -2), nil) && 'new';\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$==', $Regexp_$eq_eq$6 = function(other) {\n      var self = this;\n\n      return other instanceof RegExp && self.toString() === other.toString();\n    }, $Regexp_$eq_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$===', $Regexp_$eq_eq_eq$7 = function(string) {\n      var self = this;\n\n      return self.$match($$($nesting, 'Opal')['$coerce_to?'](string, $$($nesting, 'String'), \"to_str\")) !== nil\n    }, $Regexp_$eq_eq_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$=~', $Regexp_$eq_tilde$8 = function(string) {\n      var $a, self = this;\n      if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n      return ($truthy($a = self.$match(string)) ? $gvars[\"~\"].$begin(0) : $a)\n    }, $Regexp_$eq_tilde$8.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$inspect', $Regexp_inspect$9 = function $$inspect() {\n      var self = this;\n\n      \n      var regexp_format = /^\\/(.*)\\/([^\\/]*)$/;\n      var value = self.toString();\n      var matches = regexp_format.exec(value);\n      if (matches) {\n        var regexp_pattern = matches[1];\n        var regexp_flags = matches[2];\n        var chars = regexp_pattern.split('');\n        var chars_length = chars.length;\n        var char_escaped = false;\n        var regexp_pattern_escaped = '';\n        for (var i = 0; i < chars_length; i++) {\n          var current_char = chars[i];\n          if (!char_escaped && current_char == '/') {\n            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\\\');\n          }\n          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);\n          if (current_char == '\\\\') {\n            if (char_escaped) {\n              // does not over escape\n              char_escaped = false;\n            } else {\n              char_escaped = true;\n            }\n          } else {\n            char_escaped = false;\n          }\n        }\n        return '/' + regexp_pattern_escaped + '/' + regexp_flags;\n      } else {\n        return value;\n      }\n    \n    }, $Regexp_inspect$9.$$arity = 0);\n    \n    Opal.def(self, '$match', $Regexp_match$10 = function $$match(string, pos) {\n      var $iter = $Regexp_match$10.$$p, block = $iter || nil, self = this;\n      if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n      if ($iter) $Regexp_match$10.$$p = null;\n      \n      \n      if ($iter) $Regexp_match$10.$$p = null;;\n      ;\n      \n      if (self.uninitialized) {\n        self.$raise($$($nesting, 'TypeError'), \"uninitialized Regexp\")\n      }\n\n      if (pos === undefined) {\n        if (string === nil) return ($gvars[\"~\"] = nil);\n        var m = self.exec($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\"));\n        if (m) {\n          ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(self, m));\n          return block === nil ? $gvars[\"~\"] : Opal.yield1(block, $gvars[\"~\"]);\n        } else {\n          return ($gvars[\"~\"] = nil);\n        }\n      }\n\n      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), \"to_int\");\n\n      if (string === nil) {\n        return ($gvars[\"~\"] = nil);\n      }\n\n      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\");\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return ($gvars[\"~\"] = nil);\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      while (true) {\n        md = re.exec(string);\n        if (md === null) {\n          return ($gvars[\"~\"] = nil);\n        }\n        if (md.index >= pos) {\n          ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(re, md));\n          return block === nil ? $gvars[\"~\"] : Opal.yield1(block, $gvars[\"~\"]);\n        }\n        re.lastIndex = md.index + 1;\n      }\n    ;\n    }, $Regexp_match$10.$$arity = -2);\n    \n    Opal.def(self, '$match?', $Regexp_match$ques$11 = function(string, pos) {\n      var self = this;\n\n      \n      ;\n      \n      if (self.uninitialized) {\n        self.$raise($$($nesting, 'TypeError'), \"uninitialized Regexp\")\n      }\n\n      if (pos === undefined) {\n        return string === nil ? false : self.test($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\"));\n      }\n\n      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), \"to_int\");\n\n      if (string === nil) {\n        return false;\n      }\n\n      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), \"to_str\");\n\n      if (pos < 0) {\n        pos += string.length;\n        if (pos < 0) {\n          return false;\n        }\n      }\n\n      // global RegExp maintains state, so not using self/this\n      var md, re = Opal.global_regexp(self);\n\n      md = re.exec(string);\n      if (md === null || md.index < pos) {\n        return false;\n      } else {\n        return true;\n      }\n    ;\n    }, $Regexp_match$ques$11.$$arity = -2);\n    \n    Opal.def(self, '$~', $Regexp_$$12 = function() {\n      var self = this;\n      if ($gvars._ == null) $gvars._ = nil;\n\n      return self['$=~']($gvars._)\n    }, $Regexp_$$12.$$arity = 0);\n    \n    Opal.def(self, '$source', $Regexp_source$13 = function $$source() {\n      var self = this;\n\n      return self.source;\n    }, $Regexp_source$13.$$arity = 0);\n    \n    Opal.def(self, '$options', $Regexp_options$14 = function $$options() {\n      var self = this;\n\n      \n      if (self.uninitialized) {\n        self.$raise($$($nesting, 'TypeError'), \"uninitialized Regexp\")\n      }\n      var result = 0;\n      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx\n      if (self.multiline) {\n        result |= $$($nesting, 'MULTILINE');\n      }\n      if (self.ignoreCase) {\n        result |= $$($nesting, 'IGNORECASE');\n      }\n      return result;\n    \n    }, $Regexp_options$14.$$arity = 0);\n    \n    Opal.def(self, '$casefold?', $Regexp_casefold$ques$15 = function() {\n      var self = this;\n\n      return self.ignoreCase;\n    }, $Regexp_casefold$ques$15.$$arity = 0);\n    return Opal.alias(self, \"to_s\", \"source\");\n  })($nesting[0], RegExp, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'MatchData');\n\n    var $nesting = [self].concat($parent_nesting), $MatchData_initialize$16, $MatchData_$$$17, $MatchData_offset$18, $MatchData_$eq_eq$19, $MatchData_begin$20, $MatchData_end$21, $MatchData_captures$22, $MatchData_inspect$23, $MatchData_length$24, $MatchData_to_a$25, $MatchData_to_s$26, $MatchData_values_at$27;\n\n    self.$$prototype.matches = nil;\n    \n    self.$attr_reader(\"post_match\", \"pre_match\", \"regexp\", \"string\");\n    \n    Opal.def(self, '$initialize', $MatchData_initialize$16 = function $$initialize(regexp, match_groups) {\n      var self = this;\n\n      \n      $gvars[\"~\"] = self;\n      self.regexp = regexp;\n      self.begin = match_groups.index;\n      self.string = match_groups.input;\n      self.pre_match = match_groups.input.slice(0, match_groups.index);\n      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);\n      self.matches = [];\n      \n      for (var i = 0, length = match_groups.length; i < length; i++) {\n        var group = match_groups[i];\n\n        if (group == null) {\n          self.matches.push(nil);\n        }\n        else {\n          self.matches.push(group);\n        }\n      }\n    ;\n    }, $MatchData_initialize$16.$$arity = 2);\n    \n    Opal.def(self, '$[]', $MatchData_$$$17 = function($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send(self.matches, '[]', Opal.to_a(args));\n    }, $MatchData_$$$17.$$arity = -1);\n    \n    Opal.def(self, '$offset', $MatchData_offset$18 = function $$offset(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"MatchData#offset only supports 0th element\")\n      }\n      return [self.begin, self.begin + self.matches[n].length];\n    \n    }, $MatchData_offset$18.$$arity = 1);\n    \n    Opal.def(self, '$==', $MatchData_$eq_eq$19 = function(other) {\n      var $a, $b, $c, $d, self = this;\n\n      \n      if ($truthy($$($nesting, 'MatchData')['$==='](other))) {\n      } else {\n        return false\n      };\n      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);\n    }, $MatchData_$eq_eq$19.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$begin', $MatchData_begin$20 = function $$begin(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"MatchData#begin only supports 0th element\")\n      }\n      return self.begin;\n    \n    }, $MatchData_begin$20.$$arity = 1);\n    \n    Opal.def(self, '$end', $MatchData_end$21 = function $$end(n) {\n      var self = this;\n\n      \n      if (n !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"MatchData#end only supports 0th element\")\n      }\n      return self.begin + self.matches[n].length;\n    \n    }, $MatchData_end$21.$$arity = 1);\n    \n    Opal.def(self, '$captures', $MatchData_captures$22 = function $$captures() {\n      var self = this;\n\n      return self.matches.slice(1)\n    }, $MatchData_captures$22.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $MatchData_inspect$23 = function $$inspect() {\n      var self = this;\n\n      \n      var str = \"#<MatchData \" + (self.matches[0]).$inspect();\n\n      for (var i = 1, length = self.matches.length; i < length; i++) {\n        str += \" \" + i + \":\" + (self.matches[i]).$inspect();\n      }\n\n      return str + \">\";\n    \n    }, $MatchData_inspect$23.$$arity = 0);\n    \n    Opal.def(self, '$length', $MatchData_length$24 = function $$length() {\n      var self = this;\n\n      return self.matches.length\n    }, $MatchData_length$24.$$arity = 0);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$to_a', $MatchData_to_a$25 = function $$to_a() {\n      var self = this;\n\n      return self.matches\n    }, $MatchData_to_a$25.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $MatchData_to_s$26 = function $$to_s() {\n      var self = this;\n\n      return self.matches[0]\n    }, $MatchData_to_s$26.$$arity = 0);\n    return (Opal.def(self, '$values_at', $MatchData_values_at$27 = function $$values_at($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var i, a, index, values = [];\n\n      for (i = 0; i < args.length; i++) {\n\n        if (args[i].$$is_range) {\n          a = (args[i]).$to_a();\n          a.unshift(i, 1);\n          Array.prototype.splice.apply(args, a);\n        }\n\n        index = $$($nesting, 'Opal')['$coerce_to!'](args[i], $$($nesting, 'Integer'), \"to_int\");\n\n        if (index < 0) {\n          index += self.matches.length;\n          if (index < 0) {\n            values.push(nil);\n            continue;\n          }\n        }\n\n        values.push(self.matches[index]);\n      }\n\n      return values;\n    ;\n    }, $MatchData_values_at$27.$$arity = -1), nil) && 'values_at';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/string\"] = function(Opal) {\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$force_encoding', '$casecmp', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$class', '$match', '$match?', '$captures', '$proc', '$succ', '$escape']);\n  \n  self.$require(\"corelib/comparable\");\n  self.$require(\"corelib/regexp\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String___id__$1, $String_try_convert$2, $String_new$3, $String_initialize$4, $String_$percent$5, $String_$$6, $String_$plus$7, $String_$lt_eq_gt$8, $String_$eq_eq$9, $String_$eq_tilde$10, $String_$$$11, $String_b$12, $String_capitalize$13, $String_casecmp$14, $String_casecmp$ques$15, $String_center$16, $String_chars$17, $String_chomp$18, $String_chop$19, $String_chr$20, $String_clone$21, $String_dup$22, $String_count$23, $String_delete$24, $String_delete_prefix$25, $String_delete_suffix$26, $String_downcase$27, $String_each_char$28, $String_each_line$30, $String_empty$ques$31, $String_end_with$ques$32, $String_gsub$33, $String_hash$34, $String_hex$35, $String_include$ques$36, $String_index$37, $String_inspect$38, $String_intern$39, $String_lines$40, $String_length$41, $String_ljust$42, $String_lstrip$43, $String_ascii_only$ques$44, $String_match$45, $String_match$ques$46, $String_next$47, $String_oct$48, $String_ord$49, $String_partition$50, $String_reverse$51, $String_rindex$52, $String_rjust$53, $String_rpartition$54, $String_rstrip$55, $String_scan$56, $String_split$57, $String_squeeze$58, $String_start_with$ques$59, $String_strip$60, $String_sub$61, $String_sum$62, $String_swapcase$63, $String_to_f$64, $String_to_i$65, $String_to_proc$66, $String_to_s$68, $String_tr$69, $String_tr_s$70, $String_upcase$71, $String_upto$72, $String_instance_variables$73, $String__load$74, $String_unicode_normalize$75, $String_unicode_normalized$ques$76, $String_unpack$77, $String_unpack1$78;\n\n    \n    self.$include($$($nesting, 'Comparable'));\n    \n    Opal.defineProperty(self.$$prototype, '$$is_string', true);\n\n    Opal.defineProperty(self.$$prototype, '$$cast', function(string) {\n      var klass = this.$$class;\n      if (klass.$$constructor === String) {\n        return string;\n      } else {\n        return new klass.$$constructor(string);\n      }\n    });\n  ;\n    \n    Opal.def(self, '$__id__', $String___id__$1 = function $$__id__() {\n      var self = this;\n\n      return self.toString();\n    }, $String___id__$1.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    Opal.defs(self, '$try_convert', $String_try_convert$2 = function $$try_convert(what) {\n      var self = this;\n\n      return $$($nesting, 'Opal')['$coerce_to?'](what, $$($nesting, 'String'), \"to_str\")\n    }, $String_try_convert$2.$$arity = 1);\n    Opal.defs(self, '$new', $String_new$3 = function(str) {\n      var self = this;\n\n      \n      \n      if (str == null) {\n        str = \"\";\n      };\n      str = $$($nesting, 'Opal').$coerce_to(str, $$($nesting, 'String'), \"to_str\");\n      return new self.$$constructor(str);;\n    }, $String_new$3.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $String_initialize$4 = function $$initialize(str) {\n      var self = this;\n\n      \n      ;\n      \n      if (str === undefined) {\n        return self;\n      }\n    ;\n      return self.$raise($$($nesting, 'NotImplementedError'), \"Mutable strings are not supported in Opal.\");\n    }, $String_initialize$4.$$arity = -1);\n    \n    Opal.def(self, '$%', $String_$percent$5 = function(data) {\n      var self = this;\n\n      if ($truthy($$($nesting, 'Array')['$==='](data))) {\n        return $send(self, 'format', [self].concat(Opal.to_a(data)))\n      } else {\n        return self.$format(self, data)\n      }\n    }, $String_$percent$5.$$arity = 1);\n    \n    Opal.def(self, '$*', $String_$$6 = function(count) {\n      var self = this;\n\n      \n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n\n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative argument\")\n      }\n\n      if (count === 0) {\n        return self.$$cast('');\n      }\n\n      var result = '',\n          string = self.toString();\n\n      // All credit for the bit-twiddling magic code below goes to Mozilla\n      // polyfill implementation of String.prototype.repeat() posted here:\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n\n      if (string.length * count >= 1 << 28) {\n        self.$raise($$($nesting, 'RangeError'), \"multiply count must not overflow maximum string size\")\n      }\n\n      for (;;) {\n        if ((count & 1) === 1) {\n          result += string;\n        }\n        count >>>= 1;\n        if (count === 0) {\n          break;\n        }\n        string += string;\n      }\n\n      return self.$$cast(result);\n    \n    }, $String_$$6.$$arity = 1);\n    \n    Opal.def(self, '$+', $String_$plus$7 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), \"to_str\");\n      return self + other.$to_s();\n    }, $String_$plus$7.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $String_$lt_eq_gt$8 = function(other) {\n      var self = this;\n\n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n        \n        other = other.$to_str().$to_s();\n        return self > other ? 1 : (self < other ? -1 : 0);;\n      } else {\n        \n        var cmp = other['$<=>'](self);\n\n        if (cmp === nil) {\n          return nil;\n        }\n        else {\n          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);\n        }\n      \n      }\n    }, $String_$lt_eq_gt$8.$$arity = 1);\n    \n    Opal.def(self, '$==', $String_$eq_eq$9 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_string) {\n        return self.toString() === other.toString();\n      }\n      if ($$($nesting, 'Opal')['$respond_to?'](other, \"to_str\")) {\n        return other['$=='](self);\n      }\n      return false;\n    \n    }, $String_$eq_eq$9.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    Opal.alias(self, \"===\", \"==\");\n    \n    Opal.def(self, '$=~', $String_$eq_tilde$10 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_string) {\n        self.$raise($$($nesting, 'TypeError'), \"type mismatch: String given\");\n      }\n\n      return other['$=~'](self);\n    \n    }, $String_$eq_tilde$10.$$arity = 1);\n    \n    Opal.def(self, '$[]', $String_$$$11 = function(index, length) {\n      var self = this;\n\n      \n      ;\n      \n      var size = self.length, exclude;\n\n      if (index.$$is_range) {\n        exclude = index.excl;\n        length  = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), \"to_int\");\n        index   = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), \"to_int\");\n\n        if (Math.abs(index) > size) {\n          return nil;\n        }\n\n        if (index < 0) {\n          index += size;\n        }\n\n        if (length < 0) {\n          length += size;\n        }\n\n        if (!exclude) {\n          length += 1;\n        }\n\n        length = length - index;\n\n        if (length < 0) {\n          length = 0;\n        }\n\n        return self.$$cast(self.substr(index, length));\n      }\n\n\n      if (index.$$is_string) {\n        if (length != null) {\n          self.$raise($$($nesting, 'TypeError'))\n        }\n        return self.indexOf(index) !== -1 ? self.$$cast(index) : nil;\n      }\n\n\n      if (index.$$is_regexp) {\n        var match = self.match(index);\n\n        if (match === null) {\n          ($gvars[\"~\"] = nil)\n          return nil;\n        }\n\n        ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(index, match))\n\n        if (length == null) {\n          return self.$$cast(match[0]);\n        }\n\n        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n\n        if (length < 0 && -length < match.length) {\n          return self.$$cast(match[length += match.length]);\n        }\n\n        if (length >= 0 && length < match.length) {\n          return self.$$cast(match[length]);\n        }\n\n        return nil;\n      }\n\n\n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (index < 0) {\n        index += size;\n      }\n\n      if (length == null) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n        return self.$$cast(self.substr(index, 1));\n      }\n\n      length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n\n      if (length < 0) {\n        return nil;\n      }\n\n      if (index > size || index < 0) {\n        return nil;\n      }\n\n      return self.$$cast(self.substr(index, length));\n    ;\n    }, $String_$$$11.$$arity = -2);\n    Opal.alias(self, \"byteslice\", \"[]\");\n    \n    Opal.def(self, '$b', $String_b$12 = function $$b() {\n      var self = this;\n\n      return self.$force_encoding(\"binary\")\n    }, $String_b$12.$$arity = 0);\n    \n    Opal.def(self, '$capitalize', $String_capitalize$13 = function $$capitalize() {\n      var self = this;\n\n      return self.$$cast(self.charAt(0).toUpperCase() + self.substr(1).toLowerCase());\n    }, $String_capitalize$13.$$arity = 0);\n    \n    Opal.def(self, '$casecmp', $String_casecmp$14 = function $$casecmp(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n      } else {\n        return nil\n      };\n      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      var ascii_only = /^[\\x00-\\x7F]*$/;\n      if (ascii_only.test(self) && ascii_only.test(other)) {\n        self = self.toLowerCase();\n        other = other.toLowerCase();\n      }\n    ;\n      return self['$<=>'](other);\n    }, $String_casecmp$14.$$arity = 1);\n    \n    Opal.def(self, '$casecmp?', $String_casecmp$ques$15 = function(other) {\n      var self = this;\n\n      \n      var cmp = self.$casecmp(other);\n      if (cmp === nil) {\n        return nil;\n      } else {\n        return cmp === 0;\n      }\n    \n    }, $String_casecmp$ques$15.$$arity = 1);\n    \n    Opal.def(self, '$center', $String_center$16 = function $$center(width, padstr) {\n      var self = this;\n\n      \n      \n      if (padstr == null) {\n        padstr = \" \";\n      };\n      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), \"to_int\");\n      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), \"to_str\").$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        self.$raise($$($nesting, 'ArgumentError'), \"zero width padding\")};\n      if ($truthy(width <= self.length)) {\n        return self};\n      \n      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),\n          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);\n\n      return self.$$cast(rjustified + ljustified.slice(self.length));\n    ;\n    }, $String_center$16.$$arity = -2);\n    \n    Opal.def(self, '$chars', $String_chars$17 = function $$chars() {\n      var $iter = $String_chars$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_chars$17.$$p = null;\n      \n      \n      if ($iter) $String_chars$17.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return self.$each_char().$to_a()\n      };\n      return $send(self, 'each_char', [], block.$to_proc());\n    }, $String_chars$17.$$arity = 0);\n    \n    Opal.def(self, '$chomp', $String_chomp$18 = function $$chomp(separator) {\n      var self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      \n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      if ($truthy(separator === nil || self.length === 0)) {\n        return self};\n      separator = $$($nesting, 'Opal')['$coerce_to!'](separator, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      var result;\n\n      if (separator === \"\\n\") {\n        result = self.replace(/\\r?\\n?$/, '');\n      }\n      else if (separator === \"\") {\n        result = self.replace(/(\\r?\\n)+$/, '');\n      }\n      else if (self.length >= separator.length) {\n        var tail = self.substr(self.length - separator.length, separator.length);\n\n        if (tail === separator) {\n          result = self.substr(0, self.length - separator.length);\n        }\n      }\n\n      if (result != null) {\n        return self.$$cast(result);\n      }\n    ;\n      return self;\n    }, $String_chomp$18.$$arity = -1);\n    \n    Opal.def(self, '$chop', $String_chop$19 = function $$chop() {\n      var self = this;\n\n      \n      var length = self.length, result;\n\n      if (length <= 1) {\n        result = \"\";\n      } else if (self.charAt(length - 1) === \"\\n\" && self.charAt(length - 2) === \"\\r\") {\n        result = self.substr(0, length - 2);\n      } else {\n        result = self.substr(0, length - 1);\n      }\n\n      return self.$$cast(result);\n    \n    }, $String_chop$19.$$arity = 0);\n    \n    Opal.def(self, '$chr', $String_chr$20 = function $$chr() {\n      var self = this;\n\n      return self.charAt(0);\n    }, $String_chr$20.$$arity = 0);\n    \n    Opal.def(self, '$clone', $String_clone$21 = function $$clone() {\n      var self = this, copy = nil;\n\n      \n      copy = self.slice();\n      copy.$copy_singleton_methods(self);\n      copy.$initialize_clone(self);\n      return copy;\n    }, $String_clone$21.$$arity = 0);\n    \n    Opal.def(self, '$dup', $String_dup$22 = function $$dup() {\n      var self = this, copy = nil;\n\n      \n      copy = self.slice();\n      copy.$initialize_dup(self);\n      return copy;\n    }, $String_dup$22.$$arity = 0);\n    \n    Opal.def(self, '$count', $String_count$23 = function $$count($a) {\n      var $post_args, sets, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      sets = $post_args;;\n      \n      if (sets.length === 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"ArgumentError: wrong number of arguments (0 for 1+)\")\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return 0;\n      }\n      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;\n    ;\n    }, $String_count$23.$$arity = -1);\n    \n    Opal.def(self, '$delete', $String_delete$24 = function($a) {\n      var $post_args, sets, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      sets = $post_args;;\n      \n      if (sets.length === 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"ArgumentError: wrong number of arguments (0 for 1+)\")\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.$$cast(self.replace(new RegExp(char_class, 'g'), ''));\n    ;\n    }, $String_delete$24.$$arity = -1);\n    \n    Opal.def(self, '$delete_prefix', $String_delete_prefix$25 = function $$delete_prefix(prefix) {\n      var self = this;\n\n      \n      if (!prefix.$$is_string) {\n        (prefix = $$($nesting, 'Opal').$coerce_to(prefix, $$($nesting, 'String'), \"to_str\"))\n      }\n\n      if (self.slice(0, prefix.length) === prefix) {\n        return self.$$cast(self.slice(prefix.length));\n      } else {\n        return self;\n      }\n    \n    }, $String_delete_prefix$25.$$arity = 1);\n    \n    Opal.def(self, '$delete_suffix', $String_delete_suffix$26 = function $$delete_suffix(suffix) {\n      var self = this;\n\n      \n      if (!suffix.$$is_string) {\n        (suffix = $$($nesting, 'Opal').$coerce_to(suffix, $$($nesting, 'String'), \"to_str\"))\n      }\n\n      if (self.slice(self.length - suffix.length) === suffix) {\n        return self.$$cast(self.slice(0, self.length - suffix.length));\n      } else {\n        return self;\n      }\n    \n    }, $String_delete_suffix$26.$$arity = 1);\n    \n    Opal.def(self, '$downcase', $String_downcase$27 = function $$downcase() {\n      var self = this;\n\n      return self.$$cast(self.toLowerCase());\n    }, $String_downcase$27.$$arity = 0);\n    \n    Opal.def(self, '$each_char', $String_each_char$28 = function $$each_char() {\n      var $iter = $String_each_char$28.$$p, block = $iter || nil, $$29, self = this;\n\n      if ($iter) $String_each_char$28.$$p = null;\n      \n      \n      if ($iter) $String_each_char$28.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_char\"], ($$29 = function(){var self = $$29.$$s || this;\n\n        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        Opal.yield1(block, self.charAt(i));\n      }\n    ;\n      return self;\n    }, $String_each_char$28.$$arity = 0);\n    \n    Opal.def(self, '$each_line', $String_each_line$30 = function $$each_line(separator) {\n      var $iter = $String_each_line$30.$$p, block = $iter || nil, self = this;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      if ($iter) $String_each_line$30.$$p = null;\n      \n      \n      if ($iter) $String_each_line$30.$$p = null;;\n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each_line\", separator)\n      };\n      \n      if (separator === nil) {\n        Opal.yield1(block, self);\n\n        return self;\n      }\n\n      separator = $$($nesting, 'Opal').$coerce_to(separator, $$($nesting, 'String'), \"to_str\")\n\n      var a, i, n, length, chomped, trailing, splitted;\n\n      if (separator.length === 0) {\n        for (a = self.split(/(\\n{2,})/), i = 0, n = a.length; i < n; i += 2) {\n          if (a[i] || a[i + 1]) {\n            var value = (a[i] || \"\") + (a[i + 1] || \"\");\n            Opal.yield1(block, self.$$cast(value));\n          }\n        }\n\n        return self;\n      }\n\n      chomped  = self.$chomp(separator);\n      trailing = self.length != chomped.length;\n      splitted = chomped.split(separator);\n\n      for (i = 0, length = splitted.length; i < length; i++) {\n        if (i < length - 1 || trailing) {\n          Opal.yield1(block, self.$$cast(splitted[i] + separator));\n        }\n        else {\n          Opal.yield1(block, self.$$cast(splitted[i]));\n        }\n      }\n    ;\n      return self;\n    }, $String_each_line$30.$$arity = -1);\n    \n    Opal.def(self, '$empty?', $String_empty$ques$31 = function() {\n      var self = this;\n\n      return self.length === 0;\n    }, $String_empty$ques$31.$$arity = 0);\n    \n    Opal.def(self, '$end_with?', $String_end_with$ques$32 = function($a) {\n      var $post_args, suffixes, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      suffixes = $post_args;;\n      \n      for (var i = 0, length = suffixes.length; i < length; i++) {\n        var suffix = $$($nesting, 'Opal').$coerce_to(suffixes[i], $$($nesting, 'String'), \"to_str\").$to_s();\n\n        if (self.length >= suffix.length &&\n            self.substr(self.length - suffix.length, suffix.length) == suffix) {\n          return true;\n        }\n      }\n    ;\n      return false;\n    }, $String_end_with$ques$32.$$arity = -1);\n    Opal.alias(self, \"equal?\", \"===\");\n    \n    Opal.def(self, '$gsub', $String_gsub$33 = function $$gsub(pattern, replacement) {\n      var $iter = $String_gsub$33.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_gsub$33.$$p = null;\n      \n      \n      if ($iter) $String_gsub$33.$$p = null;;\n      ;\n      \n      if (replacement === undefined && block === nil) {\n        return self.$enum_for(\"gsub\", pattern);\n      }\n\n      var result = '', match_data = nil, index = 0, match, _replacement;\n\n      if (pattern.$$is_regexp) {\n        pattern = Opal.global_multiline_regexp(pattern);\n      } else {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\");\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      var lastIndex;\n      while (true) {\n        match = pattern.exec(self);\n\n        if (match === null) {\n          ($gvars[\"~\"] = nil)\n          result += self.slice(index);\n          break;\n        }\n\n        match_data = $$($nesting, 'MatchData').$new(pattern, match);\n\n        if (replacement === undefined) {\n          lastIndex = pattern.lastIndex;\n          _replacement = block(match[0]);\n          pattern.lastIndex = lastIndex; // save and restore lastIndex\n        }\n        else if (replacement.$$is_hash) {\n          _replacement = (replacement)['$[]'](match[0]).$to_s();\n        }\n        else {\n          if (!replacement.$$is_string) {\n            replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), \"to_str\");\n          }\n          _replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n        }\n\n        if (pattern.lastIndex === match.index) {\n          result += (_replacement + self.slice(index, match.index + 1))\n          pattern.lastIndex += 1;\n        }\n        else {\n          result += (self.slice(index, match.index) + _replacement)\n        }\n        index = pattern.lastIndex;\n      }\n\n      ($gvars[\"~\"] = match_data)\n      return self.$$cast(result);\n    ;\n    }, $String_gsub$33.$$arity = -2);\n    \n    Opal.def(self, '$hash', $String_hash$34 = function $$hash() {\n      var self = this;\n\n      return self.toString();\n    }, $String_hash$34.$$arity = 0);\n    \n    Opal.def(self, '$hex', $String_hex$35 = function $$hex() {\n      var self = this;\n\n      return self.$to_i(16)\n    }, $String_hex$35.$$arity = 0);\n    \n    Opal.def(self, '$include?', $String_include$ques$36 = function(other) {\n      var self = this;\n\n      \n      if (!other.$$is_string) {\n        (other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), \"to_str\"))\n      }\n      return self.indexOf(other) !== -1;\n    \n    }, $String_include$ques$36.$$arity = 1);\n    \n    Opal.def(self, '$index', $String_index$37 = function $$index(search, offset) {\n      var self = this;\n\n      \n      ;\n      \n      var index,\n          match,\n          regex;\n\n      if (offset === undefined) {\n        offset = 0;\n      } else {\n        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), \"to_int\");\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        regex = Opal.global_multiline_regexp(search);\n        while (true) {\n          match = regex.exec(self);\n          if (match === null) {\n            ($gvars[\"~\"] = nil);\n            index = -1;\n            break;\n          }\n          if (match.index >= offset) {\n            ($gvars[\"~\"] = $$($nesting, 'MatchData').$new(regex, match))\n            index = match.index;\n            break;\n          }\n          regex.lastIndex = match.index + 1;\n        }\n      } else {\n        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), \"to_str\");\n        if (search.length === 0 && offset > self.length) {\n          index = -1;\n        } else {\n          index = self.indexOf(search, offset);\n        }\n      }\n\n      return index === -1 ? nil : index;\n    ;\n    }, $String_index$37.$$arity = -2);\n    \n    Opal.def(self, '$inspect', $String_inspect$38 = function $$inspect() {\n      var self = this;\n\n      \n      var escapable = /[\\\\\\\"\\x00-\\x1f\\u007F-\\u009F\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n          meta = {\n            '\\u0007': '\\\\a',\n            '\\u001b': '\\\\e',\n            '\\b': '\\\\b',\n            '\\t': '\\\\t',\n            '\\n': '\\\\n',\n            '\\f': '\\\\f',\n            '\\r': '\\\\r',\n            '\\v': '\\\\v',\n            '\"' : '\\\\\"',\n            '\\\\': '\\\\\\\\'\n          },\n          escaped = self.replace(escapable, function (chr) {\n            return meta[chr] || '\\\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);\n          });\n      return '\"' + escaped.replace(/\\#[\\$\\@\\{]/g, '\\\\$&') + '\"';\n    \n    }, $String_inspect$38.$$arity = 0);\n    \n    Opal.def(self, '$intern', $String_intern$39 = function $$intern() {\n      var self = this;\n\n      return self.toString();\n    }, $String_intern$39.$$arity = 0);\n    \n    Opal.def(self, '$lines', $String_lines$40 = function $$lines(separator) {\n      var $iter = $String_lines$40.$$p, block = $iter || nil, self = this, e = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      if ($iter) $String_lines$40.$$p = null;\n      \n      \n      if ($iter) $String_lines$40.$$p = null;;\n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      e = $send(self, 'each_line', [separator], block.$to_proc());\n      if ($truthy(block)) {\n        return self\n      } else {\n        return e.$to_a()\n      };\n    }, $String_lines$40.$$arity = -1);\n    \n    Opal.def(self, '$length', $String_length$41 = function $$length() {\n      var self = this;\n\n      return self.length;\n    }, $String_length$41.$$arity = 0);\n    \n    Opal.def(self, '$ljust', $String_ljust$42 = function $$ljust(width, padstr) {\n      var self = this;\n\n      \n      \n      if (padstr == null) {\n        padstr = \" \";\n      };\n      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), \"to_int\");\n      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), \"to_str\").$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        self.$raise($$($nesting, 'ArgumentError'), \"zero width padding\")};\n      if ($truthy(width <= self.length)) {\n        return self};\n      \n      var index  = -1,\n          result = \"\";\n\n      width -= self.length;\n\n      while (++index < width) {\n        result += padstr;\n      }\n\n      return self.$$cast(self + result.slice(0, width));\n    ;\n    }, $String_ljust$42.$$arity = -2);\n    \n    Opal.def(self, '$lstrip', $String_lstrip$43 = function $$lstrip() {\n      var self = this;\n\n      return self.replace(/^\\s*/, '');\n    }, $String_lstrip$43.$$arity = 0);\n    \n    Opal.def(self, '$ascii_only?', $String_ascii_only$ques$44 = function() {\n      var self = this;\n\n      return self.match(/[ -~\\n]*/)[0] === self;\n    }, $String_ascii_only$ques$44.$$arity = 0);\n    \n    Opal.def(self, '$match', $String_match$45 = function $$match(pattern, pos) {\n      var $iter = $String_match$45.$$p, block = $iter || nil, $a, self = this;\n\n      if ($iter) $String_match$45.$$p = null;\n      \n      \n      if ($iter) $String_match$45.$$p = null;;\n      ;\n      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?'](\"to_str\")))) {\n        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};\n      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (pattern.$class()) + \" (expected Regexp)\")\n      };\n      return $send(pattern, 'match', [self, pos], block.$to_proc());\n    }, $String_match$45.$$arity = -2);\n    \n    Opal.def(self, '$match?', $String_match$ques$46 = function(pattern, pos) {\n      var $a, self = this;\n\n      \n      ;\n      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?'](\"to_str\")))) {\n        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};\n      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + (pattern.$class()) + \" (expected Regexp)\")\n      };\n      return pattern['$match?'](self, pos);\n    }, $String_match$ques$46.$$arity = -2);\n    \n    Opal.def(self, '$next', $String_next$47 = function $$next() {\n      var self = this;\n\n      \n      var i = self.length;\n      if (i === 0) {\n        return self.$$cast('');\n      }\n      var result = self;\n      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);\n      var carry = false;\n      var code;\n      while (i--) {\n        code = self.charCodeAt(i);\n        if ((code >= 48 && code <= 57) ||\n          (code >= 65 && code <= 90) ||\n          (code >= 97 && code <= 122)) {\n          switch (code) {\n          case 57:\n            carry = true;\n            code = 48;\n            break;\n          case 90:\n            carry = true;\n            code = 65;\n            break;\n          case 122:\n            carry = true;\n            code = 97;\n            break;\n          default:\n            carry = false;\n            code += 1;\n          }\n        } else {\n          if (first_alphanum_char_index === -1) {\n            if (code === 255) {\n              carry = true;\n              code = 0;\n            } else {\n              carry = false;\n              code += 1;\n            }\n          } else {\n            carry = true;\n          }\n        }\n        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);\n        if (carry && (i === 0 || i === first_alphanum_char_index)) {\n          switch (code) {\n          case 65:\n            break;\n          case 97:\n            break;\n          default:\n            code += 1;\n          }\n          if (i === 0) {\n            result = String.fromCharCode(code) + result;\n          } else {\n            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);\n          }\n          carry = false;\n        }\n        if (!carry) {\n          break;\n        }\n      }\n      return self.$$cast(result);\n    \n    }, $String_next$47.$$arity = 0);\n    \n    Opal.def(self, '$oct', $String_oct$48 = function $$oct() {\n      var self = this;\n\n      \n      var result,\n          string = self,\n          radix = 8;\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x') {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          radix = 2;\n          break;\n        case '0':\n        case '0o':\n          radix = 8;\n          break;\n        case '0d':\n          radix = 10;\n          break;\n        case '0x':\n          radix = 16;\n          break;\n        }\n        return head + tail;\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    \n    }, $String_oct$48.$$arity = 0);\n    \n    Opal.def(self, '$ord', $String_ord$49 = function $$ord() {\n      var self = this;\n\n      return self.charCodeAt(0);\n    }, $String_ord$49.$$arity = 0);\n    \n    Opal.def(self, '$partition', $String_partition$50 = function $$partition(sep) {\n      var self = this;\n\n      \n      var i, m;\n\n      if (sep.$$is_regexp) {\n        m = sep.exec(self);\n        if (m === null) {\n          i = -1;\n        } else {\n          $$($nesting, 'MatchData').$new(sep, m);\n          sep = m[0];\n          i = m.index;\n        }\n      } else {\n        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), \"to_str\");\n        i = self.indexOf(sep);\n      }\n\n      if (i === -1) {\n        return [self, '', ''];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    \n    }, $String_partition$50.$$arity = 1);\n    \n    Opal.def(self, '$reverse', $String_reverse$51 = function $$reverse() {\n      var self = this;\n\n      return self.split('').reverse().join('');\n    }, $String_reverse$51.$$arity = 0);\n    \n    Opal.def(self, '$rindex', $String_rindex$52 = function $$rindex(search, offset) {\n      var self = this;\n\n      \n      ;\n      \n      var i, m, r, _m;\n\n      if (offset === undefined) {\n        offset = self.length;\n      } else {\n        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), \"to_int\");\n        if (offset < 0) {\n          offset += self.length;\n          if (offset < 0) {\n            return nil;\n          }\n        }\n      }\n\n      if (search.$$is_regexp) {\n        m = null;\n        r = Opal.global_multiline_regexp(search);\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null || _m.index > offset) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n        if (m === null) {\n          ($gvars[\"~\"] = nil)\n          i = -1;\n        } else {\n          $$($nesting, 'MatchData').$new(r, m);\n          i = m.index;\n        }\n      } else {\n        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), \"to_str\");\n        i = self.lastIndexOf(search, offset);\n      }\n\n      return i === -1 ? nil : i;\n    ;\n    }, $String_rindex$52.$$arity = -2);\n    \n    Opal.def(self, '$rjust', $String_rjust$53 = function $$rjust(width, padstr) {\n      var self = this;\n\n      \n      \n      if (padstr == null) {\n        padstr = \" \";\n      };\n      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), \"to_int\");\n      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), \"to_str\").$to_s();\n      if ($truthy(padstr['$empty?']())) {\n        self.$raise($$($nesting, 'ArgumentError'), \"zero width padding\")};\n      if ($truthy(width <= self.length)) {\n        return self};\n      \n      var chars     = Math.floor(width - self.length),\n          patterns  = Math.floor(chars / padstr.length),\n          result    = Array(patterns + 1).join(padstr),\n          remaining = chars - result.length;\n\n      return self.$$cast(result + padstr.slice(0, remaining) + self);\n    ;\n    }, $String_rjust$53.$$arity = -2);\n    \n    Opal.def(self, '$rpartition', $String_rpartition$54 = function $$rpartition(sep) {\n      var self = this;\n\n      \n      var i, m, r, _m;\n\n      if (sep.$$is_regexp) {\n        m = null;\n        r = Opal.global_multiline_regexp(sep);\n\n        while (true) {\n          _m = r.exec(self);\n          if (_m === null) {\n            break;\n          }\n          m = _m;\n          r.lastIndex = m.index + 1;\n        }\n\n        if (m === null) {\n          i = -1;\n        } else {\n          $$($nesting, 'MatchData').$new(r, m);\n          sep = m[0];\n          i = m.index;\n        }\n\n      } else {\n        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), \"to_str\");\n        i = self.lastIndexOf(sep);\n      }\n\n      if (i === -1) {\n        return ['', '', self];\n      }\n\n      return [\n        self.slice(0, i),\n        self.slice(i, i + sep.length),\n        self.slice(i + sep.length)\n      ];\n    \n    }, $String_rpartition$54.$$arity = 1);\n    \n    Opal.def(self, '$rstrip', $String_rstrip$55 = function $$rstrip() {\n      var self = this;\n\n      return self.replace(/[\\s\\u0000]*$/, '');\n    }, $String_rstrip$55.$$arity = 0);\n    \n    Opal.def(self, '$scan', $String_scan$56 = function $$scan(pattern) {\n      var $iter = $String_scan$56.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_scan$56.$$p = null;\n      \n      \n      if ($iter) $String_scan$56.$$p = null;;\n      \n      var result = [],\n          match_data = nil,\n          match;\n\n      if (pattern.$$is_regexp) {\n        pattern = Opal.global_multiline_regexp(pattern);\n      } else {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\");\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n      }\n\n      while ((match = pattern.exec(self)) != null) {\n        match_data = $$($nesting, 'MatchData').$new(pattern, match);\n        if (block === nil) {\n          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());\n        } else {\n          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());\n        }\n        if (pattern.lastIndex === match.index) {\n          pattern.lastIndex += 1;\n        }\n      }\n\n      ($gvars[\"~\"] = match_data)\n\n      return (block !== nil ? self : result);\n    ;\n    }, $String_scan$56.$$arity = 1);\n    Opal.alias(self, \"size\", \"length\");\n    Opal.alias(self, \"slice\", \"[]\");\n    \n    Opal.def(self, '$split', $String_split$57 = function $$split(pattern, limit) {\n      var $a, self = this;\n      if ($gvars[\";\"] == null) $gvars[\";\"] = nil;\n\n      \n      ;\n      ;\n      \n      if (self.length === 0) {\n        return [];\n      }\n\n      if (limit === undefined) {\n        limit = 0;\n      } else {\n        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), \"to_int\");\n        if (limit === 1) {\n          return [self];\n        }\n      }\n\n      if (pattern === undefined || pattern === nil) {\n        pattern = ($truthy($a = $gvars[\";\"]) ? $a : \" \");\n      }\n\n      var result = [],\n          string = self.toString(),\n          index = 0,\n          match,\n          i, ii;\n\n      if (pattern.$$is_regexp) {\n        pattern = Opal.global_multiline_regexp(pattern);\n      } else {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\").$to_s();\n        if (pattern === ' ') {\n          pattern = /\\s+/gm;\n          string = string.replace(/^\\s+/, '');\n        } else {\n          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'gm');\n        }\n      }\n\n      result = string.split(pattern);\n\n      if (result.length === 1 && result[0] === string) {\n        return [self.$$cast(result[0])];\n      }\n\n      while ((i = result.indexOf(undefined)) !== -1) {\n        result.splice(i, 1);\n      }\n\n      function castResult() {\n        for (i = 0; i < result.length; i++) {\n          result[i] = self.$$cast(result[i]);\n        }\n      }\n\n      if (limit === 0) {\n        while (result[result.length - 1] === '') {\n          result.length -= 1;\n        }\n        castResult();\n        return result;\n      }\n\n      match = pattern.exec(string);\n\n      if (limit < 0) {\n        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {\n          for (i = 0, ii = match.length; i < ii; i++) {\n            result.push('');\n          }\n        }\n        castResult();\n        return result;\n      }\n\n      if (match !== null && match[0] === '') {\n        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));\n        castResult();\n        return result;\n      }\n\n      if (limit >= result.length) {\n        castResult();\n        return result;\n      }\n\n      i = 0;\n      while (match !== null) {\n        i++;\n        index = pattern.lastIndex;\n        if (i + 1 === limit) {\n          break;\n        }\n        match = pattern.exec(string);\n      }\n      result.splice(limit - 1, result.length - 1, string.slice(index));\n      castResult();\n      return result;\n    ;\n    }, $String_split$57.$$arity = -1);\n    \n    Opal.def(self, '$squeeze', $String_squeeze$58 = function $$squeeze($a) {\n      var $post_args, sets, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      sets = $post_args;;\n      \n      if (sets.length === 0) {\n        return self.$$cast(self.replace(/(.)\\1+/g, '$1'));\n      }\n      var char_class = char_class_from_char_sets(sets);\n      if (char_class === null) {\n        return self;\n      }\n      return self.$$cast(self.replace(new RegExp('(' + char_class + ')\\\\1+', 'g'), '$1'));\n    ;\n    }, $String_squeeze$58.$$arity = -1);\n    \n    Opal.def(self, '$start_with?', $String_start_with$ques$59 = function($a) {\n      var $post_args, prefixes, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      prefixes = $post_args;;\n      \n      for (var i = 0, length = prefixes.length; i < length; i++) {\n        var prefix = $$($nesting, 'Opal').$coerce_to(prefixes[i], $$($nesting, 'String'), \"to_str\").$to_s();\n\n        if (self.indexOf(prefix) === 0) {\n          return true;\n        }\n      }\n\n      return false;\n    ;\n    }, $String_start_with$ques$59.$$arity = -1);\n    \n    Opal.def(self, '$strip', $String_strip$60 = function $$strip() {\n      var self = this;\n\n      return self.replace(/^\\s*/, '').replace(/[\\s\\u0000]*$/, '');\n    }, $String_strip$60.$$arity = 0);\n    \n    Opal.def(self, '$sub', $String_sub$61 = function $$sub(pattern, replacement) {\n      var $iter = $String_sub$61.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_sub$61.$$p = null;\n      \n      \n      if ($iter) $String_sub$61.$$p = null;;\n      ;\n      \n      if (!pattern.$$is_regexp) {\n        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), \"to_str\");\n        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'));\n      }\n\n      var result, match = pattern.exec(self);\n\n      if (match === null) {\n        ($gvars[\"~\"] = nil)\n        result = self.toString();\n      } else {\n        $$($nesting, 'MatchData').$new(pattern, match)\n\n        if (replacement === undefined) {\n\n          if (block === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (1 for 2)\")\n          }\n          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);\n\n        } else if (replacement.$$is_hash) {\n\n          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);\n\n        } else {\n\n          replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), \"to_str\");\n\n          replacement = replacement.replace(/([\\\\]+)([0-9+&`'])/g, function (original, slashes, command) {\n            if (slashes.length % 2 === 0) {\n              return original;\n            }\n            switch (command) {\n            case \"+\":\n              for (var i = match.length - 1; i > 0; i--) {\n                if (match[i] !== undefined) {\n                  return slashes.slice(1) + match[i];\n                }\n              }\n              return '';\n            case \"&\": return slashes.slice(1) + match[0];\n            case \"`\": return slashes.slice(1) + self.slice(0, match.index);\n            case \"'\": return slashes.slice(1) + self.slice(match.index + match[0].length);\n            default:  return slashes.slice(1) + (match[command] || '');\n            }\n          }).replace(/\\\\\\\\/g, '\\\\');\n\n          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);\n        }\n      }\n\n      return self.$$cast(result);\n    ;\n    }, $String_sub$61.$$arity = -2);\n    Opal.alias(self, \"succ\", \"next\");\n    \n    Opal.def(self, '$sum', $String_sum$62 = function $$sum(n) {\n      var self = this;\n\n      \n      \n      if (n == null) {\n        n = 16;\n      };\n      \n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n\n      var result = 0,\n          length = self.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        result += self.charCodeAt(i);\n      }\n\n      if (n <= 0) {\n        return result;\n      }\n\n      return result & (Math.pow(2, n) - 1);\n    ;\n    }, $String_sum$62.$$arity = -1);\n    \n    Opal.def(self, '$swapcase', $String_swapcase$63 = function $$swapcase() {\n      var self = this;\n\n      \n      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {\n        return $1 ? $0.toUpperCase() : $0.toLowerCase();\n      });\n\n      if (self.constructor === String) {\n        return str;\n      }\n\n      return self.$class().$new(str);\n    \n    }, $String_swapcase$63.$$arity = 0);\n    \n    Opal.def(self, '$to_f', $String_to_f$64 = function $$to_f() {\n      var self = this;\n\n      \n      if (self.charAt(0) === '_') {\n        return 0;\n      }\n\n      var result = parseFloat(self.replace(/_/g, ''));\n\n      if (isNaN(result) || result == Infinity || result == -Infinity) {\n        return 0;\n      }\n      else {\n        return result;\n      }\n    \n    }, $String_to_f$64.$$arity = 0);\n    \n    Opal.def(self, '$to_i', $String_to_i$65 = function $$to_i(base) {\n      var self = this;\n\n      \n      \n      if (base == null) {\n        base = 10;\n      };\n      \n      var result,\n          string = self.toLowerCase(),\n          radix = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), \"to_int\");\n\n      if (radix === 1 || radix < 0 || radix > 36) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (radix))\n      }\n\n      if (/^\\s*_/.test(string)) {\n        return 0;\n      }\n\n      string = string.replace(/^(\\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {\n        switch (tail.charAt(0)) {\n        case '+':\n        case '-':\n          return original;\n        case '0':\n          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {\n            return original;\n          }\n        }\n        switch (flag) {\n        case '0b':\n          if (radix === 0 || radix === 2) {\n            radix = 2;\n            return head + tail;\n          }\n          break;\n        case '0':\n        case '0o':\n          if (radix === 0 || radix === 8) {\n            radix = 8;\n            return head + tail;\n          }\n          break;\n        case '0d':\n          if (radix === 0 || radix === 10) {\n            radix = 10;\n            return head + tail;\n          }\n          break;\n        case '0x':\n          if (radix === 0 || radix === 16) {\n            radix = 16;\n            return head + tail;\n          }\n          break;\n        }\n        return original\n      });\n\n      result = parseInt(string.replace(/_(?!_)/g, ''), radix);\n      return isNaN(result) ? 0 : result;\n    ;\n    }, $String_to_i$65.$$arity = -1);\n    \n    Opal.def(self, '$to_proc', $String_to_proc$66 = function $$to_proc() {\n      var $$67, $iter = $String_to_proc$66.$$p, $yield = $iter || nil, self = this, method_name = nil;\n\n      if ($iter) $String_to_proc$66.$$p = null;\n      \n      method_name = $rb_plus(\"$\", self.valueOf());\n      return $send(self, 'proc', [], ($$67 = function($a){var self = $$67.$$s || this, $iter = $$67.$$p, block = $iter || nil, $post_args, args;\n\n      \n        \n        if ($iter) $$67.$$p = null;;\n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        \n        if (args.length === 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"no receiver given\")\n        }\n\n        var recv = args[0];\n\n        if (recv == null) recv = nil;\n\n        var body = recv[method_name];\n\n        if (!body) {\n          return recv.$method_missing.apply(recv, args);\n        }\n\n        if (typeof block === 'function') {\n          body.$$p = block;\n        }\n\n        if (args.length === 1) {\n          return body.call(recv);\n        } else {\n          return body.apply(recv, args.slice(1));\n        }\n      ;}, $$67.$$s = self, $$67.$$arity = -1, $$67));\n    }, $String_to_proc$66.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $String_to_s$68 = function $$to_s() {\n      var self = this;\n\n      return self.toString();\n    }, $String_to_s$68.$$arity = 0);\n    Opal.alias(self, \"to_str\", \"to_s\");\n    Opal.alias(self, \"to_sym\", \"intern\");\n    \n    Opal.def(self, '$tr', $String_tr$69 = function $$tr(from, to) {\n      var self = this;\n\n      \n      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), \"to_str\").$to_s();\n      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      if (from.length == 0 || from === to) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_to == null) {\n              last_to = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_to.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_to = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n\n      var new_str = ''\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch];\n        if (inverse) {\n          new_str += (sub == null ? global_sub : ch);\n        }\n        else {\n          new_str += (sub != null ? sub : ch);\n        }\n      }\n      return self.$$cast(new_str);\n    ;\n    }, $String_tr$69.$$arity = 2);\n    \n    Opal.def(self, '$tr_s', $String_tr_s$70 = function $$tr_s(from, to) {\n      var self = this;\n\n      \n      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), \"to_str\").$to_s();\n      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), \"to_str\").$to_s();\n      \n      if (from.length == 0) {\n        return self;\n      }\n\n      var i, in_range, c, ch, start, end, length;\n      var subs = {};\n      var from_chars = from.split('');\n      var from_length = from_chars.length;\n      var to_chars = to.split('');\n      var to_length = to_chars.length;\n\n      var inverse = false;\n      var global_sub = null;\n      if (from_chars[0] === '^' && from_chars.length > 1) {\n        inverse = true;\n        from_chars.shift();\n        global_sub = to_chars[to_length - 1]\n        from_length -= 1;\n      }\n\n      var from_chars_expanded = [];\n      var last_from = null;\n      in_range = false;\n      for (i = 0; i < from_length; i++) {\n        ch = from_chars[i];\n        if (last_from == null) {\n          last_from = ch;\n          from_chars_expanded.push(ch);\n        }\n        else if (ch === '-') {\n          if (last_from === '-') {\n            from_chars_expanded.push('-');\n            from_chars_expanded.push('-');\n          }\n          else if (i == from_length - 1) {\n            from_chars_expanded.push('-');\n          }\n          else {\n            in_range = true;\n          }\n        }\n        else if (in_range) {\n          start = last_from.charCodeAt(0);\n          end = ch.charCodeAt(0);\n          if (start > end) {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n          }\n          for (c = start + 1; c < end; c++) {\n            from_chars_expanded.push(String.fromCharCode(c));\n          }\n          from_chars_expanded.push(ch);\n          in_range = null;\n          last_from = null;\n        }\n        else {\n          from_chars_expanded.push(ch);\n        }\n      }\n\n      from_chars = from_chars_expanded;\n      from_length = from_chars.length;\n\n      if (inverse) {\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = true;\n        }\n      }\n      else {\n        if (to_length > 0) {\n          var to_chars_expanded = [];\n          var last_to = null;\n          in_range = false;\n          for (i = 0; i < to_length; i++) {\n            ch = to_chars[i];\n            if (last_from == null) {\n              last_from = ch;\n              to_chars_expanded.push(ch);\n            }\n            else if (ch === '-') {\n              if (last_to === '-') {\n                to_chars_expanded.push('-');\n                to_chars_expanded.push('-');\n              }\n              else if (i == to_length - 1) {\n                to_chars_expanded.push('-');\n              }\n              else {\n                in_range = true;\n              }\n            }\n            else if (in_range) {\n              start = last_from.charCodeAt(0);\n              end = ch.charCodeAt(0);\n              if (start > end) {\n                self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (String.fromCharCode(start)) + \"-\" + (String.fromCharCode(end)) + \"\\\" in string transliteration\")\n              }\n              for (c = start + 1; c < end; c++) {\n                to_chars_expanded.push(String.fromCharCode(c));\n              }\n              to_chars_expanded.push(ch);\n              in_range = null;\n              last_from = null;\n            }\n            else {\n              to_chars_expanded.push(ch);\n            }\n          }\n\n          to_chars = to_chars_expanded;\n          to_length = to_chars.length;\n        }\n\n        var length_diff = from_length - to_length;\n        if (length_diff > 0) {\n          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');\n          for (i = 0; i < length_diff; i++) {\n            to_chars.push(pad_char);\n          }\n        }\n\n        for (i = 0; i < from_length; i++) {\n          subs[from_chars[i]] = to_chars[i];\n        }\n      }\n      var new_str = ''\n      var last_substitute = null\n      for (i = 0, length = self.length; i < length; i++) {\n        ch = self.charAt(i);\n        var sub = subs[ch]\n        if (inverse) {\n          if (sub == null) {\n            if (last_substitute == null) {\n              new_str += global_sub;\n              last_substitute = true;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n        else {\n          if (sub != null) {\n            if (last_substitute == null || last_substitute !== sub) {\n              new_str += sub;\n              last_substitute = sub;\n            }\n          }\n          else {\n            new_str += ch;\n            last_substitute = null;\n          }\n        }\n      }\n      return self.$$cast(new_str);\n    ;\n    }, $String_tr_s$70.$$arity = 2);\n    \n    Opal.def(self, '$upcase', $String_upcase$71 = function $$upcase() {\n      var self = this;\n\n      return self.$$cast(self.toUpperCase());\n    }, $String_upcase$71.$$arity = 0);\n    \n    Opal.def(self, '$upto', $String_upto$72 = function $$upto(stop, excl) {\n      var $iter = $String_upto$72.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_upto$72.$$p = null;\n      \n      \n      if ($iter) $String_upto$72.$$p = null;;\n      \n      if (excl == null) {\n        excl = false;\n      };\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"upto\", stop, excl)\n      };\n      stop = $$($nesting, 'Opal').$coerce_to(stop, $$($nesting, 'String'), \"to_str\");\n      \n      var a, b, s = self.toString();\n\n      if (s.length === 1 && stop.length === 1) {\n\n        a = s.charCodeAt(0);\n        b = stop.charCodeAt(0);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(String.fromCharCode(a));\n\n          a += 1;\n        }\n\n      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {\n\n        a = parseInt(s, 10);\n        b = parseInt(stop, 10);\n\n        while (a <= b) {\n          if (excl && a === b) {\n            break;\n          }\n\n          block(a.toString());\n\n          a += 1;\n        }\n\n      } else {\n\n        while (s.length <= stop.length && s <= stop) {\n          if (excl && s === stop) {\n            break;\n          }\n\n          block(s);\n\n          s = (s).$succ();\n        }\n\n      }\n      return self;\n    ;\n    }, $String_upto$72.$$arity = -2);\n    \n    function char_class_from_char_sets(sets) {\n      function explode_sequences_in_character_set(set) {\n        var result = '',\n            i, len = set.length,\n            curr_char,\n            skip_next_dash,\n            char_code_from,\n            char_code_upto,\n            char_code;\n        for (i = 0; i < len; i++) {\n          curr_char = set.charAt(i);\n          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {\n            char_code_from = set.charCodeAt(i - 1);\n            char_code_upto = set.charCodeAt(i + 1);\n            if (char_code_from > char_code_upto) {\n              self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid range \\\"\" + (char_code_from) + \"-\" + (char_code_upto) + \"\\\" in string transliteration\")\n            }\n            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {\n              result += String.fromCharCode(char_code);\n            }\n            skip_next_dash = true;\n            i++;\n          } else {\n            skip_next_dash = (curr_char === '\\\\');\n            result += curr_char;\n          }\n        }\n        return result;\n      }\n\n      function intersection(setA, setB) {\n        if (setA.length === 0) {\n          return setB;\n        }\n        var result = '',\n            i, len = setA.length,\n            chr;\n        for (i = 0; i < len; i++) {\n          chr = setA.charAt(i);\n          if (setB.indexOf(chr) !== -1) {\n            result += chr;\n          }\n        }\n        return result;\n      }\n\n      var i, len, set, neg, chr, tmp,\n          pos_intersection = '',\n          neg_intersection = '';\n\n      for (i = 0, len = sets.length; i < len; i++) {\n        set = $$($nesting, 'Opal').$coerce_to(sets[i], $$($nesting, 'String'), \"to_str\");\n        neg = (set.charAt(0) === '^' && set.length > 1);\n        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);\n        if (neg) {\n          neg_intersection = intersection(neg_intersection, set);\n        } else {\n          pos_intersection = intersection(pos_intersection, set);\n        }\n      }\n\n      if (pos_intersection.length > 0 && neg_intersection.length > 0) {\n        tmp = '';\n        for (i = 0, len = pos_intersection.length; i < len; i++) {\n          chr = pos_intersection.charAt(i);\n          if (neg_intersection.indexOf(chr) === -1) {\n            tmp += chr;\n          }\n        }\n        pos_intersection = tmp;\n        neg_intersection = '';\n      }\n\n      if (pos_intersection.length > 0) {\n        return '[' + $$($nesting, 'Regexp').$escape(pos_intersection) + ']';\n      }\n\n      if (neg_intersection.length > 0) {\n        return '[^' + $$($nesting, 'Regexp').$escape(neg_intersection) + ']';\n      }\n\n      return null;\n    }\n  ;\n    \n    Opal.def(self, '$instance_variables', $String_instance_variables$73 = function $$instance_variables() {\n      var self = this;\n\n      return []\n    }, $String_instance_variables$73.$$arity = 0);\n    Opal.defs(self, '$_load', $String__load$74 = function $$_load($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return $send(self, 'new', Opal.to_a(args));\n    }, $String__load$74.$$arity = -1);\n    \n    Opal.def(self, '$unicode_normalize', $String_unicode_normalize$75 = function $$unicode_normalize(form) {\n      var self = this;\n\n      \n      ;\n      return self.toString();;\n    }, $String_unicode_normalize$75.$$arity = -1);\n    \n    Opal.def(self, '$unicode_normalized?', $String_unicode_normalized$ques$76 = function(form) {\n      var self = this;\n\n      \n      ;\n      return true;\n    }, $String_unicode_normalized$ques$76.$$arity = -1);\n    \n    Opal.def(self, '$unpack', $String_unpack$77 = function $$unpack(format) {\n      var self = this;\n\n      return self.$raise(\"To use String#unpack, you must first require 'corelib/string/unpack'.\")\n    }, $String_unpack$77.$$arity = 1);\n    return (Opal.def(self, '$unpack1', $String_unpack1$78 = function $$unpack1(format) {\n      var self = this;\n\n      return self.$raise(\"To use String#unpack1, you must first require 'corelib/string/unpack'.\")\n    }, $String_unpack1$78.$$arity = 1), nil) && 'unpack1';\n  })($nesting[0], String, $nesting);\n  return Opal.const_set($nesting[0], 'Symbol', $$($nesting, 'String'));\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/enumerable\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy, $hash2 = Opal.hash2, $lambda = Opal.lambda;\n\n  Opal.add_stubs(['$each', '$public_send', '$destructure', '$to_enum', '$enumerator_size', '$new', '$yield', '$raise', '$slice_when', '$!', '$enum_for', '$flatten', '$map', '$warn', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$__send__', '$length', '$<=', '$[]', '$push', '$<<', '$[]=', '$===', '$inspect', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$dup', '$to_a', '$sort!', '$map!', '$key?', '$values', '$zip']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Enumerable');\n\n    var $nesting = [self].concat($parent_nesting), $Enumerable_all$ques$1, $Enumerable_any$ques$5, $Enumerable_chunk$9, $Enumerable_chunk_while$12, $Enumerable_collect$14, $Enumerable_collect_concat$16, $Enumerable_count$19, $Enumerable_cycle$23, $Enumerable_detect$25, $Enumerable_drop$27, $Enumerable_drop_while$28, $Enumerable_each_cons$29, $Enumerable_each_entry$31, $Enumerable_each_slice$33, $Enumerable_each_with_index$35, $Enumerable_each_with_object$37, $Enumerable_entries$39, $Enumerable_find_all$40, $Enumerable_find_index$42, $Enumerable_first$45, $Enumerable_grep$48, $Enumerable_grep_v$50, $Enumerable_group_by$52, $Enumerable_include$ques$54, $Enumerable_inject$56, $Enumerable_lazy$57, $Enumerable_enumerator_size$59, $Enumerable_max$60, $Enumerable_max_by$61, $Enumerable_min$63, $Enumerable_min_by$64, $Enumerable_minmax$66, $Enumerable_minmax_by$68, $Enumerable_none$ques$69, $Enumerable_one$ques$73, $Enumerable_partition$77, $Enumerable_reject$79, $Enumerable_reverse_each$81, $Enumerable_slice_before$83, $Enumerable_slice_after$85, $Enumerable_slice_when$88, $Enumerable_sort$90, $Enumerable_sort_by$92, $Enumerable_sum$97, $Enumerable_take$99, $Enumerable_take_while$100, $Enumerable_uniq$102, $Enumerable_zip$104;\n\n    \n    \n    function comparableForPattern(value) {\n      if (value.length === 0) {\n        value = [nil];\n      }\n\n      if (value.length > 1) {\n        value = [value];\n      }\n\n      return value;\n    }\n  ;\n    \n    Opal.def(self, '$all?', $Enumerable_all$ques$1 = function(pattern) {try {\n\n      var $iter = $Enumerable_all$ques$1.$$p, block = $iter || nil, $$2, $$3, $$4, self = this;\n\n      if ($iter) $Enumerable_all$ques$1.$$p = null;\n      \n      \n      if ($iter) $Enumerable_all$ques$1.$$p = null;;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$2 = function($a){var self = $$2.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            return nil\n          } else {\n            Opal.ret(false)\n          };}, $$2.$$s = self, $$2.$$arity = -1, $$2))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$3 = function($a){var self = $$3.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            return nil\n          } else {\n            Opal.ret(false)\n          };}, $$3.$$s = self, $$3.$$arity = -1, $$3))\n      } else {\n        $send(self, 'each', [], ($$4 = function($a){var self = $$4.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy($$($nesting, 'Opal').$destructure(value))) {\n            return nil\n          } else {\n            Opal.ret(false)\n          };}, $$4.$$s = self, $$4.$$arity = -1, $$4))\n      };\n      return true;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_all$ques$1.$$arity = -1);\n    \n    Opal.def(self, '$any?', $Enumerable_any$ques$5 = function(pattern) {try {\n\n      var $iter = $Enumerable_any$ques$5.$$p, block = $iter || nil, $$6, $$7, $$8, self = this;\n\n      if ($iter) $Enumerable_any$ques$5.$$p = null;\n      \n      \n      if ($iter) $Enumerable_any$ques$5.$$p = null;;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$6 = function($a){var self = $$6.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            Opal.ret(true)\n          } else {\n            return nil\n          };}, $$6.$$s = self, $$6.$$arity = -1, $$6))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$7 = function($a){var self = $$7.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            Opal.ret(true)\n          } else {\n            return nil\n          };}, $$7.$$s = self, $$7.$$arity = -1, $$7))\n      } else {\n        $send(self, 'each', [], ($$8 = function($a){var self = $$8.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy($$($nesting, 'Opal').$destructure(value))) {\n            Opal.ret(true)\n          } else {\n            return nil\n          };}, $$8.$$s = self, $$8.$$arity = -1, $$8))\n      };\n      return false;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_any$ques$5.$$arity = -1);\n    \n    Opal.def(self, '$chunk', $Enumerable_chunk$9 = function $$chunk() {\n      var $iter = $Enumerable_chunk$9.$$p, block = $iter || nil, $$10, $$11, self = this;\n\n      if ($iter) $Enumerable_chunk$9.$$p = null;\n      \n      \n      if ($iter) $Enumerable_chunk$9.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'to_enum', [\"chunk\"], ($$10 = function(){var self = $$10.$$s || this;\n\n        return self.$enumerator_size()}, $$10.$$s = self, $$10.$$arity = 0, $$10))\n      };\n      return $send($$$('::', 'Enumerator'), 'new', [], ($$11 = function(yielder){var self = $$11.$$s || this;\n\n      \n        \n        if (yielder == null) {\n          yielder = nil;\n        };\n        \n        var previous = nil, accumulate = [];\n\n        function releaseAccumulate() {\n          if (accumulate.length > 0) {\n            yielder.$yield(previous, accumulate)\n          }\n        }\n\n        self.$each.$$p = function(value) {\n          var key = Opal.yield1(block, value);\n\n          if (key === nil) {\n            releaseAccumulate();\n            accumulate = [];\n            previous = nil;\n          } else {\n            if (previous === nil || previous === key) {\n              accumulate.push(value);\n            } else {\n              releaseAccumulate();\n              accumulate = [value];\n            }\n\n            previous = key;\n          }\n        }\n\n        self.$each();\n\n        releaseAccumulate();\n      ;}, $$11.$$s = self, $$11.$$arity = 1, $$11));\n    }, $Enumerable_chunk$9.$$arity = 0);\n    \n    Opal.def(self, '$chunk_while', $Enumerable_chunk_while$12 = function $$chunk_while() {\n      var $iter = $Enumerable_chunk_while$12.$$p, block = $iter || nil, $$13, self = this;\n\n      if ($iter) $Enumerable_chunk_while$12.$$p = null;\n      \n      \n      if ($iter) $Enumerable_chunk_while$12.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"no block given\")\n      };\n      return $send(self, 'slice_when', [], ($$13 = function(before, after){var self = $$13.$$s || this;\n\n      \n        \n        if (before == null) {\n          before = nil;\n        };\n        \n        if (after == null) {\n          after = nil;\n        };\n        return Opal.yieldX(block, [before, after])['$!']();}, $$13.$$s = self, $$13.$$arity = 2, $$13));\n    }, $Enumerable_chunk_while$12.$$arity = 0);\n    \n    Opal.def(self, '$collect', $Enumerable_collect$14 = function $$collect() {\n      var $iter = $Enumerable_collect$14.$$p, block = $iter || nil, $$15, self = this;\n\n      if ($iter) $Enumerable_collect$14.$$p = null;\n      \n      \n      if ($iter) $Enumerable_collect$14.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect\"], ($$15 = function(){var self = $$15.$$s || this;\n\n        return self.$enumerator_size()}, $$15.$$s = self, $$15.$$arity = 0, $$15))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var value = Opal.yieldX(block, arguments);\n\n        result.push(value);\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_collect$14.$$arity = 0);\n    \n    Opal.def(self, '$collect_concat', $Enumerable_collect_concat$16 = function $$collect_concat() {\n      var $iter = $Enumerable_collect_concat$16.$$p, block = $iter || nil, $$17, $$18, self = this;\n\n      if ($iter) $Enumerable_collect_concat$16.$$p = null;\n      \n      \n      if ($iter) $Enumerable_collect_concat$16.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect_concat\"], ($$17 = function(){var self = $$17.$$s || this;\n\n        return self.$enumerator_size()}, $$17.$$s = self, $$17.$$arity = 0, $$17))\n      };\n      return $send(self, 'map', [], ($$18 = function(item){var self = $$18.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return Opal.yield1(block, item);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)).$flatten(1);\n    }, $Enumerable_collect_concat$16.$$arity = 0);\n    \n    Opal.def(self, '$count', $Enumerable_count$19 = function $$count(object) {\n      var $iter = $Enumerable_count$19.$$p, block = $iter || nil, $$20, $$21, $$22, self = this, result = nil;\n\n      if ($iter) $Enumerable_count$19.$$p = null;\n      \n      \n      if ($iter) $Enumerable_count$19.$$p = null;;\n      ;\n      result = 0;\n      \n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n    ;\n      if ($truthy(object != null)) {\n        block = $send(self, 'proc', [], ($$20 = function($a){var self = $$20.$$s || this, $post_args, args;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $$($nesting, 'Opal').$destructure(args)['$=='](object);}, $$20.$$s = self, $$20.$$arity = -1, $$20))\n      } else if ($truthy(block['$nil?']())) {\n        block = $send(self, 'proc', [], ($$21 = function(){var self = $$21.$$s || this;\n\n        return true}, $$21.$$s = self, $$21.$$arity = 0, $$21))};\n      $send(self, 'each', [], ($$22 = function($a){var self = $$22.$$s || this, $post_args, args;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        if ($truthy(Opal.yieldX(block, args))) {\n          return result++;\n        } else {\n          return nil\n        };}, $$22.$$s = self, $$22.$$arity = -1, $$22));\n      return result;\n    }, $Enumerable_count$19.$$arity = -1);\n    \n    Opal.def(self, '$cycle', $Enumerable_cycle$23 = function $$cycle(n) {\n      var $iter = $Enumerable_cycle$23.$$p, block = $iter || nil, $$24, self = this;\n\n      if ($iter) $Enumerable_cycle$23.$$p = null;\n      \n      \n      if ($iter) $Enumerable_cycle$23.$$p = null;;\n      \n      if (n == null) {\n        n = nil;\n      };\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"cycle\", n], ($$24 = function(){var self = $$24.$$s || this;\n\n        if ($truthy(n['$nil?']())) {\n            if ($truthy(self['$respond_to?'](\"size\"))) {\n              return $$$($$($nesting, 'Float'), 'INFINITY')\n            } else {\n              return nil\n            }\n          } else {\n            \n            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n            if ($truthy($rb_gt(n, 0))) {\n              return $rb_times(self.$enumerator_size(), n)\n            } else {\n              return 0\n            };\n          }}, $$24.$$s = self, $$24.$$arity = 0, $$24))\n      };\n      if ($truthy(n['$nil?']())) {\n      } else {\n        \n        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(n <= 0)) {\n          return nil};\n      };\n      \n      var result,\n          all = [], i, length, value;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        all.push(param);\n      }\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n\n      if (all.length === 0) {\n        return nil;\n      }\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = Opal.yield1(block, all[i]);\n          }\n        }\n      }\n      else {\n        while (n > 1) {\n          for (i = 0, length = all.length; i < length; i++) {\n            value = Opal.yield1(block, all[i]);\n          }\n\n          n--;\n        }\n      }\n    ;\n    }, $Enumerable_cycle$23.$$arity = -1);\n    \n    Opal.def(self, '$detect', $Enumerable_detect$25 = function $$detect(ifnone) {try {\n\n      var $iter = $Enumerable_detect$25.$$p, block = $iter || nil, $$26, self = this;\n\n      if ($iter) $Enumerable_detect$25.$$p = null;\n      \n      \n      if ($iter) $Enumerable_detect$25.$$p = null;;\n      ;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"detect\", ifnone)\n      };\n      $send(self, 'each', [], ($$26 = function($a){var self = $$26.$$s || this, $post_args, args, value = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        value = $$($nesting, 'Opal').$destructure(args);\n        if ($truthy(Opal.yield1(block, value))) {\n          Opal.ret(value)\n        } else {\n          return nil\n        };}, $$26.$$s = self, $$26.$$arity = -1, $$26));\n      \n      if (ifnone !== undefined) {\n        if (typeof(ifnone) === 'function') {\n          return ifnone();\n        } else {\n          return ifnone;\n        }\n      }\n    ;\n      return nil;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_detect$25.$$arity = -1);\n    \n    Opal.def(self, '$drop', $Enumerable_drop$27 = function $$drop(number) {\n      var self = this;\n\n      \n      number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(number < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"attempt to drop negative size\")};\n      \n      var result  = [],\n          current = 0;\n\n      self.$each.$$p = function() {\n        if (number <= current) {\n          result.push($$($nesting, 'Opal').$destructure(arguments));\n        }\n\n        current++;\n      };\n\n      self.$each()\n\n      return result;\n    ;\n    }, $Enumerable_drop$27.$$arity = 1);\n    \n    Opal.def(self, '$drop_while', $Enumerable_drop_while$28 = function $$drop_while() {\n      var $iter = $Enumerable_drop_while$28.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_drop_while$28.$$p = null;\n      \n      \n      if ($iter) $Enumerable_drop_while$28.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"drop_while\")\n      };\n      \n      var result   = [],\n          dropping = true;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        if (dropping) {\n          var value = Opal.yield1(block, param);\n\n          if ($falsy(value)) {\n            dropping = false;\n            result.push(param);\n          }\n        }\n        else {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_drop_while$28.$$arity = 0);\n    \n    Opal.def(self, '$each_cons', $Enumerable_each_cons$29 = function $$each_cons(n) {\n      var $iter = $Enumerable_each_cons$29.$$p, block = $iter || nil, $$30, self = this;\n\n      if ($iter) $Enumerable_each_cons$29.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_cons$29.$$p = null;;\n      if ($truthy(arguments.length != 1)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" for 1)\")};\n      n = $$($nesting, 'Opal').$try_convert(n, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(n <= 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"invalid size\")};\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_cons\", n], ($$30 = function(){var self = $$30.$$s || this, $a, enum_size = nil;\n\n        \n          enum_size = self.$enumerator_size();\n          if ($truthy(enum_size['$nil?']())) {\n            return nil\n          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(enum_size, n), 1)\n          };}, $$30.$$s = self, $$30.$$arity = 0, $$30))\n      };\n      \n      var buffer = [], result = nil;\n\n      self.$each.$$p = function() {\n        var element = $$($nesting, 'Opal').$destructure(arguments);\n        buffer.push(element);\n        if (buffer.length > n) {\n          buffer.shift();\n        }\n        if (buffer.length == n) {\n          Opal.yield1(block, buffer.slice(0, n));\n        }\n      }\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_each_cons$29.$$arity = 1);\n    \n    Opal.def(self, '$each_entry', $Enumerable_each_entry$31 = function $$each_entry($a) {\n      var $iter = $Enumerable_each_entry$31.$$p, block = $iter || nil, $post_args, data, $$32, self = this;\n\n      if ($iter) $Enumerable_each_entry$31.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_entry$31.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      data = $post_args;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'to_enum', [\"each_entry\"].concat(Opal.to_a(data)), ($$32 = function(){var self = $$32.$$s || this;\n\n        return self.$enumerator_size()}, $$32.$$s = self, $$32.$$arity = 0, $$32))\n      };\n      \n      self.$each.$$p = function() {\n        var item = $$($nesting, 'Opal').$destructure(arguments);\n\n        Opal.yield1(block, item);\n      }\n\n      self.$each.apply(self, data);\n\n      return self;\n    ;\n    }, $Enumerable_each_entry$31.$$arity = -1);\n    \n    Opal.def(self, '$each_slice', $Enumerable_each_slice$33 = function $$each_slice(n) {\n      var $iter = $Enumerable_each_slice$33.$$p, block = $iter || nil, $$34, self = this;\n\n      if ($iter) $Enumerable_each_slice$33.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_slice$33.$$p = null;;\n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(n <= 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"invalid slice size\")};\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_slice\", n], ($$34 = function(){var self = $$34.$$s || this;\n\n        if ($truthy(self['$respond_to?'](\"size\"))) {\n            return $rb_divide(self.$size(), n).$ceil()\n          } else {\n            return nil\n          }}, $$34.$$s = self, $$34.$$arity = 0, $$34))\n      };\n      \n      var result,\n          slice = []\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        slice.push(param);\n\n        if (slice.length === n) {\n          Opal.yield1(block, slice);\n          slice = [];\n        }\n      };\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n\n      // our \"last\" group, if smaller than n then won't have been yielded\n      if (slice.length > 0) {\n        Opal.yield1(block, slice);\n      }\n    ;\n      return nil;\n    }, $Enumerable_each_slice$33.$$arity = 1);\n    \n    Opal.def(self, '$each_with_index', $Enumerable_each_with_index$35 = function $$each_with_index($a) {\n      var $iter = $Enumerable_each_with_index$35.$$p, block = $iter || nil, $post_args, args, $$36, self = this;\n\n      if ($iter) $Enumerable_each_with_index$35.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_with_index$35.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_with_index\"].concat(Opal.to_a(args)), ($$36 = function(){var self = $$36.$$s || this;\n\n        return self.$enumerator_size()}, $$36.$$s = self, $$36.$$arity = 0, $$36))\n      };\n      \n      var result,\n          index = 0;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        block(param, index);\n\n        index++;\n      };\n\n      self.$each.apply(self, args);\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return self;\n    }, $Enumerable_each_with_index$35.$$arity = -1);\n    \n    Opal.def(self, '$each_with_object', $Enumerable_each_with_object$37 = function $$each_with_object(object) {\n      var $iter = $Enumerable_each_with_object$37.$$p, block = $iter || nil, $$38, self = this;\n\n      if ($iter) $Enumerable_each_with_object$37.$$p = null;\n      \n      \n      if ($iter) $Enumerable_each_with_object$37.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_with_object\", object], ($$38 = function(){var self = $$38.$$s || this;\n\n        return self.$enumerator_size()}, $$38.$$s = self, $$38.$$arity = 0, $$38))\n      };\n      \n      var result;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments);\n\n        block(param, object);\n      };\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return object;\n    }, $Enumerable_each_with_object$37.$$arity = 1);\n    \n    Opal.def(self, '$entries', $Enumerable_entries$39 = function $$entries($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push($$($nesting, 'Opal').$destructure(arguments));\n      };\n\n      self.$each.apply(self, args);\n\n      return result;\n    ;\n    }, $Enumerable_entries$39.$$arity = -1);\n    Opal.alias(self, \"find\", \"detect\");\n    \n    Opal.def(self, '$find_all', $Enumerable_find_all$40 = function $$find_all() {\n      var $iter = $Enumerable_find_all$40.$$p, block = $iter || nil, $$41, self = this;\n\n      if ($iter) $Enumerable_find_all$40.$$p = null;\n      \n      \n      if ($iter) $Enumerable_find_all$40.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"find_all\"], ($$41 = function(){var self = $$41.$$s || this;\n\n        return self.$enumerator_size()}, $$41.$$s = self, $$41.$$arity = 0, $$41))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if ($truthy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_find_all$40.$$arity = 0);\n    \n    Opal.def(self, '$find_index', $Enumerable_find_index$42 = function $$find_index(object) {try {\n\n      var $iter = $Enumerable_find_index$42.$$p, block = $iter || nil, $$43, $$44, self = this, index = nil;\n\n      if ($iter) $Enumerable_find_index$42.$$p = null;\n      \n      \n      if ($iter) $Enumerable_find_index$42.$$p = null;;\n      ;\n      if ($truthy(object === undefined && block === nil)) {\n        return self.$enum_for(\"find_index\")};\n      \n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n    ;\n      index = 0;\n      if ($truthy(object != null)) {\n        $send(self, 'each', [], ($$43 = function($a){var self = $$43.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($$($nesting, 'Opal').$destructure(value)['$=='](object)) {\n            Opal.ret(index)};\n          return index += 1;;}, $$43.$$s = self, $$43.$$arity = -1, $$43))\n      } else {\n        $send(self, 'each', [], ($$44 = function($a){var self = $$44.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            Opal.ret(index)};\n          return index += 1;;}, $$44.$$s = self, $$44.$$arity = -1, $$44))\n      };\n      return nil;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_find_index$42.$$arity = -1);\n    \n    Opal.def(self, '$first', $Enumerable_first$45 = function $$first(number) {try {\n\n      var $$46, $$47, self = this, result = nil, current = nil;\n\n      \n      ;\n      if ($truthy(number === undefined)) {\n        return $send(self, 'each', [], ($$46 = function(value){var self = $$46.$$s || this;\n\n        \n          \n          if (value == null) {\n            value = nil;\n          };\n          Opal.ret(value);}, $$46.$$s = self, $$46.$$arity = 1, $$46))\n      } else {\n        \n        result = [];\n        number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(number < 0)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"attempt to take negative size\")};\n        if ($truthy(number == 0)) {\n          return []};\n        current = 0;\n        $send(self, 'each', [], ($$47 = function($a){var self = $$47.$$s || this, $post_args, args;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          result.push($$($nesting, 'Opal').$destructure(args));\n          if ($truthy(number <= ++current)) {\n            Opal.ret(result)\n          } else {\n            return nil\n          };}, $$47.$$s = self, $$47.$$arity = -1, $$47));\n        return result;\n      };\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_first$45.$$arity = -1);\n    Opal.alias(self, \"flat_map\", \"collect_concat\");\n    \n    Opal.def(self, '$grep', $Enumerable_grep$48 = function $$grep(pattern) {\n      var $iter = $Enumerable_grep$48.$$p, block = $iter || nil, $$49, self = this, result = nil;\n\n      if ($iter) $Enumerable_grep$48.$$p = null;\n      \n      \n      if ($iter) $Enumerable_grep$48.$$p = null;;\n      result = [];\n      $send(self, 'each', [], ($$49 = function($a){var self = $$49.$$s || this, $post_args, value, cmp = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        value = $post_args;;\n        cmp = comparableForPattern(value);\n        if ($truthy($send(pattern, '__send__', [\"===\"].concat(Opal.to_a(cmp))))) {\n        } else {\n          return nil;\n        };\n        if ((block !== nil)) {\n          \n          if ($truthy($rb_gt(value.$length(), 1))) {\n            value = [value]};\n          value = Opal.yieldX(block, Opal.to_a(value));\n        } else if ($truthy($rb_le(value.$length(), 1))) {\n          value = value['$[]'](0)};\n        return result.$push(value);}, $$49.$$s = self, $$49.$$arity = -1, $$49));\n      return result;\n    }, $Enumerable_grep$48.$$arity = 1);\n    \n    Opal.def(self, '$grep_v', $Enumerable_grep_v$50 = function $$grep_v(pattern) {\n      var $iter = $Enumerable_grep_v$50.$$p, block = $iter || nil, $$51, self = this, result = nil;\n\n      if ($iter) $Enumerable_grep_v$50.$$p = null;\n      \n      \n      if ($iter) $Enumerable_grep_v$50.$$p = null;;\n      result = [];\n      $send(self, 'each', [], ($$51 = function($a){var self = $$51.$$s || this, $post_args, value, cmp = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        value = $post_args;;\n        cmp = comparableForPattern(value);\n        if ($truthy($send(pattern, '__send__', [\"===\"].concat(Opal.to_a(cmp))))) {\n          return nil;};\n        if ((block !== nil)) {\n          \n          if ($truthy($rb_gt(value.$length(), 1))) {\n            value = [value]};\n          value = Opal.yieldX(block, Opal.to_a(value));\n        } else if ($truthy($rb_le(value.$length(), 1))) {\n          value = value['$[]'](0)};\n        return result.$push(value);}, $$51.$$s = self, $$51.$$arity = -1, $$51));\n      return result;\n    }, $Enumerable_grep_v$50.$$arity = 1);\n    \n    Opal.def(self, '$group_by', $Enumerable_group_by$52 = function $$group_by() {\n      var $iter = $Enumerable_group_by$52.$$p, block = $iter || nil, $$53, $a, self = this, hash = nil, $writer = nil;\n\n      if ($iter) $Enumerable_group_by$52.$$p = null;\n      \n      \n      if ($iter) $Enumerable_group_by$52.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"group_by\"], ($$53 = function(){var self = $$53.$$s || this;\n\n        return self.$enumerator_size()}, $$53.$$s = self, $$53.$$arity = 0, $$53))\n      };\n      hash = $hash2([], {});\n      \n      var result;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<'](param);\n      }\n\n      self.$each();\n\n      if (result !== undefined) {\n        return result;\n      }\n    ;\n      return hash;\n    }, $Enumerable_group_by$52.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Enumerable_include$ques$54 = function(obj) {try {\n\n      var $$55, self = this;\n\n      \n      $send(self, 'each', [], ($$55 = function($a){var self = $$55.$$s || this, $post_args, args;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        if ($$($nesting, 'Opal').$destructure(args)['$=='](obj)) {\n          Opal.ret(true)\n        } else {\n          return nil\n        };}, $$55.$$s = self, $$55.$$arity = -1, $$55));\n      return false;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_include$ques$54.$$arity = 1);\n    \n    Opal.def(self, '$inject', $Enumerable_inject$56 = function $$inject(object, sym) {\n      var $iter = $Enumerable_inject$56.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_inject$56.$$p = null;\n      \n      \n      if ($iter) $Enumerable_inject$56.$$p = null;;\n      ;\n      ;\n      \n      var result = object;\n\n      if (block !== nil && sym === undefined) {\n        self.$each.$$p = function() {\n          var value = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          value = Opal.yieldX(block, [result, value]);\n\n          result = value;\n        };\n      }\n      else {\n        if (sym === undefined) {\n          if (!$$($nesting, 'Symbol')['$==='](object)) {\n            self.$raise($$($nesting, 'TypeError'), \"\" + (object.$inspect()) + \" is not a Symbol\");\n          }\n\n          sym    = object;\n          result = undefined;\n        }\n\n        self.$each.$$p = function() {\n          var value = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = value;\n            return;\n          }\n\n          result = (result).$__send__(sym, value);\n        };\n      }\n\n      self.$each();\n\n      return result == undefined ? nil : result;\n    ;\n    }, $Enumerable_inject$56.$$arity = -1);\n    \n    Opal.def(self, '$lazy', $Enumerable_lazy$57 = function $$lazy() {\n      var $$58, self = this;\n\n      return $send($$$($$($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], ($$58 = function(enum$, $a){var self = $$58.$$s || this, $post_args, args;\n\n      \n        \n        if (enum$ == null) {\n          enum$ = nil;\n        };\n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        args = $post_args;;\n        return $send(enum$, 'yield', Opal.to_a(args));}, $$58.$$s = self, $$58.$$arity = -2, $$58))\n    }, $Enumerable_lazy$57.$$arity = 0);\n    \n    Opal.def(self, '$enumerator_size', $Enumerable_enumerator_size$59 = function $$enumerator_size() {\n      var self = this;\n\n      if ($truthy(self['$respond_to?'](\"size\"))) {\n        return self.$size()\n      } else {\n        return nil\n      }\n    }, $Enumerable_enumerator_size$59.$$arity = 0);\n    Opal.alias(self, \"map\", \"collect\");\n    \n    Opal.def(self, '$max', $Enumerable_max$60 = function $$max(n) {\n      var $iter = $Enumerable_max$60.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_max$60.$$p = null;\n      \n      \n      if ($iter) $Enumerable_max$60.$$p = null;;\n      ;\n      \n      if (n === undefined || n === nil) {\n        var result, value;\n\n        self.$each.$$p = function() {\n          var item = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = item;\n            return;\n          }\n\n          if (block !== nil) {\n            value = Opal.yieldX(block, [item, result]);\n          } else {\n            value = (item)['$<=>'](result);\n          }\n\n          if (value === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\");\n          }\n\n          if (value > 0) {\n            result = item;\n          }\n        }\n\n        self.$each();\n\n        if (result === undefined) {\n          return nil;\n        } else {\n          return result;\n        }\n      }\n    ;\n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);\n    }, $Enumerable_max$60.$$arity = -1);\n    \n    Opal.def(self, '$max_by', $Enumerable_max_by$61 = function $$max_by() {\n      var $iter = $Enumerable_max_by$61.$$p, block = $iter || nil, $$62, self = this;\n\n      if ($iter) $Enumerable_max_by$61.$$p = null;\n      \n      \n      if ($iter) $Enumerable_max_by$61.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"max_by\"], ($$62 = function(){var self = $$62.$$s || this;\n\n        return self.$enumerator_size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))\n      };\n      \n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if ((value)['$<=>'](by) > 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, $Enumerable_max_by$61.$$arity = 0);\n    Opal.alias(self, \"member?\", \"include?\");\n    \n    Opal.def(self, '$min', $Enumerable_min$63 = function $$min() {\n      var $iter = $Enumerable_min$63.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_min$63.$$p = null;\n      \n      \n      if ($iter) $Enumerable_min$63.$$p = null;;\n      \n      var result;\n\n      if (block !== nil) {\n        self.$each.$$p = function() {\n          var param = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          var value = block(param, result);\n\n          if (value === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\");\n          }\n\n          if (value < 0) {\n            result = param;\n          }\n        };\n      }\n      else {\n        self.$each.$$p = function() {\n          var param = $$($nesting, 'Opal').$destructure(arguments);\n\n          if (result === undefined) {\n            result = param;\n            return;\n          }\n\n          if ($$($nesting, 'Opal').$compare(param, result) < 0) {\n            result = param;\n          }\n        };\n      }\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, $Enumerable_min$63.$$arity = 0);\n    \n    Opal.def(self, '$min_by', $Enumerable_min_by$64 = function $$min_by() {\n      var $iter = $Enumerable_min_by$64.$$p, block = $iter || nil, $$65, self = this;\n\n      if ($iter) $Enumerable_min_by$64.$$p = null;\n      \n      \n      if ($iter) $Enumerable_min_by$64.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"min_by\"], ($$65 = function(){var self = $$65.$$s || this;\n\n        return self.$enumerator_size()}, $$65.$$s = self, $$65.$$arity = 0, $$65))\n      };\n      \n      var result,\n          by;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if (result === undefined) {\n          result = param;\n          by     = value;\n          return;\n        }\n\n        if ((value)['$<=>'](by) < 0) {\n          result = param\n          by     = value;\n        }\n      };\n\n      self.$each();\n\n      return result === undefined ? nil : result;\n    ;\n    }, $Enumerable_min_by$64.$$arity = 0);\n    \n    Opal.def(self, '$minmax', $Enumerable_minmax$66 = function $$minmax() {\n      var $iter = $Enumerable_minmax$66.$$p, block = $iter || nil, $a, $$67, self = this;\n\n      if ($iter) $Enumerable_minmax$66.$$p = null;\n      \n      \n      if ($iter) $Enumerable_minmax$66.$$p = null;;\n      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], ($$67 = function(a, b){var self = $$67.$$s || this;\n\n      \n        \n        if (a == null) {\n          a = nil;\n        };\n        \n        if (b == null) {\n          b = nil;\n        };\n        return a['$<=>'](b);}, $$67.$$s = self, $$67.$$arity = 2, $$67)));\n      \n      var min = nil, max = nil, first_time = true;\n\n      self.$each.$$p = function() {\n        var element = $$($nesting, 'Opal').$destructure(arguments);\n        if (first_time) {\n          min = max = element;\n          first_time = false;\n        } else {\n          var min_cmp = block.$call(min, element);\n\n          if (min_cmp === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\")\n          } else if (min_cmp > 0) {\n            min = element;\n          }\n\n          var max_cmp = block.$call(max, element);\n\n          if (max_cmp === nil) {\n            self.$raise($$($nesting, 'ArgumentError'), \"comparison failed\")\n          } else if (max_cmp < 0) {\n            max = element;\n          }\n        }\n      }\n\n      self.$each();\n\n      return [min, max];\n    ;\n    }, $Enumerable_minmax$66.$$arity = 0);\n    \n    Opal.def(self, '$minmax_by', $Enumerable_minmax_by$68 = function $$minmax_by() {\n      var $iter = $Enumerable_minmax_by$68.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Enumerable_minmax_by$68.$$p = null;\n      \n      \n      if ($iter) $Enumerable_minmax_by$68.$$p = null;;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Enumerable_minmax_by$68.$$arity = 0);\n    \n    Opal.def(self, '$none?', $Enumerable_none$ques$69 = function(pattern) {try {\n\n      var $iter = $Enumerable_none$ques$69.$$p, block = $iter || nil, $$70, $$71, $$72, self = this;\n\n      if ($iter) $Enumerable_none$ques$69.$$p = null;\n      \n      \n      if ($iter) $Enumerable_none$ques$69.$$p = null;;\n      ;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$70 = function($a){var self = $$70.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$70.$$s = self, $$70.$$arity = -1, $$70))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$71 = function($a){var self = $$71.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$71.$$s = self, $$71.$$arity = -1, $$71))\n      } else {\n        $send(self, 'each', [], ($$72 = function($a){var self = $$72.$$s || this, $post_args, value, item = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          item = $$($nesting, 'Opal').$destructure(value);\n          if ($truthy(item)) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$72.$$s = self, $$72.$$arity = -1, $$72))\n      };\n      return true;\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_none$ques$69.$$arity = -1);\n    \n    Opal.def(self, '$one?', $Enumerable_one$ques$73 = function(pattern) {try {\n\n      var $iter = $Enumerable_one$ques$73.$$p, block = $iter || nil, $$74, $$75, $$76, self = this, count = nil;\n\n      if ($iter) $Enumerable_one$ques$73.$$p = null;\n      \n      \n      if ($iter) $Enumerable_one$ques$73.$$p = null;;\n      ;\n      count = 0;\n      if ($truthy(pattern !== undefined)) {\n        $send(self, 'each', [], ($$74 = function($a){var self = $$74.$$s || this, $post_args, value, comparable = nil;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          comparable = comparableForPattern(value);\n          if ($truthy($send(pattern, 'public_send', [\"===\"].concat(Opal.to_a(comparable))))) {\n            \n            count = $rb_plus(count, 1);\n            if ($truthy($rb_gt(count, 1))) {\n              Opal.ret(false)\n            } else {\n              return nil\n            };\n          } else {\n            return nil\n          };}, $$74.$$s = self, $$74.$$arity = -1, $$74))\n      } else if ((block !== nil)) {\n        $send(self, 'each', [], ($$75 = function($a){var self = $$75.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {\n          } else {\n            return nil;\n          };\n          count = $rb_plus(count, 1);\n          if ($truthy($rb_gt(count, 1))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$75.$$s = self, $$75.$$arity = -1, $$75))\n      } else {\n        $send(self, 'each', [], ($$76 = function($a){var self = $$76.$$s || this, $post_args, value;\n\n        \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          if ($truthy($$($nesting, 'Opal').$destructure(value))) {\n          } else {\n            return nil;\n          };\n          count = $rb_plus(count, 1);\n          if ($truthy($rb_gt(count, 1))) {\n            Opal.ret(false)\n          } else {\n            return nil\n          };}, $$76.$$s = self, $$76.$$arity = -1, $$76))\n      };\n      return count['$=='](1);\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_one$ques$73.$$arity = -1);\n    \n    Opal.def(self, '$partition', $Enumerable_partition$77 = function $$partition() {\n      var $iter = $Enumerable_partition$77.$$p, block = $iter || nil, $$78, self = this;\n\n      if ($iter) $Enumerable_partition$77.$$p = null;\n      \n      \n      if ($iter) $Enumerable_partition$77.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"partition\"], ($$78 = function(){var self = $$78.$$s || this;\n\n        return self.$enumerator_size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))\n      };\n      \n      var truthy = [], falsy = [], result;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if ($truthy(value)) {\n          truthy.push(param);\n        }\n        else {\n          falsy.push(param);\n        }\n      };\n\n      self.$each();\n\n      return [truthy, falsy];\n    ;\n    }, $Enumerable_partition$77.$$arity = 0);\n    Opal.alias(self, \"reduce\", \"inject\");\n    \n    Opal.def(self, '$reject', $Enumerable_reject$79 = function $$reject() {\n      var $iter = $Enumerable_reject$79.$$p, block = $iter || nil, $$80, self = this;\n\n      if ($iter) $Enumerable_reject$79.$$p = null;\n      \n      \n      if ($iter) $Enumerable_reject$79.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject\"], ($$80 = function(){var self = $$80.$$s || this;\n\n        return self.$enumerator_size()}, $$80.$$s = self, $$80.$$arity = 0, $$80))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = Opal.yield1(block, param);\n\n        if ($falsy(value)) {\n          result.push(param);\n        }\n      };\n\n      self.$each();\n\n      return result;\n    ;\n    }, $Enumerable_reject$79.$$arity = 0);\n    \n    Opal.def(self, '$reverse_each', $Enumerable_reverse_each$81 = function $$reverse_each() {\n      var $iter = $Enumerable_reverse_each$81.$$p, block = $iter || nil, $$82, self = this;\n\n      if ($iter) $Enumerable_reverse_each$81.$$p = null;\n      \n      \n      if ($iter) $Enumerable_reverse_each$81.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reverse_each\"], ($$82 = function(){var self = $$82.$$s || this;\n\n        return self.$enumerator_size()}, $$82.$$s = self, $$82.$$arity = 0, $$82))\n      };\n      \n      var result = [];\n\n      self.$each.$$p = function() {\n        result.push(arguments);\n      };\n\n      self.$each();\n\n      for (var i = result.length - 1; i >= 0; i--) {\n        Opal.yieldX(block, result[i]);\n      }\n\n      return result;\n    ;\n    }, $Enumerable_reverse_each$81.$$arity = 0);\n    Opal.alias(self, \"select\", \"find_all\");\n    \n    Opal.def(self, '$slice_before', $Enumerable_slice_before$83 = function $$slice_before(pattern) {\n      var $iter = $Enumerable_slice_before$83.$$p, block = $iter || nil, $$84, self = this;\n\n      if ($iter) $Enumerable_slice_before$83.$$p = null;\n      \n      \n      if ($iter) $Enumerable_slice_before$83.$$p = null;;\n      ;\n      if ($truthy(pattern === undefined && block === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"both pattern and block are given\")};\n      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" expected 1)\")};\n      return $send($$($nesting, 'Enumerator'), 'new', [], ($$84 = function(e){var self = $$84.$$s || this;\n\n      \n        \n        if (e == null) {\n          e = nil;\n        };\n        \n        var slice = [];\n\n        if (block !== nil) {\n          if (pattern === undefined) {\n            self.$each.$$p = function() {\n              var param = $$($nesting, 'Opal').$destructure(arguments),\n                  value = Opal.yield1(block, param);\n\n              if ($truthy(value) && slice.length > 0) {\n                e['$<<'](slice);\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n          else {\n            self.$each.$$p = function() {\n              var param = $$($nesting, 'Opal').$destructure(arguments),\n                  value = block(param, pattern.$dup());\n\n              if ($truthy(value) && slice.length > 0) {\n                e['$<<'](slice);\n                slice = [];\n              }\n\n              slice.push(param);\n            };\n          }\n        }\n        else {\n          self.$each.$$p = function() {\n            var param = $$($nesting, 'Opal').$destructure(arguments),\n                value = pattern['$==='](param);\n\n            if ($truthy(value) && slice.length > 0) {\n              e['$<<'](slice);\n              slice = [];\n            }\n\n            slice.push(param);\n          };\n        }\n\n        self.$each();\n\n        if (slice.length > 0) {\n          e['$<<'](slice);\n        }\n      ;}, $$84.$$s = self, $$84.$$arity = 1, $$84));\n    }, $Enumerable_slice_before$83.$$arity = -1);\n    \n    Opal.def(self, '$slice_after', $Enumerable_slice_after$85 = function $$slice_after(pattern) {\n      var $iter = $Enumerable_slice_after$85.$$p, block = $iter || nil, $$86, $$87, self = this;\n\n      if ($iter) $Enumerable_slice_after$85.$$p = null;\n      \n      \n      if ($iter) $Enumerable_slice_after$85.$$p = null;;\n      ;\n      if ($truthy(pattern === undefined && block === nil)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"both pattern and block are given\")};\n      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" expected 1)\")};\n      if ($truthy(pattern !== undefined)) {\n        block = $send(self, 'proc', [], ($$86 = function(e){var self = $$86.$$s || this;\n\n        \n          \n          if (e == null) {\n            e = nil;\n          };\n          return pattern['$==='](e);}, $$86.$$s = self, $$86.$$arity = 1, $$86))};\n      return $send($$($nesting, 'Enumerator'), 'new', [], ($$87 = function(yielder){var self = $$87.$$s || this;\n\n      \n        \n        if (yielder == null) {\n          yielder = nil;\n        };\n        \n        var accumulate;\n\n        self.$each.$$p = function() {\n          var element = $$($nesting, 'Opal').$destructure(arguments),\n              end_chunk = Opal.yield1(block, element);\n\n          if (accumulate == null) {\n            accumulate = [];\n          }\n\n          if ($truthy(end_chunk)) {\n            accumulate.push(element);\n            yielder.$yield(accumulate);\n            accumulate = null;\n          } else {\n            accumulate.push(element)\n          }\n        }\n\n        self.$each();\n\n        if (accumulate != null) {\n          yielder.$yield(accumulate);\n        }\n      ;}, $$87.$$s = self, $$87.$$arity = 1, $$87));\n    }, $Enumerable_slice_after$85.$$arity = -1);\n    \n    Opal.def(self, '$slice_when', $Enumerable_slice_when$88 = function $$slice_when() {\n      var $iter = $Enumerable_slice_when$88.$$p, block = $iter || nil, $$89, self = this;\n\n      if ($iter) $Enumerable_slice_when$88.$$p = null;\n      \n      \n      if ($iter) $Enumerable_slice_when$88.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (0 for 1)\")\n      };\n      return $send($$($nesting, 'Enumerator'), 'new', [], ($$89 = function(yielder){var self = $$89.$$s || this;\n\n      \n        \n        if (yielder == null) {\n          yielder = nil;\n        };\n        \n        var slice = nil, last_after = nil;\n\n        self.$each_cons.$$p = function() {\n          var params = $$($nesting, 'Opal').$destructure(arguments),\n              before = params[0],\n              after = params[1],\n              match = Opal.yieldX(block, [before, after]);\n\n          last_after = after;\n\n          if (slice === nil) {\n            slice = [];\n          }\n\n          if ($truthy(match)) {\n            slice.push(before);\n            yielder.$yield(slice);\n            slice = [];\n          } else {\n            slice.push(before);\n          }\n        }\n\n        self.$each_cons(2);\n\n        if (slice !== nil) {\n          slice.push(last_after);\n          yielder.$yield(slice);\n        }\n      ;}, $$89.$$s = self, $$89.$$arity = 1, $$89));\n    }, $Enumerable_slice_when$88.$$arity = 0);\n    \n    Opal.def(self, '$sort', $Enumerable_sort$90 = function $$sort() {\n      var $iter = $Enumerable_sort$90.$$p, block = $iter || nil, $$91, self = this, ary = nil;\n\n      if ($iter) $Enumerable_sort$90.$$p = null;\n      \n      \n      if ($iter) $Enumerable_sort$90.$$p = null;;\n      ary = self.$to_a();\n      if ((block !== nil)) {\n      } else {\n        block = $lambda(($$91 = function(a, b){var self = $$91.$$s || this;\n\n        \n          \n          if (a == null) {\n            a = nil;\n          };\n          \n          if (b == null) {\n            b = nil;\n          };\n          return a['$<=>'](b);}, $$91.$$s = self, $$91.$$arity = 2, $$91))\n      };\n      return $send(ary, 'sort', [], block.$to_proc());\n    }, $Enumerable_sort$90.$$arity = 0);\n    \n    Opal.def(self, '$sort_by', $Enumerable_sort_by$92 = function $$sort_by() {\n      var $iter = $Enumerable_sort_by$92.$$p, block = $iter || nil, $$93, $$94, $$95, $$96, self = this, dup = nil;\n\n      if ($iter) $Enumerable_sort_by$92.$$p = null;\n      \n      \n      if ($iter) $Enumerable_sort_by$92.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"sort_by\"], ($$93 = function(){var self = $$93.$$s || this;\n\n        return self.$enumerator_size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))\n      };\n      dup = $send(self, 'map', [], ($$94 = function(){var self = $$94.$$s || this, arg = nil;\n\n      \n        arg = $$($nesting, 'Opal').$destructure(arguments);\n        return [Opal.yield1(block, arg), arg];}, $$94.$$s = self, $$94.$$arity = 0, $$94));\n      $send(dup, 'sort!', [], ($$95 = function(a, b){var self = $$95.$$s || this;\n\n      \n        \n        if (a == null) {\n          a = nil;\n        };\n        \n        if (b == null) {\n          b = nil;\n        };\n        return (a[0])['$<=>'](b[0]);}, $$95.$$s = self, $$95.$$arity = 2, $$95));\n      return $send(dup, 'map!', [], ($$96 = function(i){var self = $$96.$$s || this;\n\n      \n        \n        if (i == null) {\n          i = nil;\n        };\n        return i[1];;}, $$96.$$s = self, $$96.$$arity = 1, $$96));\n    }, $Enumerable_sort_by$92.$$arity = 0);\n    \n    Opal.def(self, '$sum', $Enumerable_sum$97 = function $$sum(initial) {\n      var $$98, $iter = $Enumerable_sum$97.$$p, $yield = $iter || nil, self = this, result = nil;\n\n      if ($iter) $Enumerable_sum$97.$$p = null;\n      \n      \n      if (initial == null) {\n        initial = 0;\n      };\n      result = initial;\n      $send(self, 'each', [], ($$98 = function($a){var self = $$98.$$s || this, $post_args, args, item = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        item = (function() {if (($yield !== nil)) {\n          return Opal.yieldX($yield, Opal.to_a(args));\n        } else {\n          return $$($nesting, 'Opal').$destructure(args)\n        }; return nil; })();\n        return (result = $rb_plus(result, item));}, $$98.$$s = self, $$98.$$arity = -1, $$98));\n      return result;\n    }, $Enumerable_sum$97.$$arity = -1);\n    \n    Opal.def(self, '$take', $Enumerable_take$99 = function $$take(num) {\n      var self = this;\n\n      return self.$first(num)\n    }, $Enumerable_take$99.$$arity = 1);\n    \n    Opal.def(self, '$take_while', $Enumerable_take_while$100 = function $$take_while() {try {\n\n      var $iter = $Enumerable_take_while$100.$$p, block = $iter || nil, $$101, self = this, result = nil;\n\n      if ($iter) $Enumerable_take_while$100.$$p = null;\n      \n      \n      if ($iter) $Enumerable_take_while$100.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return self.$enum_for(\"take_while\")\n      };\n      result = [];\n      return $send(self, 'each', [], ($$101 = function($a){var self = $$101.$$s || this, $post_args, args, value = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        value = $$($nesting, 'Opal').$destructure(args);\n        if ($truthy(Opal.yield1(block, value))) {\n        } else {\n          Opal.ret(result)\n        };\n        return result.push(value);;}, $$101.$$s = self, $$101.$$arity = -1, $$101));\n      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n    }, $Enumerable_take_while$100.$$arity = 0);\n    \n    Opal.def(self, '$uniq', $Enumerable_uniq$102 = function $$uniq() {\n      var $iter = $Enumerable_uniq$102.$$p, block = $iter || nil, $$103, self = this, hash = nil;\n\n      if ($iter) $Enumerable_uniq$102.$$p = null;\n      \n      \n      if ($iter) $Enumerable_uniq$102.$$p = null;;\n      hash = $hash2([], {});\n      $send(self, 'each', [], ($$103 = function($a){var self = $$103.$$s || this, $post_args, args, value = nil, produced = nil, $writer = nil;\n\n      \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        value = $$($nesting, 'Opal').$destructure(args);\n        produced = (function() {if ((block !== nil)) {\n          return Opal.yield1(block, value);\n        } else {\n          return value\n        }; return nil; })();\n        if ($truthy(hash['$key?'](produced))) {\n          return nil\n        } else {\n          \n          $writer = [produced, value];\n          $send(hash, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };}, $$103.$$s = self, $$103.$$arity = -1, $$103));\n      return hash.$values();\n    }, $Enumerable_uniq$102.$$arity = 0);\n    Opal.alias(self, \"to_a\", \"entries\");\n    \n    Opal.def(self, '$zip', $Enumerable_zip$104 = function $$zip($a) {\n      var $iter = $Enumerable_zip$104.$$p, block = $iter || nil, $post_args, others, self = this;\n\n      if ($iter) $Enumerable_zip$104.$$p = null;\n      \n      \n      if ($iter) $Enumerable_zip$104.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      others = $post_args;;\n      return $send(self.$to_a(), 'zip', Opal.to_a(others));\n    }, $Enumerable_zip$104.$$arity = -1);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/enumerator\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy;\n\n  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$any?', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Enumerator');\n\n    var $nesting = [self].concat($parent_nesting), $Enumerator_for$1, $Enumerator_initialize$2, $Enumerator_each$3, $Enumerator_size$4, $Enumerator_with_index$5, $Enumerator_inspect$7;\n\n    self.$$prototype.size = self.$$prototype.args = self.$$prototype.object = self.$$prototype.method = nil;\n    \n    self.$include($$($nesting, 'Enumerable'));\n    self.$$prototype.$$is_enumerator = true;\n    Opal.defs(self, '$for', $Enumerator_for$1 = function(object, $a, $b) {\n      var $iter = $Enumerator_for$1.$$p, block = $iter || nil, $post_args, method, args, self = this;\n\n      if ($iter) $Enumerator_for$1.$$p = null;\n      \n      \n      if ($iter) $Enumerator_for$1.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      if ($post_args.length > 0) {\n        method = $post_args[0];\n        $post_args.splice(0, 1);\n      }\n      if (method == null) {\n        method = \"each\";\n      };\n      \n      args = $post_args;;\n      \n      var obj = self.$allocate();\n\n      obj.object = object;\n      obj.size   = block;\n      obj.method = method;\n      obj.args   = args;\n\n      return obj;\n    ;\n    }, $Enumerator_for$1.$$arity = -2);\n    \n    Opal.def(self, '$initialize', $Enumerator_initialize$2 = function $$initialize($a) {\n      var $iter = $Enumerator_initialize$2.$$p, block = $iter || nil, $post_args, self = this;\n\n      if ($iter) $Enumerator_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Enumerator_initialize$2.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      if ($truthy(block)) {\n        \n        self.object = $send($$($nesting, 'Generator'), 'new', [], block.$to_proc());\n        self.method = \"each\";\n        self.args = [];\n        self.size = arguments[0] || nil;\n        if ($truthy(self.size)) {\n          return (self.size = $$($nesting, 'Opal').$coerce_to(self.size, $$($nesting, 'Integer'), \"to_int\"))\n        } else {\n          return nil\n        };\n      } else {\n        \n        self.object = arguments[0];\n        self.method = arguments[1] || \"each\";\n        self.args = $slice.call(arguments, 2);\n        return (self.size = nil);\n      };\n    }, $Enumerator_initialize$2.$$arity = -1);\n    \n    Opal.def(self, '$each', $Enumerator_each$3 = function $$each($a) {\n      var $iter = $Enumerator_each$3.$$p, block = $iter || nil, $post_args, args, $b, self = this;\n\n      if ($iter) $Enumerator_each$3.$$p = null;\n      \n      \n      if ($iter) $Enumerator_each$3.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {\n        return self};\n      args = $rb_plus(self.args, args);\n      if ($truthy(block['$nil?']())) {\n        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};\n      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());\n    }, $Enumerator_each$3.$$arity = -1);\n    \n    Opal.def(self, '$size', $Enumerator_size$4 = function $$size() {\n      var self = this;\n\n      if ($truthy($$($nesting, 'Proc')['$==='](self.size))) {\n        return $send(self.size, 'call', Opal.to_a(self.args))\n      } else {\n        return self.size\n      }\n    }, $Enumerator_size$4.$$arity = 0);\n    \n    Opal.def(self, '$with_index', $Enumerator_with_index$5 = function $$with_index(offset) {\n      var $iter = $Enumerator_with_index$5.$$p, block = $iter || nil, $$6, self = this;\n\n      if ($iter) $Enumerator_with_index$5.$$p = null;\n      \n      \n      if ($iter) $Enumerator_with_index$5.$$p = null;;\n      \n      if (offset == null) {\n        offset = 0;\n      };\n      offset = (function() {if ($truthy(offset)) {\n        return $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), \"to_int\")\n      } else {\n        return 0\n      }; return nil; })();\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"with_index\", offset], ($$6 = function(){var self = $$6.$$s || this;\n\n        return self.$size()}, $$6.$$s = self, $$6.$$arity = 0, $$6))\n      };\n      \n      var result, index = offset;\n\n      self.$each.$$p = function() {\n        var param = $$($nesting, 'Opal').$destructure(arguments),\n            value = block(param, index);\n\n        index++;\n\n        return value;\n      }\n\n      return self.$each();\n    ;\n    }, $Enumerator_with_index$5.$$arity = -1);\n    Opal.alias(self, \"with_object\", \"each_with_object\");\n    \n    Opal.def(self, '$inspect', $Enumerator_inspect$7 = function $$inspect() {\n      var self = this, result = nil;\n\n      \n      result = \"\" + \"#<\" + (self.$class()) + \": \" + (self.object.$inspect()) + \":\" + (self.method);\n      if ($truthy(self.args['$any?']())) {\n        result = $rb_plus(result, \"\" + \"(\" + (self.args.$inspect()['$[]']($$($nesting, 'Range').$new(1, -2))) + \")\")};\n      return $rb_plus(result, \">\");\n    }, $Enumerator_inspect$7.$$arity = 0);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Generator');\n\n      var $nesting = [self].concat($parent_nesting), $Generator_initialize$8, $Generator_each$9;\n\n      self.$$prototype.block = nil;\n      \n      self.$include($$($nesting, 'Enumerable'));\n      \n      Opal.def(self, '$initialize', $Generator_initialize$8 = function $$initialize() {\n        var $iter = $Generator_initialize$8.$$p, block = $iter || nil, self = this;\n\n        if ($iter) $Generator_initialize$8.$$p = null;\n        \n        \n        if ($iter) $Generator_initialize$8.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'LocalJumpError'), \"no block given\")\n        };\n        return (self.block = block);\n      }, $Generator_initialize$8.$$arity = 0);\n      return (Opal.def(self, '$each', $Generator_each$9 = function $$each($a) {\n        var $iter = $Generator_each$9.$$p, block = $iter || nil, $post_args, args, self = this, yielder = nil;\n\n        if ($iter) $Generator_each$9.$$p = null;\n        \n        \n        if ($iter) $Generator_each$9.$$p = null;;\n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        yielder = $send($$($nesting, 'Yielder'), 'new', [], block.$to_proc());\n        \n        try {\n          args.unshift(yielder);\n\n          Opal.yieldX(self.block, args);\n        }\n        catch (e) {\n          if (e === $breaker) {\n            return $breaker.$v;\n          }\n          else {\n            throw e;\n          }\n        }\n      ;\n        return self;\n      }, $Generator_each$9.$$arity = -1), nil) && 'each';\n    })($nesting[0], null, $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Yielder');\n\n      var $nesting = [self].concat($parent_nesting), $Yielder_initialize$10, $Yielder_yield$11, $Yielder_$lt$lt$12;\n\n      self.$$prototype.block = nil;\n      \n      \n      Opal.def(self, '$initialize', $Yielder_initialize$10 = function $$initialize() {\n        var $iter = $Yielder_initialize$10.$$p, block = $iter || nil, self = this;\n\n        if ($iter) $Yielder_initialize$10.$$p = null;\n        \n        \n        if ($iter) $Yielder_initialize$10.$$p = null;;\n        return (self.block = block);\n      }, $Yielder_initialize$10.$$arity = 0);\n      \n      Opal.def(self, '$yield', $Yielder_yield$11 = function($a) {\n        var $post_args, values, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        values = $post_args;;\n        \n        var value = Opal.yieldX(self.block, values);\n\n        if (value === $breaker) {\n          throw $breaker;\n        }\n\n        return value;\n      ;\n      }, $Yielder_yield$11.$$arity = -1);\n      return (Opal.def(self, '$<<', $Yielder_$lt$lt$12 = function($a) {\n        var $post_args, values, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        values = $post_args;;\n        $send(self, 'yield', Opal.to_a(values));\n        return self;\n      }, $Yielder_$lt$lt$12.$$arity = -1), nil) && '<<';\n    })($nesting[0], null, $nesting);\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Lazy');\n\n      var $nesting = [self].concat($parent_nesting), $Lazy_initialize$13, $Lazy_lazy$16, $Lazy_collect$17, $Lazy_collect_concat$19, $Lazy_drop$23, $Lazy_drop_while$25, $Lazy_enum_for$27, $Lazy_find_all$28, $Lazy_grep$30, $Lazy_reject$33, $Lazy_take$35, $Lazy_take_while$37, $Lazy_inspect$39;\n\n      self.$$prototype.enumerator = nil;\n      \n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'StopLazyError');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        return nil\n      })($nesting[0], $$($nesting, 'Exception'), $nesting);\n      \n      Opal.def(self, '$initialize', $Lazy_initialize$13 = function $$initialize(object, size) {\n        var $iter = $Lazy_initialize$13.$$p, block = $iter || nil, $$14, self = this;\n\n        if ($iter) $Lazy_initialize$13.$$p = null;\n        \n        \n        if ($iter) $Lazy_initialize$13.$$p = null;;\n        \n        if (size == null) {\n          size = nil;\n        };\n        if ((block !== nil)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy new without a block\")\n        };\n        self.enumerator = object;\n        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Lazy_initialize$13, false), [size], ($$14 = function(yielder, $a){var self = $$14.$$s || this, $post_args, each_args, $$15;\n\n        \n          \n          if (yielder == null) {\n            yielder = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          each_args = $post_args;;\n          try {\n            return $send(object, 'each', Opal.to_a(each_args), ($$15 = function($b){var self = $$15.$$s || this, $post_args, args;\n\n            \n              \n              $post_args = Opal.slice.call(arguments, 0, arguments.length);\n              \n              args = $post_args;;\n              \n            args.unshift(yielder);\n\n            Opal.yieldX(block, args);\n          ;}, $$15.$$s = self, $$15.$$arity = -1, $$15))\n          } catch ($err) {\n            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {\n              try {\n                return nil\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          };}, $$14.$$s = self, $$14.$$arity = -2, $$14));\n      }, $Lazy_initialize$13.$$arity = -2);\n      Opal.alias(self, \"force\", \"to_a\");\n      \n      Opal.def(self, '$lazy', $Lazy_lazy$16 = function $$lazy() {\n        var self = this;\n\n        return self\n      }, $Lazy_lazy$16.$$arity = 0);\n      \n      Opal.def(self, '$collect', $Lazy_collect$17 = function $$collect() {\n        var $iter = $Lazy_collect$17.$$p, block = $iter || nil, $$18, self = this;\n\n        if ($iter) $Lazy_collect$17.$$p = null;\n        \n        \n        if ($iter) $Lazy_collect$17.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy map without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], ($$18 = function(enum$, $a){var self = $$18.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          enum$.$yield(value);\n        ;}, $$18.$$s = self, $$18.$$arity = -2, $$18));\n      }, $Lazy_collect$17.$$arity = 0);\n      \n      Opal.def(self, '$collect_concat', $Lazy_collect_concat$19 = function $$collect_concat() {\n        var $iter = $Lazy_collect_concat$19.$$p, block = $iter || nil, $$20, self = this;\n\n        if ($iter) $Lazy_collect_concat$19.$$p = null;\n        \n        \n        if ($iter) $Lazy_collect_concat$19.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy map without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$20 = function(enum$, $a){var self = $$20.$$s || this, $post_args, args, $$21, $$22;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ((value)['$respond_to?'](\"force\") && (value)['$respond_to?'](\"each\")) {\n            $send((value), 'each', [], ($$21 = function(v){var self = $$21.$$s || this;\n\n          \n            \n            if (v == null) {\n              v = nil;\n            };\n            return enum$.$yield(v);}, $$21.$$s = self, $$21.$$arity = 1, $$21))\n          }\n          else {\n            var array = $$($nesting, 'Opal').$try_convert(value, $$($nesting, 'Array'), \"to_ary\");\n\n            if (array === nil) {\n              enum$.$yield(value);\n            }\n            else {\n              $send((value), 'each', [], ($$22 = function(v){var self = $$22.$$s || this;\n\n          \n            \n            if (v == null) {\n              v = nil;\n            };\n            return enum$.$yield(v);}, $$22.$$s = self, $$22.$$arity = 1, $$22));\n            }\n          }\n        ;}, $$20.$$s = self, $$20.$$arity = -2, $$20));\n      }, $Lazy_collect_concat$19.$$arity = 0);\n      \n      Opal.def(self, '$drop', $Lazy_drop$23 = function $$drop(n) {\n        var $$24, self = this, current_size = nil, set_size = nil, dropped = nil;\n\n        \n        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_lt(n, 0))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"attempt to drop negative size\")};\n        current_size = self.$enumerator_size();\n        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {\n          if ($truthy($rb_lt(n, current_size))) {\n            return n\n          } else {\n            return current_size\n          }\n        } else {\n          return current_size\n        }; return nil; })();\n        dropped = 0;\n        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$24 = function(enum$, $a){var self = $$24.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy($rb_lt(dropped, n))) {\n            return (dropped = $rb_plus(dropped, 1))\n          } else {\n            return $send(enum$, 'yield', Opal.to_a(args))\n          };}, $$24.$$s = self, $$24.$$arity = -2, $$24));\n      }, $Lazy_drop$23.$$arity = 1);\n      \n      Opal.def(self, '$drop_while', $Lazy_drop_while$25 = function $$drop_while() {\n        var $iter = $Lazy_drop_while$25.$$p, block = $iter || nil, $$26, self = this, succeeding = nil;\n\n        if ($iter) $Lazy_drop_while$25.$$p = null;\n        \n        \n        if ($iter) $Lazy_drop_while$25.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy drop_while without a block\")\n        };\n        succeeding = true;\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$26 = function(enum$, $a){var self = $$26.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy(succeeding)) {\n            \n            var value = Opal.yieldX(block, args);\n\n            if ($falsy(value)) {\n              succeeding = false;\n\n              $send(enum$, 'yield', Opal.to_a(args));\n            }\n          \n          } else {\n            return $send(enum$, 'yield', Opal.to_a(args))\n          };}, $$26.$$s = self, $$26.$$arity = -2, $$26));\n      }, $Lazy_drop_while$25.$$arity = 0);\n      \n      Opal.def(self, '$enum_for', $Lazy_enum_for$27 = function $$enum_for($a, $b) {\n        var $iter = $Lazy_enum_for$27.$$p, block = $iter || nil, $post_args, method, args, self = this;\n\n        if ($iter) $Lazy_enum_for$27.$$p = null;\n        \n        \n        if ($iter) $Lazy_enum_for$27.$$p = null;;\n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        if ($post_args.length > 0) {\n          method = $post_args[0];\n          $post_args.splice(0, 1);\n        }\n        if (method == null) {\n          method = \"each\";\n        };\n        \n        args = $post_args;;\n        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());\n      }, $Lazy_enum_for$27.$$arity = -1);\n      \n      Opal.def(self, '$find_all', $Lazy_find_all$28 = function $$find_all() {\n        var $iter = $Lazy_find_all$28.$$p, block = $iter || nil, $$29, self = this;\n\n        if ($iter) $Lazy_find_all$28.$$p = null;\n        \n        \n        if ($iter) $Lazy_find_all$28.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy select without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$29 = function(enum$, $a){var self = $$29.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ($truthy(value)) {\n            $send(enum$, 'yield', Opal.to_a(args));\n          }\n        ;}, $$29.$$s = self, $$29.$$arity = -2, $$29));\n      }, $Lazy_find_all$28.$$arity = 0);\n      Opal.alias(self, \"flat_map\", \"collect_concat\");\n      \n      Opal.def(self, '$grep', $Lazy_grep$30 = function $$grep(pattern) {\n        var $iter = $Lazy_grep$30.$$p, block = $iter || nil, $$31, $$32, self = this;\n\n        if ($iter) $Lazy_grep$30.$$p = null;\n        \n        \n        if ($iter) $Lazy_grep$30.$$p = null;;\n        if ($truthy(block)) {\n          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$31 = function(enum$, $a){var self = $$31.$$s || this, $post_args, args;\n\n          \n            \n            if (enum$ == null) {\n              enum$ = nil;\n            };\n            \n            $post_args = Opal.slice.call(arguments, 1, arguments.length);\n            \n            args = $post_args;;\n            \n            var param = $$($nesting, 'Opal').$destructure(args),\n                value = pattern['$==='](param);\n\n            if ($truthy(value)) {\n              value = Opal.yield1(block, param);\n\n              enum$.$yield(Opal.yield1(block, param));\n            }\n          ;}, $$31.$$s = self, $$31.$$arity = -2, $$31))\n        } else {\n          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$32 = function(enum$, $a){var self = $$32.$$s || this, $post_args, args;\n\n          \n            \n            if (enum$ == null) {\n              enum$ = nil;\n            };\n            \n            $post_args = Opal.slice.call(arguments, 1, arguments.length);\n            \n            args = $post_args;;\n            \n            var param = $$($nesting, 'Opal').$destructure(args),\n                value = pattern['$==='](param);\n\n            if ($truthy(value)) {\n              enum$.$yield(param);\n            }\n          ;}, $$32.$$s = self, $$32.$$arity = -2, $$32))\n        };\n      }, $Lazy_grep$30.$$arity = 1);\n      Opal.alias(self, \"map\", \"collect\");\n      Opal.alias(self, \"select\", \"find_all\");\n      \n      Opal.def(self, '$reject', $Lazy_reject$33 = function $$reject() {\n        var $iter = $Lazy_reject$33.$$p, block = $iter || nil, $$34, self = this;\n\n        if ($iter) $Lazy_reject$33.$$p = null;\n        \n        \n        if ($iter) $Lazy_reject$33.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy reject without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$34 = function(enum$, $a){var self = $$34.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ($falsy(value)) {\n            $send(enum$, 'yield', Opal.to_a(args));\n          }\n        ;}, $$34.$$s = self, $$34.$$arity = -2, $$34));\n      }, $Lazy_reject$33.$$arity = 0);\n      \n      Opal.def(self, '$take', $Lazy_take$35 = function $$take(n) {\n        var $$36, self = this, current_size = nil, set_size = nil, taken = nil;\n\n        \n        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_lt(n, 0))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"attempt to take negative size\")};\n        current_size = self.$enumerator_size();\n        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {\n          if ($truthy($rb_lt(n, current_size))) {\n            return n\n          } else {\n            return current_size\n          }\n        } else {\n          return current_size\n        }; return nil; })();\n        taken = 0;\n        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$36 = function(enum$, $a){var self = $$36.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy($rb_lt(taken, n))) {\n            \n            $send(enum$, 'yield', Opal.to_a(args));\n            return (taken = $rb_plus(taken, 1));\n          } else {\n            return self.$raise($$($nesting, 'StopLazyError'))\n          };}, $$36.$$s = self, $$36.$$arity = -2, $$36));\n      }, $Lazy_take$35.$$arity = 1);\n      \n      Opal.def(self, '$take_while', $Lazy_take_while$37 = function $$take_while() {\n        var $iter = $Lazy_take_while$37.$$p, block = $iter || nil, $$38, self = this;\n\n        if ($iter) $Lazy_take_while$37.$$p = null;\n        \n        \n        if ($iter) $Lazy_take_while$37.$$p = null;;\n        if ($truthy(block)) {\n        } else {\n          self.$raise($$($nesting, 'ArgumentError'), \"tried to call lazy take_while without a block\")\n        };\n        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$38 = function(enum$, $a){var self = $$38.$$s || this, $post_args, args;\n\n        \n          \n          if (enum$ == null) {\n            enum$ = nil;\n          };\n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          args = $post_args;;\n          \n          var value = Opal.yieldX(block, args);\n\n          if ($truthy(value)) {\n            $send(enum$, 'yield', Opal.to_a(args));\n          }\n          else {\n            self.$raise($$($nesting, 'StopLazyError'));\n          }\n        ;}, $$38.$$s = self, $$38.$$arity = -2, $$38));\n      }, $Lazy_take_while$37.$$arity = 0);\n      Opal.alias(self, \"to_enum\", \"enum_for\");\n      return (Opal.def(self, '$inspect', $Lazy_inspect$39 = function $$inspect() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \": \" + (self.enumerator.$inspect()) + \">\"\n      }, $Lazy_inspect$39.$$arity = 0), nil) && 'inspect';\n    })($nesting[0], self, $nesting);\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/numeric\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$respond_to?', '$coerce', '$__send__', '$===', '$raise', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);\n  \n  self.$require(\"corelib/comparable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Numeric');\n\n    var $nesting = [self].concat($parent_nesting), $Numeric_coerce$1, $Numeric___coerced__$2, $Numeric_$lt_eq_gt$3, $Numeric_$plus$$4, $Numeric_$minus$$5, $Numeric_$percent$6, $Numeric_abs$7, $Numeric_abs2$8, $Numeric_angle$9, $Numeric_ceil$10, $Numeric_conj$11, $Numeric_denominator$12, $Numeric_div$13, $Numeric_divmod$14, $Numeric_fdiv$15, $Numeric_floor$16, $Numeric_i$17, $Numeric_imag$18, $Numeric_integer$ques$19, $Numeric_nonzero$ques$20, $Numeric_numerator$21, $Numeric_polar$22, $Numeric_quo$23, $Numeric_real$24, $Numeric_real$ques$25, $Numeric_rect$26, $Numeric_round$27, $Numeric_to_c$28, $Numeric_to_int$29, $Numeric_truncate$30, $Numeric_zero$ques$31, $Numeric_positive$ques$32, $Numeric_negative$ques$33, $Numeric_dup$34, $Numeric_clone$35, $Numeric_finite$ques$36, $Numeric_infinite$ques$37;\n\n    \n    self.$include($$($nesting, 'Comparable'));\n    \n    Opal.def(self, '$coerce', $Numeric_coerce$1 = function $$coerce(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n        return [other, self]};\n      return [self.$Float(other), self.$Float(self)];\n    }, $Numeric_coerce$1.$$arity = 1);\n    \n    Opal.def(self, '$__coerced__', $Numeric___coerced__$2 = function $$__coerced__(method, other) {\n      var $a, $b, self = this, a = nil, b = nil, $case = nil;\n\n      if ($truthy(other['$respond_to?'](\"coerce\"))) {\n        \n        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;\n        return a.$__send__(method, b);\n      } else {\n        return (function() {$case = method;\n        if (\"+\"['$===']($case) || \"-\"['$===']($case) || \"*\"['$===']($case) || \"/\"['$===']($case) || \"%\"['$===']($case) || \"&\"['$===']($case) || \"|\"['$===']($case) || \"^\"['$===']($case) || \"**\"['$===']($case)) {return self.$raise($$($nesting, 'TypeError'), \"\" + (other.$class()) + \" can't be coerced into Numeric\")}\n        else if (\">\"['$===']($case) || \">=\"['$===']($case) || \"<\"['$===']($case) || \"<=\"['$===']($case) || \"<=>\"['$===']($case)) {return self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (other.$class()) + \" failed\")}\n        else { return nil }})()\n      }\n    }, $Numeric___coerced__$2.$$arity = 2);\n    \n    Opal.def(self, '$<=>', $Numeric_$lt_eq_gt$3 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(self['$equal?'](other))) {\n        return 0};\n      return nil;\n    }, $Numeric_$lt_eq_gt$3.$$arity = 1);\n    \n    Opal.def(self, '$+@', $Numeric_$plus$$4 = function() {\n      var self = this;\n\n      return self\n    }, $Numeric_$plus$$4.$$arity = 0);\n    \n    Opal.def(self, '$-@', $Numeric_$minus$$5 = function() {\n      var self = this;\n\n      return $rb_minus(0, self)\n    }, $Numeric_$minus$$5.$$arity = 0);\n    \n    Opal.def(self, '$%', $Numeric_$percent$6 = function(other) {\n      var self = this;\n\n      return $rb_minus(self, $rb_times(other, self.$div(other)))\n    }, $Numeric_$percent$6.$$arity = 1);\n    \n    Opal.def(self, '$abs', $Numeric_abs$7 = function $$abs() {\n      var self = this;\n\n      if ($rb_lt(self, 0)) {\n        return self['$-@']()\n      } else {\n        return self\n      }\n    }, $Numeric_abs$7.$$arity = 0);\n    \n    Opal.def(self, '$abs2', $Numeric_abs2$8 = function $$abs2() {\n      var self = this;\n\n      return $rb_times(self, self)\n    }, $Numeric_abs2$8.$$arity = 0);\n    \n    Opal.def(self, '$angle', $Numeric_angle$9 = function $$angle() {\n      var self = this;\n\n      if ($rb_lt(self, 0)) {\n        return $$$($$($nesting, 'Math'), 'PI')\n      } else {\n        return 0\n      }\n    }, $Numeric_angle$9.$$arity = 0);\n    Opal.alias(self, \"arg\", \"angle\");\n    \n    Opal.def(self, '$ceil', $Numeric_ceil$10 = function $$ceil(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      return self.$to_f().$ceil(ndigits);\n    }, $Numeric_ceil$10.$$arity = -1);\n    \n    Opal.def(self, '$conj', $Numeric_conj$11 = function $$conj() {\n      var self = this;\n\n      return self\n    }, $Numeric_conj$11.$$arity = 0);\n    Opal.alias(self, \"conjugate\", \"conj\");\n    \n    Opal.def(self, '$denominator', $Numeric_denominator$12 = function $$denominator() {\n      var self = this;\n\n      return self.$to_r().$denominator()\n    }, $Numeric_denominator$12.$$arity = 0);\n    \n    Opal.def(self, '$div', $Numeric_div$13 = function $$div(other) {\n      var self = this;\n\n      \n      if (other['$=='](0)) {\n        self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by o\")};\n      return $rb_divide(self, other).$floor();\n    }, $Numeric_div$13.$$arity = 1);\n    \n    Opal.def(self, '$divmod', $Numeric_divmod$14 = function $$divmod(other) {\n      var self = this;\n\n      return [self.$div(other), self['$%'](other)]\n    }, $Numeric_divmod$14.$$arity = 1);\n    \n    Opal.def(self, '$fdiv', $Numeric_fdiv$15 = function $$fdiv(other) {\n      var self = this;\n\n      return $rb_divide(self.$to_f(), other)\n    }, $Numeric_fdiv$15.$$arity = 1);\n    \n    Opal.def(self, '$floor', $Numeric_floor$16 = function $$floor(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      return self.$to_f().$floor(ndigits);\n    }, $Numeric_floor$16.$$arity = -1);\n    \n    Opal.def(self, '$i', $Numeric_i$17 = function $$i() {\n      var self = this;\n\n      return self.$Complex(0, self)\n    }, $Numeric_i$17.$$arity = 0);\n    \n    Opal.def(self, '$imag', $Numeric_imag$18 = function $$imag() {\n      var self = this;\n\n      return 0\n    }, $Numeric_imag$18.$$arity = 0);\n    Opal.alias(self, \"imaginary\", \"imag\");\n    \n    Opal.def(self, '$integer?', $Numeric_integer$ques$19 = function() {\n      var self = this;\n\n      return false\n    }, $Numeric_integer$ques$19.$$arity = 0);\n    Opal.alias(self, \"magnitude\", \"abs\");\n    Opal.alias(self, \"modulo\", \"%\");\n    \n    Opal.def(self, '$nonzero?', $Numeric_nonzero$ques$20 = function() {\n      var self = this;\n\n      if ($truthy(self['$zero?']())) {\n        return nil\n      } else {\n        return self\n      }\n    }, $Numeric_nonzero$ques$20.$$arity = 0);\n    \n    Opal.def(self, '$numerator', $Numeric_numerator$21 = function $$numerator() {\n      var self = this;\n\n      return self.$to_r().$numerator()\n    }, $Numeric_numerator$21.$$arity = 0);\n    Opal.alias(self, \"phase\", \"arg\");\n    \n    Opal.def(self, '$polar', $Numeric_polar$22 = function $$polar() {\n      var self = this;\n\n      return [self.$abs(), self.$arg()]\n    }, $Numeric_polar$22.$$arity = 0);\n    \n    Opal.def(self, '$quo', $Numeric_quo$23 = function $$quo(other) {\n      var self = this;\n\n      return $rb_divide($$($nesting, 'Opal')['$coerce_to!'](self, $$($nesting, 'Rational'), \"to_r\"), other)\n    }, $Numeric_quo$23.$$arity = 1);\n    \n    Opal.def(self, '$real', $Numeric_real$24 = function $$real() {\n      var self = this;\n\n      return self\n    }, $Numeric_real$24.$$arity = 0);\n    \n    Opal.def(self, '$real?', $Numeric_real$ques$25 = function() {\n      var self = this;\n\n      return true\n    }, $Numeric_real$ques$25.$$arity = 0);\n    \n    Opal.def(self, '$rect', $Numeric_rect$26 = function $$rect() {\n      var self = this;\n\n      return [self, 0]\n    }, $Numeric_rect$26.$$arity = 0);\n    Opal.alias(self, \"rectangular\", \"rect\");\n    \n    Opal.def(self, '$round', $Numeric_round$27 = function $$round(digits) {\n      var self = this;\n\n      \n      ;\n      return self.$to_f().$round(digits);\n    }, $Numeric_round$27.$$arity = -1);\n    \n    Opal.def(self, '$to_c', $Numeric_to_c$28 = function $$to_c() {\n      var self = this;\n\n      return self.$Complex(self, 0)\n    }, $Numeric_to_c$28.$$arity = 0);\n    \n    Opal.def(self, '$to_int', $Numeric_to_int$29 = function $$to_int() {\n      var self = this;\n\n      return self.$to_i()\n    }, $Numeric_to_int$29.$$arity = 0);\n    \n    Opal.def(self, '$truncate', $Numeric_truncate$30 = function $$truncate(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      return self.$to_f().$truncate(ndigits);\n    }, $Numeric_truncate$30.$$arity = -1);\n    \n    Opal.def(self, '$zero?', $Numeric_zero$ques$31 = function() {\n      var self = this;\n\n      return self['$=='](0)\n    }, $Numeric_zero$ques$31.$$arity = 0);\n    \n    Opal.def(self, '$positive?', $Numeric_positive$ques$32 = function() {\n      var self = this;\n\n      return $rb_gt(self, 0)\n    }, $Numeric_positive$ques$32.$$arity = 0);\n    \n    Opal.def(self, '$negative?', $Numeric_negative$ques$33 = function() {\n      var self = this;\n\n      return $rb_lt(self, 0)\n    }, $Numeric_negative$ques$33.$$arity = 0);\n    \n    Opal.def(self, '$dup', $Numeric_dup$34 = function $$dup() {\n      var self = this;\n\n      return self\n    }, $Numeric_dup$34.$$arity = 0);\n    \n    Opal.def(self, '$clone', $Numeric_clone$35 = function $$clone($kwargs) {\n      var freeze, self = this;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      freeze = $kwargs.$$smap[\"freeze\"];\n      if (freeze == null) {\n        freeze = true\n      };\n      return self;\n    }, $Numeric_clone$35.$$arity = -1);\n    \n    Opal.def(self, '$finite?', $Numeric_finite$ques$36 = function() {\n      var self = this;\n\n      return true\n    }, $Numeric_finite$ques$36.$$arity = 0);\n    return (Opal.def(self, '$infinite?', $Numeric_infinite$ques$37 = function() {\n      var self = this;\n\n      return nil\n    }, $Numeric_infinite$ques$37.$$arity = 0), nil) && 'infinite?';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/array\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$require', '$include', '$to_a', '$warn', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$nil?', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$map', '$equal?', '$dup', '$each', '$[]', '$dig', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$max', '$min', '$!', '$>=', '$**', '$delete_if', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$is_a?', '$last', '$first', '$upto', '$reject', '$pristine', '$singleton_class']);\n  \n  self.$require(\"corelib/enumerable\");\n  self.$require(\"corelib/numeric\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Array');\n\n    var $nesting = [self].concat($parent_nesting), $Array_$$$1, $Array_initialize$2, $Array_try_convert$3, $Array_$$4, $Array_$$5, $Array_$$6, $Array_$plus$7, $Array_$minus$8, $Array_$lt$lt$9, $Array_$lt_eq_gt$10, $Array_$eq_eq$11, $Array_$$$12, $Array_$$$eq$13, $Array_any$ques$14, $Array_assoc$15, $Array_at$16, $Array_bsearch_index$17, $Array_bsearch$18, $Array_cycle$19, $Array_clear$21, $Array_count$22, $Array_initialize_copy$23, $Array_collect$24, $Array_collect$excl$26, $Array_combination$28, $Array_repeated_combination$30, $Array_compact$32, $Array_compact$excl$33, $Array_concat$34, $Array_delete$37, $Array_delete_at$38, $Array_delete_if$39, $Array_dig$41, $Array_drop$42, $Array_dup$43, $Array_each$44, $Array_each_index$46, $Array_empty$ques$48, $Array_eql$ques$49, $Array_fetch$50, $Array_fill$51, $Array_first$52, $Array_flatten$53, $Array_flatten$excl$54, $Array_hash$55, $Array_include$ques$56, $Array_index$57, $Array_insert$58, $Array_inspect$59, $Array_join$60, $Array_keep_if$61, $Array_last$63, $Array_length$64, $Array_max$65, $Array_min$66, $Array_permutation$67, $Array_repeated_permutation$69, $Array_pop$71, $Array_product$72, $Array_push$73, $Array_rassoc$74, $Array_reject$75, $Array_reject$excl$77, $Array_replace$79, $Array_reverse$80, $Array_reverse$excl$81, $Array_reverse_each$82, $Array_rindex$84, $Array_rotate$85, $Array_rotate$excl$86, $Array_sample$89, $Array_select$90, $Array_select$excl$92, $Array_shift$94, $Array_shuffle$95, $Array_shuffle$excl$96, $Array_slice$excl$97, $Array_sort$98, $Array_sort$excl$99, $Array_sort_by$excl$100, $Array_take$102, $Array_take_while$103, $Array_to_a$104, $Array_to_h$105, $Array_transpose$106, $Array_uniq$109, $Array_uniq$excl$110, $Array_unshift$111, $Array_values_at$112, $Array_zip$115, $Array_inherited$116, $Array_instance_variables$117, $Array_pack$119;\n\n    \n    self.$include($$($nesting, 'Enumerable'));\n    Opal.defineProperty(self.$$prototype, '$$is_array', true);\n    \n    function toArraySubclass(obj, klass) {\n      if (klass.$$name === Opal.Array) {\n        return obj;\n      } else {\n        return klass.$allocate().$replace((obj).$to_a());\n      }\n    }\n  ;\n    Opal.defs(self, '$[]', $Array_$$$1 = function($a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      objects = $post_args;;\n      return toArraySubclass(objects, self);;\n    }, $Array_$$$1.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $Array_initialize$2 = function $$initialize(size, obj) {\n      var $iter = $Array_initialize$2.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Array_initialize$2.$$p = null;;\n      \n      if (size == null) {\n        size = nil;\n      };\n      \n      if (obj == null) {\n        obj = nil;\n      };\n      \n      if (obj !== nil && block !== nil) {\n        self.$warn(\"warning: block supersedes default value argument\")\n      }\n\n      if (size > $$$($$($nesting, 'Integer'), 'MAX')) {\n        self.$raise($$($nesting, 'ArgumentError'), \"array size too big\")\n      }\n\n      if (arguments.length > 2) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" for 0..2)\")\n      }\n\n      if (arguments.length === 0) {\n        self.splice(0, self.length);\n        return self;\n      }\n\n      if (arguments.length === 1) {\n        if (size.$$is_array) {\n          self.$replace(size.$to_a())\n          return self;\n        } else if (size['$respond_to?'](\"to_ary\")) {\n          self.$replace(size.$to_ary())\n          return self;\n        }\n      }\n\n      size = $$($nesting, 'Opal').$coerce_to(size, $$($nesting, 'Integer'), \"to_int\")\n\n      if (size < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\")\n      }\n\n      self.splice(0, self.length);\n      var i, value;\n\n      if (block === nil) {\n        for (i = 0; i < size; i++) {\n          self.push(obj);\n        }\n      }\n      else {\n        for (i = 0, value; i < size; i++) {\n          value = block(i);\n          self[i] = value;\n        }\n      }\n\n      return self;\n    ;\n    }, $Array_initialize$2.$$arity = -1);\n    Opal.defs(self, '$try_convert', $Array_try_convert$3 = function $$try_convert(obj) {\n      var self = this;\n\n      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Array'), \"to_ary\")\n    }, $Array_try_convert$3.$$arity = 1);\n    \n    Opal.def(self, '$&', $Array_$$4 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      \n      var result = [], hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        Opal.hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if (Opal.hash_delete(hash, item) !== undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    }, $Array_$$4.$$arity = 1);\n    \n    Opal.def(self, '$|', $Array_$$5 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      \n      var hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        Opal.hash_put(hash, self[i], true);\n      }\n\n      for (i = 0, length = other.length; i < length; i++) {\n        Opal.hash_put(hash, other[i], true);\n      }\n\n      return hash.$keys();\n    ;\n    }, $Array_$$5.$$arity = 1);\n    \n    Opal.def(self, '$*', $Array_$$6 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$respond_to?'](\"to_str\"))) {\n        return self.$join(other.$to_str())};\n      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(other < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative argument\")};\n      \n      var result = [],\n          converted = self.$to_a();\n\n      for (var i = 0; i < other; i++) {\n        result = result.concat(converted);\n      }\n\n      return toArraySubclass(result, self.$class());\n    ;\n    }, $Array_$$6.$$arity = 1);\n    \n    Opal.def(self, '$+', $Array_$plus$7 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      return self.concat(other);;\n    }, $Array_$plus$7.$$arity = 1);\n    \n    Opal.def(self, '$-', $Array_$minus$8 = function(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      if ($truthy(self.length === 0)) {\n        return []};\n      if ($truthy(other.length === 0)) {\n        return self.slice()};\n      \n      var result = [], hash = $hash2([], {}), i, length, item;\n\n      for (i = 0, length = other.length; i < length; i++) {\n        Opal.hash_put(hash, other[i], true);\n      }\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n        if (Opal.hash_get(hash, item) === undefined) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    }, $Array_$minus$8.$$arity = 1);\n    \n    Opal.def(self, '$<<', $Array_$lt$lt$9 = function(object) {\n      var self = this;\n\n      \n      self.push(object);\n      return self;\n    }, $Array_$lt$lt$9.$$arity = 1);\n    \n    Opal.def(self, '$<=>', $Array_$lt_eq_gt$10 = function(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        other = other.$to_a()\n      } else if ($truthy(other['$respond_to?'](\"to_ary\"))) {\n        other = other.$to_ary().$to_a()\n      } else {\n        return nil\n      };\n      \n      if (self.$hash() === other.$hash()) {\n        return 0;\n      }\n\n      var count = Math.min(self.length, other.length);\n\n      for (var i = 0; i < count; i++) {\n        var tmp = (self[i])['$<=>'](other[i]);\n\n        if (tmp !== 0) {\n          return tmp;\n        }\n      }\n\n      return (self.length)['$<=>'](other.length);\n    ;\n    }, $Array_$lt_eq_gt$10.$$arity = 1);\n    \n    Opal.def(self, '$==', $Array_$eq_eq$11 = function(other) {\n      var self = this;\n\n      \n      var recursed = {};\n\n      function _eqeq(array, other) {\n        var i, length, a, b;\n\n        if (array === other)\n          return true;\n\n        if (!other.$$is_array) {\n          if ($$($nesting, 'Opal')['$respond_to?'](other, \"to_ary\")) {\n            return (other)['$=='](array);\n          } else {\n            return false;\n          }\n        }\n\n        if (array.$$constructor !== Array)\n          array = (array).$to_a();\n        if (other.$$constructor !== Array)\n          other = (other).$to_a();\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[(array).$object_id()] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty((a).$object_id())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$=='](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    \n    }, $Array_$eq_eq$11.$$arity = 1);\n    \n    function $array_slice_range(self, index) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      exclude = index.excl;\n      from    = Opal.Opal.$coerce_to(index.begin, Opal.Integer, 'to_int');\n      to      = Opal.Opal.$coerce_to(index.end, Opal.Integer, 'to_int');\n\n      if (from < 0) {\n        from += size;\n\n        if (from < 0) {\n          return nil;\n        }\n      }\n\n      if (from > size) {\n        return nil;\n      }\n\n      if (to < 0) {\n        to += size;\n\n        if (to < 0) {\n          return [];\n        }\n      }\n\n      if (!exclude) {\n        to += 1;\n      }\n\n      result = self.slice(from, to);\n      return toArraySubclass(result, self.$class());\n    }\n\n    function $array_slice_index_length(self, index, length) {\n      var size = self.length,\n          exclude, from, to, result;\n\n      index = Opal.Opal.$coerce_to(index, Opal.Integer, 'to_int');\n\n      if (index < 0) {\n        index += size;\n\n        if (index < 0) {\n          return nil;\n        }\n      }\n\n      if (length === undefined) {\n        if (index >= size || index < 0) {\n          return nil;\n        }\n\n        return self[index];\n      }\n      else {\n        length = Opal.Opal.$coerce_to(length, Opal.Integer, 'to_int');\n\n        if (length < 0 || index > size || index < 0) {\n          return nil;\n        }\n\n        result = self.slice(index, index + length);\n      }\n      return toArraySubclass(result, self.$class());\n    }\n  ;\n    \n    Opal.def(self, '$[]', $Array_$$$12 = function(index, length) {\n      var self = this;\n\n      \n      ;\n      \n      if (index.$$is_range) {\n        return $array_slice_range(self, index);\n      }\n      else {\n        return $array_slice_index_length(self, index, length);\n      }\n    ;\n    }, $Array_$$$12.$$arity = -2);\n    \n    Opal.def(self, '$[]=', $Array_$$$eq$13 = function(index, value, extra) {\n      var self = this, data = nil, length = nil;\n\n      \n      ;\n            var i, size = self.length;;\n      if ($truthy($$($nesting, 'Range')['$==='](index))) {\n        \n        data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {\n          return value.$to_a()\n        } else if ($truthy(value['$respond_to?'](\"to_ary\"))) {\n          return value.$to_ary().$to_a()\n        } else {\n          return [value]\n        }; return nil; })();\n        \n        var exclude = index.excl,\n            from    = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), \"to_int\"),\n            to      = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), \"to_int\");\n\n        if (from < 0) {\n          from += size;\n\n          if (from < 0) {\n            self.$raise($$($nesting, 'RangeError'), \"\" + (index.$inspect()) + \" out of range\");\n          }\n        }\n\n        if (to < 0) {\n          to += size;\n        }\n\n        if (!exclude) {\n          to += 1;\n        }\n\n        if (from > size) {\n          for (i = size; i < from; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (to < 0) {\n          self.splice.apply(self, [from, 0].concat(data));\n        }\n        else {\n          self.splice.apply(self, [from, to - from].concat(data));\n        }\n\n        return value;\n      ;\n      } else {\n        \n        if ($truthy(extra === undefined)) {\n          length = 1\n        } else {\n          \n          length = value;\n          value = extra;\n          data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {\n            return value.$to_a()\n          } else if ($truthy(value['$respond_to?'](\"to_ary\"))) {\n            return value.$to_ary().$to_a()\n          } else {\n            return [value]\n          }; return nil; })();\n        };\n        \n        var old;\n\n        index  = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n\n        if (index < 0) {\n          old    = index;\n          index += size;\n\n          if (index < 0) {\n            self.$raise($$($nesting, 'IndexError'), \"\" + \"index \" + (old) + \" too small for array; minimum \" + (-self.length));\n          }\n        }\n\n        if (length < 0) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"negative length (\" + (length) + \")\")\n        }\n\n        if (index > size) {\n          for (i = size; i < index; i++) {\n            self[i] = nil;\n          }\n        }\n\n        if (extra === undefined) {\n          self[index] = value;\n        }\n        else {\n          self.splice.apply(self, [index, length].concat(data));\n        }\n\n        return value;\n      ;\n      };\n    }, $Array_$$$eq$13.$$arity = -3);\n    \n    Opal.def(self, '$any?', $Array_any$ques$14 = function(pattern) {\n      var $iter = $Array_any$ques$14.$$p, block = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_any$ques$14.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      \n      if ($iter) $Array_any$ques$14.$$p = null;;\n      ;\n      if (self.length === 0) return false;\n      return $send(self, Opal.find_super_dispatcher(self, 'any?', $Array_any$ques$14, false), $zuper, $iter);\n    }, $Array_any$ques$14.$$arity = -1);\n    \n    Opal.def(self, '$assoc', $Array_assoc$15 = function $$assoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if (item = self[i], item.length && (item[0])['$=='](object)) {\n          return item;\n        }\n      }\n\n      return nil;\n    \n    }, $Array_assoc$15.$$arity = 1);\n    \n    Opal.def(self, '$at', $Array_at$16 = function $$at(index) {\n      var self = this;\n\n      \n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n      \n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      return self[index];\n    ;\n    }, $Array_at$16.$$arity = 1);\n    \n    Opal.def(self, '$bsearch_index', $Array_bsearch_index$17 = function $$bsearch_index() {\n      var $iter = $Array_bsearch_index$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_bsearch_index$17.$$p = null;\n      \n      \n      if ($iter) $Array_bsearch_index$17.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"bsearch_index\")\n      };\n      \n      var min = 0,\n          max = self.length,\n          mid,\n          val,\n          ret,\n          smaller = false,\n          satisfied = nil;\n\n      while (min < max) {\n        mid = min + Math.floor((max - min) / 2);\n        val = self[mid];\n        ret = Opal.yield1(block, val);\n\n        if (ret === true) {\n          satisfied = mid;\n          smaller = true;\n        }\n        else if (ret === false || ret === nil) {\n          smaller = false;\n        }\n        else if (ret.$$is_number) {\n          if (ret === 0) { return mid; }\n          smaller = (ret < 0);\n        }\n        else {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong argument type \" + ((ret).$class()) + \" (must be numeric, true, false or nil)\")\n        }\n\n        if (smaller) { max = mid; } else { min = mid + 1; }\n      }\n\n      return satisfied;\n    ;\n    }, $Array_bsearch_index$17.$$arity = 0);\n    \n    Opal.def(self, '$bsearch', $Array_bsearch$18 = function $$bsearch() {\n      var $iter = $Array_bsearch$18.$$p, block = $iter || nil, self = this, index = nil;\n\n      if ($iter) $Array_bsearch$18.$$p = null;\n      \n      \n      if ($iter) $Array_bsearch$18.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"bsearch\")\n      };\n      index = $send(self, 'bsearch_index', [], block.$to_proc());\n      \n      if (index != null && index.$$is_number) {\n        return self[index];\n      } else {\n        return index;\n      }\n    ;\n    }, $Array_bsearch$18.$$arity = 0);\n    \n    Opal.def(self, '$cycle', $Array_cycle$19 = function $$cycle(n) {\n      var $iter = $Array_cycle$19.$$p, block = $iter || nil, $$20, $a, self = this;\n\n      if ($iter) $Array_cycle$19.$$p = null;\n      \n      \n      if ($iter) $Array_cycle$19.$$p = null;;\n      \n      if (n == null) {\n        n = nil;\n      };\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"cycle\", n], ($$20 = function(){var self = $$20.$$s || this;\n\n        if ($truthy(n['$nil?']())) {\n            return $$$($$($nesting, 'Float'), 'INFINITY')\n          } else {\n            \n            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n            if ($truthy($rb_gt(n, 0))) {\n              return $rb_times(self.$enumerator_size(), n)\n            } else {\n              return 0\n            };\n          }}, $$20.$$s = self, $$20.$$arity = 0, $$20))\n      };\n      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {\n        return nil};\n      \n      var i, length, value;\n\n      if (n === nil) {\n        while (true) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = Opal.yield1(block, self[i]);\n          }\n        }\n      }\n      else {\n        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n        if (n <= 0) {\n          return self;\n        }\n\n        while (n > 0) {\n          for (i = 0, length = self.length; i < length; i++) {\n            value = Opal.yield1(block, self[i]);\n          }\n\n          n--;\n        }\n      }\n    ;\n      return self;\n    }, $Array_cycle$19.$$arity = -1);\n    \n    Opal.def(self, '$clear', $Array_clear$21 = function $$clear() {\n      var self = this;\n\n      \n      self.splice(0, self.length);\n      return self;\n    }, $Array_clear$21.$$arity = 0);\n    \n    Opal.def(self, '$count', $Array_count$22 = function $$count(object) {\n      var $iter = $Array_count$22.$$p, block = $iter || nil, $a, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_count$22.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      \n      if ($iter) $Array_count$22.$$p = null;;\n      \n      if (object == null) {\n        object = nil;\n      };\n      if ($truthy(($truthy($a = object) ? $a : block))) {\n        return $send(self, Opal.find_super_dispatcher(self, 'count', $Array_count$22, false), $zuper, $iter)\n      } else {\n        return self.$size()\n      };\n    }, $Array_count$22.$$arity = -1);\n    \n    Opal.def(self, '$initialize_copy', $Array_initialize_copy$23 = function $$initialize_copy(other) {\n      var self = this;\n\n      return self.$replace(other)\n    }, $Array_initialize_copy$23.$$arity = 1);\n    \n    Opal.def(self, '$collect', $Array_collect$24 = function $$collect() {\n      var $iter = $Array_collect$24.$$p, block = $iter || nil, $$25, self = this;\n\n      if ($iter) $Array_collect$24.$$p = null;\n      \n      \n      if ($iter) $Array_collect$24.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect\"], ($$25 = function(){var self = $$25.$$s || this;\n\n        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, self[i]);\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, $Array_collect$24.$$arity = 0);\n    \n    Opal.def(self, '$collect!', $Array_collect$excl$26 = function() {\n      var $iter = $Array_collect$excl$26.$$p, block = $iter || nil, $$27, self = this;\n\n      if ($iter) $Array_collect$excl$26.$$p = null;\n      \n      \n      if ($iter) $Array_collect$excl$26.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"collect!\"], ($$27 = function(){var self = $$27.$$s || this;\n\n        return self.$size()}, $$27.$$s = self, $$27.$$arity = 0, $$27))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, self[i]);\n        self[i] = value;\n      }\n    ;\n      return self;\n    }, $Array_collect$excl$26.$$arity = 0);\n    \n    function binomial_coefficient(n, k) {\n      if (n === k || k === 0) {\n        return 1;\n      }\n\n      if (k > 0 && n > k) {\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);\n      }\n\n      return 0;\n    }\n  ;\n    \n    Opal.def(self, '$combination', $Array_combination$28 = function $$combination(n) {\n      var $$29, $iter = $Array_combination$28.$$p, $yield = $iter || nil, self = this, num = nil;\n\n      if ($iter) $Array_combination$28.$$p = null;\n      \n      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"combination\", num], ($$29 = function(){var self = $$29.$$s || this;\n\n        return binomial_coefficient(self.length, num)}, $$29.$$s = self, $$29.$$arity = 0, $$29))\n      };\n      \n      var i, length, stack, chosen, lev, done, next;\n\n      if (num === 0) {\n        Opal.yield1($yield, [])\n      } else if (num === 1) {\n        for (i = 0, length = self.length; i < length; i++) {\n          Opal.yield1($yield, [self[i]])\n        }\n      }\n      else if (num === self.length) {\n        Opal.yield1($yield, self.slice())\n      }\n      else if (num >= 0 && num < self.length) {\n        stack = [];\n        for (i = 0; i <= num + 1; i++) {\n          stack.push(0);\n        }\n\n        chosen = [];\n        lev = 0;\n        done = false;\n        stack[0] = -1;\n\n        while (!done) {\n          chosen[lev] = self[stack[lev+1]];\n          while (lev < num - 1) {\n            lev++;\n            next = stack[lev+1] = stack[lev] + 1;\n            chosen[lev] = self[next];\n          }\n          Opal.yield1($yield, chosen.slice())\n          lev++;\n          do {\n            done = (lev === 0);\n            stack[lev]++;\n            lev--;\n          } while ( stack[lev+1] + num === self.length + lev + 1 );\n        }\n      }\n    ;\n      return self;\n    }, $Array_combination$28.$$arity = 1);\n    \n    Opal.def(self, '$repeated_combination', $Array_repeated_combination$30 = function $$repeated_combination(n) {\n      var $$31, $iter = $Array_repeated_combination$30.$$p, $yield = $iter || nil, self = this, num = nil;\n\n      if ($iter) $Array_repeated_combination$30.$$p = null;\n      \n      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"repeated_combination\", num], ($$31 = function(){var self = $$31.$$s || this;\n\n        return binomial_coefficient(self.length + num - 1, num);}, $$31.$$s = self, $$31.$$arity = 0, $$31))\n      };\n      \n      function iterate(max, from, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          Opal.yield1($yield, copy)\n          return;\n        }\n        for (var i = from; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, i, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      if (num >= 0) {\n        iterate(num, 0, [], self);\n      }\n    ;\n      return self;\n    }, $Array_repeated_combination$30.$$arity = 1);\n    \n    Opal.def(self, '$compact', $Array_compact$32 = function $$compact() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item; i < length; i++) {\n        if ((item = self[i]) !== nil) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    \n    }, $Array_compact$32.$$arity = 0);\n    \n    Opal.def(self, '$compact!', $Array_compact$excl$33 = function() {\n      var self = this;\n\n      \n      var original = self.length;\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        if (self[i] === nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      return self.length === original ? nil : self;\n    \n    }, $Array_compact$excl$33.$$arity = 0);\n    \n    Opal.def(self, '$concat', $Array_concat$34 = function $$concat($a) {\n      var $post_args, others, $$35, $$36, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      others = $post_args;;\n      others = $send(others, 'map', [], ($$35 = function(other){var self = $$35.$$s || this;\n\n      \n        \n        if (other == null) {\n          other = nil;\n        };\n        other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n          return other.$to_a()\n        } else {\n          return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n        }; return nil; })();\n        if ($truthy(other['$equal?'](self))) {\n          other = other.$dup()};\n        return other;}, $$35.$$s = self, $$35.$$arity = 1, $$35));\n      $send(others, 'each', [], ($$36 = function(other){var self = $$36.$$s || this;\n\n      \n        \n        if (other == null) {\n          other = nil;\n        };\n        \n        for (var i = 0, length = other.length; i < length; i++) {\n          self.push(other[i]);\n        }\n      ;}, $$36.$$s = self, $$36.$$arity = 1, $$36));\n      return self;\n    }, $Array_concat$34.$$arity = -1);\n    \n    Opal.def(self, '$delete', $Array_delete$37 = function(object) {\n      var $iter = $Array_delete$37.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Array_delete$37.$$p = null;\n      \n      var original = self.length;\n\n      for (var i = 0, length = original; i < length; i++) {\n        if ((self[i])['$=='](object)) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n\n      if (self.length === original) {\n        if (($yield !== nil)) {\n          return Opal.yieldX($yield, []);\n        }\n        return nil;\n      }\n      return object;\n    \n    }, $Array_delete$37.$$arity = 1);\n    \n    Opal.def(self, '$delete_at', $Array_delete_at$38 = function $$delete_at(index) {\n      var self = this;\n\n      \n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index < 0 || index >= self.length) {\n        return nil;\n      }\n\n      var result = self[index];\n\n      self.splice(index, 1);\n\n      return result;\n    \n    }, $Array_delete_at$38.$$arity = 1);\n    \n    Opal.def(self, '$delete_if', $Array_delete_if$39 = function $$delete_if() {\n      var $iter = $Array_delete_if$39.$$p, block = $iter || nil, $$40, self = this;\n\n      if ($iter) $Array_delete_if$39.$$p = null;\n      \n      \n      if ($iter) $Array_delete_if$39.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"delete_if\"], ($$40 = function(){var self = $$40.$$s || this;\n\n        return self.$size()}, $$40.$$s = self, $$40.$$arity = 0, $$40))\n      };\n      \n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value !== false && value !== nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n    ;\n      return self;\n    }, $Array_delete_if$39.$$arity = 0);\n    \n    Opal.def(self, '$dig', $Array_dig$41 = function $$dig(idx, $a) {\n      var $post_args, idxs, self = this, item = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      idxs = $post_args;;\n      item = self['$[]'](idx);\n      \n      if (item === nil || idxs.length === 0) {\n        return item;\n      }\n    ;\n      if ($truthy(item['$respond_to?'](\"dig\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', Opal.to_a(idxs));\n    }, $Array_dig$41.$$arity = -2);\n    \n    Opal.def(self, '$drop', $Array_drop$42 = function $$drop(number) {\n      var self = this;\n\n      \n      if (number < 0) {\n        self.$raise($$($nesting, 'ArgumentError'))\n      }\n\n      return self.slice(number);\n    \n    }, $Array_drop$42.$$arity = 1);\n    \n    Opal.def(self, '$dup', $Array_dup$43 = function $$dup() {\n      var $iter = $Array_dup$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_dup$43.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      \n      if (self.$$class === Opal.Array &&\n          self.$$class.$allocate.$$pristine &&\n          self.$copy_instance_variables.$$pristine &&\n          self.$initialize_dup.$$pristine) {\n        return self.slice(0);\n      }\n    ;\n      return $send(self, Opal.find_super_dispatcher(self, 'dup', $Array_dup$43, false), $zuper, $iter);\n    }, $Array_dup$43.$$arity = 0);\n    \n    Opal.def(self, '$each', $Array_each$44 = function $$each() {\n      var $iter = $Array_each$44.$$p, block = $iter || nil, $$45, self = this;\n\n      if ($iter) $Array_each$44.$$p = null;\n      \n      \n      if ($iter) $Array_each$44.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each\"], ($$45 = function(){var self = $$45.$$s || this;\n\n        return self.$size()}, $$45.$$s = self, $$45.$$arity = 0, $$45))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, self[i]);\n      }\n    ;\n      return self;\n    }, $Array_each$44.$$arity = 0);\n    \n    Opal.def(self, '$each_index', $Array_each_index$46 = function $$each_index() {\n      var $iter = $Array_each_index$46.$$p, block = $iter || nil, $$47, self = this;\n\n      if ($iter) $Array_each_index$46.$$p = null;\n      \n      \n      if ($iter) $Array_each_index$46.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_index\"], ($$47 = function(){var self = $$47.$$s || this;\n\n        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))\n      };\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        var value = Opal.yield1(block, i);\n      }\n    ;\n      return self;\n    }, $Array_each_index$46.$$arity = 0);\n    \n    Opal.def(self, '$empty?', $Array_empty$ques$48 = function() {\n      var self = this;\n\n      return self.length === 0;\n    }, $Array_empty$ques$48.$$arity = 0);\n    \n    Opal.def(self, '$eql?', $Array_eql$ques$49 = function(other) {\n      var self = this;\n\n      \n      var recursed = {};\n\n      function _eql(array, other) {\n        var i, length, a, b;\n\n        if (!other.$$is_array) {\n          return false;\n        }\n\n        other = other.$to_a();\n\n        if (array.length !== other.length) {\n          return false;\n        }\n\n        recursed[(array).$object_id()] = true;\n\n        for (i = 0, length = array.length; i < length; i++) {\n          a = array[i];\n          b = other[i];\n          if (a.$$is_array) {\n            if (b.$$is_array && b.length !== a.length) {\n              return false;\n            }\n            if (!recursed.hasOwnProperty((a).$object_id())) {\n              if (!_eql(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$eql?'](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eql(self, other);\n    \n    }, $Array_eql$ques$49.$$arity = 1);\n    \n    Opal.def(self, '$fetch', $Array_fetch$50 = function $$fetch(index, defaults) {\n      var $iter = $Array_fetch$50.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_fetch$50.$$p = null;\n      \n      \n      if ($iter) $Array_fetch$50.$$p = null;;\n      ;\n      \n      var original = index;\n\n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (index < 0) {\n        index += self.length;\n      }\n\n      if (index >= 0 && index < self.length) {\n        return self[index];\n      }\n\n      if (block !== nil && defaults != null) {\n        self.$warn(\"warning: block supersedes default value argument\")\n      }\n\n      if (block !== nil) {\n        return block(original);\n      }\n\n      if (defaults != null) {\n        return defaults;\n      }\n\n      if (self.length === 0) {\n        self.$raise($$($nesting, 'IndexError'), \"\" + \"index \" + (original) + \" outside of array bounds: 0...0\")\n      }\n      else {\n        self.$raise($$($nesting, 'IndexError'), \"\" + \"index \" + (original) + \" outside of array bounds: -\" + (self.length) + \"...\" + (self.length));\n      }\n    ;\n    }, $Array_fetch$50.$$arity = -2);\n    \n    Opal.def(self, '$fill', $Array_fill$51 = function $$fill($a) {\n      var $iter = $Array_fill$51.$$p, block = $iter || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;\n\n      if ($iter) $Array_fill$51.$$p = null;\n      \n      \n      if ($iter) $Array_fill$51.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n            var i, length, value;;\n      if ($truthy(block)) {\n        \n        if ($truthy(args.length > 2)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (args.$length()) + \" for 0..2)\")};\n        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;\n      } else {\n        \n        if ($truthy(args.length == 0)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (0 for 1..3)\")\n        } else if ($truthy(args.length > 3)) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (args.$length()) + \" for 1..3)\")};\n        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;\n      };\n      if ($truthy($$($nesting, 'Range')['$==='](one))) {\n        \n        if ($truthy(two)) {\n          self.$raise($$($nesting, 'TypeError'), \"length invalid with range\")};\n        left = $$($nesting, 'Opal').$coerce_to(one.$begin(), $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(left < 0)) {\n          left += this.length};\n        if ($truthy(left < 0)) {\n          self.$raise($$($nesting, 'RangeError'), \"\" + (one.$inspect()) + \" out of range\")};\n        right = $$($nesting, 'Opal').$coerce_to(one.$end(), $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(right < 0)) {\n          right += this.length};\n        if ($truthy(one['$exclude_end?']())) {\n        } else {\n          right += 1\n        };\n        if ($truthy(right <= left)) {\n          return self};\n      } else if ($truthy(one)) {\n        \n        left = $$($nesting, 'Opal').$coerce_to(one, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(left < 0)) {\n          left += this.length};\n        if ($truthy(left < 0)) {\n          left = 0};\n        if ($truthy(two)) {\n          \n          right = $$($nesting, 'Opal').$coerce_to(two, $$($nesting, 'Integer'), \"to_int\");\n          if ($truthy(right == 0)) {\n            return self};\n          right += left;\n        } else {\n          right = this.length\n        };\n      } else {\n        \n        left = 0;\n        right = this.length;\n      };\n      if ($truthy(left > this.length)) {\n        \n        for (i = this.length; i < right; i++) {\n          self[i] = nil;\n        }\n      };\n      if ($truthy(right > this.length)) {\n        this.length = right};\n      if ($truthy(block)) {\n        \n        for (length = this.length; left < right; left++) {\n          value = block(left);\n          self[left] = value;\n        }\n      \n      } else {\n        \n        for (length = this.length; left < right; left++) {\n          self[left] = obj;\n        }\n      \n      };\n      return self;\n    }, $Array_fill$51.$$arity = -1);\n    \n    Opal.def(self, '$first', $Array_first$52 = function $$first(count) {\n      var self = this;\n\n      \n      ;\n      \n      if (count == null) {\n        return self.length === 0 ? nil : self[0];\n      }\n\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n\n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\");\n      }\n\n      return self.slice(0, count);\n    ;\n    }, $Array_first$52.$$arity = -1);\n    \n    Opal.def(self, '$flatten', $Array_flatten$53 = function $$flatten(level) {\n      var self = this;\n\n      \n      ;\n      \n      function _flatten(array, level) {\n        var result = [],\n            i, length,\n            item, ary;\n\n        array = (array).$to_a();\n\n        for (i = 0, length = array.length; i < length; i++) {\n          item = array[i];\n\n          if (!$$($nesting, 'Opal')['$respond_to?'](item, \"to_ary\", true)) {\n            result.push(item);\n            continue;\n          }\n\n          ary = (item).$to_ary();\n\n          if (ary === nil) {\n            result.push(item);\n            continue;\n          }\n\n          if (!ary.$$is_array) {\n            self.$raise($$($nesting, 'TypeError'));\n          }\n\n          if (ary === self) {\n            self.$raise($$($nesting, 'ArgumentError'));\n          }\n\n          switch (level) {\n          case undefined:\n            result = result.concat(_flatten(ary));\n            break;\n          case 0:\n            result.push(ary);\n            break;\n          default:\n            result.push.apply(result, _flatten(ary, level - 1));\n          }\n        }\n        return result;\n      }\n\n      if (level !== undefined) {\n        level = $$($nesting, 'Opal').$coerce_to(level, $$($nesting, 'Integer'), \"to_int\");\n      }\n\n      return toArraySubclass(_flatten(self, level), self.$class());\n    ;\n    }, $Array_flatten$53.$$arity = -1);\n    \n    Opal.def(self, '$flatten!', $Array_flatten$excl$54 = function(level) {\n      var self = this;\n\n      \n      ;\n      \n      var flattened = self.$flatten(level);\n\n      if (self.length == flattened.length) {\n        for (var i = 0, length = self.length; i < length; i++) {\n          if (self[i] !== flattened[i]) {\n            break;\n          }\n        }\n\n        if (i == length) {\n          return nil;\n        }\n      }\n\n      self.$replace(flattened);\n    ;\n      return self;\n    }, $Array_flatten$excl$54.$$arity = -1);\n    \n    Opal.def(self, '$hash', $Array_hash$55 = function $$hash() {\n      var self = this;\n\n      \n      var top = (Opal.hash_ids === undefined),\n          result = ['A'],\n          hash_id = self.$object_id(),\n          item, i, key;\n\n      try {\n        if (top) {\n          Opal.hash_ids = Object.create(null);\n        }\n\n        // return early for recursive structures\n        if (Opal.hash_ids[hash_id]) {\n          return 'self';\n        }\n\n        for (key in Opal.hash_ids) {\n          item = Opal.hash_ids[key];\n          if (self['$eql?'](item)) {\n            return 'self';\n          }\n        }\n\n        Opal.hash_ids[hash_id] = self;\n\n        for (i = 0; i < self.length; i++) {\n          item = self[i];\n          result.push(item.$hash());\n        }\n\n        return result.join(',');\n      } finally {\n        if (top) {\n          Opal.hash_ids = undefined;\n        }\n      }\n    \n    }, $Array_hash$55.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Array_include$ques$56 = function(member) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length; i < length; i++) {\n        if ((self[i])['$=='](member)) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    }, $Array_include$ques$56.$$arity = 1);\n    \n    Opal.def(self, '$index', $Array_index$57 = function $$index(object) {\n      var $iter = $Array_index$57.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_index$57.$$p = null;\n      \n      \n      if ($iter) $Array_index$57.$$p = null;;\n      ;\n      \n      var i, length, value;\n\n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n\n      if (object != null) {\n        for (i = 0, length = self.length; i < length; i++) {\n          if ((self[i])['$=='](object)) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else {\n        return self.$enum_for(\"index\");\n      }\n\n      return nil;\n    ;\n    }, $Array_index$57.$$arity = -1);\n    \n    Opal.def(self, '$insert', $Array_insert$58 = function $$insert(index, $a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      objects = $post_args;;\n      \n      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n\n      if (objects.length > 0) {\n        if (index < 0) {\n          index += self.length + 1;\n\n          if (index < 0) {\n            self.$raise($$($nesting, 'IndexError'), \"\" + (index) + \" is out of bounds\");\n          }\n        }\n        if (index > self.length) {\n          for (var i = self.length; i < index; i++) {\n            self.push(nil);\n          }\n        }\n\n        self.splice.apply(self, [index, 0].concat(objects));\n      }\n    ;\n      return self;\n    }, $Array_insert$58.$$arity = -2);\n    \n    Opal.def(self, '$inspect', $Array_inspect$59 = function $$inspect() {\n      var self = this;\n\n      \n      var result = [],\n          id     = self.$__id__();\n\n      for (var i = 0, length = self.length; i < length; i++) {\n        var item = self['$[]'](i);\n\n        if ((item).$__id__() === id) {\n          result.push('[...]');\n        }\n        else {\n          result.push((item).$inspect());\n        }\n      }\n\n      return '[' + result.join(', ') + ']';\n    \n    }, $Array_inspect$59.$$arity = 0);\n    \n    Opal.def(self, '$join', $Array_join$60 = function $$join(sep) {\n      var self = this;\n      if ($gvars[\",\"] == null) $gvars[\",\"] = nil;\n\n      \n      \n      if (sep == null) {\n        sep = nil;\n      };\n      if ($truthy(self.length === 0)) {\n        return \"\"};\n      if ($truthy(sep === nil)) {\n        sep = $gvars[\",\"]};\n      \n      var result = [];\n      var i, length, item, tmp;\n\n      for (i = 0, length = self.length; i < length; i++) {\n        item = self[i];\n\n        if ($$($nesting, 'Opal')['$respond_to?'](item, \"to_str\")) {\n          tmp = (item).$to_str();\n\n          if (tmp !== nil) {\n            result.push((tmp).$to_s());\n\n            continue;\n          }\n        }\n\n        if ($$($nesting, 'Opal')['$respond_to?'](item, \"to_ary\")) {\n          tmp = (item).$to_ary();\n\n          if (tmp === self) {\n            self.$raise($$($nesting, 'ArgumentError'));\n          }\n\n          if (tmp !== nil) {\n            result.push((tmp).$join(sep));\n\n            continue;\n          }\n        }\n\n        if ($$($nesting, 'Opal')['$respond_to?'](item, \"to_s\")) {\n          tmp = (item).$to_s();\n\n          if (tmp !== nil) {\n            result.push(tmp);\n\n            continue;\n          }\n        }\n\n        self.$raise($$($nesting, 'NoMethodError').$new(\"\" + (Opal.inspect(item)) + \" doesn't respond to #to_str, #to_ary or #to_s\", \"to_str\"));\n      }\n\n      if (sep === nil) {\n        return result.join('');\n      }\n      else {\n        return result.join($$($nesting, 'Opal')['$coerce_to!'](sep, $$($nesting, 'String'), \"to_str\").$to_s());\n      }\n    ;\n    }, $Array_join$60.$$arity = -1);\n    \n    Opal.def(self, '$keep_if', $Array_keep_if$61 = function $$keep_if() {\n      var $iter = $Array_keep_if$61.$$p, block = $iter || nil, $$62, self = this;\n\n      if ($iter) $Array_keep_if$61.$$p = null;\n      \n      \n      if ($iter) $Array_keep_if$61.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"keep_if\"], ($$62 = function(){var self = $$62.$$s || this;\n\n        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))\n      };\n      \n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value === false || value === nil) {\n          self.splice(i, 1);\n\n          length--;\n          i--;\n        }\n      }\n    ;\n      return self;\n    }, $Array_keep_if$61.$$arity = 0);\n    \n    Opal.def(self, '$last', $Array_last$63 = function $$last(count) {\n      var self = this;\n\n      \n      ;\n      \n      if (count == null) {\n        return self.length === 0 ? nil : self[self.length - 1];\n      }\n\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n\n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\");\n      }\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      return self.slice(self.length - count, self.length);\n    ;\n    }, $Array_last$63.$$arity = -1);\n    \n    Opal.def(self, '$length', $Array_length$64 = function $$length() {\n      var self = this;\n\n      return self.length;\n    }, $Array_length$64.$$arity = 0);\n    Opal.alias(self, \"map\", \"collect\");\n    Opal.alias(self, \"map!\", \"collect!\");\n    \n    Opal.def(self, '$max', $Array_max$65 = function $$max(n) {\n      var $iter = $Array_max$65.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_max$65.$$p = null;\n      \n      \n      if ($iter) $Array_max$65.$$p = null;;\n      ;\n      return $send(self.$each(), 'max', [n], block.$to_proc());\n    }, $Array_max$65.$$arity = -1);\n    \n    Opal.def(self, '$min', $Array_min$66 = function $$min() {\n      var $iter = $Array_min$66.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_min$66.$$p = null;\n      \n      \n      if ($iter) $Array_min$66.$$p = null;;\n      return $send(self.$each(), 'min', [], block.$to_proc());\n    }, $Array_min$66.$$arity = 0);\n    \n    // Returns the product of from, from-1, ..., from - how_many + 1.\n    function descending_factorial(from, how_many) {\n      var count = how_many >= 0 ? 1 : 0;\n      while (how_many) {\n        count *= from;\n        from--;\n        how_many--;\n      }\n      return count;\n    }\n  ;\n    \n    Opal.def(self, '$permutation', $Array_permutation$67 = function $$permutation(num) {\n      var $iter = $Array_permutation$67.$$p, block = $iter || nil, $$68, self = this, perm = nil, used = nil;\n\n      if ($iter) $Array_permutation$67.$$p = null;\n      \n      \n      if ($iter) $Array_permutation$67.$$p = null;;\n      ;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"permutation\", num], ($$68 = function(){var self = $$68.$$s || this;\n\n        return descending_factorial(self.length, num === undefined ? self.length : num);}, $$68.$$s = self, $$68.$$arity = 0, $$68))\n      };\n      \n      var permute, offensive, output;\n\n      if (num === undefined) {\n        num = self.length;\n      }\n      else {\n        num = $$($nesting, 'Opal').$coerce_to(num, $$($nesting, 'Integer'), \"to_int\")\n      }\n\n      if (num < 0 || self.length < num) {\n        // no permutations, yield nothing\n      }\n      else if (num === 0) {\n        // exactly one permutation: the zero-length array\n        Opal.yield1(block, [])\n      }\n      else if (num === 1) {\n        // this is a special, easy case\n        for (var i = 0; i < self.length; i++) {\n          Opal.yield1(block, [self[i]])\n        }\n      }\n      else {\n        // this is the general case\n        (perm = $$($nesting, 'Array').$new(num));\n        (used = $$($nesting, 'Array').$new(self.length, false));\n\n        permute = function(num, perm, index, used, blk) {\n          self = this;\n          for(var i = 0; i < self.length; i++){\n            if(used['$[]'](i)['$!']()) {\n              perm[index] = i;\n              if(index < num - 1) {\n                used[i] = true;\n                permute.call(self, num, perm, index + 1, used, blk);\n                used[i] = false;\n              }\n              else {\n                output = [];\n                for (var j = 0; j < perm.length; j++) {\n                  output.push(self[perm[j]]);\n                }\n                Opal.yield1(blk, output);\n              }\n            }\n          }\n        }\n\n        if ((block !== nil)) {\n          // offensive (both definitions) copy.\n          offensive = self.slice();\n          permute.call(offensive, num, perm, 0, used, block);\n        }\n        else {\n          permute.call(self, num, perm, 0, used, block);\n        }\n      }\n    ;\n      return self;\n    }, $Array_permutation$67.$$arity = -1);\n    \n    Opal.def(self, '$repeated_permutation', $Array_repeated_permutation$69 = function $$repeated_permutation(n) {\n      var $$70, $iter = $Array_repeated_permutation$69.$$p, $yield = $iter || nil, self = this, num = nil;\n\n      if ($iter) $Array_repeated_permutation$69.$$p = null;\n      \n      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"repeated_permutation\", num], ($$70 = function(){var self = $$70.$$s || this;\n\n        if ($truthy($rb_ge(num, 0))) {\n            return self.$size()['$**'](num)\n          } else {\n            return 0\n          }}, $$70.$$s = self, $$70.$$arity = 0, $$70))\n      };\n      \n      function iterate(max, buffer, self) {\n        if (buffer.length == max) {\n          var copy = buffer.slice();\n          Opal.yield1($yield, copy)\n          return;\n        }\n        for (var i = 0; i < self.length; i++) {\n          buffer.push(self[i]);\n          iterate(max, buffer, self);\n          buffer.pop();\n        }\n      }\n\n      iterate(num, [], self.slice());\n    ;\n      return self;\n    }, $Array_repeated_permutation$69.$$arity = 1);\n    \n    Opal.def(self, '$pop', $Array_pop$71 = function $$pop(count) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(count === undefined)) {\n        \n        if ($truthy(self.length === 0)) {\n          return nil};\n        return self.pop();};\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(count < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\")};\n      if ($truthy(self.length === 0)) {\n        return []};\n      if ($truthy(count > self.length)) {\n        return self.splice(0, self.length);\n      } else {\n        return self.splice(self.length - count, self.length);\n      };\n    }, $Array_pop$71.$$arity = -1);\n    \n    Opal.def(self, '$product', $Array_product$72 = function $$product($a) {\n      var $iter = $Array_product$72.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Array_product$72.$$p = null;\n      \n      \n      if ($iter) $Array_product$72.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var result = (block !== nil) ? null : [],\n          n = args.length + 1,\n          counters = new Array(n),\n          lengths  = new Array(n),\n          arrays   = new Array(n),\n          i, m, subarray, len, resultlen = 1;\n\n      arrays[0] = self;\n      for (i = 1; i < n; i++) {\n        arrays[i] = $$($nesting, 'Opal').$coerce_to(args[i - 1], $$($nesting, 'Array'), \"to_ary\");\n      }\n\n      for (i = 0; i < n; i++) {\n        len = arrays[i].length;\n        if (len === 0) {\n          return result || self;\n        }\n        resultlen *= len;\n        if (resultlen > 2147483647) {\n          self.$raise($$($nesting, 'RangeError'), \"too big to product\")\n        }\n        lengths[i] = len;\n        counters[i] = 0;\n      }\n\n      outer_loop: for (;;) {\n        subarray = [];\n        for (i = 0; i < n; i++) {\n          subarray.push(arrays[i][counters[i]]);\n        }\n        if (result) {\n          result.push(subarray);\n        } else {\n          Opal.yield1(block, subarray)\n        }\n        m = n - 1;\n        counters[m]++;\n        while (counters[m] === lengths[m]) {\n          counters[m] = 0;\n          if (--m < 0) break outer_loop;\n          counters[m]++;\n        }\n      }\n\n      return result || self;\n    ;\n    }, $Array_product$72.$$arity = -1);\n    \n    Opal.def(self, '$push', $Array_push$73 = function $$push($a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      objects = $post_args;;\n      \n      for (var i = 0, length = objects.length; i < length; i++) {\n        self.push(objects[i]);\n      }\n    ;\n      return self;\n    }, $Array_push$73.$$arity = -1);\n    Opal.alias(self, \"append\", \"push\");\n    \n    Opal.def(self, '$rassoc', $Array_rassoc$74 = function $$rassoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, length = self.length, item; i < length; i++) {\n        item = self[i];\n\n        if (item.length && item[1] !== undefined) {\n          if ((item[1])['$=='](object)) {\n            return item;\n          }\n        }\n      }\n\n      return nil;\n    \n    }, $Array_rassoc$74.$$arity = 1);\n    \n    Opal.def(self, '$reject', $Array_reject$75 = function $$reject() {\n      var $iter = $Array_reject$75.$$p, block = $iter || nil, $$76, self = this;\n\n      if ($iter) $Array_reject$75.$$p = null;\n      \n      \n      if ($iter) $Array_reject$75.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject\"], ($$76 = function(){var self = $$76.$$s || this;\n\n        return self.$size()}, $$76.$$s = self, $$76.$$arity = 0, $$76))\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, value; i < length; i++) {\n        value = block(self[i]);\n\n        if (value === false || value === nil) {\n          result.push(self[i]);\n        }\n      }\n      return result;\n    ;\n    }, $Array_reject$75.$$arity = 0);\n    \n    Opal.def(self, '$reject!', $Array_reject$excl$77 = function() {\n      var $iter = $Array_reject$excl$77.$$p, block = $iter || nil, $$78, self = this, original = nil;\n\n      if ($iter) $Array_reject$excl$77.$$p = null;\n      \n      \n      if ($iter) $Array_reject$excl$77.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject!\"], ($$78 = function(){var self = $$78.$$s || this;\n\n        return self.$size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))\n      };\n      original = self.$length();\n      $send(self, 'delete_if', [], block.$to_proc());\n      if (self.$length()['$=='](original)) {\n        return nil\n      } else {\n        return self\n      };\n    }, $Array_reject$excl$77.$$arity = 0);\n    \n    Opal.def(self, '$replace', $Array_replace$79 = function $$replace(other) {\n      var self = this;\n\n      \n      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {\n        return other.$to_a()\n      } else {\n        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), \"to_ary\").$to_a()\n      }; return nil; })();\n      \n      self.splice(0, self.length);\n      self.push.apply(self, other);\n    ;\n      return self;\n    }, $Array_replace$79.$$arity = 1);\n    \n    Opal.def(self, '$reverse', $Array_reverse$80 = function $$reverse() {\n      var self = this;\n\n      return self.slice(0).reverse();\n    }, $Array_reverse$80.$$arity = 0);\n    \n    Opal.def(self, '$reverse!', $Array_reverse$excl$81 = function() {\n      var self = this;\n\n      return self.reverse();\n    }, $Array_reverse$excl$81.$$arity = 0);\n    \n    Opal.def(self, '$reverse_each', $Array_reverse_each$82 = function $$reverse_each() {\n      var $iter = $Array_reverse_each$82.$$p, block = $iter || nil, $$83, self = this;\n\n      if ($iter) $Array_reverse_each$82.$$p = null;\n      \n      \n      if ($iter) $Array_reverse_each$82.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"reverse_each\"], ($$83 = function(){var self = $$83.$$s || this;\n\n        return self.$size()}, $$83.$$s = self, $$83.$$arity = 0, $$83))\n      };\n      $send(self.$reverse(), 'each', [], block.$to_proc());\n      return self;\n    }, $Array_reverse_each$82.$$arity = 0);\n    \n    Opal.def(self, '$rindex', $Array_rindex$84 = function $$rindex(object) {\n      var $iter = $Array_rindex$84.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_rindex$84.$$p = null;\n      \n      \n      if ($iter) $Array_rindex$84.$$p = null;;\n      ;\n      \n      var i, value;\n\n      if (object != null && block !== nil) {\n        self.$warn(\"warning: given block not used\")\n      }\n\n      if (object != null) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n          if ((self[i])['$=='](object)) {\n            return i;\n          }\n        }\n      }\n      else if (block !== nil) {\n        for (i = self.length - 1; i >= 0; i--) {\n          if (i >= self.length) {\n            break;\n          }\n\n          value = block(self[i]);\n\n          if (value !== false && value !== nil) {\n            return i;\n          }\n        }\n      }\n      else if (object == null) {\n        return self.$enum_for(\"rindex\");\n      }\n\n      return nil;\n    ;\n    }, $Array_rindex$84.$$arity = -1);\n    \n    Opal.def(self, '$rotate', $Array_rotate$85 = function $$rotate(n) {\n      var self = this;\n\n      \n      \n      if (n == null) {\n        n = 1;\n      };\n      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), \"to_int\");\n      \n      var ary, idx, firstPart, lastPart;\n\n      if (self.length === 1) {\n        return self.slice();\n      }\n      if (self.length === 0) {\n        return [];\n      }\n\n      ary = self.slice();\n      idx = n % ary.length;\n\n      firstPart = ary.slice(idx);\n      lastPart = ary.slice(0, idx);\n      return firstPart.concat(lastPart);\n    ;\n    }, $Array_rotate$85.$$arity = -1);\n    \n    Opal.def(self, '$rotate!', $Array_rotate$excl$86 = function(cnt) {\n      var self = this, ary = nil;\n\n      \n      \n      if (cnt == null) {\n        cnt = 1;\n      };\n      \n      if (self.length === 0 || self.length === 1) {\n        return self;\n      }\n    ;\n      cnt = $$($nesting, 'Opal').$coerce_to(cnt, $$($nesting, 'Integer'), \"to_int\");\n      ary = self.$rotate(cnt);\n      return self.$replace(ary);\n    }, $Array_rotate$excl$86.$$arity = -1);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'SampleRandom');\n\n      var $nesting = [self].concat($parent_nesting), $SampleRandom_initialize$87, $SampleRandom_rand$88;\n\n      self.$$prototype.rng = nil;\n      \n      \n      Opal.def(self, '$initialize', $SampleRandom_initialize$87 = function $$initialize(rng) {\n        var self = this;\n\n        return (self.rng = rng)\n      }, $SampleRandom_initialize$87.$$arity = 1);\n      return (Opal.def(self, '$rand', $SampleRandom_rand$88 = function $$rand(size) {\n        var self = this, random = nil;\n\n        \n        random = $$($nesting, 'Opal').$coerce_to(self.rng.$rand(size), $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy(random < 0)) {\n          self.$raise($$($nesting, 'RangeError'), \"random value must be >= 0\")};\n        if ($truthy(random < size)) {\n        } else {\n          self.$raise($$($nesting, 'RangeError'), \"random value must be less than Array size\")\n        };\n        return random;\n      }, $SampleRandom_rand$88.$$arity = 1), nil) && 'rand';\n    })($nesting[0], null, $nesting);\n    \n    Opal.def(self, '$sample', $Array_sample$89 = function $$sample(count, options) {\n      var $a, self = this, o = nil, rng = nil;\n\n      \n      ;\n      ;\n      if ($truthy(count === undefined)) {\n        return self.$at($$($nesting, 'Kernel').$rand(self.length))};\n      if ($truthy(options === undefined)) {\n        if ($truthy((o = $$($nesting, 'Opal')['$coerce_to?'](count, $$($nesting, 'Hash'), \"to_hash\")))) {\n          \n          options = o;\n          count = nil;\n        } else {\n          \n          options = nil;\n          count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n        }\n      } else {\n        \n        count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n        options = $$($nesting, 'Opal').$coerce_to(options, $$($nesting, 'Hash'), \"to_hash\");\n      };\n      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"count must be greater than 0\")};\n      if ($truthy(options)) {\n        rng = options['$[]'](\"random\")};\n      rng = (function() {if ($truthy(($truthy($a = rng) ? rng['$respond_to?'](\"rand\") : $a))) {\n        return $$($nesting, 'SampleRandom').$new(rng)\n      } else {\n        return $$($nesting, 'Kernel')\n      }; return nil; })();\n      if ($truthy(count)) {\n      } else {\n        return self[rng.$rand(self.length)]\n      };\n      \n\n      var abandon, spin, result, i, j, k, targetIndex, oldValue;\n\n      if (count > self.length) {\n        count = self.length;\n      }\n\n      switch (count) {\n        case 0:\n          return [];\n          break;\n        case 1:\n          return [self[rng.$rand(self.length)]];\n          break;\n        case 2:\n          i = rng.$rand(self.length);\n          j = rng.$rand(self.length);\n          if (i === j) {\n            j = i === 0 ? i + 1 : i - 1;\n          }\n          return [self[i], self[j]];\n          break;\n        default:\n          if (self.length / count > 3) {\n            abandon = false;\n            spin = 0;\n\n            result = $$($nesting, 'Array').$new(count);\n            i = 1;\n\n            result[0] = rng.$rand(self.length);\n            while (i < count) {\n              k = rng.$rand(self.length);\n              j = 0;\n\n              while (j < i) {\n                while (k === result[j]) {\n                  spin++;\n                  if (spin > 100) {\n                    abandon = true;\n                    break;\n                  }\n                  k = rng.$rand(self.length);\n                }\n                if (abandon) { break; }\n\n                j++;\n              }\n\n              if (abandon) { break; }\n\n              result[i] = k;\n\n              i++;\n            }\n\n            if (!abandon) {\n              i = 0;\n              while (i < count) {\n                result[i] = self[result[i]];\n                i++;\n              }\n\n              return result;\n            }\n          }\n\n          result = self.slice();\n\n          for (var c = 0; c < count; c++) {\n            targetIndex = rng.$rand(self.length);\n            oldValue = result[c];\n            result[c] = result[targetIndex];\n            result[targetIndex] = oldValue;\n          }\n\n          return count === self.length ? result : (result)['$[]'](0, count);\n      }\n    ;\n    }, $Array_sample$89.$$arity = -1);\n    \n    Opal.def(self, '$select', $Array_select$90 = function $$select() {\n      var $iter = $Array_select$90.$$p, block = $iter || nil, $$91, self = this;\n\n      if ($iter) $Array_select$90.$$p = null;\n      \n      \n      if ($iter) $Array_select$90.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"select\"], ($$91 = function(){var self = $$91.$$s || this;\n\n        return self.$size()}, $$91.$$s = self, $$91.$$arity = 0, $$91))\n      };\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = Opal.yield1(block, item);\n\n        if (Opal.truthy(value)) {\n          result.push(item);\n        }\n      }\n\n      return result;\n    ;\n    }, $Array_select$90.$$arity = 0);\n    \n    Opal.def(self, '$select!', $Array_select$excl$92 = function() {\n      var $iter = $Array_select$excl$92.$$p, block = $iter || nil, $$93, self = this;\n\n      if ($iter) $Array_select$excl$92.$$p = null;\n      \n      \n      if ($iter) $Array_select$excl$92.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"select!\"], ($$93 = function(){var self = $$93.$$s || this;\n\n        return self.$size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))\n      };\n      \n      var original = self.length;\n      $send(self, 'keep_if', [], block.$to_proc());\n      return self.length === original ? nil : self;\n    ;\n    }, $Array_select$excl$92.$$arity = 0);\n    \n    Opal.def(self, '$shift', $Array_shift$94 = function $$shift(count) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(count === undefined)) {\n        \n        if ($truthy(self.length === 0)) {\n          return nil};\n        return self.shift();};\n      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(count < 0)) {\n        self.$raise($$($nesting, 'ArgumentError'), \"negative array size\")};\n      if ($truthy(self.length === 0)) {\n        return []};\n      return self.splice(0, count);;\n    }, $Array_shift$94.$$arity = -1);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$shuffle', $Array_shuffle$95 = function $$shuffle(rng) {\n      var self = this;\n\n      \n      ;\n      return self.$dup().$to_a()['$shuffle!'](rng);\n    }, $Array_shuffle$95.$$arity = -1);\n    \n    Opal.def(self, '$shuffle!', $Array_shuffle$excl$96 = function(rng) {\n      var self = this;\n\n      \n      ;\n      \n      var randgen, i = self.length, j, tmp;\n\n      if (rng !== undefined) {\n        rng = $$($nesting, 'Opal')['$coerce_to?'](rng, $$($nesting, 'Hash'), \"to_hash\");\n\n        if (rng !== nil) {\n          rng = rng['$[]'](\"random\");\n\n          if (rng !== nil && rng['$respond_to?'](\"rand\")) {\n            randgen = rng;\n          }\n        }\n      }\n\n      while (i) {\n        if (randgen) {\n          j = randgen.$rand(i).$to_int();\n\n          if (j < 0) {\n            self.$raise($$($nesting, 'RangeError'), \"\" + \"random number too small \" + (j))\n          }\n\n          if (j >= i) {\n            self.$raise($$($nesting, 'RangeError'), \"\" + \"random number too big \" + (j))\n          }\n        }\n        else {\n          j = self.$rand(i);\n        }\n\n        tmp = self[--i];\n        self[i] = self[j];\n        self[j] = tmp;\n      }\n\n      return self;\n    ;\n    }, $Array_shuffle$excl$96.$$arity = -1);\n    Opal.alias(self, \"slice\", \"[]\");\n    \n    Opal.def(self, '$slice!', $Array_slice$excl$97 = function(index, length) {\n      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;\n\n      \n      ;\n      result = nil;\n      if ($truthy(length === undefined)) {\n        if ($truthy($$($nesting, 'Range')['$==='](index))) {\n          \n          range = index;\n          result = self['$[]'](range);\n          range_start = $$($nesting, 'Opal').$coerce_to(range.$begin(), $$($nesting, 'Integer'), \"to_int\");\n          range_end = $$($nesting, 'Opal').$coerce_to(range.$end(), $$($nesting, 'Integer'), \"to_int\");\n          \n          if (range_start < 0) {\n            range_start += self.length;\n          }\n\n          if (range_end < 0) {\n            range_end += self.length;\n          } else if (range_end >= self.length) {\n            range_end = self.length - 1;\n            if (range.excl) {\n              range_end += 1;\n            }\n          }\n\n          var range_length = range_end - range_start;\n          if (range.excl) {\n            range_end -= 1;\n          } else {\n            range_length += 1;\n          }\n\n          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {\n            self.splice(range_start, range_length);\n          }\n        ;\n        } else {\n          \n          start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n          \n          if (start < 0) {\n            start += self.length;\n          }\n\n          if (start < 0 || start >= self.length) {\n            return nil;\n          }\n\n          result = self[start];\n\n          if (start === 0) {\n            self.shift();\n          } else {\n            self.splice(start, 1);\n          }\n        ;\n        }\n      } else {\n        \n        start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), \"to_int\");\n        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), \"to_int\");\n        \n        if (length < 0) {\n          return nil;\n        }\n\n        var end = start + length;\n\n        result = self['$[]'](start, length);\n\n        if (start < 0) {\n          start += self.length;\n        }\n\n        if (start + length > self.length) {\n          length = self.length - start;\n        }\n\n        if (start < self.length && start >= 0) {\n          self.splice(start, length);\n        }\n      ;\n      };\n      return result;\n    }, $Array_slice$excl$97.$$arity = -2);\n    \n    Opal.def(self, '$sort', $Array_sort$98 = function $$sort() {\n      var $iter = $Array_sort$98.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_sort$98.$$p = null;\n      \n      \n      if ($iter) $Array_sort$98.$$p = null;;\n      if ($truthy(self.length > 1)) {\n      } else {\n        return self\n      };\n      \n      if (block === nil) {\n        block = function(a, b) {\n          return (a)['$<=>'](b);\n        };\n      }\n\n      return self.slice().sort(function(x, y) {\n        var ret = block(x, y);\n\n        if (ret === nil) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + ((x).$inspect()) + \" with \" + ((y).$inspect()) + \" failed\");\n        }\n\n        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);\n      });\n    ;\n    }, $Array_sort$98.$$arity = 0);\n    \n    Opal.def(self, '$sort!', $Array_sort$excl$99 = function() {\n      var $iter = $Array_sort$excl$99.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_sort$excl$99.$$p = null;\n      \n      \n      if ($iter) $Array_sort$excl$99.$$p = null;;\n      \n      var result;\n\n      if ((block !== nil)) {\n        result = $send((self.slice()), 'sort', [], block.$to_proc());\n      }\n      else {\n        result = (self.slice()).$sort();\n      }\n\n      self.length = 0;\n      for(var i = 0, length = result.length; i < length; i++) {\n        self.push(result[i]);\n      }\n\n      return self;\n    ;\n    }, $Array_sort$excl$99.$$arity = 0);\n    \n    Opal.def(self, '$sort_by!', $Array_sort_by$excl$100 = function() {\n      var $iter = $Array_sort_by$excl$100.$$p, block = $iter || nil, $$101, self = this;\n\n      if ($iter) $Array_sort_by$excl$100.$$p = null;\n      \n      \n      if ($iter) $Array_sort_by$excl$100.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"sort_by!\"], ($$101 = function(){var self = $$101.$$s || this;\n\n        return self.$size()}, $$101.$$s = self, $$101.$$arity = 0, $$101))\n      };\n      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));\n    }, $Array_sort_by$excl$100.$$arity = 0);\n    \n    Opal.def(self, '$take', $Array_take$102 = function $$take(count) {\n      var self = this;\n\n      \n      if (count < 0) {\n        self.$raise($$($nesting, 'ArgumentError'));\n      }\n\n      return self.slice(0, count);\n    \n    }, $Array_take$102.$$arity = 1);\n    \n    Opal.def(self, '$take_while', $Array_take_while$103 = function $$take_while() {\n      var $iter = $Array_take_while$103.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_take_while$103.$$p = null;\n      \n      \n      if ($iter) $Array_take_while$103.$$p = null;;\n      \n      var result = [];\n\n      for (var i = 0, length = self.length, item, value; i < length; i++) {\n        item = self[i];\n\n        value = block(item);\n\n        if (value === false || value === nil) {\n          return result;\n        }\n\n        result.push(item);\n      }\n\n      return result;\n    ;\n    }, $Array_take_while$103.$$arity = 0);\n    \n    Opal.def(self, '$to_a', $Array_to_a$104 = function $$to_a() {\n      var self = this;\n\n      return self\n    }, $Array_to_a$104.$$arity = 0);\n    Opal.alias(self, \"to_ary\", \"to_a\");\n    \n    Opal.def(self, '$to_h', $Array_to_h$105 = function $$to_h() {\n      var self = this;\n\n      \n      var i, len = self.length, ary, key, val, hash = $hash2([], {});\n\n      for (i = 0; i < len; i++) {\n        ary = $$($nesting, 'Opal')['$coerce_to?'](self[i], $$($nesting, 'Array'), \"to_ary\");\n        if (!ary.$$is_array) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"wrong element type \" + ((ary).$class()) + \" at \" + (i) + \" (expected array)\")\n        }\n        if (ary.length !== 2) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong array length at \" + (i) + \" (expected 2, was \" + ((ary).$length()) + \")\")\n        }\n        key = ary[0];\n        val = ary[1];\n        Opal.hash_put(hash, key, val);\n      }\n\n      return hash;\n    \n    }, $Array_to_h$105.$$arity = 0);\n    Opal.alias(self, \"to_s\", \"inspect\");\n    \n    Opal.def(self, '$transpose', $Array_transpose$106 = function $$transpose() {\n      var $$107, self = this, result = nil, max = nil;\n\n      \n      if ($truthy(self['$empty?']())) {\n        return []};\n      result = [];\n      max = nil;\n      $send(self, 'each', [], ($$107 = function(row){var self = $$107.$$s || this, $a, $$108;\n\n      \n        \n        if (row == null) {\n          row = nil;\n        };\n        row = (function() {if ($truthy($$($nesting, 'Array')['$==='](row))) {\n          return row.$to_a()\n        } else {\n          return $$($nesting, 'Opal').$coerce_to(row, $$($nesting, 'Array'), \"to_ary\").$to_a()\n        }; return nil; })();\n        max = ($truthy($a = max) ? $a : row.length);\n        if ($truthy((row.length)['$!='](max))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"element size differs (\" + (row.length) + \" should be \" + (max) + \")\")};\n        return $send((row.length), 'times', [], ($$108 = function(i){var self = $$108.$$s || this, $b, entry = nil, $writer = nil;\n\n        \n          \n          if (i == null) {\n            i = nil;\n          };\n          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          return entry['$<<'](row.$at(i));}, $$108.$$s = self, $$108.$$arity = 1, $$108));}, $$107.$$s = self, $$107.$$arity = 1, $$107));\n      return result;\n    }, $Array_transpose$106.$$arity = 0);\n    \n    Opal.def(self, '$uniq', $Array_uniq$109 = function $$uniq() {\n      var $iter = $Array_uniq$109.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_uniq$109.$$p = null;\n      \n      \n      if ($iter) $Array_uniq$109.$$p = null;;\n      \n      var hash = $hash2([], {}), i, length, item, key;\n\n      if (block === nil) {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          if (Opal.hash_get(hash, item) === undefined) {\n            Opal.hash_put(hash, item, item);\n          }\n        }\n      }\n      else {\n        for (i = 0, length = self.length; i < length; i++) {\n          item = self[i];\n          key = Opal.yield1(block, item);\n          if (Opal.hash_get(hash, key) === undefined) {\n            Opal.hash_put(hash, key, item);\n          }\n        }\n      }\n\n      return toArraySubclass((hash).$values(), self.$class());\n    ;\n    }, $Array_uniq$109.$$arity = 0);\n    \n    Opal.def(self, '$uniq!', $Array_uniq$excl$110 = function() {\n      var $iter = $Array_uniq$excl$110.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Array_uniq$excl$110.$$p = null;\n      \n      \n      if ($iter) $Array_uniq$excl$110.$$p = null;;\n      \n      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;\n\n      for (i = 0, length = original_length; i < length; i++) {\n        item = self[i];\n        key = (block === nil ? item : Opal.yield1(block, item));\n\n        if (Opal.hash_get(hash, key) === undefined) {\n          Opal.hash_put(hash, key, item);\n          continue;\n        }\n\n        self.splice(i, 1);\n        length--;\n        i--;\n      }\n\n      return self.length === original_length ? nil : self;\n    ;\n    }, $Array_uniq$excl$110.$$arity = 0);\n    \n    Opal.def(self, '$unshift', $Array_unshift$111 = function $$unshift($a) {\n      var $post_args, objects, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      objects = $post_args;;\n      \n      for (var i = objects.length - 1; i >= 0; i--) {\n        self.unshift(objects[i]);\n      }\n    ;\n      return self;\n    }, $Array_unshift$111.$$arity = -1);\n    Opal.alias(self, \"prepend\", \"unshift\");\n    \n    Opal.def(self, '$values_at', $Array_values_at$112 = function $$values_at($a) {\n      var $post_args, args, $$113, self = this, out = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      out = [];\n      $send(args, 'each', [], ($$113 = function(elem){var self = $$113.$$s || this, $$114, finish = nil, start = nil, i = nil;\n\n      \n        \n        if (elem == null) {\n          elem = nil;\n        };\n        if ($truthy(elem['$is_a?']($$($nesting, 'Range')))) {\n          \n          finish = $$($nesting, 'Opal').$coerce_to(elem.$last(), $$($nesting, 'Integer'), \"to_int\");\n          start = $$($nesting, 'Opal').$coerce_to(elem.$first(), $$($nesting, 'Integer'), \"to_int\");\n          \n          if (start < 0) {\n            start = start + self.length;\n            return nil;;\n          }\n        ;\n          \n          if (finish < 0) {\n            finish = finish + self.length;\n          }\n          if (elem['$exclude_end?']()) {\n            finish--;\n          }\n          if (finish < start) {\n            return nil;;\n          }\n        ;\n          return $send(start, 'upto', [finish], ($$114 = function(i){var self = $$114.$$s || this;\n\n          \n            \n            if (i == null) {\n              i = nil;\n            };\n            return out['$<<'](self.$at(i));}, $$114.$$s = self, $$114.$$arity = 1, $$114));\n        } else {\n          \n          i = $$($nesting, 'Opal').$coerce_to(elem, $$($nesting, 'Integer'), \"to_int\");\n          return out['$<<'](self.$at(i));\n        };}, $$113.$$s = self, $$113.$$arity = 1, $$113));\n      return out;\n    }, $Array_values_at$112.$$arity = -1);\n    \n    Opal.def(self, '$zip', $Array_zip$115 = function $$zip($a) {\n      var $iter = $Array_zip$115.$$p, block = $iter || nil, $post_args, others, $b, self = this;\n\n      if ($iter) $Array_zip$115.$$p = null;\n      \n      \n      if ($iter) $Array_zip$115.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      others = $post_args;;\n      \n      var result = [], size = self.length, part, o, i, j, jj;\n\n      for (j = 0, jj = others.length; j < jj; j++) {\n        o = others[j];\n        if (o.$$is_array) {\n          continue;\n        }\n        if (o.$$is_enumerator) {\n          if (o.$size() === Infinity) {\n            others[j] = o.$take(size);\n          } else {\n            others[j] = o.$to_a();\n          }\n          continue;\n        }\n        others[j] = ($truthy($b = $$($nesting, 'Opal')['$coerce_to?'](o, $$($nesting, 'Array'), \"to_ary\")) ? $b : $$($nesting, 'Opal')['$coerce_to!'](o, $$($nesting, 'Enumerator'), \"each\")).$to_a();\n      }\n\n      for (i = 0; i < size; i++) {\n        part = [self[i]];\n\n        for (j = 0, jj = others.length; j < jj; j++) {\n          o = others[j][i];\n\n          if (o == null) {\n            o = nil;\n          }\n\n          part[j + 1] = o;\n        }\n\n        result[i] = part;\n      }\n\n      if (block !== nil) {\n        for (i = 0; i < size; i++) {\n          block(result[i]);\n        }\n\n        return nil;\n      }\n\n      return result;\n    ;\n    }, $Array_zip$115.$$arity = -1);\n    Opal.defs(self, '$inherited', $Array_inherited$116 = function $$inherited(klass) {\n      var self = this;\n\n      \n      klass.$$prototype.$to_a = function() {\n        return this.slice(0, this.length);\n      }\n    \n    }, $Array_inherited$116.$$arity = 1);\n    \n    Opal.def(self, '$instance_variables', $Array_instance_variables$117 = function $$instance_variables() {\n      var $$118, $iter = $Array_instance_variables$117.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Array_instance_variables$117.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      return $send($send(self, Opal.find_super_dispatcher(self, 'instance_variables', $Array_instance_variables$117, false), $zuper, $iter), 'reject', [], ($$118 = function(ivar){var self = $$118.$$s || this, $a;\n\n      \n        \n        if (ivar == null) {\n          ivar = nil;\n        };\n        return ($truthy($a = /^@\\d+$/.test(ivar)) ? $a : ivar['$=='](\"@length\"));}, $$118.$$s = self, $$118.$$arity = 1, $$118))\n    }, $Array_instance_variables$117.$$arity = 0);\n    $$($nesting, 'Opal').$pristine(self.$singleton_class(), \"allocate\");\n    $$($nesting, 'Opal').$pristine(self, \"copy_instance_variables\", \"initialize_dup\");\n    return (Opal.def(self, '$pack', $Array_pack$119 = function $$pack($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      return self.$raise(\"To use Array#pack, you must first require 'corelib/array/pack'.\");\n    }, $Array_pack$119.$$arity = -1), nil) && 'pack';\n  })($nesting[0], Array, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/hash\"] = function(Opal) {\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$new', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$proc']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Hash');\n\n    var $nesting = [self].concat($parent_nesting), $Hash_$$$1, $Hash_allocate$2, $Hash_try_convert$3, $Hash_initialize$4, $Hash_$eq_eq$5, $Hash_$gt_eq$6, $Hash_$gt$8, $Hash_$lt$9, $Hash_$lt_eq$10, $Hash_$$$11, $Hash_$$$eq$12, $Hash_assoc$13, $Hash_clear$14, $Hash_clone$15, $Hash_compact$16, $Hash_compact$excl$17, $Hash_compare_by_identity$18, $Hash_compare_by_identity$ques$19, $Hash_default$20, $Hash_default$eq$21, $Hash_default_proc$22, $Hash_default_proc$eq$23, $Hash_delete$24, $Hash_delete_if$25, $Hash_dig$27, $Hash_each$28, $Hash_each_key$30, $Hash_each_value$32, $Hash_empty$ques$34, $Hash_fetch$35, $Hash_fetch_values$36, $Hash_flatten$38, $Hash_has_key$ques$39, $Hash_has_value$ques$40, $Hash_hash$41, $Hash_index$42, $Hash_indexes$43, $Hash_inspect$44, $Hash_invert$45, $Hash_keep_if$46, $Hash_keys$48, $Hash_length$49, $Hash_merge$50, $Hash_merge$excl$51, $Hash_rassoc$52, $Hash_rehash$53, $Hash_reject$54, $Hash_reject$excl$56, $Hash_replace$58, $Hash_select$59, $Hash_select$excl$61, $Hash_shift$63, $Hash_slice$64, $Hash_to_a$65, $Hash_to_h$66, $Hash_to_hash$67, $Hash_to_proc$68, $Hash_transform_keys$70, $Hash_transform_keys$excl$72, $Hash_transform_values$74, $Hash_transform_values$excl$76, $Hash_values$78;\n\n    \n    self.$include($$($nesting, 'Enumerable'));\n    self.$$prototype.$$is_hash = true;\n    Opal.defs(self, '$[]', $Hash_$$$1 = function($a) {\n      var $post_args, argv, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      argv = $post_args;;\n      \n      var hash, argc = argv.length, i;\n\n      if (argc === 1) {\n        hash = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Hash'), \"to_hash\");\n        if (hash !== nil) {\n          return self.$allocate()['$merge!'](hash);\n        }\n\n        argv = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Array'), \"to_ary\");\n        if (argv === nil) {\n          self.$raise($$($nesting, 'ArgumentError'), \"odd number of arguments for Hash\")\n        }\n\n        argc = argv.length;\n        hash = self.$allocate();\n\n        for (i = 0; i < argc; i++) {\n          if (!argv[i].$$is_array) continue;\n          switch(argv[i].length) {\n          case 1:\n            hash.$store(argv[i][0], nil);\n            break;\n          case 2:\n            hash.$store(argv[i][0], argv[i][1]);\n            break;\n          default:\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid number of elements (\" + (argv[i].length) + \" for 1..2)\")\n          }\n        }\n\n        return hash;\n      }\n\n      if (argc % 2 !== 0) {\n        self.$raise($$($nesting, 'ArgumentError'), \"odd number of arguments for Hash\")\n      }\n\n      hash = self.$allocate();\n\n      for (i = 0; i < argc; i += 2) {\n        hash.$store(argv[i], argv[i + 1]);\n      }\n\n      return hash;\n    ;\n    }, $Hash_$$$1.$$arity = -1);\n    Opal.defs(self, '$allocate', $Hash_allocate$2 = function $$allocate() {\n      var self = this;\n\n      \n      var hash = new self.$$constructor();\n\n      Opal.hash_init(hash);\n\n      hash.$$none = nil;\n      hash.$$proc = nil;\n\n      return hash;\n    \n    }, $Hash_allocate$2.$$arity = 0);\n    Opal.defs(self, '$try_convert', $Hash_try_convert$3 = function $$try_convert(obj) {\n      var self = this;\n\n      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Hash'), \"to_hash\")\n    }, $Hash_try_convert$3.$$arity = 1);\n    \n    Opal.def(self, '$initialize', $Hash_initialize$4 = function $$initialize(defaults) {\n      var $iter = $Hash_initialize$4.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_initialize$4.$$p = null;\n      \n      \n      if ($iter) $Hash_initialize$4.$$p = null;;\n      ;\n      \n      if (defaults !== undefined && block !== nil) {\n        self.$raise($$($nesting, 'ArgumentError'), \"wrong number of arguments (1 for 0)\")\n      }\n      self.$$none = (defaults === undefined ? nil : defaults);\n      self.$$proc = block;\n\n      return self;\n    ;\n    }, $Hash_initialize$4.$$arity = -1);\n    \n    Opal.def(self, '$==', $Hash_$eq_eq$5 = function(other) {\n      var self = this;\n\n      \n      if (self === other) {\n        return true;\n      }\n\n      if (!other.$$is_hash) {\n        return false;\n      }\n\n      if (self.$$keys.length !== other.$$keys.length) {\n        return false;\n      }\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n          other_value = other.$$smap[key];\n        } else {\n          value = key.value;\n          other_value = Opal.hash_get(other, key.key);\n        }\n\n        if (other_value === undefined || !value['$eql?'](other_value)) {\n          return false;\n        }\n      }\n\n      return true;\n    \n    }, $Hash_$eq_eq$5.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Hash_$gt_eq$6 = function(other) {\n      var $$7, self = this, result = nil;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      \n      if (self.$$keys.length < other.$$keys.length) {\n        return false\n      }\n    ;\n      result = true;\n      $send(other, 'each', [], ($$7 = function(other_key, other_val){var self = $$7.$$s || this, val = nil;\n\n      \n        \n        if (other_key == null) {\n          other_key = nil;\n        };\n        \n        if (other_val == null) {\n          other_val = nil;\n        };\n        val = self.$fetch(other_key, null);\n        \n        if (val == null || val !== other_val) {\n          result = false;\n          return;\n        }\n      ;}, $$7.$$s = self, $$7.$$arity = 2, $$7));\n      return result;\n    }, $Hash_$gt_eq$6.$$arity = 1);\n    \n    Opal.def(self, '$>', $Hash_$gt$8 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      \n      if (self.$$keys.length <= other.$$keys.length) {\n        return false\n      }\n    ;\n      return $rb_ge(self, other);\n    }, $Hash_$gt$8.$$arity = 1);\n    \n    Opal.def(self, '$<', $Hash_$lt$9 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      return $rb_gt(other, self);\n    }, $Hash_$lt$9.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Hash_$lt_eq$10 = function(other) {\n      var self = this;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      return $rb_ge(other, self);\n    }, $Hash_$lt_eq$10.$$arity = 1);\n    \n    Opal.def(self, '$[]', $Hash_$$$11 = function(key) {\n      var self = this;\n\n      \n      var value = Opal.hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      return self.$default(key);\n    \n    }, $Hash_$$$11.$$arity = 1);\n    \n    Opal.def(self, '$[]=', $Hash_$$$eq$12 = function(key, value) {\n      var self = this;\n\n      \n      Opal.hash_put(self, key, value);\n      return value;\n    \n    }, $Hash_$$$eq$12.$$arity = 2);\n    \n    Opal.def(self, '$assoc', $Hash_assoc$13 = function $$assoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          if ((key)['$=='](object)) {\n            return [key, self.$$smap[key]];\n          }\n        } else {\n          if ((key.key)['$=='](object)) {\n            return [key.key, key.value];\n          }\n        }\n      }\n\n      return nil;\n    \n    }, $Hash_assoc$13.$$arity = 1);\n    \n    Opal.def(self, '$clear', $Hash_clear$14 = function $$clear() {\n      var self = this;\n\n      \n      Opal.hash_init(self);\n      return self;\n    \n    }, $Hash_clear$14.$$arity = 0);\n    \n    Opal.def(self, '$clone', $Hash_clone$15 = function $$clone() {\n      var self = this;\n\n      \n      var hash = new self.$$class();\n\n      Opal.hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    \n    }, $Hash_clone$15.$$arity = 0);\n    \n    Opal.def(self, '$compact', $Hash_compact$16 = function $$compact() {\n      var self = this;\n\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value !== nil) {\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    \n    }, $Hash_compact$16.$$arity = 0);\n    \n    Opal.def(self, '$compact!', $Hash_compact$excl$17 = function() {\n      var self = this;\n\n      \n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if (value === nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    \n    }, $Hash_compact$excl$17.$$arity = 0);\n    \n    Opal.def(self, '$compare_by_identity', $Hash_compare_by_identity$18 = function $$compare_by_identity() {\n      var self = this;\n\n      \n      var i, ii, key, keys = self.$$keys, identity_hash;\n\n      if (self.$$by_identity) return self;\n      if (self.$$keys.length === 0) {\n        self.$$by_identity = true\n        return self;\n      }\n\n      identity_hash = $hash2([], {}).$compare_by_identity();\n      for(i = 0, ii = keys.length; i < ii; i++) {\n        key = keys[i];\n        if (!key.$$is_string) key = key.key;\n        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));\n      }\n\n      self.$$by_identity = true;\n      self.$$map = identity_hash.$$map;\n      self.$$smap = identity_hash.$$smap;\n      return self;\n    \n    }, $Hash_compare_by_identity$18.$$arity = 0);\n    \n    Opal.def(self, '$compare_by_identity?', $Hash_compare_by_identity$ques$19 = function() {\n      var self = this;\n\n      return self.$$by_identity === true;\n    }, $Hash_compare_by_identity$ques$19.$$arity = 0);\n    \n    Opal.def(self, '$default', $Hash_default$20 = function(key) {\n      var self = this;\n\n      \n      ;\n      \n      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {\n        return self.$$proc.$call(self, key);\n      }\n      if (self.$$none === undefined) {\n        return nil;\n      }\n      return self.$$none;\n    ;\n    }, $Hash_default$20.$$arity = -1);\n    \n    Opal.def(self, '$default=', $Hash_default$eq$21 = function(object) {\n      var self = this;\n\n      \n      self.$$proc = nil;\n      self.$$none = object;\n\n      return object;\n    \n    }, $Hash_default$eq$21.$$arity = 1);\n    \n    Opal.def(self, '$default_proc', $Hash_default_proc$22 = function $$default_proc() {\n      var self = this;\n\n      \n      if (self.$$proc !== undefined) {\n        return self.$$proc;\n      }\n      return nil;\n    \n    }, $Hash_default_proc$22.$$arity = 0);\n    \n    Opal.def(self, '$default_proc=', $Hash_default_proc$eq$23 = function(default_proc) {\n      var self = this;\n\n      \n      var proc = default_proc;\n\n      if (proc !== nil) {\n        proc = $$($nesting, 'Opal')['$coerce_to!'](proc, $$($nesting, 'Proc'), \"to_proc\");\n\n        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {\n          self.$raise($$($nesting, 'TypeError'), \"default_proc takes two arguments\");\n        }\n      }\n\n      self.$$none = nil;\n      self.$$proc = proc;\n\n      return default_proc;\n    \n    }, $Hash_default_proc$eq$23.$$arity = 1);\n    \n    Opal.def(self, '$delete', $Hash_delete$24 = function(key) {\n      var $iter = $Hash_delete$24.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_delete$24.$$p = null;\n      \n      \n      if ($iter) $Hash_delete$24.$$p = null;;\n      \n      var value = Opal.hash_delete(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return Opal.yield1(block, key);\n      }\n\n      return nil;\n    ;\n    }, $Hash_delete$24.$$arity = 1);\n    \n    Opal.def(self, '$delete_if', $Hash_delete_if$25 = function $$delete_if() {\n      var $iter = $Hash_delete_if$25.$$p, block = $iter || nil, $$26, self = this;\n\n      if ($iter) $Hash_delete_if$25.$$p = null;\n      \n      \n      if ($iter) $Hash_delete_if$25.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"delete_if\"], ($$26 = function(){var self = $$26.$$s || this;\n\n        return self.$size()}, $$26.$$s = self, $$26.$$arity = 0, $$26))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, $Hash_delete_if$25.$$arity = 0);\n    Opal.alias(self, \"dup\", \"clone\");\n    \n    Opal.def(self, '$dig', $Hash_dig$27 = function $$dig(key, $a) {\n      var $post_args, keys, self = this, item = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      keys = $post_args;;\n      item = self['$[]'](key);\n      \n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    ;\n      if ($truthy(item['$respond_to?'](\"dig\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', Opal.to_a(keys));\n    }, $Hash_dig$27.$$arity = -2);\n    \n    Opal.def(self, '$each', $Hash_each$28 = function $$each() {\n      var $iter = $Hash_each$28.$$p, block = $iter || nil, $$29, self = this;\n\n      if ($iter) $Hash_each$28.$$p = null;\n      \n      \n      if ($iter) $Hash_each$28.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"each\"], ($$29 = function(){var self = $$29.$$s || this;\n\n        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        Opal.yield1(block, [key, value]);\n      }\n\n      return self;\n    ;\n    }, $Hash_each$28.$$arity = 0);\n    \n    Opal.def(self, '$each_key', $Hash_each_key$30 = function $$each_key() {\n      var $iter = $Hash_each_key$30.$$p, block = $iter || nil, $$31, self = this;\n\n      if ($iter) $Hash_each_key$30.$$p = null;\n      \n      \n      if ($iter) $Hash_each_key$30.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_key\"], ($$31 = function(){var self = $$31.$$s || this;\n\n        return self.$size()}, $$31.$$s = self, $$31.$$arity = 0, $$31))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? key : key.key);\n      }\n\n      return self;\n    ;\n    }, $Hash_each_key$30.$$arity = 0);\n    Opal.alias(self, \"each_pair\", \"each\");\n    \n    Opal.def(self, '$each_value', $Hash_each_value$32 = function $$each_value() {\n      var $iter = $Hash_each_value$32.$$p, block = $iter || nil, $$33, self = this;\n\n      if ($iter) $Hash_each_value$32.$$p = null;\n      \n      \n      if ($iter) $Hash_each_value$32.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_value\"], ($$33 = function(){var self = $$33.$$s || this;\n\n        return self.$size()}, $$33.$$s = self, $$33.$$arity = 0, $$33))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        block(key.$$is_string ? self.$$smap[key] : key.value);\n      }\n\n      return self;\n    ;\n    }, $Hash_each_value$32.$$arity = 0);\n    \n    Opal.def(self, '$empty?', $Hash_empty$ques$34 = function() {\n      var self = this;\n\n      return self.$$keys.length === 0;\n    }, $Hash_empty$ques$34.$$arity = 0);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$fetch', $Hash_fetch$35 = function $$fetch(key, defaults) {\n      var $iter = $Hash_fetch$35.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_fetch$35.$$p = null;\n      \n      \n      if ($iter) $Hash_fetch$35.$$p = null;;\n      ;\n      \n      var value = Opal.hash_get(self, key);\n\n      if (value !== undefined) {\n        return value;\n      }\n\n      if (block !== nil) {\n        return block(key);\n      }\n\n      if (defaults !== undefined) {\n        return defaults;\n      }\n    ;\n      return self.$raise($$($nesting, 'KeyError').$new(\"\" + \"key not found: \" + (key.$inspect()), $hash2([\"key\", \"receiver\"], {\"key\": key, \"receiver\": self})));\n    }, $Hash_fetch$35.$$arity = -2);\n    \n    Opal.def(self, '$fetch_values', $Hash_fetch_values$36 = function $$fetch_values($a) {\n      var $iter = $Hash_fetch_values$36.$$p, block = $iter || nil, $post_args, keys, $$37, self = this;\n\n      if ($iter) $Hash_fetch_values$36.$$p = null;\n      \n      \n      if ($iter) $Hash_fetch_values$36.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      keys = $post_args;;\n      return $send(keys, 'map', [], ($$37 = function(key){var self = $$37.$$s || this;\n\n      \n        \n        if (key == null) {\n          key = nil;\n        };\n        return $send(self, 'fetch', [key], block.$to_proc());}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n    }, $Hash_fetch_values$36.$$arity = -1);\n    \n    Opal.def(self, '$flatten', $Hash_flatten$38 = function $$flatten(level) {\n      var self = this;\n\n      \n      \n      if (level == null) {\n        level = 1;\n      };\n      level = $$($nesting, 'Opal')['$coerce_to!'](level, $$($nesting, 'Integer'), \"to_int\");\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push(key);\n\n        if (value.$$is_array) {\n          if (level === 1) {\n            result.push(value);\n            continue;\n          }\n\n          result = result.concat((value).$flatten(level - 2));\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, $Hash_flatten$38.$$arity = -1);\n    \n    Opal.def(self, '$has_key?', $Hash_has_key$ques$39 = function(key) {\n      var self = this;\n\n      return Opal.hash_get(self, key) !== undefined;\n    }, $Hash_has_key$ques$39.$$arity = 1);\n    \n    Opal.def(self, '$has_value?', $Hash_has_value$ques$40 = function(value) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {\n          return true;\n        }\n      }\n\n      return false;\n    \n    }, $Hash_has_value$ques$40.$$arity = 1);\n    \n    Opal.def(self, '$hash', $Hash_hash$41 = function $$hash() {\n      var self = this;\n\n      \n      var top = (Opal.hash_ids === undefined),\n          hash_id = self.$object_id(),\n          result = ['Hash'],\n          key, item;\n\n      try {\n        if (top) {\n          Opal.hash_ids = Object.create(null);\n        }\n\n        if (Opal[hash_id]) {\n          return 'self';\n        }\n\n        for (key in Opal.hash_ids) {\n          item = Opal.hash_ids[key];\n          if (self['$eql?'](item)) {\n            return 'self';\n          }\n        }\n\n        Opal.hash_ids[hash_id] = self;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            result.push([key, self.$$smap[key].$hash()]);\n          } else {\n            result.push([key.key_hash, key.value.$hash()]);\n          }\n        }\n\n        return result.sort().join();\n\n      } finally {\n        if (top) {\n          Opal.hash_ids = undefined;\n        }\n      }\n    \n    }, $Hash_hash$41.$$arity = 0);\n    Opal.alias(self, \"include?\", \"has_key?\");\n    \n    Opal.def(self, '$index', $Hash_index$42 = function $$index(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if ((value)['$=='](object)) {\n          return key;\n        }\n      }\n\n      return nil;\n    \n    }, $Hash_index$42.$$arity = 1);\n    \n    Opal.def(self, '$indexes', $Hash_indexes$43 = function $$indexes($a) {\n      var $post_args, args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      var result = [];\n\n      for (var i = 0, length = args.length, key, value; i < length; i++) {\n        key = args[i];\n        value = Opal.hash_get(self, key);\n\n        if (value === undefined) {\n          result.push(self.$default());\n          continue;\n        }\n\n        result.push(value);\n      }\n\n      return result;\n    ;\n    }, $Hash_indexes$43.$$arity = -1);\n    Opal.alias(self, \"indices\", \"indexes\");\n    var inspect_ids;\n    \n    Opal.def(self, '$inspect', $Hash_inspect$44 = function $$inspect() {\n      var self = this;\n\n      \n      var top = (inspect_ids === undefined),\n          hash_id = self.$object_id(),\n          result = [];\n\n      try {\n        if (top) {\n          inspect_ids = {};\n        }\n\n        if (inspect_ids.hasOwnProperty(hash_id)) {\n          return '{...}';\n        }\n\n        inspect_ids[hash_id] = true;\n\n        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n          key = keys[i];\n\n          if (key.$$is_string) {\n            value = self.$$smap[key];\n          } else {\n            value = key.value;\n            key = key.key;\n          }\n\n          result.push(key.$inspect() + '=>' + value.$inspect());\n        }\n\n        return '{' + result.join(', ') + '}';\n\n      } finally {\n        if (top) {\n          inspect_ids = undefined;\n        }\n      }\n    \n    }, $Hash_inspect$44.$$arity = 0);\n    \n    Opal.def(self, '$invert', $Hash_invert$45 = function $$invert() {\n      var self = this;\n\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        Opal.hash_put(hash, value, key);\n      }\n\n      return hash;\n    \n    }, $Hash_invert$45.$$arity = 0);\n    \n    Opal.def(self, '$keep_if', $Hash_keep_if$46 = function $$keep_if() {\n      var $iter = $Hash_keep_if$46.$$p, block = $iter || nil, $$47, self = this;\n\n      if ($iter) $Hash_keep_if$46.$$p = null;\n      \n      \n      if ($iter) $Hash_keep_if$46.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"keep_if\"], ($$47 = function(){var self = $$47.$$s || this;\n\n        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, $Hash_keep_if$46.$$arity = 0);\n    Opal.alias(self, \"key\", \"index\");\n    Opal.alias(self, \"key?\", \"has_key?\");\n    \n    Opal.def(self, '$keys', $Hash_keys$48 = function $$keys() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(key);\n        } else {\n          result.push(key.key);\n        }\n      }\n\n      return result;\n    \n    }, $Hash_keys$48.$$arity = 0);\n    \n    Opal.def(self, '$length', $Hash_length$49 = function $$length() {\n      var self = this;\n\n      return self.$$keys.length;\n    }, $Hash_length$49.$$arity = 0);\n    Opal.alias(self, \"member?\", \"has_key?\");\n    \n    Opal.def(self, '$merge', $Hash_merge$50 = function $$merge(other) {\n      var $iter = $Hash_merge$50.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_merge$50.$$p = null;\n      \n      \n      if ($iter) $Hash_merge$50.$$p = null;;\n      return $send(self.$dup(), 'merge!', [other], block.$to_proc());\n    }, $Hash_merge$50.$$arity = 1);\n    \n    Opal.def(self, '$merge!', $Hash_merge$excl$51 = function(other) {\n      var $iter = $Hash_merge$excl$51.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Hash_merge$excl$51.$$p = null;\n      \n      \n      if ($iter) $Hash_merge$excl$51.$$p = null;;\n      \n      if (!other.$$is_hash) {\n        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      }\n\n      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;\n\n      if (block === nil) {\n        for (i = 0; i < length; i++) {\n          key = other_keys[i];\n\n          if (key.$$is_string) {\n            other_value = other.$$smap[key];\n          } else {\n            other_value = key.value;\n            key = key.key;\n          }\n\n          Opal.hash_put(self, key, other_value);\n        }\n\n        return self;\n      }\n\n      for (i = 0; i < length; i++) {\n        key = other_keys[i];\n\n        if (key.$$is_string) {\n          other_value = other.$$smap[key];\n        } else {\n          other_value = key.value;\n          key = key.key;\n        }\n\n        value = Opal.hash_get(self, key);\n\n        if (value === undefined) {\n          Opal.hash_put(self, key, other_value);\n          continue;\n        }\n\n        Opal.hash_put(self, key, block(key, value, other_value));\n      }\n\n      return self;\n    ;\n    }, $Hash_merge$excl$51.$$arity = 1);\n    \n    Opal.def(self, '$rassoc', $Hash_rassoc$52 = function $$rassoc(object) {\n      var self = this;\n\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        if ((value)['$=='](object)) {\n          return [key, value];\n        }\n      }\n\n      return nil;\n    \n    }, $Hash_rassoc$52.$$arity = 1);\n    \n    Opal.def(self, '$rehash', $Hash_rehash$53 = function $$rehash() {\n      var self = this;\n\n      \n      Opal.hash_rehash(self);\n      return self;\n    \n    }, $Hash_rehash$53.$$arity = 0);\n    \n    Opal.def(self, '$reject', $Hash_reject$54 = function $$reject() {\n      var $iter = $Hash_reject$54.$$p, block = $iter || nil, $$55, self = this;\n\n      if ($iter) $Hash_reject$54.$$p = null;\n      \n      \n      if ($iter) $Hash_reject$54.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject\"], ($$55 = function(){var self = $$55.$$s || this;\n\n        return self.$size()}, $$55.$$s = self, $$55.$$arity = 0, $$55))\n      };\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    ;\n    }, $Hash_reject$54.$$arity = 0);\n    \n    Opal.def(self, '$reject!', $Hash_reject$excl$56 = function() {\n      var $iter = $Hash_reject$excl$56.$$p, block = $iter || nil, $$57, self = this;\n\n      if ($iter) $Hash_reject$excl$56.$$p = null;\n      \n      \n      if ($iter) $Hash_reject$excl$56.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"reject!\"], ($$57 = function(){var self = $$57.$$s || this;\n\n        return self.$size()}, $$57.$$s = self, $$57.$$arity = 0, $$57))\n      };\n      \n      var changes_were_made = false;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            changes_were_made = true;\n            length--;\n            i--;\n          }\n        }\n      }\n\n      return changes_were_made ? self : nil;\n    ;\n    }, $Hash_reject$excl$56.$$arity = 0);\n    \n    Opal.def(self, '$replace', $Hash_replace$58 = function $$replace(other) {\n      var self = this, $writer = nil;\n\n      \n      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), \"to_hash\");\n      \n      Opal.hash_init(self);\n\n      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {\n        key = other_keys[i];\n\n        if (key.$$is_string) {\n          other_value = other.$$smap[key];\n        } else {\n          other_value = key.value;\n          key = key.key;\n        }\n\n        Opal.hash_put(self, key, other_value);\n      }\n    ;\n      if ($truthy(other.$default_proc())) {\n        \n        $writer = [other.$default_proc()];\n        $send(self, 'default_proc=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];\n      } else {\n        \n        $writer = [other.$default()];\n        $send(self, 'default=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];\n      };\n      return self;\n    }, $Hash_replace$58.$$arity = 1);\n    \n    Opal.def(self, '$select', $Hash_select$59 = function $$select() {\n      var $iter = $Hash_select$59.$$p, block = $iter || nil, $$60, self = this;\n\n      if ($iter) $Hash_select$59.$$p = null;\n      \n      \n      if ($iter) $Hash_select$59.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"select\"], ($$60 = function(){var self = $$60.$$s || this;\n\n        return self.$size()}, $$60.$$s = self, $$60.$$arity = 0, $$60))\n      };\n      \n      var hash = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj !== false && obj !== nil) {\n          Opal.hash_put(hash, key, value);\n        }\n      }\n\n      return hash;\n    ;\n    }, $Hash_select$59.$$arity = 0);\n    \n    Opal.def(self, '$select!', $Hash_select$excl$61 = function() {\n      var $iter = $Hash_select$excl$61.$$p, block = $iter || nil, $$62, self = this;\n\n      if ($iter) $Hash_select$excl$61.$$p = null;\n      \n      \n      if ($iter) $Hash_select$excl$61.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"select!\"], ($$62 = function(){var self = $$62.$$s || this;\n\n        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))\n      };\n      \n      var result = nil;\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        obj = block(key, value);\n\n        if (obj === false || obj === nil) {\n          if (Opal.hash_delete(self, key) !== undefined) {\n            length--;\n            i--;\n          }\n          result = self;\n        }\n      }\n\n      return result;\n    ;\n    }, $Hash_select$excl$61.$$arity = 0);\n    \n    Opal.def(self, '$shift', $Hash_shift$63 = function $$shift() {\n      var self = this;\n\n      \n      var keys = self.$$keys,\n          key;\n\n      if (keys.length > 0) {\n        key = keys[0];\n\n        key = key.$$is_string ? key : key.key;\n\n        return [key, Opal.hash_delete(self, key)];\n      }\n\n      return self.$default(nil);\n    \n    }, $Hash_shift$63.$$arity = 0);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$slice', $Hash_slice$64 = function $$slice($a) {\n      var $post_args, keys, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      keys = $post_args;;\n      \n      var result = Opal.hash();\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i], value = Opal.hash_get(self, key);\n\n        if (value !== undefined) {\n          Opal.hash_put(result, key, value);\n        }\n      }\n\n      return result;\n    ;\n    }, $Hash_slice$64.$$arity = -1);\n    Opal.alias(self, \"store\", \"[]=\");\n    \n    Opal.def(self, '$to_a', $Hash_to_a$65 = function $$to_a() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        result.push([key, value]);\n      }\n\n      return result;\n    \n    }, $Hash_to_a$65.$$arity = 0);\n    \n    Opal.def(self, '$to_h', $Hash_to_h$66 = function $$to_h() {\n      var self = this;\n\n      \n      if (self.$$class === Opal.Hash) {\n        return self;\n      }\n\n      var hash = new Opal.Hash();\n\n      Opal.hash_init(hash);\n      Opal.hash_clone(self, hash);\n\n      return hash;\n    \n    }, $Hash_to_h$66.$$arity = 0);\n    \n    Opal.def(self, '$to_hash', $Hash_to_hash$67 = function $$to_hash() {\n      var self = this;\n\n      return self\n    }, $Hash_to_hash$67.$$arity = 0);\n    \n    Opal.def(self, '$to_proc', $Hash_to_proc$68 = function $$to_proc() {\n      var $$69, self = this;\n\n      return $send(self, 'proc', [], ($$69 = function(key){var self = $$69.$$s || this;\n\n      \n        ;\n        \n        if (key == null) {\n          self.$raise($$($nesting, 'ArgumentError'), \"no key given\")\n        }\n      ;\n        return self['$[]'](key);}, $$69.$$s = self, $$69.$$arity = -1, $$69))\n    }, $Hash_to_proc$68.$$arity = 0);\n    Opal.alias(self, \"to_s\", \"inspect\");\n    \n    Opal.def(self, '$transform_keys', $Hash_transform_keys$70 = function $$transform_keys() {\n      var $iter = $Hash_transform_keys$70.$$p, block = $iter || nil, $$71, self = this;\n\n      if ($iter) $Hash_transform_keys$70.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_keys$70.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_keys\"], ($$71 = function(){var self = $$71.$$s || this;\n\n        return self.$size()}, $$71.$$s = self, $$71.$$arity = 0, $$71))\n      };\n      \n      var result = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        key = Opal.yield1(block, key);\n\n        Opal.hash_put(result, key, value);\n      }\n\n      return result;\n    ;\n    }, $Hash_transform_keys$70.$$arity = 0);\n    \n    Opal.def(self, '$transform_keys!', $Hash_transform_keys$excl$72 = function() {\n      var $iter = $Hash_transform_keys$excl$72.$$p, block = $iter || nil, $$73, self = this;\n\n      if ($iter) $Hash_transform_keys$excl$72.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_keys$excl$72.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_keys!\"], ($$73 = function(){var self = $$73.$$s || this;\n\n        return self.$size()}, $$73.$$s = self, $$73.$$arity = 0, $$73))\n      };\n      \n      var keys = Opal.slice.call(self.$$keys),\n          i, length = keys.length, key, value, new_key;\n\n      for (i = 0; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        new_key = Opal.yield1(block, key);\n\n        Opal.hash_delete(self, key);\n        Opal.hash_put(self, new_key, value);\n      }\n\n      return self;\n    ;\n    }, $Hash_transform_keys$excl$72.$$arity = 0);\n    \n    Opal.def(self, '$transform_values', $Hash_transform_values$74 = function $$transform_values() {\n      var $iter = $Hash_transform_values$74.$$p, block = $iter || nil, $$75, self = this;\n\n      if ($iter) $Hash_transform_values$74.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_values$74.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_values\"], ($$75 = function(){var self = $$75.$$s || this;\n\n        return self.$size()}, $$75.$$s = self, $$75.$$arity = 0, $$75))\n      };\n      \n      var result = Opal.hash();\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = Opal.yield1(block, value);\n\n        Opal.hash_put(result, key, value);\n      }\n\n      return result;\n    ;\n    }, $Hash_transform_values$74.$$arity = 0);\n    \n    Opal.def(self, '$transform_values!', $Hash_transform_values$excl$76 = function() {\n      var $iter = $Hash_transform_values$excl$76.$$p, block = $iter || nil, $$77, self = this;\n\n      if ($iter) $Hash_transform_values$excl$76.$$p = null;\n      \n      \n      if ($iter) $Hash_transform_values$excl$76.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"transform_values!\"], ($$77 = function(){var self = $$77.$$s || this;\n\n        return self.$size()}, $$77.$$s = self, $$77.$$arity = 0, $$77))\n      };\n      \n      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          value = self.$$smap[key];\n        } else {\n          value = key.value;\n          key = key.key;\n        }\n\n        value = Opal.yield1(block, value);\n\n        Opal.hash_put(self, key, value);\n      }\n\n      return self;\n    ;\n    }, $Hash_transform_values$excl$76.$$arity = 0);\n    Opal.alias(self, \"update\", \"merge!\");\n    Opal.alias(self, \"value?\", \"has_value?\");\n    Opal.alias(self, \"values_at\", \"indexes\");\n    return (Opal.def(self, '$values', $Hash_values$78 = function $$values() {\n      var self = this;\n\n      \n      var result = [];\n\n      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {\n        key = keys[i];\n\n        if (key.$$is_string) {\n          result.push(self.$$smap[key]);\n        } else {\n          result.push(key.value);\n        }\n      }\n\n      return result;\n    \n    }, $Hash_values$78.$$arity = 0), nil) && 'values';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/number\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$require', '$bridge', '$raise', '$name', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$%', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$truncate', '$-@', '$size', '$<=', '$>=', '$<=>', '$compare', '$any?']);\n  \n  self.$require(\"corelib/numeric\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Number');\n\n    var $nesting = [self].concat($parent_nesting), $Number_coerce$2, $Number___id__$3, $Number_$plus$4, $Number_$minus$5, $Number_$$6, $Number_$slash$7, $Number_$percent$8, $Number_$$9, $Number_$$10, $Number_$$11, $Number_$lt$12, $Number_$lt_eq$13, $Number_$gt$14, $Number_$gt_eq$15, $Number_$lt_eq_gt$16, $Number_$lt$lt$17, $Number_$gt$gt$18, $Number_$$$19, $Number_$plus$$20, $Number_$minus$$21, $Number_$$22, $Number_$$$23, $Number_$eq_eq_eq$24, $Number_$eq_eq$25, $Number_abs$26, $Number_abs2$27, $Number_allbits$ques$28, $Number_anybits$ques$29, $Number_angle$30, $Number_bit_length$31, $Number_ceil$32, $Number_chr$33, $Number_denominator$34, $Number_downto$35, $Number_equal$ques$37, $Number_even$ques$38, $Number_floor$39, $Number_gcd$40, $Number_gcdlcm$41, $Number_integer$ques$42, $Number_is_a$ques$43, $Number_instance_of$ques$44, $Number_lcm$45, $Number_next$46, $Number_nobits$ques$47, $Number_nonzero$ques$48, $Number_numerator$49, $Number_odd$ques$50, $Number_ord$51, $Number_pow$52, $Number_pred$53, $Number_quo$54, $Number_rationalize$55, $Number_remainder$56, $Number_round$57, $Number_step$58, $Number_times$60, $Number_to_f$62, $Number_to_i$63, $Number_to_r$64, $Number_to_s$65, $Number_truncate$66, $Number_digits$67, $Number_divmod$68, $Number_upto$69, $Number_zero$ques$71, $Number_size$72, $Number_nan$ques$73, $Number_finite$ques$74, $Number_infinite$ques$75, $Number_positive$ques$76, $Number_negative$ques$77;\n\n    \n    $$($nesting, 'Opal').$bridge(Number, self);\n    Opal.defineProperty(self.$$prototype, '$$is_number', true);\n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$1;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$1.$$arity = 0);\n      \n      \n      Opal.udef(self, '$' + \"new\");;\n      return nil;;\n    })(Opal.get_singleton_class(self), $nesting);\n    \n    Opal.def(self, '$coerce', $Number_coerce$2 = function $$coerce(other) {\n      var self = this;\n\n      \n      if (other === nil) {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't convert \" + (other.$class()) + \" into Float\");\n      }\n      else if (other.$$is_string) {\n        return [self.$Float(other), self];\n      }\n      else if (other['$respond_to?'](\"to_f\")) {\n        return [$$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Float'), \"to_f\"), self];\n      }\n      else if (other.$$is_number) {\n        return [other, self];\n      }\n      else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't convert \" + (other.$class()) + \" into Float\");\n      }\n    \n    }, $Number_coerce$2.$$arity = 1);\n    \n    Opal.def(self, '$__id__', $Number___id__$3 = function $$__id__() {\n      var self = this;\n\n      return (self * 2) + 1;\n    }, $Number___id__$3.$$arity = 0);\n    Opal.alias(self, \"object_id\", \"__id__\");\n    \n    Opal.def(self, '$+', $Number_$plus$4 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self + other;\n      }\n      else {\n        return self.$__coerced__(\"+\", other);\n      }\n    \n    }, $Number_$plus$4.$$arity = 1);\n    \n    Opal.def(self, '$-', $Number_$minus$5 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self - other;\n      }\n      else {\n        return self.$__coerced__(\"-\", other);\n      }\n    \n    }, $Number_$minus$5.$$arity = 1);\n    \n    Opal.def(self, '$*', $Number_$$6 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self * other;\n      }\n      else {\n        return self.$__coerced__(\"*\", other);\n      }\n    \n    }, $Number_$$6.$$arity = 1);\n    \n    Opal.def(self, '$/', $Number_$slash$7 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self / other;\n      }\n      else {\n        return self.$__coerced__(\"/\", other);\n      }\n    \n    }, $Number_$slash$7.$$arity = 1);\n    Opal.alias(self, \"fdiv\", \"/\");\n    \n    Opal.def(self, '$%', $Number_$percent$8 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        if (other == -Infinity) {\n          return other;\n        }\n        else if (other == 0) {\n          self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by 0\");\n        }\n        else if (other < 0 || self < 0) {\n          return (self % other + other) % other;\n        }\n        else {\n          return self % other;\n        }\n      }\n      else {\n        return self.$__coerced__(\"%\", other);\n      }\n    \n    }, $Number_$percent$8.$$arity = 1);\n    \n    Opal.def(self, '$&', $Number_$$9 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self & other;\n      }\n      else {\n        return self.$__coerced__(\"&\", other);\n      }\n    \n    }, $Number_$$9.$$arity = 1);\n    \n    Opal.def(self, '$|', $Number_$$10 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self | other;\n      }\n      else {\n        return self.$__coerced__(\"|\", other);\n      }\n    \n    }, $Number_$$10.$$arity = 1);\n    \n    Opal.def(self, '$^', $Number_$$11 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self ^ other;\n      }\n      else {\n        return self.$__coerced__(\"^\", other);\n      }\n    \n    }, $Number_$$11.$$arity = 1);\n    \n    Opal.def(self, '$<', $Number_$lt$12 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self < other;\n      }\n      else {\n        return self.$__coerced__(\"<\", other);\n      }\n    \n    }, $Number_$lt$12.$$arity = 1);\n    \n    Opal.def(self, '$<=', $Number_$lt_eq$13 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self <= other;\n      }\n      else {\n        return self.$__coerced__(\"<=\", other);\n      }\n    \n    }, $Number_$lt_eq$13.$$arity = 1);\n    \n    Opal.def(self, '$>', $Number_$gt$14 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self > other;\n      }\n      else {\n        return self.$__coerced__(\">\", other);\n      }\n    \n    }, $Number_$gt$14.$$arity = 1);\n    \n    Opal.def(self, '$>=', $Number_$gt_eq$15 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self >= other;\n      }\n      else {\n        return self.$__coerced__(\">=\", other);\n      }\n    \n    }, $Number_$gt_eq$15.$$arity = 1);\n    \n    var spaceship_operator = function(self, other) {\n      if (other.$$is_number) {\n        if (isNaN(self) || isNaN(other)) {\n          return nil;\n        }\n\n        if (self > other) {\n          return 1;\n        } else if (self < other) {\n          return -1;\n        } else {\n          return 0;\n        }\n      }\n      else {\n        return self.$__coerced__(\"<=>\", other);\n      }\n    }\n  ;\n    \n    Opal.def(self, '$<=>', $Number_$lt_eq_gt$16 = function(other) {\n      var self = this;\n\n      try {\n        return spaceship_operator(self, other);\n      } catch ($err) {\n        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {\n          try {\n            return nil\n          } finally { Opal.pop_exception() }\n        } else { throw $err; }\n      }\n    }, $Number_$lt_eq_gt$16.$$arity = 1);\n    \n    Opal.def(self, '$<<', $Number_$lt$lt$17 = function(count) {\n      var self = this;\n\n      \n      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), \"to_int\");\n      return count > 0 ? self << count : self >> -count;\n    }, $Number_$lt$lt$17.$$arity = 1);\n    \n    Opal.def(self, '$>>', $Number_$gt$gt$18 = function(count) {\n      var self = this;\n\n      \n      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), \"to_int\");\n      return count > 0 ? self >> count : self << -count;\n    }, $Number_$gt$gt$18.$$arity = 1);\n    \n    Opal.def(self, '$[]', $Number_$$$19 = function(bit) {\n      var self = this;\n\n      \n      bit = $$($nesting, 'Opal')['$coerce_to!'](bit, $$($nesting, 'Integer'), \"to_int\");\n      \n      if (bit < 0) {\n        return 0;\n      }\n      if (bit >= 32) {\n        return self < 0 ? 1 : 0;\n      }\n      return (self >> bit) & 1;\n    ;\n    }, $Number_$$$19.$$arity = 1);\n    \n    Opal.def(self, '$+@', $Number_$plus$$20 = function() {\n      var self = this;\n\n      return +self;\n    }, $Number_$plus$$20.$$arity = 0);\n    \n    Opal.def(self, '$-@', $Number_$minus$$21 = function() {\n      var self = this;\n\n      return -self;\n    }, $Number_$minus$$21.$$arity = 0);\n    \n    Opal.def(self, '$~', $Number_$$22 = function() {\n      var self = this;\n\n      return ~self;\n    }, $Number_$$22.$$arity = 0);\n    \n    Opal.def(self, '$**', $Number_$$$23 = function(other) {\n      var $a, $b, self = this;\n\n      if ($truthy($$($nesting, 'Integer')['$==='](other))) {\n        if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {\n          return Math.pow(self, other);\n        } else {\n          return $$($nesting, 'Rational').$new(self, 1)['$**'](other)\n        }\n      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = $$($nesting, 'Float')['$==='](other)) ? $b : $$($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {\n        return $$($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())\n      } else if ($truthy(other.$$is_number != null)) {\n        return Math.pow(self, other);\n      } else {\n        return self.$__coerced__(\"**\", other)\n      }\n    }, $Number_$$$23.$$arity = 1);\n    \n    Opal.def(self, '$===', $Number_$eq_eq_eq$24 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (other['$respond_to?'](\"==\")) {\n        return other['$=='](self);\n      }\n      else {\n        return false;\n      }\n    \n    }, $Number_$eq_eq_eq$24.$$arity = 1);\n    \n    Opal.def(self, '$==', $Number_$eq_eq$25 = function(other) {\n      var self = this;\n\n      \n      if (other.$$is_number) {\n        return self.valueOf() === other.valueOf();\n      }\n      else if (other['$respond_to?'](\"==\")) {\n        return other['$=='](self);\n      }\n      else {\n        return false;\n      }\n    \n    }, $Number_$eq_eq$25.$$arity = 1);\n    \n    Opal.def(self, '$abs', $Number_abs$26 = function $$abs() {\n      var self = this;\n\n      return Math.abs(self);\n    }, $Number_abs$26.$$arity = 0);\n    \n    Opal.def(self, '$abs2', $Number_abs2$27 = function $$abs2() {\n      var self = this;\n\n      return Math.abs(self * self);\n    }, $Number_abs2$27.$$arity = 0);\n    \n    Opal.def(self, '$allbits?', $Number_allbits$ques$28 = function(mask) {\n      var self = this;\n\n      \n      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), \"to_int\");\n      return (self & mask) == mask;;\n    }, $Number_allbits$ques$28.$$arity = 1);\n    \n    Opal.def(self, '$anybits?', $Number_anybits$ques$29 = function(mask) {\n      var self = this;\n\n      \n      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), \"to_int\");\n      return (self & mask) !== 0;;\n    }, $Number_anybits$ques$29.$$arity = 1);\n    \n    Opal.def(self, '$angle', $Number_angle$30 = function $$angle() {\n      var self = this;\n\n      \n      if ($truthy(self['$nan?']())) {\n        return self};\n      \n      if (self == 0) {\n        if (1 / self > 0) {\n          return 0;\n        }\n        else {\n          return Math.PI;\n        }\n      }\n      else if (self < 0) {\n        return Math.PI;\n      }\n      else {\n        return 0;\n      }\n    ;\n    }, $Number_angle$30.$$arity = 0);\n    Opal.alias(self, \"arg\", \"angle\");\n    Opal.alias(self, \"phase\", \"angle\");\n    \n    Opal.def(self, '$bit_length', $Number_bit_length$31 = function $$bit_length() {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n      } else {\n        self.$raise($$($nesting, 'NoMethodError').$new(\"\" + \"undefined method `bit_length` for \" + (self) + \":Float\", \"bit_length\"))\n      };\n      \n      if (self === 0 || self === -1) {\n        return 0;\n      }\n\n      var result = 0,\n          value  = self < 0 ? ~self : self;\n\n      while (value != 0) {\n        result   += 1;\n        value  >>>= 1;\n      }\n\n      return result;\n    ;\n    }, $Number_bit_length$31.$$arity = 0);\n    \n    Opal.def(self, '$ceil', $Number_ceil$32 = function $$ceil(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.ceil(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, $Number_ceil$32.$$arity = -1);\n    \n    Opal.def(self, '$chr', $Number_chr$33 = function $$chr(encoding) {\n      var self = this;\n\n      \n      ;\n      return String.fromCharCode(self);;\n    }, $Number_chr$33.$$arity = -1);\n    \n    Opal.def(self, '$denominator', $Number_denominator$34 = function $$denominator() {\n      var $a, $iter = $Number_denominator$34.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_denominator$34.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {\n        return 1\n      } else {\n        return $send(self, Opal.find_super_dispatcher(self, 'denominator', $Number_denominator$34, false), $zuper, $iter)\n      }\n    }, $Number_denominator$34.$$arity = 0);\n    \n    Opal.def(self, '$downto', $Number_downto$35 = function $$downto(stop) {\n      var $iter = $Number_downto$35.$$p, block = $iter || nil, $$36, self = this;\n\n      if ($iter) $Number_downto$35.$$p = null;\n      \n      \n      if ($iter) $Number_downto$35.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"downto\", stop], ($$36 = function(){var self = $$36.$$s || this;\n\n        \n          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n          };\n          if ($truthy($rb_gt(stop, self))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(self, stop), 1)\n          };}, $$36.$$s = self, $$36.$$arity = 0, $$36))\n      };\n      \n      if (!stop.$$is_number) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n      }\n      for (var i = self; i >= stop; i--) {\n        block(i);\n      }\n    ;\n      return self;\n    }, $Number_downto$35.$$arity = 1);\n    Opal.alias(self, \"eql?\", \"==\");\n    \n    Opal.def(self, '$equal?', $Number_equal$ques$37 = function(other) {\n      var $a, self = this;\n\n      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))\n    }, $Number_equal$ques$37.$$arity = 1);\n    \n    Opal.def(self, '$even?', $Number_even$ques$38 = function() {\n      var self = this;\n\n      return self % 2 === 0;\n    }, $Number_even$ques$38.$$arity = 0);\n    \n    Opal.def(self, '$floor', $Number_floor$39 = function $$floor(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = Math.floor(f * factor) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, $Number_floor$39.$$arity = -1);\n    \n    Opal.def(self, '$gcd', $Number_gcd$40 = function $$gcd(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"not an integer\")\n      };\n      \n      var min = Math.abs(self),\n          max = Math.abs(other);\n\n      while (min > 0) {\n        var tmp = min;\n\n        min = max % min;\n        max = tmp;\n      }\n\n      return max;\n    ;\n    }, $Number_gcd$40.$$arity = 1);\n    \n    Opal.def(self, '$gcdlcm', $Number_gcdlcm$41 = function $$gcdlcm(other) {\n      var self = this;\n\n      return [self.$gcd(), self.$lcm()]\n    }, $Number_gcdlcm$41.$$arity = 1);\n    \n    Opal.def(self, '$integer?', $Number_integer$ques$42 = function() {\n      var self = this;\n\n      return self % 1 === 0;\n    }, $Number_integer$ques$42.$$arity = 0);\n    \n    Opal.def(self, '$is_a?', $Number_is_a$ques$43 = function(klass) {\n      var $a, $iter = $Number_is_a$ques$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_is_a$ques$43.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {\n        return true};\n      return $send(self, Opal.find_super_dispatcher(self, 'is_a?', $Number_is_a$ques$43, false), $zuper, $iter);\n    }, $Number_is_a$ques$43.$$arity = 1);\n    Opal.alias(self, \"kind_of?\", \"is_a?\");\n    \n    Opal.def(self, '$instance_of?', $Number_instance_of$ques$44 = function(klass) {\n      var $a, $iter = $Number_instance_of$ques$44.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_instance_of$ques$44.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {\n        return true};\n      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {\n        return true};\n      return $send(self, Opal.find_super_dispatcher(self, 'instance_of?', $Number_instance_of$ques$44, false), $zuper, $iter);\n    }, $Number_instance_of$ques$44.$$arity = 1);\n    \n    Opal.def(self, '$lcm', $Number_lcm$45 = function $$lcm(other) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](other))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"not an integer\")\n      };\n      \n      if (self == 0 || other == 0) {\n        return 0;\n      }\n      else {\n        return Math.abs(self * other / self.$gcd(other));\n      }\n    ;\n    }, $Number_lcm$45.$$arity = 1);\n    Opal.alias(self, \"magnitude\", \"abs\");\n    Opal.alias(self, \"modulo\", \"%\");\n    \n    Opal.def(self, '$next', $Number_next$46 = function $$next() {\n      var self = this;\n\n      return self + 1;\n    }, $Number_next$46.$$arity = 0);\n    \n    Opal.def(self, '$nobits?', $Number_nobits$ques$47 = function(mask) {\n      var self = this;\n\n      \n      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), \"to_int\");\n      return (self & mask) == 0;;\n    }, $Number_nobits$ques$47.$$arity = 1);\n    \n    Opal.def(self, '$nonzero?', $Number_nonzero$ques$48 = function() {\n      var self = this;\n\n      return self == 0 ? nil : self;\n    }, $Number_nonzero$ques$48.$$arity = 0);\n    \n    Opal.def(self, '$numerator', $Number_numerator$49 = function $$numerator() {\n      var $a, $iter = $Number_numerator$49.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_numerator$49.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {\n        return self\n      } else {\n        return $send(self, Opal.find_super_dispatcher(self, 'numerator', $Number_numerator$49, false), $zuper, $iter)\n      }\n    }, $Number_numerator$49.$$arity = 0);\n    \n    Opal.def(self, '$odd?', $Number_odd$ques$50 = function() {\n      var self = this;\n\n      return self % 2 !== 0;\n    }, $Number_odd$ques$50.$$arity = 0);\n    \n    Opal.def(self, '$ord', $Number_ord$51 = function $$ord() {\n      var self = this;\n\n      return self\n    }, $Number_ord$51.$$arity = 0);\n    \n    Opal.def(self, '$pow', $Number_pow$52 = function $$pow(b, m) {\n      var self = this;\n\n      \n      ;\n      \n      if (self == 0) {\n        self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by 0\")\n      }\n\n      if (m === undefined) {\n        return self['$**'](b);\n      } else {\n        if (!($$($nesting, 'Integer')['$==='](b))) {\n          self.$raise($$($nesting, 'TypeError'), \"Integer#pow() 2nd argument not allowed unless a 1st argument is integer\")\n        }\n\n        if (b < 0) {\n          self.$raise($$($nesting, 'TypeError'), \"Integer#pow() 1st argument cannot be negative when 2nd argument specified\")\n        }\n\n        if (!($$($nesting, 'Integer')['$==='](m))) {\n          self.$raise($$($nesting, 'TypeError'), \"Integer#pow() 2nd argument not allowed unless all arguments are integers\")\n        }\n\n        if (m === 0) {\n          self.$raise($$($nesting, 'ZeroDivisionError'), \"divided by 0\")\n        }\n\n        return self['$**'](b)['$%'](m)\n      }\n    ;\n    }, $Number_pow$52.$$arity = -2);\n    \n    Opal.def(self, '$pred', $Number_pred$53 = function $$pred() {\n      var self = this;\n\n      return self - 1;\n    }, $Number_pred$53.$$arity = 0);\n    \n    Opal.def(self, '$quo', $Number_quo$54 = function $$quo(other) {\n      var $iter = $Number_quo$54.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_quo$54.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        return $send(self, Opal.find_super_dispatcher(self, 'quo', $Number_quo$54, false), $zuper, $iter)\n      } else {\n        return $rb_divide(self, other)\n      }\n    }, $Number_quo$54.$$arity = 1);\n    \n    Opal.def(self, '$rationalize', $Number_rationalize$55 = function $$rationalize(eps) {\n      var $a, $b, self = this, f = nil, n = nil;\n\n      \n      ;\n      \n      if (arguments.length > 1) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arguments.length) + \" for 0..1)\");\n      }\n    ;\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        return $$($nesting, 'Rational').$new(self, 1)\n      } else if ($truthy(self['$infinite?']())) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"Infinity\")\n      } else if ($truthy(self['$nan?']())) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"NaN\")\n      } else if ($truthy(eps == null)) {\n        \n        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;\n        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();\n        n = $rb_minus(n, $$$($$($nesting, 'Float'), 'MANT_DIG'));\n        return $$($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));\n      } else {\n        return self.$to_r().$rationalize(eps)\n      };\n    }, $Number_rationalize$55.$$arity = -1);\n    \n    Opal.def(self, '$remainder', $Number_remainder$56 = function $$remainder(y) {\n      var self = this;\n\n      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))\n    }, $Number_remainder$56.$$arity = 1);\n    \n    Opal.def(self, '$round', $Number_round$57 = function $$round(ndigits) {\n      var $a, $b, self = this, _ = nil, exp = nil;\n\n      \n      ;\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        \n        if ($truthy(ndigits == null)) {\n          return self};\n        if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {\n          self.$raise($$($nesting, 'RangeError'), \"Infinity\")};\n        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_lt(ndigits, $$$($$($nesting, 'Integer'), 'MIN')))) {\n          self.$raise($$($nesting, 'RangeError'), \"out of bounds\")};\n        if ($truthy(ndigits >= 0)) {\n          return self};\n        ndigits = ndigits['$-@']();\n        \n        if (0.415241 * ndigits - 0.125 > self.$size()) {\n          return 0;\n        }\n\n        var f = Math.pow(10, ndigits),\n            x = Math.floor((Math.abs(x) + f / 2) / f) * f;\n\n        return self < 0 ? -x : x;\n      ;\n      } else {\n        \n        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {\n          self.$raise($$($nesting, 'FloatDomainError'), \"NaN\")};\n        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits || 0, $$($nesting, 'Integer'), \"to_int\");\n        if ($truthy($rb_le(ndigits, 0))) {\n          if ($truthy(self['$nan?']())) {\n            self.$raise($$($nesting, 'RangeError'), \"NaN\")\n          } else if ($truthy(self['$infinite?']())) {\n            self.$raise($$($nesting, 'FloatDomainError'), \"Infinity\")}\n        } else if (ndigits['$=='](0)) {\n          return Math.round(self)\n        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {\n          return self};\n        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {\n          return $rb_divide(exp, 4)\n        } else {\n          return $rb_minus($rb_divide(exp, 3), 1)\n        }; return nil; })())))) {\n          return self};\n        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {\n          return $rb_plus($rb_divide(exp, 3), 1)\n        } else {\n          return $rb_divide(exp, 4)\n        }; return nil; })()['$-@']()))) {\n          return 0};\n        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;\n      };\n    }, $Number_round$57.$$arity = -1);\n    \n    Opal.def(self, '$step', $Number_step$58 = function $$step($a, $b, $c) {\n      var $iter = $Number_step$58.$$p, block = $iter || nil, $post_args, $kwargs, limit, step, to, by, $$59, self = this, positional_args = nil, keyword_args = nil;\n\n      if ($iter) $Number_step$58.$$p = null;\n      \n      \n      if ($iter) $Number_step$58.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      $kwargs = Opal.extract_kwargs($post_args);\n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      if ($post_args.length > 0) {\n        limit = $post_args[0];\n        $post_args.splice(0, 1);\n      };\n      \n      if ($post_args.length > 0) {\n        step = $post_args[0];\n        $post_args.splice(0, 1);\n      };\n      \n      to = $kwargs.$$smap[\"to\"];;\n      \n      by = $kwargs.$$smap[\"by\"];;\n      \n      if (limit !== undefined && to !== undefined) {\n        self.$raise($$($nesting, 'ArgumentError'), \"to is given twice\")\n      }\n\n      if (step !== undefined && by !== undefined) {\n        self.$raise($$($nesting, 'ArgumentError'), \"step is given twice\")\n      }\n\n      function validateParameters() {\n        if (to !== undefined) {\n          limit = to;\n        }\n\n        if (limit === undefined) {\n          limit = nil;\n        }\n\n        if (step === nil) {\n          self.$raise($$($nesting, 'TypeError'), \"step must be numeric\")\n        }\n\n        if (step === 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"step can't be 0\")\n        }\n\n        if (by !== undefined) {\n          step = by;\n        }\n\n        if (step === nil || step == null) {\n          step = 1;\n        }\n\n        var sign = step['$<=>'](0);\n\n        if (sign === nil) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"0 can't be coerced into \" + (step.$class()))\n        }\n\n        if (limit === nil || limit == null) {\n          limit = sign > 0 ? $$$($$($nesting, 'Float'), 'INFINITY') : $$$($$($nesting, 'Float'), 'INFINITY')['$-@']();\n        }\n\n        $$($nesting, 'Opal').$compare(self, limit)\n      }\n\n      function stepFloatSize() {\n        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else if (step === Infinity || step === -Infinity) {\n          return 1;\n        } else {\n          var abs = Math.abs, floor = Math.floor,\n              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$($nesting, 'Float'), 'EPSILON');\n\n          if (err === Infinity || err === -Infinity) {\n            return 0;\n          } else {\n            if (err > 0.5) {\n              err = 0.5;\n            }\n\n            return floor((limit - self) / step + err) + 1\n          }\n        }\n      }\n\n      function stepSize() {\n        validateParameters();\n\n        if (step === 0) {\n          return Infinity;\n        }\n\n        if (step % 1 !== 0) {\n          return stepFloatSize();\n        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {\n          return 0;\n        } else {\n          var ceil = Math.ceil, abs = Math.abs,\n              lhs = abs(self - limit) + 1,\n              rhs = abs(step);\n\n          return ceil(lhs / rhs);\n        }\n      }\n    ;\n      if ((block !== nil)) {\n      } else {\n        \n        positional_args = [];\n        keyword_args = $hash2([], {});\n        \n        if (limit !== undefined) {\n          positional_args.push(limit);\n        }\n\n        if (step !== undefined) {\n          positional_args.push(step);\n        }\n\n        if (to !== undefined) {\n          Opal.hash_put(keyword_args, \"to\", to);\n        }\n\n        if (by !== undefined) {\n          Opal.hash_put(keyword_args, \"by\", by);\n        }\n\n        if (keyword_args['$any?']()) {\n          positional_args.push(keyword_args);\n        }\n      ;\n        return $send(self, 'enum_for', [\"step\"].concat(Opal.to_a(positional_args)), ($$59 = function(){var self = $$59.$$s || this;\n\n        return stepSize();}, $$59.$$s = self, $$59.$$arity = 0, $$59));\n      };\n      \n      validateParameters();\n\n      if (step === 0) {\n        while (true) {\n          block(self);\n        }\n      }\n\n      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {\n        var n = stepFloatSize();\n\n        if (n > 0) {\n          if (step === Infinity || step === -Infinity) {\n            block(self);\n          } else {\n            var i = 0, d;\n\n            if (step > 0) {\n              while (i < n) {\n                d = i * step + self;\n                if (limit < d) {\n                  d = limit;\n                }\n                block(d);\n                i += 1;\n              }\n            } else {\n              while (i < n) {\n                d = i * step + self;\n                if (limit > d) {\n                  d = limit;\n                }\n                block(d);\n                i += 1\n              }\n            }\n          }\n        }\n      } else {\n        var value = self;\n\n        if (step > 0) {\n          while (value <= limit) {\n            block(value);\n            value += step;\n          }\n        } else {\n          while (value >= limit) {\n            block(value);\n            value += step\n          }\n        }\n      }\n\n      return self;\n    ;\n    }, $Number_step$58.$$arity = -1);\n    Opal.alias(self, \"succ\", \"next\");\n    \n    Opal.def(self, '$times', $Number_times$60 = function $$times() {\n      var $iter = $Number_times$60.$$p, block = $iter || nil, $$61, self = this;\n\n      if ($iter) $Number_times$60.$$p = null;\n      \n      \n      if ($iter) $Number_times$60.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        return $send(self, 'enum_for', [\"times\"], ($$61 = function(){var self = $$61.$$s || this;\n\n        return self}, $$61.$$s = self, $$61.$$arity = 0, $$61))\n      };\n      \n      for (var i = 0; i < self; i++) {\n        block(i);\n      }\n    ;\n      return self;\n    }, $Number_times$60.$$arity = 0);\n    \n    Opal.def(self, '$to_f', $Number_to_f$62 = function $$to_f() {\n      var self = this;\n\n      return self\n    }, $Number_to_f$62.$$arity = 0);\n    \n    Opal.def(self, '$to_i', $Number_to_i$63 = function $$to_i() {\n      var self = this;\n\n      return parseInt(self, 10);\n    }, $Number_to_i$63.$$arity = 0);\n    Opal.alias(self, \"to_int\", \"to_i\");\n    \n    Opal.def(self, '$to_r', $Number_to_r$64 = function $$to_r() {\n      var $a, $b, self = this, f = nil, e = nil;\n\n      if ($truthy($$($nesting, 'Integer')['$==='](self))) {\n        return $$($nesting, 'Rational').$new(self, 1)\n      } else {\n        \n        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;\n        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();\n        e = $rb_minus(e, $$$($$($nesting, 'Float'), 'MANT_DIG'));\n        return $rb_times(f, $$$($$($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();\n      }\n    }, $Number_to_r$64.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Number_to_s$65 = function $$to_s(base) {\n      var $a, self = this;\n\n      \n      \n      if (base == null) {\n        base = 10;\n      };\n      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (base))};\n      return self.toString(base);;\n    }, $Number_to_s$65.$$arity = -1);\n    \n    Opal.def(self, '$truncate', $Number_truncate$66 = function $$truncate(ndigits) {\n      var self = this;\n\n      \n      \n      if (ndigits == null) {\n        ndigits = 0;\n      };\n      \n      var f = self.$to_f();\n\n      if (f % 1 === 0 && ndigits >= 0) {\n        return f;\n      }\n\n      var factor = Math.pow(10, ndigits),\n          result = parseInt(f * factor, 10) / factor;\n\n      if (f % 1 === 0) {\n        result = Math.round(result);\n      }\n\n      return result;\n    ;\n    }, $Number_truncate$66.$$arity = -1);\n    Opal.alias(self, \"inspect\", \"to_s\");\n    \n    Opal.def(self, '$digits', $Number_digits$67 = function $$digits(base) {\n      var self = this;\n\n      \n      \n      if (base == null) {\n        base = 10;\n      };\n      if ($rb_lt(self, 0)) {\n        self.$raise($$$($$($nesting, 'Math'), 'DomainError'), \"out of domain\")};\n      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy($rb_lt(base, 2))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid radix \" + (base))};\n      \n      var value = self, result = [];\n\n      while (value !== 0) {\n        result.push(value % base);\n        value = parseInt(value / base, 10);\n      }\n\n      return result;\n    ;\n    }, $Number_digits$67.$$arity = -1);\n    \n    Opal.def(self, '$divmod', $Number_divmod$68 = function $$divmod(other) {\n      var $a, $iter = $Number_divmod$68.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Number_divmod$68.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"NaN\")\n      } else if ($truthy(self['$infinite?']())) {\n        return self.$raise($$($nesting, 'FloatDomainError'), \"Infinity\")\n      } else {\n        return $send(self, Opal.find_super_dispatcher(self, 'divmod', $Number_divmod$68, false), $zuper, $iter)\n      }\n    }, $Number_divmod$68.$$arity = 1);\n    \n    Opal.def(self, '$upto', $Number_upto$69 = function $$upto(stop) {\n      var $iter = $Number_upto$69.$$p, block = $iter || nil, $$70, self = this;\n\n      if ($iter) $Number_upto$69.$$p = null;\n      \n      \n      if ($iter) $Number_upto$69.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"upto\", stop], ($$70 = function(){var self = $$70.$$s || this;\n\n        \n          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n          };\n          if ($truthy($rb_lt(stop, self))) {\n            return 0\n          } else {\n            return $rb_plus($rb_minus(stop, self), 1)\n          };}, $$70.$$s = self, $$70.$$arity = 0, $$70))\n      };\n      \n      if (!stop.$$is_number) {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"comparison of \" + (self.$class()) + \" with \" + (stop.$class()) + \" failed\")\n      }\n      for (var i = self; i <= stop; i++) {\n        block(i);\n      }\n    ;\n      return self;\n    }, $Number_upto$69.$$arity = 1);\n    \n    Opal.def(self, '$zero?', $Number_zero$ques$71 = function() {\n      var self = this;\n\n      return self == 0;\n    }, $Number_zero$ques$71.$$arity = 0);\n    \n    Opal.def(self, '$size', $Number_size$72 = function $$size() {\n      var self = this;\n\n      return 4\n    }, $Number_size$72.$$arity = 0);\n    \n    Opal.def(self, '$nan?', $Number_nan$ques$73 = function() {\n      var self = this;\n\n      return isNaN(self);\n    }, $Number_nan$ques$73.$$arity = 0);\n    \n    Opal.def(self, '$finite?', $Number_finite$ques$74 = function() {\n      var self = this;\n\n      return self != Infinity && self != -Infinity && !isNaN(self);\n    }, $Number_finite$ques$74.$$arity = 0);\n    \n    Opal.def(self, '$infinite?', $Number_infinite$ques$75 = function() {\n      var self = this;\n\n      \n      if (self == Infinity) {\n        return +1;\n      }\n      else if (self == -Infinity) {\n        return -1;\n      }\n      else {\n        return nil;\n      }\n    \n    }, $Number_infinite$ques$75.$$arity = 0);\n    \n    Opal.def(self, '$positive?', $Number_positive$ques$76 = function() {\n      var self = this;\n\n      return self != 0 && (self == Infinity || 1 / self > 0);\n    }, $Number_positive$ques$76.$$arity = 0);\n    return (Opal.def(self, '$negative?', $Number_negative$ques$77 = function() {\n      var self = this;\n\n      return self == -Infinity || 1 / self < 0;\n    }, $Number_negative$ques$77.$$arity = 0), nil) && 'negative?';\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting);\n  Opal.const_set($nesting[0], 'Fixnum', $$($nesting, 'Number'));\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Integer');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$78, $eq_eq_eq$79, $sqrt$80;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$78 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$78.$$arity = 0);\n      \n      Opal.udef(self, '$' + \"new\");;\n      \n      Opal.def(self, '$===', $eq_eq_eq$79 = function(other) {\n        var self = this;\n\n        \n        if (!other.$$is_number) {\n          return false;\n        }\n\n        return (other % 1) === 0;\n      \n      }, $eq_eq_eq$79.$$arity = 1);\n      return (Opal.def(self, '$sqrt', $sqrt$80 = function $$sqrt(n) {\n        var self = this;\n\n        \n        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\");\n        \n        if (n < 0) {\n          self.$raise($$$($$($nesting, 'Math'), 'DomainError'), \"Numerical argument is out of domain - \\\"isqrt\\\"\")\n        }\n\n        return parseInt(Math.sqrt(n), 10);\n      ;\n      }, $sqrt$80.$$arity = 1), nil) && 'sqrt';\n    })(Opal.get_singleton_class(self), $nesting);\n    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);\n    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Float');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    self.$$is_number_class = true;\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $allocate$81, $eq_eq_eq$82;\n\n      \n      \n      Opal.def(self, '$allocate', $allocate$81 = function $$allocate() {\n        var self = this;\n\n        return self.$raise($$($nesting, 'TypeError'), \"\" + \"allocator undefined for \" + (self.$name()))\n      }, $allocate$81.$$arity = 0);\n      \n      Opal.udef(self, '$' + \"new\");;\n      return (Opal.def(self, '$===', $eq_eq_eq$82 = function(other) {\n        var self = this;\n\n        return !!other.$$is_number;\n      }, $eq_eq_eq$82.$$arity = 1), nil) && '===';\n    })(Opal.get_singleton_class(self), $nesting);\n    Opal.const_set($nesting[0], 'INFINITY', Infinity);\n    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);\n    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);\n    Opal.const_set($nesting[0], 'NAN', NaN);\n    Opal.const_set($nesting[0], 'DIG', 15);\n    Opal.const_set($nesting[0], 'MANT_DIG', 53);\n    Opal.const_set($nesting[0], 'RADIX', 2);\n    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/range\"] = function(Opal) {\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$size', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Range');\n\n    var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_$eq_eq$2, $Range_$eq_eq_eq$3, $Range_cover$ques$4, $Range_each$5, $Range_eql$ques$6, $Range_exclude_end$ques$7, $Range_first$8, $Range_last$9, $Range_max$10, $Range_min$11, $Range_size$12, $Range_step$13, $Range_bsearch$17, $Range_to_s$18, $Range_inspect$19, $Range_marshal_load$20, $Range_hash$21;\n\n    self.$$prototype.begin = self.$$prototype.end = self.$$prototype.excl = nil;\n    \n    self.$include($$($nesting, 'Enumerable'));\n    self.$$prototype.$$is_range = true;\n    self.$attr_reader(\"begin\", \"end\");\n    \n    Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(first, last, exclude) {\n      var self = this;\n\n      \n      \n      if (exclude == null) {\n        exclude = false;\n      };\n      if ($truthy(self.begin)) {\n        self.$raise($$($nesting, 'NameError'), \"'initialize' called twice\")};\n      if ($truthy(first['$<=>'](last))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"bad value for range\")\n      };\n      self.begin = first;\n      self.end = last;\n      return (self.excl = exclude);\n    }, $Range_initialize$1.$$arity = -3);\n    \n    Opal.def(self, '$==', $Range_$eq_eq$2 = function(other) {\n      var self = this;\n\n      \n      if (!other.$$is_range) {\n        return false;\n      }\n\n      return self.excl  === other.excl &&\n             self.begin ==  other.begin &&\n             self.end   ==  other.end;\n    \n    }, $Range_$eq_eq$2.$$arity = 1);\n    \n    Opal.def(self, '$===', $Range_$eq_eq_eq$3 = function(value) {\n      var self = this;\n\n      return self['$include?'](value)\n    }, $Range_$eq_eq_eq$3.$$arity = 1);\n    \n    Opal.def(self, '$cover?', $Range_cover$ques$4 = function(value) {\n      var $a, self = this, beg_cmp = nil, end_cmp = nil;\n\n      \n      beg_cmp = self.begin['$<=>'](value);\n      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {\n      } else {\n        return false\n      };\n      end_cmp = value['$<=>'](self.end);\n      if ($truthy(self.excl)) {\n        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)\n      } else {\n        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)\n      };\n    }, $Range_cover$ques$4.$$arity = 1);\n    \n    Opal.def(self, '$each', $Range_each$5 = function $$each() {\n      var $iter = $Range_each$5.$$p, block = $iter || nil, $a, self = this, current = nil, last = nil;\n\n      if ($iter) $Range_each$5.$$p = null;\n      \n      \n      if ($iter) $Range_each$5.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each\")\n      };\n      \n      var i, limit;\n\n      if (self.begin.$$is_number && self.end.$$is_number) {\n        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {\n          self.$raise($$($nesting, 'TypeError'), \"can't iterate from Float\")\n        }\n\n        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {\n        return 0\n      } else {\n        return 1\n      }; return nil; })(); i < limit; i++) {\n          block(i);\n        }\n\n        return self;\n      }\n\n      if (self.begin.$$is_string && self.end.$$is_string) {\n        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())\n        return self;\n      }\n    ;\n      current = self.begin;\n      last = self.end;\n      if ($truthy(current['$respond_to?'](\"succ\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't iterate from \" + (current.$class()))\n      };\n      while ($truthy($rb_lt(current['$<=>'](last), 0))) {\n        \n        Opal.yield1(block, current);\n        current = current.$succ();\n      };\n      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {\n        Opal.yield1(block, current)};\n      return self;\n    }, $Range_each$5.$$arity = 0);\n    \n    Opal.def(self, '$eql?', $Range_eql$ques$6 = function(other) {\n      var $a, $b, self = this;\n\n      \n      if ($truthy($$($nesting, 'Range')['$==='](other))) {\n      } else {\n        return false\n      };\n      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);\n    }, $Range_eql$ques$6.$$arity = 1);\n    \n    Opal.def(self, '$exclude_end?', $Range_exclude_end$ques$7 = function() {\n      var self = this;\n\n      return self.excl\n    }, $Range_exclude_end$ques$7.$$arity = 0);\n    \n    Opal.def(self, '$first', $Range_first$8 = function $$first(n) {\n      var $iter = $Range_first$8.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Range_first$8.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      \n      ;\n      if ($truthy(n == null)) {\n        return self.begin};\n      return $send(self, Opal.find_super_dispatcher(self, 'first', $Range_first$8, false), $zuper, $iter);\n    }, $Range_first$8.$$arity = -1);\n    Opal.alias(self, \"include?\", \"cover?\");\n    \n    Opal.def(self, '$last', $Range_last$9 = function $$last(n) {\n      var self = this;\n\n      \n      ;\n      if ($truthy(n == null)) {\n        return self.end};\n      return self.$to_a().$last(n);\n    }, $Range_last$9.$$arity = -1);\n    \n    Opal.def(self, '$max', $Range_max$10 = function $$max() {\n      var $a, $iter = $Range_max$10.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Range_max$10.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if (($yield !== nil)) {\n        return $send(self, Opal.find_super_dispatcher(self, 'max', $Range_max$10, false), $zuper, $iter)\n      } else if ($truthy($rb_gt(self.begin, self.end))) {\n        return nil\n      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {\n        return nil\n      } else {\n        return self.excl ? self.end - 1 : self.end\n      }\n    }, $Range_max$10.$$arity = 0);\n    Opal.alias(self, \"member?\", \"cover?\");\n    \n    Opal.def(self, '$min', $Range_min$11 = function $$min() {\n      var $a, $iter = $Range_min$11.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n      if ($iter) $Range_min$11.$$p = null;\n      // Prepare super implicit arguments\n      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n        $zuper[$zuper_i] = arguments[$zuper_i];\n      }\n      if (($yield !== nil)) {\n        return $send(self, Opal.find_super_dispatcher(self, 'min', $Range_min$11, false), $zuper, $iter)\n      } else if ($truthy($rb_gt(self.begin, self.end))) {\n        return nil\n      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {\n        return nil\n      } else {\n        return self.begin\n      }\n    }, $Range_min$11.$$arity = 0);\n    \n    Opal.def(self, '$size', $Range_size$12 = function $$size() {\n      var $a, self = this, range_begin = nil, range_end = nil, infinity = nil;\n\n      \n      range_begin = self.begin;\n      range_end = self.end;\n      if ($truthy(self.excl)) {\n        range_end = $rb_minus(range_end, 1)};\n      if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](range_begin)) ? $$($nesting, 'Numeric')['$==='](range_end) : $a))) {\n      } else {\n        return nil\n      };\n      if ($truthy($rb_lt(range_end, range_begin))) {\n        return 0};\n      infinity = $$$($$($nesting, 'Float'), 'INFINITY');\n      if ($truthy([range_begin.$abs(), range_end.$abs()]['$include?'](infinity))) {\n        return infinity};\n      return (Math.abs(range_end - range_begin) + 1).$to_i();\n    }, $Range_size$12.$$arity = 0);\n    \n    Opal.def(self, '$step', $Range_step$13 = function $$step(n) {\n      var $$14, $$15, $$16, $iter = $Range_step$13.$$p, $yield = $iter || nil, self = this, i = nil;\n\n      if ($iter) $Range_step$13.$$p = null;\n      \n      \n      if (n == null) {\n        n = 1;\n      };\n      \n      function coerceStepSize() {\n        if (!n.$$is_number) {\n          n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), \"to_int\")\n        }\n\n        if (n < 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"step can't be negative\")\n        } else if (n === 0) {\n          self.$raise($$($nesting, 'ArgumentError'), \"step can't be 0\")\n        }\n      }\n\n      function enumeratorSize() {\n        if (!self.begin['$respond_to?'](\"succ\")) {\n          return nil;\n        }\n\n        if (self.begin.$$is_string && self.end.$$is_string) {\n          return nil;\n        }\n\n        if (n % 1 === 0) {\n          return $rb_divide(self.$size(), n).$ceil();\n        } else {\n          // n is a float\n          var begin = self.begin, end = self.end,\n              abs = Math.abs, floor = Math.floor,\n              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$($nesting, 'Float'), 'EPSILON'),\n              size;\n\n          if (err > 0.5) {\n            err = 0.5;\n          }\n\n          if (self.excl) {\n            size = floor((end - begin) / n - err);\n            if (size * n + begin < end) {\n              size++;\n            }\n          } else {\n            size = floor((end - begin) / n + err) + 1\n          }\n\n          return size;\n        }\n      }\n    ;\n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"step\", n], ($$14 = function(){var self = $$14.$$s || this;\n\n        \n          coerceStepSize();\n          return enumeratorSize();\n        }, $$14.$$s = self, $$14.$$arity = 0, $$14))\n      };\n      coerceStepSize();\n      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {\n        \n        i = 0;\n        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$15 = function(){var self = $$15.$$s || this, current = nil;\n          if (self.begin == null) self.begin = nil;\n          if (self.excl == null) self.excl = nil;\n          if (self.end == null) self.end = nil;\n\n        \n          current = $rb_plus(self.begin, $rb_times(i, n));\n          if ($truthy(self.excl)) {\n            if ($truthy($rb_ge(current, self.end))) {\n              \n              Opal.brk(nil, $brk)}\n          } else if ($truthy($rb_gt(current, self.end))) {\n            \n            Opal.brk(nil, $brk)};\n          Opal.yield1($yield, current);\n          return (i = $rb_plus(i, 1));}, $$15.$$s = self, $$15.$$brk = $brk, $$15.$$arity = 0, $$15))\n        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n      } else {\n        \n        \n        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {\n          self.$raise($$($nesting, 'TypeError'), \"no implicit conversion to float from string\")\n        }\n      ;\n        $send(self, 'each_with_index', [], ($$16 = function(value, idx){var self = $$16.$$s || this;\n\n        \n          \n          if (value == null) {\n            value = nil;\n          };\n          \n          if (idx == null) {\n            idx = nil;\n          };\n          if (idx['$%'](n)['$=='](0)) {\n            return Opal.yield1($yield, value);\n          } else {\n            return nil\n          };}, $$16.$$s = self, $$16.$$arity = 2, $$16));\n      };\n      return self;\n    }, $Range_step$13.$$arity = -1);\n    \n    Opal.def(self, '$bsearch', $Range_bsearch$17 = function $$bsearch() {\n      var $iter = $Range_bsearch$17.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Range_bsearch$17.$$p = null;\n      \n      \n      if ($iter) $Range_bsearch$17.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"bsearch\")\n      };\n      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't do binary search for \" + (self.begin.$class()))\n      };\n      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());\n    }, $Range_bsearch$17.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Range_to_s$18 = function $$to_s() {\n      var self = this;\n\n      return \"\" + (self.begin) + ((function() {if ($truthy(self.excl)) {\n        return \"...\"\n      } else {\n        return \"..\"\n      }; return nil; })()) + (self.end)\n    }, $Range_to_s$18.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $Range_inspect$19 = function $$inspect() {\n      var self = this;\n\n      return \"\" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {\n        return \"...\"\n      } else {\n        return \"..\"\n      }; return nil; })()) + (self.end.$inspect())\n    }, $Range_inspect$19.$$arity = 0);\n    \n    Opal.def(self, '$marshal_load', $Range_marshal_load$20 = function $$marshal_load(args) {\n      var self = this;\n\n      \n      self.begin = args['$[]'](\"begin\");\n      self.end = args['$[]'](\"end\");\n      return (self.excl = args['$[]'](\"excl\"));\n    }, $Range_marshal_load$20.$$arity = 1);\n    return (Opal.def(self, '$hash', $Range_hash$21 = function $$hash() {\n      var self = this;\n\n      return [self.begin, self.end, self.excl].$hash()\n    }, $Range_hash$21.$$arity = 0), nil) && 'hash';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/proc\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$raise', '$coerce_to!']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Proc');\n\n    var $nesting = [self].concat($parent_nesting), $Proc_new$1, $Proc_call$2, $Proc_to_proc$3, $Proc_lambda$ques$4, $Proc_arity$5, $Proc_source_location$6, $Proc_binding$7, $Proc_parameters$8, $Proc_curry$9, $Proc_dup$10;\n\n    \n    Opal.defineProperty(self.$$prototype, '$$is_proc', true);\n    Opal.defineProperty(self.$$prototype, '$$is_lambda', false);\n    Opal.defs(self, '$new', $Proc_new$1 = function() {\n      var $iter = $Proc_new$1.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Proc_new$1.$$p = null;\n      \n      \n      if ($iter) $Proc_new$1.$$p = null;;\n      if ($truthy(block)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"tried to create a Proc object without a block\")\n      };\n      return block;\n    }, $Proc_new$1.$$arity = 0);\n    \n    Opal.def(self, '$call', $Proc_call$2 = function $$call($a) {\n      var $iter = $Proc_call$2.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Proc_call$2.$$p = null;\n      \n      \n      if ($iter) $Proc_call$2.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      if (block !== nil) {\n        self.$$p = block;\n      }\n\n      var result, $brk = self.$$brk;\n\n      if ($brk) {\n        try {\n          if (self.$$is_lambda) {\n            result = self.apply(null, args);\n          }\n          else {\n            result = Opal.yieldX(self, args);\n          }\n        } catch (err) {\n          if (err === $brk) {\n            return $brk.$v\n          }\n          else {\n            throw err\n          }\n        }\n      }\n      else {\n        if (self.$$is_lambda) {\n          result = self.apply(null, args);\n        }\n        else {\n          result = Opal.yieldX(self, args);\n        }\n      }\n\n      return result;\n    ;\n    }, $Proc_call$2.$$arity = -1);\n    Opal.alias(self, \"[]\", \"call\");\n    Opal.alias(self, \"===\", \"call\");\n    Opal.alias(self, \"yield\", \"call\");\n    \n    Opal.def(self, '$to_proc', $Proc_to_proc$3 = function $$to_proc() {\n      var self = this;\n\n      return self\n    }, $Proc_to_proc$3.$$arity = 0);\n    \n    Opal.def(self, '$lambda?', $Proc_lambda$ques$4 = function() {\n      var self = this;\n\n      return !!self.$$is_lambda;\n    }, $Proc_lambda$ques$4.$$arity = 0);\n    \n    Opal.def(self, '$arity', $Proc_arity$5 = function $$arity() {\n      var self = this;\n\n      \n      if (self.$$is_curried) {\n        return -1;\n      } else {\n        return self.$$arity;\n      }\n    \n    }, $Proc_arity$5.$$arity = 0);\n    \n    Opal.def(self, '$source_location', $Proc_source_location$6 = function $$source_location() {\n      var self = this;\n\n      \n      if (self.$$is_curried) { return nil; };\n      return nil;\n    }, $Proc_source_location$6.$$arity = 0);\n    \n    Opal.def(self, '$binding', $Proc_binding$7 = function $$binding() {\n      var self = this;\n\n      \n      if (self.$$is_curried) { self.$raise($$($nesting, 'ArgumentError'), \"Can't create Binding\") };\n      return nil;\n    }, $Proc_binding$7.$$arity = 0);\n    \n    Opal.def(self, '$parameters', $Proc_parameters$8 = function $$parameters() {\n      var self = this;\n\n      \n      if (self.$$is_curried) {\n        return [[\"rest\"]];\n      } else if (self.$$parameters) {\n        if (self.$$is_lambda) {\n          return self.$$parameters;\n        } else {\n          var result = [], i, length;\n\n          for (i = 0, length = self.$$parameters.length; i < length; i++) {\n            var parameter = self.$$parameters[i];\n\n            if (parameter[0] === 'req') {\n              // required arguments always have name\n              parameter = ['opt', parameter[1]];\n            }\n\n            result.push(parameter);\n          }\n\n          return result;\n        }\n      } else {\n        return [];\n      }\n    \n    }, $Proc_parameters$8.$$arity = 0);\n    \n    Opal.def(self, '$curry', $Proc_curry$9 = function $$curry(arity) {\n      var self = this;\n\n      \n      ;\n      \n      if (arity === undefined) {\n        arity = self.length;\n      }\n      else {\n        arity = $$($nesting, 'Opal')['$coerce_to!'](arity, $$($nesting, 'Integer'), \"to_int\");\n        if (self.$$is_lambda && arity !== self.length) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (arity) + \" for \" + (self.length) + \")\")\n        }\n      }\n\n      function curried () {\n        var args = $slice.call(arguments),\n            length = args.length,\n            result;\n\n        if (length > arity && self.$$is_lambda && !self.$$is_curried) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (\" + (length) + \" for \" + (arity) + \")\")\n        }\n\n        if (length >= arity) {\n          return self.$call.apply(self, args);\n        }\n\n        result = function () {\n          return curried.apply(null,\n            args.concat($slice.call(arguments)));\n        }\n        result.$$is_lambda = self.$$is_lambda;\n        result.$$is_curried = true;\n\n        return result;\n      };\n\n      curried.$$is_lambda = self.$$is_lambda;\n      curried.$$is_curried = true;\n      return curried;\n    ;\n    }, $Proc_curry$9.$$arity = -1);\n    \n    Opal.def(self, '$dup', $Proc_dup$10 = function $$dup() {\n      var self = this;\n\n      \n      var original_proc = self.$$original_proc || self,\n          proc = function () {\n            return original_proc.apply(this, arguments);\n          };\n\n      for (var prop in self) {\n        if (self.hasOwnProperty(prop)) {\n          proc[prop] = self[prop];\n        }\n      }\n\n      return proc;\n    \n    }, $Proc_dup$10.$$arity = 0);\n    return Opal.alias(self, \"clone\", \"dup\");\n  })($nesting[0], Function, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/method\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Method');\n\n    var $nesting = [self].concat($parent_nesting), $Method_initialize$1, $Method_arity$2, $Method_parameters$3, $Method_source_location$4, $Method_comments$5, $Method_call$6, $Method_unbind$7, $Method_to_proc$8, $Method_inspect$9;\n\n    self.$$prototype.method = self.$$prototype.receiver = self.$$prototype.owner = self.$$prototype.name = nil;\n    \n    self.$attr_reader(\"owner\", \"receiver\", \"name\");\n    \n    Opal.def(self, '$initialize', $Method_initialize$1 = function $$initialize(receiver, owner, method, name) {\n      var self = this;\n\n      \n      self.receiver = receiver;\n      self.owner = owner;\n      self.name = name;\n      return (self.method = method);\n    }, $Method_initialize$1.$$arity = 4);\n    \n    Opal.def(self, '$arity', $Method_arity$2 = function $$arity() {\n      var self = this;\n\n      return self.method.$arity()\n    }, $Method_arity$2.$$arity = 0);\n    \n    Opal.def(self, '$parameters', $Method_parameters$3 = function $$parameters() {\n      var self = this;\n\n      return self.method.$$parameters\n    }, $Method_parameters$3.$$arity = 0);\n    \n    Opal.def(self, '$source_location', $Method_source_location$4 = function $$source_location() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$source_location) ? $a : [\"(eval)\", 0])\n    }, $Method_source_location$4.$$arity = 0);\n    \n    Opal.def(self, '$comments', $Method_comments$5 = function $$comments() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$comments) ? $a : [])\n    }, $Method_comments$5.$$arity = 0);\n    \n    Opal.def(self, '$call', $Method_call$6 = function $$call($a) {\n      var $iter = $Method_call$6.$$p, block = $iter || nil, $post_args, args, self = this;\n\n      if ($iter) $Method_call$6.$$p = null;\n      \n      \n      if ($iter) $Method_call$6.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      \n      self.method.$$p = block;\n\n      return self.method.apply(self.receiver, args);\n    ;\n    }, $Method_call$6.$$arity = -1);\n    Opal.alias(self, \"[]\", \"call\");\n    \n    Opal.def(self, '$unbind', $Method_unbind$7 = function $$unbind() {\n      var self = this;\n\n      return $$($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)\n    }, $Method_unbind$7.$$arity = 0);\n    \n    Opal.def(self, '$to_proc', $Method_to_proc$8 = function $$to_proc() {\n      var self = this;\n\n      \n      var proc = self.$call.bind(self);\n      proc.$$unbound = self.method;\n      proc.$$is_lambda = true;\n      proc.$$arity = self.method.$$arity;\n      proc.$$parameters = self.method.$$parameters;\n      return proc;\n    \n    }, $Method_to_proc$8.$$arity = 0);\n    return (Opal.def(self, '$inspect', $Method_inspect$9 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<\" + (self.$class()) + \": \" + (self.receiver.$class()) + \"#\" + (self.name) + \" (defined in \" + (self.owner) + \" in \" + (self.$source_location().$join(\":\")) + \")>\"\n    }, $Method_inspect$9.$$arity = 0), nil) && 'inspect';\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'UnboundMethod');\n\n    var $nesting = [self].concat($parent_nesting), $UnboundMethod_initialize$10, $UnboundMethod_arity$11, $UnboundMethod_parameters$12, $UnboundMethod_source_location$13, $UnboundMethod_comments$14, $UnboundMethod_bind$15, $UnboundMethod_inspect$16;\n\n    self.$$prototype.method = self.$$prototype.owner = self.$$prototype.name = self.$$prototype.source = nil;\n    \n    self.$attr_reader(\"source\", \"owner\", \"name\");\n    \n    Opal.def(self, '$initialize', $UnboundMethod_initialize$10 = function $$initialize(source, owner, method, name) {\n      var self = this;\n\n      \n      self.source = source;\n      self.owner = owner;\n      self.method = method;\n      return (self.name = name);\n    }, $UnboundMethod_initialize$10.$$arity = 4);\n    \n    Opal.def(self, '$arity', $UnboundMethod_arity$11 = function $$arity() {\n      var self = this;\n\n      return self.method.$arity()\n    }, $UnboundMethod_arity$11.$$arity = 0);\n    \n    Opal.def(self, '$parameters', $UnboundMethod_parameters$12 = function $$parameters() {\n      var self = this;\n\n      return self.method.$$parameters\n    }, $UnboundMethod_parameters$12.$$arity = 0);\n    \n    Opal.def(self, '$source_location', $UnboundMethod_source_location$13 = function $$source_location() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$source_location) ? $a : [\"(eval)\", 0])\n    }, $UnboundMethod_source_location$13.$$arity = 0);\n    \n    Opal.def(self, '$comments', $UnboundMethod_comments$14 = function $$comments() {\n      var $a, self = this;\n\n      return ($truthy($a = self.method.$$comments) ? $a : [])\n    }, $UnboundMethod_comments$14.$$arity = 0);\n    \n    Opal.def(self, '$bind', $UnboundMethod_bind$15 = function $$bind(object) {\n      var self = this;\n\n      \n      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {\n        return $$($nesting, 'Method').$new(object, self.owner, self.method, self.name);\n      }\n      else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"can't bind singleton method to a different class (expected \" + (object) + \".kind_of?(\" + (self.owner) + \" to be true)\");\n      }\n    \n    }, $UnboundMethod_bind$15.$$arity = 1);\n    return (Opal.def(self, '$inspect', $UnboundMethod_inspect$16 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<\" + (self.$class()) + \": \" + (self.source) + \"#\" + (self.name) + \" (defined in \" + (self.owner) + \" in \" + (self.$source_location().$join(\":\")) + \")>\"\n    }, $UnboundMethod_inspect$16.$$arity = 0), nil) && 'inspect';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/variables\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$new']);\n  \n  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars[\"'\"] = nil;\n  $gvars.LOADED_FEATURES = ($gvars[\"\\\"\"] = Opal.loaded_features);\n  $gvars.LOAD_PATH = ($gvars[\":\"] = []);\n  $gvars[\"/\"] = \"\\n\";\n  $gvars[\",\"] = nil;\n  Opal.const_set($nesting[0], 'ARGV', []);\n  Opal.const_set($nesting[0], 'ARGF', $$($nesting, 'Object').$new());\n  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));\n  $gvars.VERBOSE = false;\n  $gvars.DEBUG = false;\n  return ($gvars.SAFE = 0);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"opal/regexp_anchors\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  Opal.add_stubs(['$==', '$new']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Opal');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      return \"^\"\n    } else {\n      return nil\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      return \"$\"\n    } else {\n      return nil\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', \"\\\\u0001-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', \"\\\\u0001-\\\\u0020\\\\u0022-\\\\u002F\\\\u003A-\\\\u003E\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new(\"\" + \"[^\" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + \"]*[^\" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + \"]\"));\n    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', \"\\\\u0001-\\\\u0020\\\\u0021-\\\\u002F\\\\u003B-\\\\u003F\\\\u0040\\\\u005B-\\\\u005E\\\\u0060\\\\u007B-\\\\u007F\");\n    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new(\"\" + ($$($nesting, 'REGEXP_START')) + \"(::)?[A-Z][^\" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + \"]*\" + ($$($nesting, 'REGEXP_END'))));\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"opal/mini\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"opal/base\");\n  self.$require(\"corelib/nil\");\n  self.$require(\"corelib/boolean\");\n  self.$require(\"corelib/string\");\n  self.$require(\"corelib/comparable\");\n  self.$require(\"corelib/enumerable\");\n  self.$require(\"corelib/enumerator\");\n  self.$require(\"corelib/array\");\n  self.$require(\"corelib/hash\");\n  self.$require(\"corelib/number\");\n  self.$require(\"corelib/range\");\n  self.$require(\"corelib/proc\");\n  self.$require(\"corelib/method\");\n  self.$require(\"corelib/regexp\");\n  self.$require(\"corelib/variables\");\n  return self.$require(\"opal/regexp_anchors\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/string/encoding\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var $$12, $$15, $$18, $$21, $$24, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$==', '$default_external', '$upcase', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$force_encoding', '$dup', '$coerce_to!', '$find', '$getbyte']);\n  \n  self.$require(\"corelib/string\");\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Encoding');\n\n    var $nesting = [self].concat($parent_nesting), $Encoding_register$1, $Encoding_find$3, $Encoding_initialize$4, $Encoding_ascii_compatible$ques$5, $Encoding_dummy$ques$6, $Encoding_to_s$7, $Encoding_inspect$8, $Encoding_each_byte$9, $Encoding_getbyte$10, $Encoding_bytesize$11;\n\n    self.$$prototype.ascii = self.$$prototype.dummy = self.$$prototype.name = nil;\n    \n    Opal.defineProperty(self, '$$register', {});\n    Opal.defs(self, '$register', $Encoding_register$1 = function $$register(name, options) {\n      var $iter = $Encoding_register$1.$$p, block = $iter || nil, $a, $$2, self = this, names = nil, encoding = nil, register = nil;\n\n      if ($iter) $Encoding_register$1.$$p = null;\n      \n      \n      if ($iter) $Encoding_register$1.$$p = null;;\n      \n      if (options == null) {\n        options = $hash2([], {});\n      };\n      names = $rb_plus([name], ($truthy($a = options['$[]'](\"aliases\")) ? $a : []));\n      encoding = $send($$($nesting, 'Class'), 'new', [self], block.$to_proc()).$new(name, names, ($truthy($a = options['$[]'](\"ascii\")) ? $a : false), ($truthy($a = options['$[]'](\"dummy\")) ? $a : false));\n      register = self[\"$$register\"];\n      return $send(names, 'each', [], ($$2 = function(encoding_name){var self = $$2.$$s || this;\n\n      \n        \n        if (encoding_name == null) {\n          encoding_name = nil;\n        };\n        self.$const_set(encoding_name.$sub(\"-\", \"_\"), encoding);\n        return register[\"\" + \"$$\" + (encoding_name)] = encoding;}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n    }, $Encoding_register$1.$$arity = -2);\n    Opal.defs(self, '$find', $Encoding_find$3 = function $$find(name) {\n      var $a, self = this, register = nil, encoding = nil;\n\n      \n      if (name['$=='](\"default_external\")) {\n        return self.$default_external()};\n      register = self[\"$$register\"];\n      encoding = ($truthy($a = register[\"\" + \"$$\" + (name)]) ? $a : register[\"\" + \"$$\" + (name.$upcase())]);\n      if ($truthy(encoding)) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"\" + \"unknown encoding name - \" + (name))\n      };\n      return encoding;\n    }, $Encoding_find$3.$$arity = 1);\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting);\n\n      return self.$attr_accessor(\"default_external\")\n    })(Opal.get_singleton_class(self), $nesting);\n    self.$attr_reader(\"name\", \"names\");\n    \n    Opal.def(self, '$initialize', $Encoding_initialize$4 = function $$initialize(name, names, ascii, dummy) {\n      var self = this;\n\n      \n      self.name = name;\n      self.names = names;\n      self.ascii = ascii;\n      return (self.dummy = dummy);\n    }, $Encoding_initialize$4.$$arity = 4);\n    \n    Opal.def(self, '$ascii_compatible?', $Encoding_ascii_compatible$ques$5 = function() {\n      var self = this;\n\n      return self.ascii\n    }, $Encoding_ascii_compatible$ques$5.$$arity = 0);\n    \n    Opal.def(self, '$dummy?', $Encoding_dummy$ques$6 = function() {\n      var self = this;\n\n      return self.dummy\n    }, $Encoding_dummy$ques$6.$$arity = 0);\n    \n    Opal.def(self, '$to_s', $Encoding_to_s$7 = function $$to_s() {\n      var self = this;\n\n      return self.name\n    }, $Encoding_to_s$7.$$arity = 0);\n    \n    Opal.def(self, '$inspect', $Encoding_inspect$8 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<Encoding:\" + (self.name) + ((function() {if ($truthy(self.dummy)) {\n        return \" (dummy)\"\n      } else {\n        return nil\n      }; return nil; })()) + \">\"\n    }, $Encoding_inspect$8.$$arity = 0);\n    \n    Opal.def(self, '$each_byte', $Encoding_each_byte$9 = function $$each_byte($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Encoding_each_byte$9.$$arity = -1);\n    \n    Opal.def(self, '$getbyte', $Encoding_getbyte$10 = function $$getbyte($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Encoding_getbyte$10.$$arity = -1);\n    \n    Opal.def(self, '$bytesize', $Encoding_bytesize$11 = function $$bytesize($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'));\n    }, $Encoding_bytesize$11.$$arity = -1);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'EncodingError');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return nil\n    })($nesting[0], $$($nesting, 'StandardError'), $nesting);\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'CompatibilityError');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      return nil\n    })($nesting[0], $$($nesting, 'EncodingError'), $nesting);\n  })($nesting[0], null, $nesting);\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-8\", $hash2([\"aliases\", \"ascii\"], {\"aliases\": [\"CP65001\"], \"ascii\": true})], ($$12 = function(){var self = $$12.$$s || this, $each_byte$13, $bytesize$14;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$13 = function $$each_byte(string) {\n      var $iter = $each_byte$13.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$13.$$p = null;\n      \n      \n      if ($iter) $each_byte$13.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        if (code <= 0x7f) {\n          Opal.yield1(block, code);\n        }\n        else {\n          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');\n\n          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {\n            Opal.yield1(block, parseInt(encoded[j], 16));\n          }\n        }\n      }\n    ;\n    }, $each_byte$13.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$14 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$14.$$arity = 1), nil) && 'bytesize';}, $$12.$$s = self, $$12.$$arity = 0, $$12));\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-16LE\"], ($$15 = function(){var self = $$15.$$s || this, $each_byte$16, $bytesize$17;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$16 = function $$each_byte(string) {\n      var $iter = $each_byte$16.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$16.$$p = null;\n      \n      \n      if ($iter) $each_byte$16.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    }, $each_byte$16.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$17 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$17.$$arity = 1), nil) && 'bytesize';}, $$15.$$s = self, $$15.$$arity = 0, $$15));\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-16BE\"], ($$18 = function(){var self = $$18.$$s || this, $each_byte$19, $bytesize$20;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$19 = function $$each_byte(string) {\n      var $iter = $each_byte$19.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$19.$$p = null;\n      \n      \n      if ($iter) $each_byte$19.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code >> 8);\n        Opal.yield1(block, code & 0xff);\n      }\n    ;\n    }, $each_byte$19.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$20 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$20.$$arity = 1), nil) && 'bytesize';}, $$18.$$s = self, $$18.$$arity = 0, $$18));\n  $send($$($nesting, 'Encoding'), 'register', [\"UTF-32LE\"], ($$21 = function(){var self = $$21.$$s || this, $each_byte$22, $bytesize$23;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$22 = function $$each_byte(string) {\n      var $iter = $each_byte$22.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$22.$$p = null;\n      \n      \n      if ($iter) $each_byte$22.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    }, $each_byte$22.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$23 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$23.$$arity = 1), nil) && 'bytesize';}, $$21.$$s = self, $$21.$$arity = 0, $$21));\n  $send($$($nesting, 'Encoding'), 'register', [\"ASCII-8BIT\", $hash2([\"aliases\", \"ascii\", \"dummy\"], {\"aliases\": [\"BINARY\", \"US-ASCII\", \"ASCII\"], \"ascii\": true, \"dummy\": true})], ($$24 = function(){var self = $$24.$$s || this, $each_byte$25, $bytesize$26;\n\n  \n    \n    Opal.def(self, '$each_byte', $each_byte$25 = function $$each_byte(string) {\n      var $iter = $each_byte$25.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $each_byte$25.$$p = null;\n      \n      \n      if ($iter) $each_byte$25.$$p = null;;\n      \n      for (var i = 0, length = string.length; i < length; i++) {\n        var code = string.charCodeAt(i);\n        Opal.yield1(block, code & 0xff);\n        Opal.yield1(block, code >> 8);\n      }\n    ;\n    }, $each_byte$25.$$arity = 1);\n    return (Opal.def(self, '$bytesize', $bytesize$26 = function $$bytesize(string) {\n      var self = this;\n\n      return string.$bytes().$length()\n    }, $bytesize$26.$$arity = 1), nil) && 'bytesize';}, $$24.$$s = self, $$24.$$arity = 0, $$24));\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String_bytes$27, $String_bytesize$28, $String_each_byte$29, $String_encode$30, $String_force_encoding$31, $String_getbyte$32, $String_valid_encoding$ques$33;\n\n    self.$$prototype.encoding = nil;\n    \n    self.$attr_reader(\"encoding\");\n    Opal.defineProperty(String.prototype, 'encoding', $$$($$($nesting, 'Encoding'), 'UTF_16LE'));\n    \n    Opal.def(self, '$bytes', $String_bytes$27 = function $$bytes() {\n      var self = this;\n\n      return self.$each_byte().$to_a()\n    }, $String_bytes$27.$$arity = 0);\n    \n    Opal.def(self, '$bytesize', $String_bytesize$28 = function $$bytesize() {\n      var self = this;\n\n      return self.encoding.$bytesize(self)\n    }, $String_bytesize$28.$$arity = 0);\n    \n    Opal.def(self, '$each_byte', $String_each_byte$29 = function $$each_byte() {\n      var $iter = $String_each_byte$29.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $String_each_byte$29.$$p = null;\n      \n      \n      if ($iter) $String_each_byte$29.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each_byte\")\n      };\n      $send(self.encoding, 'each_byte', [self], block.$to_proc());\n      return self;\n    }, $String_each_byte$29.$$arity = 0);\n    \n    Opal.def(self, '$encode', $String_encode$30 = function $$encode(encoding) {\n      var self = this;\n\n      return self.$dup().$force_encoding(encoding)\n    }, $String_encode$30.$$arity = 1);\n    \n    Opal.def(self, '$force_encoding', $String_force_encoding$31 = function $$force_encoding(encoding) {\n      var self = this;\n\n      \n      if (encoding === self.encoding) { return self; }\n\n      encoding = $$($nesting, 'Opal')['$coerce_to!'](encoding, $$($nesting, 'String'), \"to_s\");\n      encoding = $$($nesting, 'Encoding').$find(encoding);\n\n      if (encoding === self.encoding) { return self; }\n\n      self.encoding = encoding;\n      return self;\n    \n    }, $String_force_encoding$31.$$arity = 1);\n    \n    Opal.def(self, '$getbyte', $String_getbyte$32 = function $$getbyte(idx) {\n      var self = this;\n\n      return self.encoding.$getbyte(self, idx)\n    }, $String_getbyte$32.$$arity = 1);\n    return (Opal.def(self, '$valid_encoding?', $String_valid_encoding$ques$33 = function() {\n      var self = this;\n\n      return true\n    }, $String_valid_encoding$ques$33.$$arity = 0), nil) && 'valid_encoding?';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/struct\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$alias_method', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$class', '$last', '$>', '$length', '$-', '$keys', '$any?', '$join', '$[]', '$[]=', '$each_with_index', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$each_pair', '$inspect', '$each_with_object', '$flatten', '$to_a', '$respond_to?', '$dig']);\n  \n  self.$require(\"corelib/enumerable\");\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Struct');\n\n    var $nesting = [self].concat($parent_nesting), $Struct_new$1, $Struct_define_struct_attribute$6, $Struct_members$9, $Struct_inherited$10, $Struct_initialize$12, $Struct_members$15, $Struct_hash$16, $Struct_$$$17, $Struct_$$$eq$18, $Struct_$eq_eq$19, $Struct_eql$ques$20, $Struct_each$21, $Struct_each_pair$24, $Struct_length$27, $Struct_to_a$28, $Struct_inspect$30, $Struct_to_h$32, $Struct_values_at$34, $Struct_dig$36;\n\n    \n    self.$include($$($nesting, 'Enumerable'));\n    Opal.defs(self, '$new', $Struct_new$1 = function(const_name, $a, $b) {\n      var $iter = $Struct_new$1.$$p, block = $iter || nil, $post_args, $kwargs, args, keyword_init, $$2, $$3, self = this, klass = nil;\n\n      if ($iter) $Struct_new$1.$$p = null;\n      \n      \n      if ($iter) $Struct_new$1.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      $kwargs = Opal.extract_kwargs($post_args);\n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      args = $post_args;;\n      \n      keyword_init = $kwargs.$$smap[\"keyword_init\"];\n      if (keyword_init == null) {\n        keyword_init = false\n      };\n      if ($truthy(const_name)) {\n        \n        try {\n          const_name = $$($nesting, 'Opal')['$const_name!'](const_name)\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'TypeError'), $$($nesting, 'NameError')])) {\n            try {\n              \n              args.$unshift(const_name);\n              const_name = nil;\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };};\n      $send(args, 'map', [], ($$2 = function(arg){var self = $$2.$$s || this;\n\n      \n        \n        if (arg == null) {\n          arg = nil;\n        };\n        return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'String'), \"to_str\");}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n      klass = $send($$($nesting, 'Class'), 'new', [self], ($$3 = function(){var self = $$3.$$s || this, $$4;\n\n      \n        $send(args, 'each', [], ($$4 = function(arg){var self = $$4.$$s || this;\n\n        \n          \n          if (arg == null) {\n            arg = nil;\n          };\n          return self.$define_struct_attribute(arg);}, $$4.$$s = self, $$4.$$arity = 1, $$4));\n        return (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $new$5;\n\n          \n          \n          Opal.def(self, '$new', $new$5 = function($a) {\n            var $post_args, args, self = this, instance = nil;\n\n            \n            \n            $post_args = Opal.slice.call(arguments, 0, arguments.length);\n            \n            args = $post_args;;\n            instance = self.$allocate();\n            instance.$$data = {};\n            $send(instance, 'initialize', Opal.to_a(args));\n            return instance;\n          }, $new$5.$$arity = -1);\n          return self.$alias_method(\"[]\", \"new\");\n        })(Opal.get_singleton_class(self), $nesting);}, $$3.$$s = self, $$3.$$arity = 0, $$3));\n      if ($truthy(block)) {\n        $send(klass, 'module_eval', [], block.$to_proc())};\n      klass.$$keyword_init = keyword_init;\n      if ($truthy(const_name)) {\n        $$($nesting, 'Struct').$const_set(const_name, klass)};\n      return klass;\n    }, $Struct_new$1.$$arity = -2);\n    Opal.defs(self, '$define_struct_attribute', $Struct_define_struct_attribute$6 = function $$define_struct_attribute(name) {\n      var $$7, $$8, self = this;\n\n      \n      if (self['$==']($$($nesting, 'Struct'))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"you cannot define attributes to the Struct class\")};\n      self.$members()['$<<'](name);\n      $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s || this;\n\n      return self.$$data[name];}, $$7.$$s = self, $$7.$$arity = 0, $$7));\n      return $send(self, 'define_method', [\"\" + (name) + \"=\"], ($$8 = function(value){var self = $$8.$$s || this;\n\n      \n        \n        if (value == null) {\n          value = nil;\n        };\n        return self.$$data[name] = value;;}, $$8.$$s = self, $$8.$$arity = 1, $$8));\n    }, $Struct_define_struct_attribute$6.$$arity = 1);\n    Opal.defs(self, '$members', $Struct_members$9 = function $$members() {\n      var $a, self = this;\n      if (self.members == null) self.members = nil;\n\n      \n      if (self['$==']($$($nesting, 'Struct'))) {\n        self.$raise($$($nesting, 'ArgumentError'), \"the Struct class has no members\")};\n      return (self.members = ($truthy($a = self.members) ? $a : []));\n    }, $Struct_members$9.$$arity = 0);\n    Opal.defs(self, '$inherited', $Struct_inherited$10 = function $$inherited(klass) {\n      var $$11, self = this, members = nil;\n      if (self.members == null) self.members = nil;\n\n      \n      members = self.members;\n      return $send(klass, 'instance_eval', [], ($$11 = function(){var self = $$11.$$s || this;\n\n      return (self.members = members)}, $$11.$$s = self, $$11.$$arity = 0, $$11));\n    }, $Struct_inherited$10.$$arity = 1);\n    \n    Opal.def(self, '$initialize', $Struct_initialize$12 = function $$initialize($a) {\n      var $post_args, args, $b, $$13, $$14, self = this, kwargs = nil, extra = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      if ($truthy(self.$class().$$keyword_init)) {\n        \n        kwargs = ($truthy($b = args.$last()) ? $b : $hash2([], {}));\n        if ($truthy(($truthy($b = $rb_gt(args.$length(), 1)) ? $b : (args.length === 1 && !kwargs.$$is_hash)))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"wrong number of arguments (given \" + (args.$length()) + \", expected 0)\")};\n        extra = $rb_minus(kwargs.$keys(), self.$class().$members());\n        if ($truthy(extra['$any?']())) {\n          self.$raise($$($nesting, 'ArgumentError'), \"\" + \"unknown keywords: \" + (extra.$join(\", \")))};\n        return $send(self.$class().$members(), 'each', [], ($$13 = function(name){var self = $$13.$$s || this, $writer = nil;\n\n        \n          \n          if (name == null) {\n            name = nil;\n          };\n          $writer = [name, kwargs['$[]'](name)];\n          $send(self, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$13.$$s = self, $$13.$$arity = 1, $$13));\n      } else {\n        \n        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {\n          self.$raise($$($nesting, 'ArgumentError'), \"struct size differs\")};\n        return $send(self.$class().$members(), 'each_with_index', [], ($$14 = function(name, index){var self = $$14.$$s || this, $writer = nil;\n\n        \n          \n          if (name == null) {\n            name = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          $writer = [name, args['$[]'](index)];\n          $send(self, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$14.$$s = self, $$14.$$arity = 2, $$14));\n      };\n    }, $Struct_initialize$12.$$arity = -1);\n    \n    Opal.def(self, '$members', $Struct_members$15 = function $$members() {\n      var self = this;\n\n      return self.$class().$members()\n    }, $Struct_members$15.$$arity = 0);\n    \n    Opal.def(self, '$hash', $Struct_hash$16 = function $$hash() {\n      var self = this;\n\n      return $$($nesting, 'Hash').$new(self.$$data).$hash()\n    }, $Struct_hash$16.$$arity = 0);\n    \n    Opal.def(self, '$[]', $Struct_$$$17 = function(name) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](name))) {\n        \n        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too small for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too large for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        name = self.$class().$members()['$[]'](name);\n      } else if ($truthy($$($nesting, 'String')['$==='](name))) {\n        \n        if(!self.$$data.hasOwnProperty(name)) {\n          self.$raise($$($nesting, 'NameError').$new(\"\" + \"no member '\" + (name) + \"' in struct\", name))\n        }\n      \n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"no implicit conversion of \" + (name.$class()) + \" into Integer\")\n      };\n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      return self.$$data[name];;\n    }, $Struct_$$$17.$$arity = 1);\n    \n    Opal.def(self, '$[]=', $Struct_$$$eq$18 = function(name, value) {\n      var self = this;\n\n      \n      if ($truthy($$($nesting, 'Integer')['$==='](name))) {\n        \n        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too small for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {\n          self.$raise($$($nesting, 'IndexError'), \"\" + \"offset \" + (name) + \" too large for struct(size:\" + (self.$class().$members().$size()) + \")\")};\n        name = self.$class().$members()['$[]'](name);\n      } else if ($truthy($$($nesting, 'String')['$==='](name))) {\n        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {\n        } else {\n          self.$raise($$($nesting, 'NameError').$new(\"\" + \"no member '\" + (name) + \"' in struct\", name))\n        }\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + \"no implicit conversion of \" + (name.$class()) + \" into Integer\")\n      };\n      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), \"to_str\");\n      return self.$$data[name] = value;;\n    }, $Struct_$$$eq$18.$$arity = 2);\n    \n    Opal.def(self, '$==', $Struct_$eq_eq$19 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n      } else {\n        return false\n      };\n      \n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[(struct).$__id__()] = true;\n        recursed2[(other).$__id__()] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if ($$($nesting, 'Struct')['$==='](a)) {\n            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$=='](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    ;\n    }, $Struct_$eq_eq$19.$$arity = 1);\n    \n    Opal.def(self, '$eql?', $Struct_eql$ques$20 = function(other) {\n      var self = this;\n\n      \n      if ($truthy(other['$instance_of?'](self.$class()))) {\n      } else {\n        return false\n      };\n      \n      var recursed1 = {}, recursed2 = {};\n\n      function _eqeq(struct, other) {\n        var key, a, b;\n\n        recursed1[(struct).$__id__()] = true;\n        recursed2[(other).$__id__()] = true;\n\n        for (key in struct.$$data) {\n          a = struct.$$data[key];\n          b = other.$$data[key];\n\n          if ($$($nesting, 'Struct')['$==='](a)) {\n            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {\n              if (!_eqeq(a, b)) {\n                return false;\n              }\n            }\n          } else {\n            if (!(a)['$eql?'](b)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return _eqeq(self, other);\n    ;\n    }, $Struct_eql$ques$20.$$arity = 1);\n    \n    Opal.def(self, '$each', $Struct_each$21 = function $$each() {\n      var $$22, $$23, $iter = $Struct_each$21.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Struct_each$21.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each\"], ($$22 = function(){var self = $$22.$$s || this;\n\n        return self.$size()}, $$22.$$s = self, $$22.$$arity = 0, $$22))\n      };\n      $send(self.$class().$members(), 'each', [], ($$23 = function(name){var self = $$23.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        return Opal.yield1($yield, self['$[]'](name));;}, $$23.$$s = self, $$23.$$arity = 1, $$23));\n      return self;\n    }, $Struct_each$21.$$arity = 0);\n    \n    Opal.def(self, '$each_pair', $Struct_each_pair$24 = function $$each_pair() {\n      var $$25, $$26, $iter = $Struct_each_pair$24.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Struct_each_pair$24.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return $send(self, 'enum_for', [\"each_pair\"], ($$25 = function(){var self = $$25.$$s || this;\n\n        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))\n      };\n      $send(self.$class().$members(), 'each', [], ($$26 = function(name){var self = $$26.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, $$26.$$s = self, $$26.$$arity = 1, $$26));\n      return self;\n    }, $Struct_each_pair$24.$$arity = 0);\n    \n    Opal.def(self, '$length', $Struct_length$27 = function $$length() {\n      var self = this;\n\n      return self.$class().$members().$length()\n    }, $Struct_length$27.$$arity = 0);\n    Opal.alias(self, \"size\", \"length\");\n    \n    Opal.def(self, '$to_a', $Struct_to_a$28 = function $$to_a() {\n      var $$29, self = this;\n\n      return $send(self.$class().$members(), 'map', [], ($$29 = function(name){var self = $$29.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        return self['$[]'](name);}, $$29.$$s = self, $$29.$$arity = 1, $$29))\n    }, $Struct_to_a$28.$$arity = 0);\n    Opal.alias(self, \"values\", \"to_a\");\n    \n    Opal.def(self, '$inspect', $Struct_inspect$30 = function $$inspect() {\n      var $a, $$31, self = this, result = nil;\n\n      \n      result = \"#<struct \";\n      if ($truthy(($truthy($a = $$($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {\n        result = $rb_plus(result, \"\" + (self.$class()) + \" \")};\n      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], ($$31 = function(name, value){var self = $$31.$$s || this;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        \n        if (value == null) {\n          value = nil;\n        };\n        return \"\" + (name) + \"=\" + (value.$inspect());}, $$31.$$s = self, $$31.$$arity = 2, $$31)).$join(\", \"));\n      result = $rb_plus(result, \">\");\n      return result;\n    }, $Struct_inspect$30.$$arity = 0);\n    Opal.alias(self, \"to_s\", \"inspect\");\n    \n    Opal.def(self, '$to_h', $Struct_to_h$32 = function $$to_h() {\n      var $$33, self = this;\n\n      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], ($$33 = function(name, h){var self = $$33.$$s || this, $writer = nil;\n\n      \n        \n        if (name == null) {\n          name = nil;\n        };\n        \n        if (h == null) {\n          h = nil;\n        };\n        $writer = [name, self['$[]'](name)];\n        $send(h, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];}, $$33.$$s = self, $$33.$$arity = 2, $$33))\n    }, $Struct_to_h$32.$$arity = 0);\n    \n    Opal.def(self, '$values_at', $Struct_values_at$34 = function $$values_at($a) {\n      var $post_args, args, $$35, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      args = $post_args;;\n      args = $send(args, 'map', [], ($$35 = function(arg){var self = $$35.$$s || this;\n\n      \n        \n        if (arg == null) {\n          arg = nil;\n        };\n        return arg.$$is_range ? arg.$to_a() : arg;}, $$35.$$s = self, $$35.$$arity = 1, $$35)).$flatten();\n      \n      var result = [];\n      for (var i = 0, len = args.length; i < len; i++) {\n        if (!args[i].$$is_number) {\n          self.$raise($$($nesting, 'TypeError'), \"\" + \"no implicit conversion of \" + ((args[i]).$class()) + \" into Integer\")\n        }\n        result.push(self['$[]'](args[i]));\n      }\n      return result;\n    ;\n    }, $Struct_values_at$34.$$arity = -1);\n    return (Opal.def(self, '$dig', $Struct_dig$36 = function $$dig(key, $a) {\n      var $post_args, keys, self = this, item = nil;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      keys = $post_args;;\n      item = (function() {if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {\n        return self.$$data[key] || nil;\n      } else {\n        return nil\n      }; return nil; })();\n      \n      if (item === nil || keys.length === 0) {\n        return item;\n      }\n    ;\n      if ($truthy(item['$respond_to?'](\"dig\"))) {\n      } else {\n        self.$raise($$($nesting, 'TypeError'), \"\" + (item.$class()) + \" does not have #dig method\")\n      };\n      return $send(item, 'dig', Opal.to_a(keys));\n    }, $Struct_dig$36.$$arity = -2), nil) && 'dig';\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/io\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $writer = nil;\n\n  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IO');\n\n    var $nesting = [self].concat($parent_nesting), $IO_tty$ques$1, $IO_closed$ques$2, $IO_write$3, $IO_flush$4;\n\n    self.$$prototype.tty = self.$$prototype.closed = nil;\n    \n    Opal.const_set($nesting[0], 'SEEK_SET', 0);\n    Opal.const_set($nesting[0], 'SEEK_CUR', 1);\n    Opal.const_set($nesting[0], 'SEEK_END', 2);\n    \n    Opal.def(self, '$tty?', $IO_tty$ques$1 = function() {\n      var self = this;\n\n      return self.tty\n    }, $IO_tty$ques$1.$$arity = 0);\n    \n    Opal.def(self, '$closed?', $IO_closed$ques$2 = function() {\n      var self = this;\n\n      return self.closed\n    }, $IO_closed$ques$2.$$arity = 0);\n    self.$attr_accessor(\"write_proc\");\n    \n    Opal.def(self, '$write', $IO_write$3 = function $$write(string) {\n      var self = this;\n\n      \n      self.write_proc(string);\n      return string.$size();\n    }, $IO_write$3.$$arity = 1);\n    self.$attr_accessor(\"sync\", \"tty\");\n    \n    Opal.def(self, '$flush', $IO_flush$4 = function $$flush() {\n      var self = this;\n\n      return nil\n    }, $IO_flush$4.$$arity = 0);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Writable');\n\n      var $nesting = [self].concat($parent_nesting), $Writable_$lt$lt$5, $Writable_print$6, $Writable_puts$8;\n\n      \n      \n      Opal.def(self, '$<<', $Writable_$lt$lt$5 = function(string) {\n        var self = this;\n\n        \n        self.$write(string);\n        return self;\n      }, $Writable_$lt$lt$5.$$arity = 1);\n      \n      Opal.def(self, '$print', $Writable_print$6 = function $$print($a) {\n        var $post_args, args, $$7, self = this;\n        if ($gvars[\",\"] == null) $gvars[\",\"] = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        self.$write($send(args, 'map', [], ($$7 = function(arg){var self = $$7.$$s || this;\n\n        \n          \n          if (arg == null) {\n            arg = nil;\n          };\n          return self.$String(arg);}, $$7.$$s = self, $$7.$$arity = 1, $$7)).$join($gvars[\",\"]));\n        return nil;\n      }, $Writable_print$6.$$arity = -1);\n      \n      Opal.def(self, '$puts', $Writable_puts$8 = function $$puts($a) {\n        var $post_args, args, $$9, self = this, newline = nil;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        newline = $gvars[\"/\"];\n        if ($truthy(args['$empty?']())) {\n          self.$write($gvars[\"/\"])\n        } else {\n          self.$write($send(args, 'map', [], ($$9 = function(arg){var self = $$9.$$s || this;\n\n          \n            \n            if (arg == null) {\n              arg = nil;\n            };\n            return self.$String(arg).$chomp();}, $$9.$$s = self, $$9.$$arity = 1, $$9)).$concat([nil]).$join(newline))\n        };\n        return nil;\n      }, $Writable_puts$8.$$arity = -1);\n    })($nesting[0], $nesting);\n    return (function($base, $parent_nesting) {\n      var self = $module($base, 'Readable');\n\n      var $nesting = [self].concat($parent_nesting), $Readable_readbyte$10, $Readable_readchar$11, $Readable_readline$12, $Readable_readpartial$13;\n\n      \n      \n      Opal.def(self, '$readbyte', $Readable_readbyte$10 = function $$readbyte() {\n        var self = this;\n\n        return self.$getbyte()\n      }, $Readable_readbyte$10.$$arity = 0);\n      \n      Opal.def(self, '$readchar', $Readable_readchar$11 = function $$readchar() {\n        var self = this;\n\n        return self.$getc()\n      }, $Readable_readchar$11.$$arity = 0);\n      \n      Opal.def(self, '$readline', $Readable_readline$12 = function $$readline(sep) {\n        var self = this;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        \n        if (sep == null) {\n          sep = $gvars[\"/\"];\n        };\n        return self.$raise($$($nesting, 'NotImplementedError'));\n      }, $Readable_readline$12.$$arity = -1);\n      \n      Opal.def(self, '$readpartial', $Readable_readpartial$13 = function $$readpartial(integer, outbuf) {\n        var self = this;\n\n        \n        \n        if (outbuf == null) {\n          outbuf = nil;\n        };\n        return self.$raise($$($nesting, 'NotImplementedError'));\n      }, $Readable_readpartial$13.$$arity = -2);\n    })($nesting[0], $nesting);\n  })($nesting[0], null, $nesting);\n  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = $$($nesting, 'IO').$new()));\n  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = $$($nesting, 'IO').$new()));\n  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = $$($nesting, 'IO').$new()));\n  var console = Opal.global.console;\n  \n  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];\n  $send($$($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));\n  $writer[$rb_minus($writer[\"length\"], 1)];;\n  \n  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];\n  $send($$($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));\n  $writer[$rb_minus($writer[\"length\"], 1)];;\n  $$($nesting, 'STDOUT').$extend($$$($$($nesting, 'IO'), 'Writable'));\n  return $$($nesting, 'STDERR').$extend($$$($$($nesting, 'IO'), 'Writable'));\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/main\"] = function(Opal) {\n  var $to_s$1, $include$2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$include']);\n  \n  Opal.defs(self, '$to_s', $to_s$1 = function $$to_s() {\n    var self = this;\n\n    return \"main\"\n  }, $to_s$1.$$arity = 0);\n  return (Opal.defs(self, '$include', $include$2 = function $$include(mod) {\n    var self = this;\n\n    return $$($nesting, 'Object').$include(mod)\n  }, $include$2.$$arity = 1), nil) && 'include';\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/dir\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$[]']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Dir');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $chdir$1, $pwd$2, $home$3;\n\n      \n      \n      Opal.def(self, '$chdir', $chdir$1 = function $$chdir(dir) {\n        var $iter = $chdir$1.$$p, $yield = $iter || nil, self = this, prev_cwd = nil;\n\n        if ($iter) $chdir$1.$$p = null;\n        return (function() { try {\n        \n        prev_cwd = Opal.current_dir;\n        Opal.current_dir = dir;\n        return Opal.yieldX($yield, []);;\n        } finally {\n          Opal.current_dir = prev_cwd\n        }; })()\n      }, $chdir$1.$$arity = 1);\n      \n      Opal.def(self, '$pwd', $pwd$2 = function $$pwd() {\n        var self = this;\n\n        return Opal.current_dir || '.';\n      }, $pwd$2.$$arity = 0);\n      Opal.alias(self, \"getwd\", \"pwd\");\n      return (Opal.def(self, '$home', $home$3 = function $$home() {\n        var $a, self = this;\n\n        return ($truthy($a = $$($nesting, 'ENV')['$[]'](\"HOME\")) ? $a : \".\")\n      }, $home$3.$$arity = 0), nil) && 'home';\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/file\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;\n\n  Opal.add_stubs(['$respond_to?', '$to_path', '$pwd', '$split', '$sub', '$+', '$unshift', '$join', '$home', '$raise', '$start_with?', '$absolute_path', '$coerce_to!', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$==', '$-', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$to_proc', '$end_with?']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), windows_root_rx = nil;\n\n    \n    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', \"/\"));\n    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);\n    Opal.const_set($nesting[0], 'PATH_SEPARATOR', \":\");\n    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);\n    windows_root_rx = /^[a-zA-Z]:(?:\\\\|\\/)/;\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $absolute_path$1, $expand_path$2, $dirname$3, $basename$4, $extname$5, $exist$ques$6, $directory$ques$7, $join$9, $split$12;\n\n      \n      \n      Opal.def(self, '$absolute_path', $absolute_path$1 = function $$absolute_path(path, basedir) {\n        var $a, self = this, sep = nil, sep_chars = nil, new_parts = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;\n\n        \n        \n        if (basedir == null) {\n          basedir = nil;\n        };\n        sep = $$($nesting, 'SEPARATOR');\n        sep_chars = $sep_chars();\n        new_parts = [];\n        path = (function() {if ($truthy(path['$respond_to?'](\"to_path\"))) {\n          return path.$to_path()\n        } else {\n          return path\n        }; return nil; })();\n        basedir = ($truthy($a = basedir) ? $a : $$($nesting, 'Dir').$pwd());\n        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);\n        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);\n        if ($truthy(path_abs)) {\n          \n          parts = path.$split(new RegExp(\"\" + \"[\" + (sep_chars) + \"]\"));\n          leading_sep = windows_root_rx.test(path) ? '' : path.$sub(new RegExp(\"\" + \"^([\" + (sep_chars) + \"]+).*$\"), \"\\\\1\");\n          abs = true;\n        } else {\n          \n          parts = $rb_plus(basedir.$split(new RegExp(\"\" + \"[\" + (sep_chars) + \"]\")), path.$split(new RegExp(\"\" + \"[\" + (sep_chars) + \"]\")));\n          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub(new RegExp(\"\" + \"^([\" + (sep_chars) + \"]+).*$\"), \"\\\\1\");\n          abs = basedir_abs;\n        };\n        \n        var part;\n        for (var i = 0, ii = parts.length; i < ii; i++) {\n          part = parts[i];\n\n          if (\n            (part === nil) ||\n            (part === ''  && ((new_parts.length === 0) || abs)) ||\n            (part === '.' && ((new_parts.length === 0) || abs))\n          ) {\n            continue;\n          }\n          if (part === '..') {\n            new_parts.pop();\n          } else {\n            new_parts.push(part);\n          }\n        }\n\n        if (!abs && parts[0] !== '.') {\n          new_parts.$unshift(\".\")\n        }\n      ;\n        new_path = new_parts.$join(sep);\n        if ($truthy(abs)) {\n          new_path = $rb_plus(leading_sep, new_path)};\n        return new_path;\n      }, $absolute_path$1.$$arity = -2);\n      \n      Opal.def(self, '$expand_path', $expand_path$2 = function $$expand_path(path, basedir) {\n        var self = this, sep = nil, sep_chars = nil, home = nil, leading_sep = nil, home_path_regexp = nil;\n\n        \n        \n        if (basedir == null) {\n          basedir = nil;\n        };\n        sep = $$($nesting, 'SEPARATOR');\n        sep_chars = $sep_chars();\n        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {\n          \n          home = $$($nesting, 'Dir').$home();\n          if ($truthy(home)) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"couldn't find HOME environment -- expanding `~'\")\n          };\n          leading_sep = windows_root_rx.test(home) ? '' : home.$sub(new RegExp(\"\" + \"^([\" + (sep_chars) + \"]+).*$\"), \"\\\\1\");\n          if ($truthy(home['$start_with?'](leading_sep))) {\n          } else {\n            self.$raise($$($nesting, 'ArgumentError'), \"non-absolute home\")\n          };\n          home = $rb_plus(home, sep);\n          home_path_regexp = new RegExp(\"\" + \"^\\\\~(?:\" + (sep) + \"|$)\");\n          path = path.$sub(home_path_regexp, home);\n          if ($truthy(basedir)) {\n            basedir = basedir.$sub(home_path_regexp, home)};};\n        return self.$absolute_path(path, basedir);\n      }, $expand_path$2.$$arity = -2);\n      Opal.alias(self, \"realpath\", \"expand_path\");\n      \n      // Coerce a given path to a path string using #to_path and #to_str\n      function $coerce_to_path(path) {\n        if ($truthy((path)['$respond_to?'](\"to_path\"))) {\n          path = path.$to_path();\n        }\n\n        path = $$($nesting, 'Opal')['$coerce_to!'](path, $$($nesting, 'String'), \"to_str\");\n\n        return path;\n      }\n\n      // Return a RegExp compatible char class\n      function $sep_chars() {\n        if ($$($nesting, 'ALT_SEPARATOR') === nil) {\n          return Opal.escape_regexp($$($nesting, 'SEPARATOR'));\n        } else {\n          return Opal.escape_regexp($rb_plus($$($nesting, 'SEPARATOR'), $$($nesting, 'ALT_SEPARATOR')));\n        }\n      }\n    ;\n      \n      Opal.def(self, '$dirname', $dirname$3 = function $$dirname(path) {\n        var self = this, sep_chars = nil;\n\n        \n        sep_chars = $sep_chars();\n        path = $coerce_to_path(path);\n        \n        var absolute = path.match(new RegExp(\"\" + \"^[\" + (sep_chars) + \"]\"));\n\n        path = path.replace(new RegExp(\"\" + \"[\" + (sep_chars) + \"]+$\"), ''); // remove trailing separators\n        path = path.replace(new RegExp(\"\" + \"[^\" + (sep_chars) + \"]+$\"), ''); // remove trailing basename\n        path = path.replace(new RegExp(\"\" + \"[\" + (sep_chars) + \"]+$\"), ''); // remove final trailing separators\n\n        if (path === '') {\n          return absolute ? '/' : '.';\n        }\n\n        return path;\n      ;\n      }, $dirname$3.$$arity = 1);\n      \n      Opal.def(self, '$basename', $basename$4 = function $$basename(name, suffix) {\n        var self = this, sep_chars = nil;\n\n        \n        \n        if (suffix == null) {\n          suffix = nil;\n        };\n        sep_chars = $sep_chars();\n        name = $coerce_to_path(name);\n        \n        if (name.length == 0) {\n          return name;\n        }\n\n        if (suffix !== nil) {\n          suffix = $$($nesting, 'Opal')['$coerce_to!'](suffix, $$($nesting, 'String'), \"to_str\")\n        } else {\n          suffix = null;\n        }\n\n        name = name.replace(new RegExp(\"\" + \"(.)[\" + (sep_chars) + \"]*$\"), '$1');\n        name = name.replace(new RegExp(\"\" + \"^(?:.*[\" + (sep_chars) + \"])?([^\" + (sep_chars) + \"]+)$\"), '$1');\n\n        if (suffix === \".*\") {\n          name = name.replace(/\\.[^\\.]+$/, '');\n        } else if(suffix !== null) {\n          suffix = Opal.escape_regexp(suffix);\n          name = name.replace(new RegExp(\"\" + (suffix) + \"$\"), '');\n        }\n\n        return name;\n      ;\n      }, $basename$4.$$arity = -2);\n      \n      Opal.def(self, '$extname', $extname$5 = function $$extname(path) {\n        var $a, self = this, filename = nil, last_dot_idx = nil;\n\n        \n        path = $coerce_to_path(path);\n        filename = self.$basename(path);\n        if ($truthy(filename['$empty?']())) {\n          return \"\"};\n        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(\".\");\n        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {\n          return \"\"\n        } else {\n          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))\n        };\n      }, $extname$5.$$arity = 1);\n      \n      Opal.def(self, '$exist?', $exist$ques$6 = function(path) {\n        var self = this;\n\n        return Opal.modules[path] != null\n      }, $exist$ques$6.$$arity = 1);\n      Opal.alias(self, \"exists?\", \"exist?\");\n      \n      Opal.def(self, '$directory?', $directory$ques$7 = function(path) {\n        var $$8, self = this, files = nil, file = nil;\n\n        \n        files = [];\n        \n        for (var key in Opal.modules) {\n          files.push(key)\n        }\n      ;\n        path = path.$gsub(new RegExp(\"\" + \"(^.\" + ($$($nesting, 'SEPARATOR')) + \"+|\" + ($$($nesting, 'SEPARATOR')) + \"+$)\"));\n        file = $send(files, 'find', [], ($$8 = function(f){var self = $$8.$$s || this;\n\n        \n          \n          if (f == null) {\n            f = nil;\n          };\n          return f['$=~'](new RegExp(\"\" + \"^\" + (path)));}, $$8.$$s = self, $$8.$$arity = 1, $$8));\n        return file;\n      }, $directory$ques$7.$$arity = 1);\n      \n      Opal.def(self, '$join', $join$9 = function $$join($a) {\n        var $post_args, paths, $$10, $$11, self = this, result = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        paths = $post_args;;\n        if ($truthy(paths['$empty?']())) {\n          return \"\"};\n        result = \"\";\n        paths = $send(paths.$flatten().$each_with_index(), 'map', [], ($$10 = function(item, index){var self = $$10.$$s || this, $b;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          if ($truthy((($b = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {\n            return $$($nesting, 'SEPARATOR')\n          } else if ($truthy((($b = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {\n            return $$($nesting, 'SEPARATOR')\n          } else {\n            return item\n          };}, $$10.$$s = self, $$10.$$arity = 2, $$10));\n        paths = $send(paths, 'reject', [], \"empty?\".$to_proc());\n        $send(paths, 'each_with_index', [], ($$11 = function(item, index){var self = $$11.$$s || this, $b, next_item = nil;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          next_item = paths['$[]']($rb_plus(index, 1));\n          if ($truthy(next_item['$nil?']())) {\n            return (result = \"\" + (result) + (item))\n          } else {\n            \n            if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? next_item['$start_with?']($$($nesting, 'SEPARATOR')) : $b))) {\n              item = item.$sub(new RegExp(\"\" + ($$($nesting, 'SEPARATOR')) + \"+$\"), \"\")};\n            return (result = (function() {if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? $b : next_item['$start_with?']($$($nesting, 'SEPARATOR'))))) {\n              return \"\" + (result) + (item)\n            } else {\n              return \"\" + (result) + (item) + ($$($nesting, 'SEPARATOR'))\n            }; return nil; })());\n          };}, $$11.$$s = self, $$11.$$arity = 2, $$11));\n        return result;\n      }, $join$9.$$arity = -1);\n      return (Opal.def(self, '$split', $split$12 = function $$split(path) {\n        var self = this;\n\n        return path.$split($$($nesting, 'SEPARATOR'))\n      }, $split$12.$$arity = 1), nil) && 'split';\n    })(Opal.get_singleton_class(self), $nesting);\n  })($nesting[0], $$($nesting, 'IO'), $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/process\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Process');\n\n    var $nesting = [self].concat($parent_nesting), $Process___register_clock__$1, $Process_pid$2, $Process_times$3, $Process_clock_gettime$4, monotonic = nil;\n\n    \n    self.__clocks__ = [];\n    Opal.defs(self, '$__register_clock__', $Process___register_clock__$1 = function $$__register_clock__(name, func) {\n      var self = this;\n      if (self.__clocks__ == null) self.__clocks__ = nil;\n\n      \n      self.$const_set(name, self.__clocks__.$size());\n      return self.__clocks__['$<<'](func);\n    }, $Process___register_clock__$1.$$arity = 2);\n    self.$__register_clock__(\"CLOCK_REALTIME\", function() { return Date.now() });\n    monotonic = false;\n    \n    if (Opal.global.performance) {\n      monotonic = function() {\n        return performance.now()\n      };\n    }\n    else if (Opal.global.process && process.hrtime) {\n      // let now be the base to get smaller numbers\n      var hrtime_base = process.hrtime();\n\n      monotonic = function() {\n        var hrtime = process.hrtime(hrtime_base);\n        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;\n        return ((hrtime[0] * 1000) + (us / 1000));\n      };\n    }\n  ;\n    if ($truthy(monotonic)) {\n      self.$__register_clock__(\"CLOCK_MONOTONIC\", monotonic)};\n    Opal.defs(self, '$pid', $Process_pid$2 = function $$pid() {\n      var self = this;\n\n      return 0\n    }, $Process_pid$2.$$arity = 0);\n    Opal.defs(self, '$times', $Process_times$3 = function $$times() {\n      var self = this, t = nil;\n\n      \n      t = $$($nesting, 'Time').$now().$to_f();\n      return $$$($$($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);\n    }, $Process_times$3.$$arity = 0);\n    return (Opal.defs(self, '$clock_gettime', $Process_clock_gettime$4 = function $$clock_gettime(clock_id, unit) {\n      var $a, self = this, clock = nil;\n      if (self.__clocks__ == null) self.__clocks__ = nil;\n\n      \n      \n      if (unit == null) {\n        unit = \"float_second\";\n      };\n      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'), \"\" + \"clock_gettime(\" + (clock_id) + \") \" + (self.__clocks__['$[]'](clock_id))));\n      \n      var ms = clock();\n      switch (unit) {\n        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)\n        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float\n        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float\n        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer\n        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer\n        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer\n        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer\n        default: self.$raise($$($nesting, 'ArgumentError'), \"\" + \"unexpected unit: \" + (unit))\n      }\n    ;\n    }, $Process_clock_gettime$4.$$arity = -2), nil) && 'clock_gettime';\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Signal');\n\n    var $nesting = [self].concat($parent_nesting), $Signal_trap$5;\n\n    return (Opal.defs(self, '$trap', $Signal_trap$5 = function $$trap($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Signal_trap$5.$$arity = -1), nil) && 'trap'\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'GC');\n\n    var $nesting = [self].concat($parent_nesting), $GC_start$6;\n\n    return (Opal.defs(self, '$start', $GC_start$6 = function $$start() {\n      var self = this;\n\n      return nil\n    }, $GC_start$6.$$arity = 0), nil) && 'start'\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"corelib/unsupported\"] = function(Opal) {\n  var $public$35, $private$36, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;\n\n  Opal.add_stubs(['$raise', '$warn', '$%']);\n  \n  \n  var warnings = {};\n\n  function handle_unsupported_feature(message) {\n    switch (Opal.config.unsupported_features_severity) {\n    case 'error':\n      $$($nesting, 'Kernel').$raise($$($nesting, 'NotImplementedError'), message)\n      break;\n    case 'warning':\n      warn(message)\n      break;\n    default: // ignore\n      // noop\n    }\n  }\n\n  function warn(string) {\n    if (warnings[string]) {\n      return;\n    }\n\n    warnings[string] = true;\n    self.$warn(string);\n  }\n;\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String_$lt$lt$1, $String_capitalize$excl$2, $String_chomp$excl$3, $String_chop$excl$4, $String_downcase$excl$5, $String_gsub$excl$6, $String_lstrip$excl$7, $String_next$excl$8, $String_reverse$excl$9, $String_slice$excl$10, $String_squeeze$excl$11, $String_strip$excl$12, $String_sub$excl$13, $String_succ$excl$14, $String_swapcase$excl$15, $String_tr$excl$16, $String_tr_s$excl$17, $String_upcase$excl$18, $String_prepend$19, $String_$$$eq$20, $String_clear$21, $String_encode$excl$22, $String_unicode_normalize$excl$23;\n\n    \n    var ERROR = \"String#%s not supported. Mutable String methods are not supported in Opal.\";\n    \n    Opal.def(self, '$<<', $String_$lt$lt$1 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"<<\"));\n    }, $String_$lt$lt$1.$$arity = -1);\n    \n    Opal.def(self, '$capitalize!', $String_capitalize$excl$2 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"capitalize!\"));\n    }, $String_capitalize$excl$2.$$arity = -1);\n    \n    Opal.def(self, '$chomp!', $String_chomp$excl$3 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"chomp!\"));\n    }, $String_chomp$excl$3.$$arity = -1);\n    \n    Opal.def(self, '$chop!', $String_chop$excl$4 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"chop!\"));\n    }, $String_chop$excl$4.$$arity = -1);\n    \n    Opal.def(self, '$downcase!', $String_downcase$excl$5 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"downcase!\"));\n    }, $String_downcase$excl$5.$$arity = -1);\n    \n    Opal.def(self, '$gsub!', $String_gsub$excl$6 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"gsub!\"));\n    }, $String_gsub$excl$6.$$arity = -1);\n    \n    Opal.def(self, '$lstrip!', $String_lstrip$excl$7 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"lstrip!\"));\n    }, $String_lstrip$excl$7.$$arity = -1);\n    \n    Opal.def(self, '$next!', $String_next$excl$8 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"next!\"));\n    }, $String_next$excl$8.$$arity = -1);\n    \n    Opal.def(self, '$reverse!', $String_reverse$excl$9 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"reverse!\"));\n    }, $String_reverse$excl$9.$$arity = -1);\n    \n    Opal.def(self, '$slice!', $String_slice$excl$10 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"slice!\"));\n    }, $String_slice$excl$10.$$arity = -1);\n    \n    Opal.def(self, '$squeeze!', $String_squeeze$excl$11 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"squeeze!\"));\n    }, $String_squeeze$excl$11.$$arity = -1);\n    \n    Opal.def(self, '$strip!', $String_strip$excl$12 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"strip!\"));\n    }, $String_strip$excl$12.$$arity = -1);\n    \n    Opal.def(self, '$sub!', $String_sub$excl$13 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"sub!\"));\n    }, $String_sub$excl$13.$$arity = -1);\n    \n    Opal.def(self, '$succ!', $String_succ$excl$14 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"succ!\"));\n    }, $String_succ$excl$14.$$arity = -1);\n    \n    Opal.def(self, '$swapcase!', $String_swapcase$excl$15 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"swapcase!\"));\n    }, $String_swapcase$excl$15.$$arity = -1);\n    \n    Opal.def(self, '$tr!', $String_tr$excl$16 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"tr!\"));\n    }, $String_tr$excl$16.$$arity = -1);\n    \n    Opal.def(self, '$tr_s!', $String_tr_s$excl$17 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"tr_s!\"));\n    }, $String_tr_s$excl$17.$$arity = -1);\n    \n    Opal.def(self, '$upcase!', $String_upcase$excl$18 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"upcase!\"));\n    }, $String_upcase$excl$18.$$arity = -1);\n    \n    Opal.def(self, '$prepend', $String_prepend$19 = function $$prepend($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"prepend\"));\n    }, $String_prepend$19.$$arity = -1);\n    \n    Opal.def(self, '$[]=', $String_$$$eq$20 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"[]=\"));\n    }, $String_$$$eq$20.$$arity = -1);\n    \n    Opal.def(self, '$clear', $String_clear$21 = function $$clear($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"clear\"));\n    }, $String_clear$21.$$arity = -1);\n    \n    Opal.def(self, '$encode!', $String_encode$excl$22 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"encode!\"));\n    }, $String_encode$excl$22.$$arity = -1);\n    return (Opal.def(self, '$unicode_normalize!', $String_unicode_normalize$excl$23 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%'](\"unicode_normalize!\"));\n    }, $String_unicode_normalize$excl$23.$$arity = -1), nil) && 'unicode_normalize!';\n  })($nesting[0], null, $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_freeze$24, $Kernel_frozen$ques$25;\n\n    \n    var ERROR = \"Object freezing is not supported by Opal\";\n    \n    Opal.def(self, '$freeze', $Kernel_freeze$24 = function $$freeze() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    }, $Kernel_freeze$24.$$arity = 0);\n    \n    Opal.def(self, '$frozen?', $Kernel_frozen$ques$25 = function() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return false;\n    }, $Kernel_frozen$ques$25.$$arity = 0);\n  })($nesting[0], $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_taint$26, $Kernel_untaint$27, $Kernel_tainted$ques$28;\n\n    \n    var ERROR = \"Object tainting is not supported by Opal\";\n    \n    Opal.def(self, '$taint', $Kernel_taint$26 = function $$taint() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    }, $Kernel_taint$26.$$arity = 0);\n    \n    Opal.def(self, '$untaint', $Kernel_untaint$27 = function $$untaint() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return self;\n    }, $Kernel_untaint$27.$$arity = 0);\n    \n    Opal.def(self, '$tainted?', $Kernel_tainted$ques$28 = function() {\n      var self = this;\n\n      \n      handle_unsupported_feature(ERROR);\n      return false;\n    }, $Kernel_tainted$ques$28.$$arity = 0);\n  })($nesting[0], $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Module');\n\n    var $nesting = [self].concat($parent_nesting), $Module_public$29, $Module_private_class_method$30, $Module_private_method_defined$ques$31, $Module_private_constant$32;\n\n    \n    \n    Opal.def(self, '$public', $Module_public$29 = function($a) {\n      var $post_args, methods, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      methods = $post_args;;\n      \n      if (methods.length === 0) {\n        self.$$module_function = false;\n      }\n\n      return nil;\n    ;\n    }, $Module_public$29.$$arity = -1);\n    Opal.alias(self, \"private\", \"public\");\n    Opal.alias(self, \"protected\", \"public\");\n    Opal.alias(self, \"nesting\", \"public\");\n    \n    Opal.def(self, '$private_class_method', $Module_private_class_method$30 = function $$private_class_method($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self;\n    }, $Module_private_class_method$30.$$arity = -1);\n    Opal.alias(self, \"public_class_method\", \"private_class_method\");\n    \n    Opal.def(self, '$private_method_defined?', $Module_private_method_defined$ques$31 = function(obj) {\n      var self = this;\n\n      return false\n    }, $Module_private_method_defined$ques$31.$$arity = 1);\n    \n    Opal.def(self, '$private_constant', $Module_private_constant$32 = function $$private_constant($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return nil;\n    }, $Module_private_constant$32.$$arity = -1);\n    Opal.alias(self, \"protected_method_defined?\", \"private_method_defined?\");\n    Opal.alias(self, \"public_instance_methods\", \"instance_methods\");\n    Opal.alias(self, \"public_instance_method\", \"instance_method\");\n    return Opal.alias(self, \"public_method_defined?\", \"method_defined?\");\n  })($nesting[0], null, $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_private_methods$33;\n\n    \n    \n    Opal.def(self, '$private_methods', $Kernel_private_methods$33 = function $$private_methods($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return [];\n    }, $Kernel_private_methods$33.$$arity = -1);\n    Opal.alias(self, \"private_instance_methods\", \"private_methods\");\n  })($nesting[0], $nesting);\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_eval$34;\n\n    \n    Opal.def(self, '$eval', $Kernel_eval$34 = function($a) {\n      var $post_args, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      ;\n      return self.$raise($$($nesting, 'NotImplementedError'), \"\" + \"To use Kernel#eval, you must first require 'opal-parser'. \" + (\"\" + \"See https://github.com/opal/opal/blob/\" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + \"/docs/opal_parser.md for details.\"));\n    }, $Kernel_eval$34.$$arity = -1)\n  })($nesting[0], $nesting);\n  Opal.defs(self, '$public', $public$35 = function($a) {\n    var $post_args, self = this;\n\n    \n    \n    $post_args = Opal.slice.call(arguments, 0, arguments.length);\n    ;\n    return nil;\n  }, $public$35.$$arity = -1);\n  return (Opal.defs(self, '$private', $private$36 = function($a) {\n    var $post_args, self = this;\n\n    \n    \n    $post_args = Opal.slice.call(arguments, 0, arguments.length);\n    ;\n    return nil;\n  }, $private$36.$$arity = -1), nil) && 'private';\n};\n\n/* Generated by Opal 0.11.99.dev */\n(function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"opal/base\");\n  self.$require(\"opal/mini\");\n  self.$require(\"corelib/string/encoding\");\n  self.$require(\"corelib/struct\");\n  self.$require(\"corelib/io\");\n  self.$require(\"corelib/main\");\n  self.$require(\"corelib/dir\");\n  self.$require(\"corelib/file\");\n  self.$require(\"corelib/process\");\n  return self.$require(\"corelib/unsupported\");\n})(Opal);\n\n\n// UMD Module\n(function (root, factory) {\n  if ( true && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory\n  } else if (true) {\n    // AMD. Register a named module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_RESULT__ = (function (module) {\n      return factory(module.config())\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n  } else {}\n}(this, function (moduleConfig) {\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/browser/file\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;\n\n  Opal.add_stubs(['$new']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), $File_read$1;\n\n    return (Opal.defs(self, '$read', $File_read$1 = function $$read(path) {\n      var self = this;\n\n      \n      var data = '';\n      var status = -1;\n      try {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', path, false);\n        xhr.addEventListener('load', function() {\n          status = this.status;\n          // status is 0 for local file mode (i.e., file://)\n          if (status === 0 || status === 200) {\n            data = this.responseText;\n          }\n        });\n        xhr.overrideMimeType('text/plain');\n        xhr.send();\n      }\n      catch (e) {\n        throw $$($nesting, 'IOError').$new('Error reading file or directory: ' + path + '; reason: ' + e.message);\n      }\n      // assume that no data in local file mode means it doesn't exist\n      if (status === 404 || (status === 0 && !data)) {\n        throw $$($nesting, 'IOError').$new('No such file or directory: ' + path);\n      }\n      return data;\n    \n    }, $File_read$1.$$arity = 1), nil) && 'read'\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/browser\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  \n  var platform, engine, framework, ioModule;\n\n  if (typeof moduleConfig === 'object' && typeof moduleConfig.runtime === 'object') {\n    var runtime = moduleConfig.runtime;\n    platform = runtime.platform;\n    engine = runtime.engine;\n    framework = runtime.framework;\n    ioModule = runtime.ioModule;\n  }\n  ioModule = ioModule || 'xmlhttprequest';\n  platform = platform || 'browser';\n  engine = engine || '';\n  framework = framework || '';\n;\n  Opal.const_set($nesting[0], 'JAVASCRIPT_IO_MODULE', ioModule);\n  Opal.const_set($nesting[0], 'JAVASCRIPT_PLATFORM', platform);\n  Opal.const_set($nesting[0], 'JAVASCRIPT_ENGINE', engine);\n  Opal.const_set($nesting[0], 'JAVASCRIPT_FRAMEWORK', framework);\n  return self.$require(\"asciidoctor/js/opal_ext/browser/file\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/abstract_node\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$uriish?', '$[]', '$web_path', '$path_resolver', '$descends_from?', '$base_dir', '$start_with?', '$attr?', '$join', '$prepare_source_string', '$read', '$fetch', '$warn', '$logger', '$normalize_system_path', '$read_asset']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractNode');\n\n      var $nesting = [self].concat($parent_nesting), $AbstractNode_read_contents$1, $AbstractNode_generate_data_uri_from_uri$2;\n\n      self.$$prototype.document = nil;\n      \n      \n      Opal.def(self, '$read_contents', $AbstractNode_read_contents$1 = function $$read_contents(target, opts) {\n        var $a, $b, $c, self = this, doc = nil, start = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        doc = self.document;\n        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : ($truthy($b = ($truthy($c = (start = opts['$[]'](\"start\"))) ? $$($nesting, 'Helpers')['$uriish?'](start) : $c)) ? (target = doc.$path_resolver().$web_path(target, start)) : $b)))) {\n          if ($truthy(($truthy($a = ($truthy($b = doc.$path_resolver()['$descends_from?'](target, doc.$base_dir())) ? $b : target['$start_with?'](\"chrome://\"))) ? $a : doc['$attr?'](\"allow-uri-read\")))) {\n            \n            try {\n              if ($truthy(opts['$[]'](\"normalize\"))) {\n                return $$($nesting, 'Helpers').$prepare_source_string($$$('::', 'File').$read(target)).$join($$($nesting, 'LF'))\n              } else {\n                return $$$('::', 'File').$read(target)\n              }\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n                    self.$logger().$warn(\"\" + \"could not retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target))};\n                  return nil;\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n          } else {\n            \n            if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n              self.$logger().$warn(\"\" + \"cannot retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target) + \" (allow-uri-read attribute not enabled)\")};\n            return nil;\n          }\n        } else {\n          \n          target = self.$normalize_system_path(target, opts['$[]'](\"start\"), nil, $hash2([\"target_name\"], {\"target_name\": ($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")}));\n          return self.$read_asset(target, $hash2([\"normalize\", \"warn_on_failure\", \"label\"], {\"normalize\": opts['$[]'](\"normalize\"), \"warn_on_failure\": opts.$fetch(\"warn_on_failure\", true), \"label\": opts['$[]'](\"label\")}));\n        };\n      }, $AbstractNode_read_contents$1.$$arity = -2);\n      return (Opal.def(self, '$generate_data_uri_from_uri', $AbstractNode_generate_data_uri_from_uri$2 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {\n        var self = this;\n\n        \n        \n        if (cache_uri == null) {\n          cache_uri = false;\n        };\n        \n      var contentType = ''\n      var b64encoded = ''\n      var status = -1\n\n      try {\n        var xhr = new XMLHttpRequest()\n        xhr.open('GET', image_uri, false)\n        // the response type cannot be changed for synchronous requests made from a document\n        // xhr.responseType = 'arraybuffer'\n        xhr.overrideMimeType('text/plain; charset=x-user-defined')\n        xhr.addEventListener('load', function() {\n          status = this.status\n          // status is 0 for local file mode (i.e., file://)\n          if (status === 0 || status === 200) {\n            var binary = ''\n            var rawText = this.responseText\n            for (var i = 0, len = rawText.length; i < len; ++i) {\n              var c = rawText.charCodeAt(i)\n              var byteCode = c & 0xff // byte at offset i\n              binary += String.fromCharCode(byteCode)\n            }\n            b64encoded = btoa(binary)\n            contentType = this.getResponseHeader('content-type')\n          }\n        })\n        xhr.send(null)\n        // try to detect the MIME Type from the file extension\n        if (!contentType) {\n          if (image_uri.endsWith('.jpeg') || image_uri.endsWith('.jpg') || image_uri.endsWith('.jpe')) {\n            contentType = 'image/jpg'\n          } else if (image_uri.endsWith('.png')) {\n            contentType = 'image/png'\n          } else if (image_uri.endsWith('.svg')) {\n            contentType = 'image/svg+xml'\n          } else if (image_uri.endsWith('.bmp')) {\n            contentType = 'image/bmp'\n          } else if (image_uri.endsWith('.tif') || image_uri.endsWith('.tiff')) {\n            contentType = 'image/tiff'\n          }\n        }\n      }\n      catch (e) {\n        // something bad happened!\n        status = 0\n      }\n\n      // assume that no data in local file mode means it doesn't exist\n      if (status === 404 || (status === 0 && (!b64encoded || !contentType))) {\n        self.$logger().$warn('could not retrieve image data from URI: ' + image_uri)\n        return image_uri\n      }\n      return 'data:' + contentType + ';base64,' + b64encoded\n    ;\n      }, $AbstractNode_generate_data_uri_from_uri$2.$$arity = -2), nil) && 'generate_data_uri_from_uri';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/open_uri\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;\n\n  Opal.add_stubs(['$new', '$path']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'OpenURI');\n\n    var $nesting = [self].concat($parent_nesting), $OpenURI_open_uri$1;\n\n    Opal.defs($$($nesting, 'OpenURI'), '$open_uri', $OpenURI_open_uri$1 = function $$open_uri(name, $a) {\n      var $post_args, rest, $iter = $OpenURI_open_uri$1.$$p, $yield = $iter || nil, self = this, file = nil;\n\n      if ($iter) $OpenURI_open_uri$1.$$p = null;\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      rest = $post_args;;\n      file = $send($$($nesting, 'File'), 'new', [self.$path()].concat(Opal.to_a(rest)));\n      if (($yield !== nil)) {\n        return Opal.yield1($yield, file);\n      } else {\n        return file\n      };\n    }, $OpenURI_open_uri$1.$$arity = -2)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/path_resolver\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$absolute_path?', '$start_with?']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PathResolver');\n\n      var $nesting = [self].concat($parent_nesting), $PathResolver_root$ques$1;\n\n      return (Opal.def(self, '$root?', $PathResolver_root$ques$1 = function(path) {\n        var $a, self = this;\n\n        return ($truthy($a = self['$absolute_path?'](path)) ? $a : path['$start_with?'](\"file://\", \"http://\", \"https://\", \"chrome://\"))\n      }, $PathResolver_root$ques$1.$$arity = 1), nil) && 'root?'\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser/reader\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$posixify', '$new', '$base_dir', '$start_with?', '$uriish?', '$descends_from?', '$key?', '$attributes', '$replace_next_line', '$absolute_path?', '$==', '$empty?', '$!', '$slice', '$length']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PreprocessorReader');\n\n      var $nesting = [self].concat($parent_nesting), $PreprocessorReader_resolve_include_path$1;\n\n      self.$$prototype.path_resolver = self.$$prototype.document = self.$$prototype.include_stack = self.$$prototype.dir = nil;\n      return (Opal.def(self, '$resolve_include_path', $PreprocessorReader_resolve_include_path$1 = function $$resolve_include_path(target, attrlist, attributes) {\n        var $a, self = this, p_target = nil, target_type = nil, base_dir = nil, inc_path = nil, relpath = nil, ctx_dir = nil, top_level = nil, offset = nil;\n\n        \n        p_target = (self.path_resolver = ($truthy($a = self.path_resolver) ? $a : $$($nesting, 'PathResolver').$new(\"\\\\\"))).$posixify(target);\n        $a = [\"file\", self.document.$base_dir()], (target_type = $a[0]), (base_dir = $a[1]), $a;\n        if ($truthy(p_target['$start_with?'](\"file://\"))) {\n          inc_path = (relpath = p_target)\n        } else if ($truthy($$($nesting, 'Helpers')['$uriish?'](p_target))) {\n          \n          if ($truthy(($truthy($a = self.path_resolver['$descends_from?'](p_target, base_dir)) ? $a : self.document.$attributes()['$key?'](\"allow-uri-read\")))) {\n          } else {\n            return self.$replace_next_line(\"\" + \"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n          };\n          inc_path = (relpath = p_target);\n        } else if ($truthy(self.path_resolver['$absolute_path?'](p_target))) {\n          inc_path = (relpath = \"\" + \"file://\" + ((function() {if ($truthy(p_target['$start_with?'](\"/\"))) {\n            return \"\"\n          } else {\n            return \"/\"\n          }; return nil; })()) + (p_target))\n        } else if ((ctx_dir = (function() {if ($truthy((top_level = self.include_stack['$empty?']()))) {\n          return base_dir\n        } else {\n          return self.dir\n        }; return nil; })())['$=='](\".\")) {\n          inc_path = (relpath = p_target)\n        } else if ($truthy(($truthy($a = ctx_dir['$start_with?'](\"file://\")) ? $a : $$($nesting, 'Helpers')['$uriish?'](ctx_dir)['$!']()))) {\n          \n          inc_path = \"\" + (ctx_dir) + \"/\" + (p_target);\n          if ($truthy(top_level)) {\n            relpath = p_target\n          } else if ($truthy(($truthy($a = base_dir['$=='](\".\")) ? $a : (offset = self.path_resolver['$descends_from?'](inc_path, base_dir))['$!']()))) {\n            relpath = inc_path\n          } else {\n            relpath = inc_path.$slice(offset, inc_path.$length())\n          };\n        } else if ($truthy(top_level)) {\n          inc_path = \"\" + (ctx_dir) + \"/\" + ((relpath = p_target))\n        } else if ($truthy(($truthy($a = (offset = self.path_resolver['$descends_from?'](ctx_dir, base_dir))) ? $a : self.document.$attributes()['$key?'](\"allow-uri-read\")))) {\n          \n          inc_path = \"\" + (ctx_dir) + \"/\" + (p_target);\n          relpath = (function() {if ($truthy(offset)) {\n            \n            return inc_path.$slice(offset, inc_path.$length());\n          } else {\n            return p_target\n          }; return nil; })();\n        } else {\n          return self.$replace_next_line(\"\" + \"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n        };\n        return [inc_path, \"file\", relpath];\n      }, $PreprocessorReader_resolve_include_path$1.$$arity = 3), nil) && 'resolve_include_path'\n    })($nesting[0], $$($nesting, 'Reader'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/browser\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$==', '$require']);\n  if ($$($nesting, 'JAVASCRIPT_IO_MODULE')['$=='](\"xmlhttprequest\")) {\n    \n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/abstract_node\");\n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/open_uri\");\n    self.$require(\"asciidoctor/js/asciidoctor_ext/browser/path_resolver\");\n    return self.$require(\"asciidoctor/js/asciidoctor_ext/browser/reader\");\n  } else {\n    return nil\n  }\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"set\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $module = Opal.module;\n\n  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$-', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Set');\n\n    var $nesting = [self].concat($parent_nesting), $Set_$$$1, $Set_initialize$2, $Set_dup$4, $Set_$minus$5, $Set_inspect$6, $Set_$eq_eq$7, $Set_add$9, $Set_classify$10, $Set_collect$excl$13, $Set_delete$15, $Set_delete$ques$16, $Set_delete_if$17, $Set_add$ques$20, $Set_each$21, $Set_empty$ques$22, $Set_eql$ques$23, $Set_clear$25, $Set_include$ques$26, $Set_merge$27, $Set_replace$29, $Set_size$30, $Set_subtract$31, $Set_$$33, $Set_superset$ques$34, $Set_proper_superset$ques$36, $Set_subset$ques$38, $Set_proper_subset$ques$40, $Set_to_a$42;\n\n    self.$$prototype.hash = nil;\n    \n    self.$include($$($nesting, 'Enumerable'));\n    Opal.defs(self, '$[]', $Set_$$$1 = function($a) {\n      var $post_args, ary, self = this;\n\n      \n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      ary = $post_args;;\n      return self.$new(ary);\n    }, $Set_$$$1.$$arity = -1);\n    \n    Opal.def(self, '$initialize', $Set_initialize$2 = function $$initialize(enum$) {\n      var $iter = $Set_initialize$2.$$p, block = $iter || nil, $$3, self = this;\n\n      if ($iter) $Set_initialize$2.$$p = null;\n      \n      \n      if ($iter) $Set_initialize$2.$$p = null;;\n      \n      if (enum$ == null) {\n        enum$ = nil;\n      };\n      self.hash = $hash2([], {});\n      if ($truthy(enum$['$nil?']())) {\n        return nil};\n      if ($truthy($$($nesting, 'Enumerable')['$==='](enum$))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"value must be enumerable\")\n      };\n      if ($truthy(block)) {\n        return $send(enum$, 'each', [], ($$3 = function(item){var self = $$3.$$s || this;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          return self.$add(Opal.yield1(block, item));}, $$3.$$s = self, $$3.$$arity = 1, $$3))\n      } else {\n        return self.$merge(enum$)\n      };\n    }, $Set_initialize$2.$$arity = -1);\n    \n    Opal.def(self, '$dup', $Set_dup$4 = function $$dup() {\n      var self = this, result = nil;\n\n      \n      result = self.$class().$new();\n      return result.$merge(self);\n    }, $Set_dup$4.$$arity = 0);\n    \n    Opal.def(self, '$-', $Set_$minus$5 = function(enum$) {\n      var self = this;\n\n      \n      if ($truthy(enum$['$respond_to?'](\"each\"))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"value must be enumerable\")\n      };\n      return self.$dup().$subtract(enum$);\n    }, $Set_$minus$5.$$arity = 1);\n    Opal.alias(self, \"difference\", \"-\");\n    \n    Opal.def(self, '$inspect', $Set_inspect$6 = function $$inspect() {\n      var self = this;\n\n      return \"\" + \"#<Set: {\" + (self.$to_a().$join(\",\")) + \"}>\"\n    }, $Set_inspect$6.$$arity = 0);\n    \n    Opal.def(self, '$==', $Set_$eq_eq$7 = function(other) {\n      var $a, $$8, self = this;\n\n      if ($truthy(self['$equal?'](other))) {\n        return true\n      } else if ($truthy(other['$instance_of?'](self.$class()))) {\n        return self.hash['$=='](other.$instance_variable_get(\"@hash\"))\n      } else if ($truthy(($truthy($a = other['$is_a?']($$($nesting, 'Set'))) ? self.$size()['$=='](other.$size()) : $a))) {\n        return $send(other, 'all?', [], ($$8 = function(o){var self = $$8.$$s || this;\n          if (self.hash == null) self.hash = nil;\n\n        \n          \n          if (o == null) {\n            o = nil;\n          };\n          return self.hash['$include?'](o);}, $$8.$$s = self, $$8.$$arity = 1, $$8))\n      } else {\n        return false\n      }\n    }, $Set_$eq_eq$7.$$arity = 1);\n    \n    Opal.def(self, '$add', $Set_add$9 = function $$add(o) {\n      var self = this, $writer = nil;\n\n      \n      \n      $writer = [o, true];\n      $send(self.hash, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      return self;\n    }, $Set_add$9.$$arity = 1);\n    Opal.alias(self, \"<<\", \"add\");\n    \n    Opal.def(self, '$classify', $Set_classify$10 = function $$classify() {\n      var $iter = $Set_classify$10.$$p, block = $iter || nil, $$11, $$12, self = this, result = nil;\n\n      if ($iter) $Set_classify$10.$$p = null;\n      \n      \n      if ($iter) $Set_classify$10.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"classify\")\n      };\n      result = $send($$($nesting, 'Hash'), 'new', [], ($$11 = function(h, k){var self = $$11.$$s || this, $writer = nil;\n\n      \n        \n        if (h == null) {\n          h = nil;\n        };\n        \n        if (k == null) {\n          k = nil;\n        };\n        $writer = [k, self.$class().$new()];\n        $send(h, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];}, $$11.$$s = self, $$11.$$arity = 2, $$11));\n      $send(self, 'each', [], ($$12 = function(item){var self = $$12.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return result['$[]'](Opal.yield1(block, item)).$add(item);}, $$12.$$s = self, $$12.$$arity = 1, $$12));\n      return result;\n    }, $Set_classify$10.$$arity = 0);\n    \n    Opal.def(self, '$collect!', $Set_collect$excl$13 = function() {\n      var $iter = $Set_collect$excl$13.$$p, block = $iter || nil, $$14, self = this, result = nil;\n\n      if ($iter) $Set_collect$excl$13.$$p = null;\n      \n      \n      if ($iter) $Set_collect$excl$13.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"collect!\")\n      };\n      result = self.$class().$new();\n      $send(self, 'each', [], ($$14 = function(item){var self = $$14.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return result['$<<'](Opal.yield1(block, item));}, $$14.$$s = self, $$14.$$arity = 1, $$14));\n      return self.$replace(result);\n    }, $Set_collect$excl$13.$$arity = 0);\n    Opal.alias(self, \"map!\", \"collect!\");\n    \n    Opal.def(self, '$delete', $Set_delete$15 = function(o) {\n      var self = this;\n\n      \n      self.hash.$delete(o);\n      return self;\n    }, $Set_delete$15.$$arity = 1);\n    \n    Opal.def(self, '$delete?', $Set_delete$ques$16 = function(o) {\n      var self = this;\n\n      if ($truthy(self['$include?'](o))) {\n        \n        self.$delete(o);\n        return self;\n      } else {\n        return nil\n      }\n    }, $Set_delete$ques$16.$$arity = 1);\n    \n    Opal.def(self, '$delete_if', $Set_delete_if$17 = function $$delete_if() {\n      var $$18, $$19, $iter = $Set_delete_if$17.$$p, $yield = $iter || nil, self = this;\n\n      if ($iter) $Set_delete_if$17.$$p = null;\n      \n      if (($yield !== nil)) {\n      } else {\n        return self.$enum_for(\"delete_if\")\n      };\n      $send($send(self, 'select', [], ($$18 = function(o){var self = $$18.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return Opal.yield1($yield, o);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)), 'each', [], ($$19 = function(o){var self = $$19.$$s || this;\n        if (self.hash == null) self.hash = nil;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return self.hash.$delete(o);}, $$19.$$s = self, $$19.$$arity = 1, $$19));\n      return self;\n    }, $Set_delete_if$17.$$arity = 0);\n    \n    Opal.def(self, '$add?', $Set_add$ques$20 = function(o) {\n      var self = this;\n\n      if ($truthy(self['$include?'](o))) {\n        return nil\n      } else {\n        return self.$add(o)\n      }\n    }, $Set_add$ques$20.$$arity = 1);\n    \n    Opal.def(self, '$each', $Set_each$21 = function $$each() {\n      var $iter = $Set_each$21.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Set_each$21.$$p = null;\n      \n      \n      if ($iter) $Set_each$21.$$p = null;;\n      if ((block !== nil)) {\n      } else {\n        return self.$enum_for(\"each\")\n      };\n      $send(self.hash, 'each_key', [], block.$to_proc());\n      return self;\n    }, $Set_each$21.$$arity = 0);\n    \n    Opal.def(self, '$empty?', $Set_empty$ques$22 = function() {\n      var self = this;\n\n      return self.hash['$empty?']()\n    }, $Set_empty$ques$22.$$arity = 0);\n    \n    Opal.def(self, '$eql?', $Set_eql$ques$23 = function(other) {\n      var $$24, self = this;\n\n      return self.hash['$eql?']($send(other, 'instance_eval', [], ($$24 = function(){var self = $$24.$$s || this;\n        if (self.hash == null) self.hash = nil;\n\n      return self.hash}, $$24.$$s = self, $$24.$$arity = 0, $$24)))\n    }, $Set_eql$ques$23.$$arity = 1);\n    \n    Opal.def(self, '$clear', $Set_clear$25 = function $$clear() {\n      var self = this;\n\n      \n      self.hash.$clear();\n      return self;\n    }, $Set_clear$25.$$arity = 0);\n    \n    Opal.def(self, '$include?', $Set_include$ques$26 = function(o) {\n      var self = this;\n\n      return self.hash['$include?'](o)\n    }, $Set_include$ques$26.$$arity = 1);\n    Opal.alias(self, \"member?\", \"include?\");\n    \n    Opal.def(self, '$merge', $Set_merge$27 = function $$merge(enum$) {\n      var $$28, self = this;\n\n      \n      $send(enum$, 'each', [], ($$28 = function(item){var self = $$28.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return self.$add(item);}, $$28.$$s = self, $$28.$$arity = 1, $$28));\n      return self;\n    }, $Set_merge$27.$$arity = 1);\n    \n    Opal.def(self, '$replace', $Set_replace$29 = function $$replace(enum$) {\n      var self = this;\n\n      \n      self.$clear();\n      self.$merge(enum$);\n      return self;\n    }, $Set_replace$29.$$arity = 1);\n    \n    Opal.def(self, '$size', $Set_size$30 = function $$size() {\n      var self = this;\n\n      return self.hash.$size()\n    }, $Set_size$30.$$arity = 0);\n    Opal.alias(self, \"length\", \"size\");\n    \n    Opal.def(self, '$subtract', $Set_subtract$31 = function $$subtract(enum$) {\n      var $$32, self = this;\n\n      \n      $send(enum$, 'each', [], ($$32 = function(item){var self = $$32.$$s || this;\n\n      \n        \n        if (item == null) {\n          item = nil;\n        };\n        return self.$delete(item);}, $$32.$$s = self, $$32.$$arity = 1, $$32));\n      return self;\n    }, $Set_subtract$31.$$arity = 1);\n    \n    Opal.def(self, '$|', $Set_$$33 = function(enum$) {\n      var self = this;\n\n      \n      if ($truthy(enum$['$respond_to?'](\"each\"))) {\n      } else {\n        self.$raise($$($nesting, 'ArgumentError'), \"value must be enumerable\")\n      };\n      return self.$dup().$merge(enum$);\n    }, $Set_$$33.$$arity = 1);\n    \n    Opal.def(self, '$superset?', $Set_superset$ques$34 = function(set) {\n      var $a, $$35, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_lt(self.$size(), set.$size()))) {\n        return false};\n      return $send(set, 'all?', [], ($$35 = function(o){var self = $$35.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return self['$include?'](o);}, $$35.$$s = self, $$35.$$arity = 1, $$35));\n    }, $Set_superset$ques$34.$$arity = 1);\n    Opal.alias(self, \">=\", \"superset?\");\n    \n    Opal.def(self, '$proper_superset?', $Set_proper_superset$ques$36 = function(set) {\n      var $a, $$37, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_le(self.$size(), set.$size()))) {\n        return false};\n      return $send(set, 'all?', [], ($$37 = function(o){var self = $$37.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return self['$include?'](o);}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n    }, $Set_proper_superset$ques$36.$$arity = 1);\n    Opal.alias(self, \">\", \"proper_superset?\");\n    \n    Opal.def(self, '$subset?', $Set_subset$ques$38 = function(set) {\n      var $a, $$39, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_lt(set.$size(), self.$size()))) {\n        return false};\n      return $send(self, 'all?', [], ($$39 = function(o){var self = $$39.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return set['$include?'](o);}, $$39.$$s = self, $$39.$$arity = 1, $$39));\n    }, $Set_subset$ques$38.$$arity = 1);\n    Opal.alias(self, \"<=\", \"subset?\");\n    \n    Opal.def(self, '$proper_subset?', $Set_proper_subset$ques$40 = function(set) {\n      var $a, $$41, self = this;\n\n      \n      ($truthy($a = set['$is_a?']($$($nesting, 'Set'))) ? $a : self.$raise($$($nesting, 'ArgumentError'), \"value must be a set\"));\n      if ($truthy($rb_le(set.$size(), self.$size()))) {\n        return false};\n      return $send(self, 'all?', [], ($$41 = function(o){var self = $$41.$$s || this;\n\n      \n        \n        if (o == null) {\n          o = nil;\n        };\n        return set['$include?'](o);}, $$41.$$s = self, $$41.$$arity = 1, $$41));\n    }, $Set_proper_subset$ques$40.$$arity = 1);\n    Opal.alias(self, \"<\", \"proper_subset?\");\n    Opal.alias(self, \"+\", \"|\");\n    Opal.alias(self, \"union\", \"|\");\n    return (Opal.def(self, '$to_a', $Set_to_a$42 = function $$to_a() {\n      var self = this;\n\n      return self.hash.$keys()\n    }, $Set_to_a$42.$$arity = 0), nil) && 'to_a';\n  })($nesting[0], null, $nesting);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Enumerable');\n\n    var $nesting = [self].concat($parent_nesting), $Enumerable_to_set$43;\n\n    \n    Opal.def(self, '$to_set', $Enumerable_to_set$43 = function $$to_set($a, $b) {\n      var $iter = $Enumerable_to_set$43.$$p, block = $iter || nil, $post_args, klass, args, self = this;\n\n      if ($iter) $Enumerable_to_set$43.$$p = null;\n      \n      \n      if ($iter) $Enumerable_to_set$43.$$p = null;;\n      \n      $post_args = Opal.slice.call(arguments, 0, arguments.length);\n      \n      if ($post_args.length > 0) {\n        klass = $post_args[0];\n        $post_args.splice(0, 1);\n      }\n      if (klass == null) {\n        klass = $$($nesting, 'Set');\n      };\n      \n      args = $post_args;;\n      return $send(klass, 'new', [self].concat(Opal.to_a(args)), block.$to_proc());\n    }, $Enumerable_to_set$43.$$arity = -1)\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/kernel\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send;\n\n  Opal.add_stubs(['$new']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Kernel');\n\n    var $nesting = [self].concat($parent_nesting), $Kernel_open$1, $Kernel___dir__$2;\n\n    \n    \n    Opal.def(self, '$open', $Kernel_open$1 = function $$open(path, $a) {\n      var $post_args, rest, $iter = $Kernel_open$1.$$p, $yield = $iter || nil, self = this, file = nil;\n\n      if ($iter) $Kernel_open$1.$$p = null;\n      \n      \n      $post_args = Opal.slice.call(arguments, 1, arguments.length);\n      \n      rest = $post_args;;\n      file = $send($$($nesting, 'File'), 'new', [path].concat(Opal.to_a(rest)));\n      if (($yield !== nil)) {\n        return Opal.yield1($yield, file);\n      } else {\n        return file\n      };\n    }, $Kernel_open$1.$$arity = -2);\n    \n    Opal.def(self, '$__dir__', $Kernel___dir__$2 = function $$__dir__() {\n      var self = this;\n\n      return \"\"\n    }, $Kernel___dir__$2.$$arity = 0);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/file\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$attr_reader', '$delete', '$gsub', '$read', '$size', '$to_enum', '$chomp', '$each_line', '$readlines', '$split']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'File');\n\n    var $nesting = [self].concat($parent_nesting), $File_initialize$1, $File_read$2, $File_each_line$3, $File_readlines$4;\n\n    self.$$prototype.eof = self.$$prototype.path = nil;\n    \n    self.$attr_reader(\"eof\");\n    self.$attr_reader(\"lineno\");\n    self.$attr_reader(\"path\");\n    \n    Opal.def(self, '$initialize', $File_initialize$1 = function $$initialize(path, flags) {\n      var self = this, encoding_flag_regexp = nil;\n\n      \n      \n      if (flags == null) {\n        flags = \"r\";\n      };\n      self.path = path;\n      self.contents = nil;\n      self.eof = false;\n      self.lineno = 0;\n      flags = flags.$delete(\"b\");\n      encoding_flag_regexp = /:(.*)/;\n      flags = flags.$gsub(encoding_flag_regexp, \"\");\n      return (self.flags = flags);\n    }, $File_initialize$1.$$arity = -2);\n    \n    Opal.def(self, '$read', $File_read$2 = function $$read() {\n      var self = this, res = nil;\n\n      if ($truthy(self.eof)) {\n        return \"\"\n      } else {\n        \n        res = $$($nesting, 'File').$read(self.path);\n        self.eof = true;\n        self.lineno = res.$size();\n        return res;\n      }\n    }, $File_read$2.$$arity = 0);\n    \n    Opal.def(self, '$each_line', $File_each_line$3 = function $$each_line(separator) {\n      var $iter = $File_each_line$3.$$p, block = $iter || nil, self = this, lines = nil;\n      if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n      if ($iter) $File_each_line$3.$$p = null;\n      \n      \n      if ($iter) $File_each_line$3.$$p = null;;\n      \n      if (separator == null) {\n        separator = $gvars[\"/\"];\n      };\n      if ($truthy(self.eof)) {\n        return (function() {if ((block !== nil)) {\n          return self\n        } else {\n          return [].$to_enum()\n        }; return nil; })()};\n      if ((block !== nil)) {\n        \n        lines = $$($nesting, 'File').$read(self.path);\n        \n        self.eof = false;\n        self.lineno = 0;\n        var chomped  = lines.$chomp(),\n            trailing = lines.length != chomped.length,\n            splitted = chomped.split(separator);\n        for (var i = 0, length = splitted.length; i < length; i++) {\n          self.lineno += 1;\n          if (i < length - 1 || trailing) {\n            Opal.yield1(block, splitted[i] + separator);\n          }\n          else {\n            Opal.yield1(block, splitted[i]);\n          }\n        }\n        self.eof = true;\n      ;\n        return self;\n      } else {\n        return self.$read().$each_line()\n      };\n    }, $File_each_line$3.$$arity = -1);\n    \n    Opal.def(self, '$readlines', $File_readlines$4 = function $$readlines() {\n      var self = this;\n\n      return $$($nesting, 'File').$readlines(self.path)\n    }, $File_readlines$4.$$arity = 0);\n    return (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $readlines$5, $file$ques$6, $readable$ques$7, $read$8;\n\n      \n      \n      Opal.def(self, '$readlines', $readlines$5 = function $$readlines(path, separator) {\n        var self = this, content = nil;\n        if ($gvars[\"/\"] == null) $gvars[\"/\"] = nil;\n\n        \n        \n        if (separator == null) {\n          separator = $gvars[\"/\"];\n        };\n        content = $$($nesting, 'File').$read(path);\n        return content.$split(separator);\n      }, $readlines$5.$$arity = -2);\n      \n      Opal.def(self, '$file?', $file$ques$6 = function(path) {\n        var self = this;\n\n        return true\n      }, $file$ques$6.$$arity = 1);\n      \n      Opal.def(self, '$readable?', $readable$ques$7 = function(path) {\n        var self = this;\n\n        return true\n      }, $readable$ques$7.$$arity = 1);\n      return (Opal.def(self, '$read', $read$8 = function $$read(path) {\n        var self = this;\n\n        return \"\"\n      }, $read$8.$$arity = 1), nil) && 'read';\n    })(Opal.get_singleton_class(self), $nesting);\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'IO');\n\n    var $nesting = [self].concat($parent_nesting), $IO_read$9;\n\n    return (Opal.defs(self, '$read', $IO_read$9 = function $$read(path) {\n      var self = this;\n\n      return $$($nesting, 'File').$read(path)\n    }, $IO_read$9.$$arity = 1), nil) && 'read'\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/match_data\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;\n\n  Opal.add_stubs(['$[]=', '$-']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'MatchData');\n\n    var $nesting = [self].concat($parent_nesting), $MatchData_$$$eq$1;\n\n    self.$$prototype.matches = nil;\n    return (Opal.def(self, '$[]=', $MatchData_$$$eq$1 = function(idx, val) {\n      var self = this, $writer = nil;\n\n      \n      $writer = [idx, val];\n      $send(self.matches, '[]=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];\n    }, $MatchData_$$$eq$1.$$arity = 2), nil) && '[]='\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/string\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$method_defined?', '$<', '$length', '$bytes', '$to_s', '$byteslice', '$==', '$with_index', '$select', '$[]', '$even?', '$_original_unpack']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting), $String_limit_bytesize$1, $String_unpack$2;\n\n    \n    if ($truthy(self['$method_defined?'](\"limit_bytesize\"))) {\n    } else {\n      \n      Opal.def(self, '$limit_bytesize', $String_limit_bytesize$1 = function $$limit_bytesize(size) {\n        var self = this, result = nil;\n\n        \n        if ($truthy($rb_lt(size, self.$bytes().$length()))) {\n        } else {\n          return self.$to_s()\n        };\n        result = self.$byteslice(0, size);\n        return result.$to_s();\n      }, $String_limit_bytesize$1.$$arity = 1)\n    };\n    if ($truthy(self['$method_defined?'](\"limit\"))) {\n    } else {\n      Opal.alias(self, \"limit\", \"limit_bytesize\")\n    };\n    Opal.alias(self, \"_original_unpack\", \"unpack\");\n    return (Opal.def(self, '$unpack', $String_unpack$2 = function $$unpack(format) {\n      var $$3, self = this;\n\n      if (format['$=='](\"C3\")) {\n        return $send(self['$[]'](0, 3).$bytes().$select(), 'with_index', [], ($$3 = function(_, i){var self = $$3.$$s || this;\n\n        \n          \n          if (_ == null) {\n            _ = nil;\n          };\n          \n          if (i == null) {\n            i = nil;\n          };\n          return i['$even?']();}, $$3.$$s = self, $$3.$$arity = 2, $$3))\n      } else {\n        return self.$_original_unpack(format)\n      }\n    }, $String_unpack$2.$$arity = 1), nil) && 'unpack';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/uri\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  Opal.add_stubs(['$extend']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'URI');\n\n    var $nesting = [self].concat($parent_nesting), $URI_parse$1, $URI_path$2;\n\n    \n    Opal.defs(self, '$parse', $URI_parse$1 = function $$parse(str) {\n      var self = this;\n\n      return str.$extend($$($nesting, 'URI'))\n    }, $URI_parse$1.$$arity = 1);\n    \n    Opal.def(self, '$path', $URI_path$2 = function $$path() {\n      var self = this;\n\n      return self\n    }, $URI_path$2.$$arity = 0);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/base64\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$delete']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Base64');\n\n    var $nesting = [self].concat($parent_nesting), $Base64_decode64$1, $Base64_encode64$2, $Base64_strict_decode64$3, $Base64_strict_encode64$4, $Base64_urlsafe_decode64$5, $Base64_urlsafe_encode64$6;\n\n    \n    \n    var encode, decode;\n    encode = Opal.global.btoa || function (input) {\n      var buffer;\n      if (input instanceof Buffer) {\n        buffer = input;\n      } else {\n        buffer = Buffer.from(input.toString(), 'binary');\n      }\n      return buffer.toString('base64');\n    };\n    decode = Opal.global.atob || function (input) {\n      return Buffer.from(input, 'base64').toString('binary');\n    };\n  ;\n    Opal.defs(self, '$decode64', $Base64_decode64$1 = function $$decode64(string) {\n      var self = this;\n\n      return decode(string.replace(/\\r?\\n/g, ''));\n    }, $Base64_decode64$1.$$arity = 1);\n    Opal.defs(self, '$encode64', $Base64_encode64$2 = function $$encode64(string) {\n      var self = this;\n\n      return encode(string).replace(/(.{60})/g, \"$1\\n\").replace(/([^\\n])$/g, \"$1\\n\");\n    }, $Base64_encode64$2.$$arity = 1);\n    Opal.defs(self, '$strict_decode64', $Base64_strict_decode64$3 = function $$strict_decode64(string) {\n      var self = this;\n\n      return decode(string);\n    }, $Base64_strict_decode64$3.$$arity = 1);\n    Opal.defs(self, '$strict_encode64', $Base64_strict_encode64$4 = function $$strict_encode64(string) {\n      var self = this;\n\n      return encode(string);\n    }, $Base64_strict_encode64$4.$$arity = 1);\n    Opal.defs(self, '$urlsafe_decode64', $Base64_urlsafe_decode64$5 = function $$urlsafe_decode64(string) {\n      var self = this;\n\n      return decode(string.replace(/\\-/g, '+').replace(/_/g, '/'));\n    }, $Base64_urlsafe_decode64$5.$$arity = 1);\n    Opal.defs(self, '$urlsafe_encode64', $Base64_urlsafe_encode64$6 = function $$urlsafe_encode64(string, $kwargs) {\n      var padding, self = this, str = nil;\n\n      \n      \n      if ($kwargs == null) {\n        $kwargs = $hash2([], {});\n      } else if (!$kwargs.$$is_hash) {\n        throw Opal.ArgumentError.$new('expected kwargs');\n      };\n      \n      padding = $kwargs.$$smap[\"padding\"];\n      if (padding == null) {\n        padding = true\n      };\n      str = encode(string).replace(/\\+/g, '-').replace(/\\//g, '_');\n      if ($truthy(padding)) {\n      } else {\n        str = str.$delete(\"=\")\n      };\n      return str;\n    }, $Base64_urlsafe_encode64$6.$$arity = -2);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/number\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$coerce_to!', '$>']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Number');\n\n    var $nesting = [self].concat($parent_nesting), $Number_round$1;\n\n    return (Opal.def(self, '$round', $Number_round$1 = function $$round(ndigits) {\n      var self = this;\n\n      \n      ;\n      ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), \"to_int\");\n      if ($truthy($rb_gt(ndigits, 0))) {\n        return Number(self.toFixed(ndigits));\n      } else {\n        return Math.round(self);\n      };\n    }, $Number_round$1.$$arity = -1), nil) && 'round'\n  })($nesting[0], $$($nesting, 'Numeric'), $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/js/opal_ext/kernel\");\n  self.$require(\"asciidoctor/js/opal_ext/file\");\n  self.$require(\"asciidoctor/js/opal_ext/match_data\");\n  self.$require(\"asciidoctor/js/opal_ext/string\");\n  self.$require(\"asciidoctor/js/opal_ext/uri\");\n  self.$require(\"asciidoctor/js/opal_ext/base64\");\n  self.$require(\"asciidoctor/js/opal_ext/number\");\n  \n// suppress \"not supported\" warning messages from Opal\nOpal.config.unsupported_features_severity = 'ignore'\n\n// Load specific runtime\nself.$require(\"asciidoctor/js/opal_ext/browser\");\n;\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/rx\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$gsub', '$+', '$unpack_hex_range']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $Asciidoctor_unpack_hex_range$1;\n\n    \n    Opal.const_set($nesting[0], 'HEX_RANGE_RX', /([A-F0-9]{4})(?:-([A-F0-9]{4}))?/);\n    Opal.defs(self, '$unpack_hex_range', $Asciidoctor_unpack_hex_range$1 = function $$unpack_hex_range(str) {\n      var $$2, self = this;\n\n      return $send(str, 'gsub', [$$($nesting, 'HEX_RANGE_RX')], ($$2 = function(){var self = $$2.$$s || this, $a, $b;\n\n      return \"\" + \"\\\\u\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))) + (($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) ? \"\" + \"-\\\\u\" + ((($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) : $a))}, $$2.$$s = self, $$2.$$arity = 0, $$2))\n    }, $Asciidoctor_unpack_hex_range$1.$$arity = 1);\n    Opal.const_set($nesting[0], 'P_L', $rb_plus(\"A-Za-z\", self.$unpack_hex_range(\"00AA00B500BA00C0-00D600D8-00F600F8-02C102C6-02D102E0-02E402EC02EE0370-037403760377037A-037D037F03860388-038A038C038E-03A103A3-03F503F7-0481048A-052F0531-055605590561-058705D0-05EA05F0-05F20620-064A066E066F0671-06D306D506E506E606EE06EF06FA-06FC06FF07100712-072F074D-07A507B107CA-07EA07F407F507FA0800-0815081A082408280840-085808A0-08B20904-0939093D09500958-09610971-09800985-098C098F09900993-09A809AA-09B009B209B6-09B909BD09CE09DC09DD09DF-09E109F009F10A05-0A0A0A0F0A100A13-0A280A2A-0A300A320A330A350A360A380A390A59-0A5C0A5E0A72-0A740A85-0A8D0A8F-0A910A93-0AA80AAA-0AB00AB20AB30AB5-0AB90ABD0AD00AE00AE10B05-0B0C0B0F0B100B13-0B280B2A-0B300B320B330B35-0B390B3D0B5C0B5D0B5F-0B610B710B830B85-0B8A0B8E-0B900B92-0B950B990B9A0B9C0B9E0B9F0BA30BA40BA8-0BAA0BAE-0BB90BD00C05-0C0C0C0E-0C100C12-0C280C2A-0C390C3D0C580C590C600C610C85-0C8C0C8E-0C900C92-0CA80CAA-0CB30CB5-0CB90CBD0CDE0CE00CE10CF10CF20D05-0D0C0D0E-0D100D12-0D3A0D3D0D4E0D600D610D7A-0D7F0D85-0D960D9A-0DB10DB3-0DBB0DBD0DC0-0DC60E01-0E300E320E330E40-0E460E810E820E840E870E880E8A0E8D0E94-0E970E99-0E9F0EA1-0EA30EA50EA70EAA0EAB0EAD-0EB00EB20EB30EBD0EC0-0EC40EC60EDC-0EDF0F000F40-0F470F49-0F6C0F88-0F8C1000-102A103F1050-1055105A-105D106110651066106E-10701075-1081108E10A0-10C510C710CD10D0-10FA10FC-1248124A-124D1250-12561258125A-125D1260-1288128A-128D1290-12B012B2-12B512B8-12BE12C012C2-12C512C8-12D612D8-13101312-13151318-135A1380-138F13A0-13F41401-166C166F-167F1681-169A16A0-16EA16F1-16F81700-170C170E-17111720-17311740-17511760-176C176E-17701780-17B317D717DC1820-18771880-18A818AA18B0-18F51900-191E1950-196D1970-19741980-19AB19C1-19C71A00-1A161A20-1A541AA71B05-1B331B45-1B4B1B83-1BA01BAE1BAF1BBA-1BE51C00-1C231C4D-1C4F1C5A-1C7D1CE9-1CEC1CEE-1CF11CF51CF61D00-1DBF1E00-1F151F18-1F1D1F20-1F451F48-1F4D1F50-1F571F591F5B1F5D1F5F-1F7D1F80-1FB41FB6-1FBC1FBE1FC2-1FC41FC6-1FCC1FD0-1FD31FD6-1FDB1FE0-1FEC1FF2-1FF41FF6-1FFC2071207F2090-209C21022107210A-211321152119-211D212421262128212A-212D212F-2139213C-213F2145-2149214E218321842C00-2C2E2C30-2C5E2C60-2CE42CEB-2CEE2CF22CF32D00-2D252D272D2D2D30-2D672D6F2D80-2D962DA0-2DA62DA8-2DAE2DB0-2DB62DB8-2DBE2DC0-2DC62DC8-2DCE2DD0-2DD62DD8-2DDE2E2F300530063031-3035303B303C3041-3096309D-309F30A1-30FA30FC-30FF3105-312D3131-318E31A0-31BA31F0-31FF3400-4DB54E00-9FCCA000-A48CA4D0-A4FDA500-A60CA610-A61FA62AA62BA640-A66EA67F-A69DA6A0-A6E5A717-A71FA722-A788A78B-A78EA790-A7ADA7B0A7B1A7F7-A801A803-A805A807-A80AA80C-A822A840-A873A882-A8B3A8F2-A8F7A8FBA90A-A925A930-A946A960-A97CA984-A9B2A9CFA9E0-A9E4A9E6-A9EFA9FA-A9FEAA00-AA28AA40-AA42AA44-AA4BAA60-AA76AA7AAA7E-AAAFAAB1AAB5AAB6AAB9-AABDAAC0AAC2AADB-AADDAAE0-AAEAAAF2-AAF4AB01-AB06AB09-AB0EAB11-AB16AB20-AB26AB28-AB2EAB30-AB5AAB5C-AB5FAB64AB65ABC0-ABE2AC00-D7A3D7B0-D7C6D7CB-D7FBF900-FA6DFA70-FAD9FB00-FB06FB13-FB17FB1DFB1F-FB28FB2A-FB36FB38-FB3CFB3EFB40FB41FB43FB44FB46-FBB1FBD3-FD3DFD50-FD8FFD92-FDC7FDF0-FDFBFE70-FE74FE76-FEFCFF21-FF3AFF41-FF5AFF66-FFBEFFC2-FFC7FFCA-FFCFFFD2-FFD7FFDA-FFDC\")));\n    Opal.const_set($nesting[0], 'P_Nl', self.$unpack_hex_range(\"16EE-16F02160-21822185-218830073021-30293038-303AA6E6-A6EF\"));\n    Opal.const_set($nesting[0], 'P_Nd', $rb_plus(\"0-9\", self.$unpack_hex_range(\"0660-066906F0-06F907C0-07C90966-096F09E6-09EF0A66-0A6F0AE6-0AEF0B66-0B6F0BE6-0BEF0C66-0C6F0CE6-0CEF0D66-0D6F0DE6-0DEF0E50-0E590ED0-0ED90F20-0F291040-10491090-109917E0-17E91810-18191946-194F19D0-19D91A80-1A891A90-1A991B50-1B591BB0-1BB91C40-1C491C50-1C59A620-A629A8D0-A8D9A900-A909A9D0-A9D9A9F0-A9F9AA50-AA59ABF0-ABF9FF10-FF19\")));\n    Opal.const_set($nesting[0], 'P_Pc', self.$unpack_hex_range(\"005F203F20402054FE33FE34FE4D-FE4FFF3F\"));\n    Opal.const_set($nesting[0], 'CC_ALPHA', \"\" + ($$($nesting, 'P_L')) + ($$($nesting, 'P_Nl')));\n    Opal.const_set($nesting[0], 'CG_ALPHA', \"\" + \"[\" + ($$($nesting, 'CC_ALPHA')) + \"]\");\n    Opal.const_set($nesting[0], 'CC_ALNUM', \"\" + ($$($nesting, 'CC_ALPHA')) + ($$($nesting, 'P_Nd')));\n    Opal.const_set($nesting[0], 'CG_ALNUM', \"\" + \"[\" + ($$($nesting, 'CC_ALNUM')) + \"]\");\n    Opal.const_set($nesting[0], 'CC_WORD', \"\" + ($$($nesting, 'CC_ALNUM')) + ($$($nesting, 'P_Pc')));\n    Opal.const_set($nesting[0], 'CG_WORD', \"\" + \"[\" + ($$($nesting, 'CC_WORD')) + \"]\");\n    Opal.const_set($nesting[0], 'CG_BLANK', \"[ \\\\t]\");\n    Opal.const_set($nesting[0], 'CC_EOL', \"(?=\\\\n|$)\");\n    Opal.const_set($nesting[0], 'CG_GRAPH', \"[^\\\\s\\\\x00-\\\\x1F\\\\x7F]\");\n    Opal.const_set($nesting[0], 'CC_ALL', \"[\\\\s\\\\S]\");\n    Opal.const_set($nesting[0], 'CC_ANY', \"[^\\\\n]\");\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"strscan\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;\n\n  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$-', '$private']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'StringScanner');\n\n    var $nesting = [self].concat($parent_nesting), $StringScanner_initialize$1, $StringScanner_beginning_of_line$ques$2, $StringScanner_scan$3, $StringScanner_scan_until$4, $StringScanner_$$$5, $StringScanner_check$6, $StringScanner_check_until$7, $StringScanner_peek$8, $StringScanner_eos$ques$9, $StringScanner_exist$ques$10, $StringScanner_skip$11, $StringScanner_skip_until$12, $StringScanner_get_byte$13, $StringScanner_match$ques$14, $StringScanner_pos$eq$15, $StringScanner_matched_size$16, $StringScanner_post_match$17, $StringScanner_pre_match$18, $StringScanner_reset$19, $StringScanner_rest$20, $StringScanner_rest$ques$21, $StringScanner_rest_size$22, $StringScanner_terminate$23, $StringScanner_unscan$24, $StringScanner_anchor$25;\n\n    self.$$prototype.pos = self.$$prototype.string = self.$$prototype.working = self.$$prototype.matched = self.$$prototype.prev_pos = self.$$prototype.match = nil;\n    \n    self.$attr_reader(\"pos\");\n    self.$attr_reader(\"matched\");\n    \n    Opal.def(self, '$initialize', $StringScanner_initialize$1 = function $$initialize(string) {\n      var self = this;\n\n      \n      self.string = string;\n      self.pos = 0;\n      self.matched = nil;\n      self.working = string;\n      return (self.match = []);\n    }, $StringScanner_initialize$1.$$arity = 1);\n    self.$attr_reader(\"string\");\n    \n    Opal.def(self, '$beginning_of_line?', $StringScanner_beginning_of_line$ques$2 = function() {\n      var self = this;\n\n      return self.pos === 0 || self.string.charAt(self.pos - 1) === \"\\n\"\n    }, $StringScanner_beginning_of_line$ques$2.$$arity = 0);\n    Opal.alias(self, \"bol?\", \"beginning_of_line?\");\n    \n    Opal.def(self, '$scan', $StringScanner_scan$3 = function $$scan(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n      else if (typeof(result) === 'object') {\n        self.prev_pos = self.pos;\n        self.pos     += result[0].length;\n        self.working  = self.working.substring(result[0].length);\n        self.matched  = result[0];\n        self.match    = result;\n\n        return result[0];\n      }\n      else if (typeof(result) === 'string') {\n        self.pos     += result.length;\n        self.working  = self.working.substring(result.length);\n\n        return result;\n      }\n      else {\n        return nil;\n      }\n    ;\n    }, $StringScanner_scan$3.$$arity = 1);\n    \n    Opal.def(self, '$scan_until', $StringScanner_scan_until$4 = function $$scan_until(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var pos     = self.pos,\n          working = self.working,\n          result;\n\n      while (true) {\n        result   = pattern.exec(working);\n        pos     += 1;\n        working  = working.substr(1);\n\n        if (result == null) {\n          if (working.length === 0) {\n            return self.matched = nil;\n          }\n\n          continue;\n        }\n\n        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);\n        self.prev_pos = pos - 1;\n        self.pos      = pos;\n        self.working  = working.substr(result[0].length);\n\n        return self.matched;\n      }\n    ;\n    }, $StringScanner_scan_until$4.$$arity = 1);\n    \n    Opal.def(self, '$[]', $StringScanner_$$$5 = function(idx) {\n      var self = this;\n\n      \n      var match = self.match;\n\n      if (idx < 0) {\n        idx += match.length;\n      }\n\n      if (idx < 0 || idx >= match.length) {\n        return nil;\n      }\n\n      if (match[idx] == null) {\n        return nil;\n      }\n\n      return match[idx];\n    \n    }, $StringScanner_$$$5.$$arity = 1);\n    \n    Opal.def(self, '$check', $StringScanner_check$6 = function $$check(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n\n      return self.matched = result[0];\n    ;\n    }, $StringScanner_check$6.$$arity = 1);\n    \n    Opal.def(self, '$check_until', $StringScanner_check_until$7 = function $$check_until(pattern) {\n      var self = this;\n\n      \n      var prev_pos = self.prev_pos,\n          pos      = self.pos;\n\n      var result = self.$scan_until(pattern);\n\n      if (result !== nil) {\n        self.matched = result.substr(-1);\n        self.working = self.string.substr(pos);\n      }\n\n      self.prev_pos = prev_pos;\n      self.pos      = pos;\n\n      return result;\n    \n    }, $StringScanner_check_until$7.$$arity = 1);\n    \n    Opal.def(self, '$peek', $StringScanner_peek$8 = function $$peek(length) {\n      var self = this;\n\n      return self.working.substring(0, length)\n    }, $StringScanner_peek$8.$$arity = 1);\n    \n    Opal.def(self, '$eos?', $StringScanner_eos$ques$9 = function() {\n      var self = this;\n\n      return self.working.length === 0\n    }, $StringScanner_eos$ques$9.$$arity = 0);\n    \n    Opal.def(self, '$exist?', $StringScanner_exist$ques$10 = function(pattern) {\n      var self = this;\n\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return nil;\n      }\n      else if (result.index == 0) {\n        return 0;\n      }\n      else {\n        return result.index + 1;\n      }\n    \n    }, $StringScanner_exist$ques$10.$$arity = 1);\n    \n    Opal.def(self, '$skip', $StringScanner_skip$11 = function $$skip(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return self.matched = nil;\n      }\n      else {\n        var match_str = result[0];\n        var match_len = match_str.length;\n\n        self.matched   = match_str;\n        self.prev_pos  = self.pos;\n        self.pos      += match_len;\n        self.working   = self.working.substring(match_len);\n\n        return match_len;\n      }\n    ;\n    }, $StringScanner_skip$11.$$arity = 1);\n    \n    Opal.def(self, '$skip_until', $StringScanner_skip_until$12 = function $$skip_until(pattern) {\n      var self = this;\n\n      \n      var result = self.$scan_until(pattern);\n\n      if (result === nil) {\n        return nil;\n      }\n      else {\n        self.matched = result.substr(-1);\n\n        return result.length;\n      }\n    \n    }, $StringScanner_skip_until$12.$$arity = 1);\n    \n    Opal.def(self, '$get_byte', $StringScanner_get_byte$13 = function $$get_byte() {\n      var self = this;\n\n      \n      var result = nil;\n\n      if (self.pos < self.string.length) {\n        self.prev_pos  = self.pos;\n        self.pos      += 1;\n        result      = self.matched = self.working.substring(0, 1);\n        self.working   = self.working.substring(1);\n      }\n      else {\n        self.matched = nil;\n      }\n\n      return result;\n    \n    }, $StringScanner_get_byte$13.$$arity = 0);\n    Opal.alias(self, \"getch\", \"get_byte\");\n    \n    Opal.def(self, '$match?', $StringScanner_match$ques$14 = function(pattern) {\n      var self = this;\n\n      \n      pattern = self.$anchor(pattern);\n      \n      var result = pattern.exec(self.working);\n\n      if (result == null) {\n        return nil;\n      }\n      else {\n        self.prev_pos = self.pos;\n\n        return result[0].length;\n      }\n    ;\n    }, $StringScanner_match$ques$14.$$arity = 1);\n    \n    Opal.def(self, '$pos=', $StringScanner_pos$eq$15 = function(pos) {\n      var self = this;\n\n      \n      \n      if (pos < 0) {\n        pos += self.string.$length();\n      }\n    ;\n      self.pos = pos;\n      return (self.working = self.string.slice(pos));\n    }, $StringScanner_pos$eq$15.$$arity = 1);\n    \n    Opal.def(self, '$matched_size', $StringScanner_matched_size$16 = function $$matched_size() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.matched.length\n    \n    }, $StringScanner_matched_size$16.$$arity = 0);\n    \n    Opal.def(self, '$post_match', $StringScanner_post_match$17 = function $$post_match() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.string.substr(self.pos);\n    \n    }, $StringScanner_post_match$17.$$arity = 0);\n    \n    Opal.def(self, '$pre_match', $StringScanner_pre_match$18 = function $$pre_match() {\n      var self = this;\n\n      \n      if (self.matched === nil) {\n        return nil;\n      }\n\n      return self.string.substr(0, self.prev_pos);\n    \n    }, $StringScanner_pre_match$18.$$arity = 0);\n    \n    Opal.def(self, '$reset', $StringScanner_reset$19 = function $$reset() {\n      var self = this;\n\n      \n      self.working = self.string;\n      self.matched = nil;\n      return (self.pos = 0);\n    }, $StringScanner_reset$19.$$arity = 0);\n    \n    Opal.def(self, '$rest', $StringScanner_rest$20 = function $$rest() {\n      var self = this;\n\n      return self.working\n    }, $StringScanner_rest$20.$$arity = 0);\n    \n    Opal.def(self, '$rest?', $StringScanner_rest$ques$21 = function() {\n      var self = this;\n\n      return self.working.length !== 0\n    }, $StringScanner_rest$ques$21.$$arity = 0);\n    \n    Opal.def(self, '$rest_size', $StringScanner_rest_size$22 = function $$rest_size() {\n      var self = this;\n\n      return self.$rest().$size()\n    }, $StringScanner_rest_size$22.$$arity = 0);\n    \n    Opal.def(self, '$terminate', $StringScanner_terminate$23 = function $$terminate() {\n      var self = this, $writer = nil;\n\n      \n      self.match = nil;\n      \n      $writer = [self.string.$length()];\n      $send(self, 'pos=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];;\n    }, $StringScanner_terminate$23.$$arity = 0);\n    \n    Opal.def(self, '$unscan', $StringScanner_unscan$24 = function $$unscan() {\n      var self = this;\n\n      \n      self.pos = self.prev_pos;\n      self.prev_pos = nil;\n      self.match = nil;\n      return self;\n    }, $StringScanner_unscan$24.$$arity = 0);\n    self.$private();\n    return (Opal.def(self, '$anchor', $StringScanner_anchor$25 = function $$anchor(pattern) {\n      var self = this;\n\n      \n      var flags = pattern.toString().match(/\\/([^\\/]+)$/);\n      flags = flags ? flags[1] : undefined;\n      return new RegExp('^(?:' + pattern.source + ')', flags);\n    \n    }, $StringScanner_anchor$25.$$arity = 1), nil) && 'anchor';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/js/opal_ext\");\n  self.$require(\"asciidoctor/js/rx\");\n  return self.$require(\"strscan\");\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext/nil_or_empty\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$method_defined?']);\n  \n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'NilClass');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"nil?\")\n    }\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'String');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Array');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null, $nesting);\n  (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Hash');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"empty?\")\n    }\n  })($nesting[0], null, $nesting);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Numeric');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    if ($truthy(self['$method_defined?'](\"nil_or_empty?\"))) {\n      return nil\n    } else {\n      return Opal.alias(self, \"nil_or_empty?\", \"nil?\")\n    }\n  })($nesting[0], null, $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext/hash/merge\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var $$1, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$==', '$arity', '$instance_method', '$send', '$new', '$<', '$length', '$>', '$inject', '$merge', '$[]']);\n  if ($$($nesting, 'Hash').$instance_method(\"merge\").$arity()['$=='](1)) {\n    return $$($nesting, 'Hash').$send(\"prepend\", $send($$($nesting, 'Module'), 'new', [], ($$1 = function(){var self = $$1.$$s || this, $merge$2;\n\n    return (Opal.def(self, '$merge', $merge$2 = function $$merge($a) {\n        var $post_args, args, $$3, $iter = $merge$2.$$p, $yield = $iter || nil, self = this, len = nil;\n\n        if ($iter) $merge$2.$$p = null;\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        if ($truthy($rb_lt((len = args.$length()), 1))) {\n          return $send(self, Opal.find_super_dispatcher(self, 'merge', $merge$2, false), [$hash2([], {})], null)\n        } else {\n          \n          if ($truthy($rb_gt(len, 1))) {\n            return $send(args, 'inject', [self], ($$3 = function(acc, arg){var self = $$3.$$s || this;\n\n            \n              \n              if (acc == null) {\n                acc = nil;\n              };\n              \n              if (arg == null) {\n                arg = nil;\n              };\n              return acc.$merge(arg);}, $$3.$$s = self, $$3.$$arity = 2, $$3))\n          } else {\n            \n            return $send(self, Opal.find_super_dispatcher(self, 'merge', $merge$2, false), [args['$[]'](0)], null);\n          };\n        };\n      }, $merge$2.$$arity = -1), nil) && 'merge'}, $$1.$$s = self, $$1.$$arity = 0, $$1)))\n  } else {\n    return nil\n  }\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext/match_data/names\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, $klass = Opal.klass;\n\n  Opal.add_stubs(['$method_defined?']);\n  if ($truthy($$($nesting, 'MatchData')['$method_defined?'](\"names\"))) {\n    return nil\n  } else {\n    return (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'MatchData');\n\n      var $nesting = [self].concat($parent_nesting), $MatchData_names$1;\n\n      return (Opal.def(self, '$names', $MatchData_names$1 = function $$names() {\n        var self = this;\n\n        return []\n      }, $MatchData_names$1.$$arity = 0), nil) && 'names'\n    })($nesting[0], null, $nesting)\n  }\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/core_ext\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$==']);\n  \n  self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/nil_or_empty\");\n  self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/hash/merge\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    return self.$require(\"asciidoctor/core_ext.rb\"+ '/../' + \"core_ext/match_data/names\")\n  } else {\n    return nil\n  };\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/helpers\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$module_function', '$require', '$include?', '$include', '$==', '$===', '$path', '$message', '$raise', '$warn', '$logger', '$chomp', '$empty?', '$slice', '$unpack', '$[]', '$byteslice', '$bytesize', '$[]=', '$-', '$map', '$rstrip', '$encode', '$encoding', '$nil_or_empty?', '$!=', '$tap', '$each_line', '$<<', '$match?', '$gsub', '$rindex', '$index', '$basename', '$extname', '$!', '$length', '$directory?', '$dirname', '$mkdir_p', '$mkdir', '$private_constant', '$join', '$divmod', '$*', '$+', '$to_i', '$to_s', '$chr', '$ord', '$class_for_name', '$const_get']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Helpers');\n\n      var $nesting = [self].concat($parent_nesting), $Helpers_require_library$1, $Helpers_prepare_source_array$2, $Helpers_prepare_source_string$11, $Helpers_uriish$ques$16, $Helpers_encode_uri_component$17, $Helpers_encode_spaces_in_uri$18, $Helpers_rootname$19, $Helpers_basename$20, $Helpers_extname$ques$21, $Helpers_extname$22, $Helpers_extname$23, $Helpers_mkdir_p$24, $Helpers_int_to_roman$25, $Helpers_nextval$27, $Helpers_resolve_class$28, $Helpers_class_for_name$29;\n\n      \n      self.$module_function();\n      \n      Opal.def(self, '$require_library', $Helpers_require_library$1 = function $$require_library(name, gem_name, on_failure) {\n        var self = this, $case = nil, details = nil;\n        if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n        \n        \n        if (gem_name == null) {\n          gem_name = true;\n        };\n        \n        if (on_failure == null) {\n          on_failure = \"abort\";\n        };\n        try {\n          return self.$require(name)\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('::', 'LoadError')])) {\n            try {\n              \n              if ($truthy(self['$include?']($$($nesting, 'Logging')))) {\n              } else {\n                self.$include($$($nesting, 'Logging'))\n              };\n              if ($truthy(gem_name)) {\n                \n                if (gem_name['$=='](true)) {\n                  gem_name = name};\n                $case = on_failure;\n                if (\"abort\"['$===']($case)) {\n                details = (function() {if ($gvars[\"!\"].$path()['$=='](gem_name)) {\n                  return \"\"\n                } else {\n                  return \"\" + \" (reason: \" + ((function() {if ($truthy($gvars[\"!\"].$path())) {\n                    return \"\" + \"cannot load '\" + ($gvars[\"!\"].$path()) + \"'\"\n                  } else {\n                    return $gvars[\"!\"].$message()\n                  }; return nil; })()) + \")\"\n                }; return nil; })();\n                self.$raise($$$('::', 'LoadError'), \"\" + \"asciidoctor: FAILED: required gem '\" + (gem_name) + \"' is not available\" + (details) + \". Processing aborted.\");}\n                else if (\"warn\"['$===']($case)) {\n                details = (function() {if ($gvars[\"!\"].$path()['$=='](gem_name)) {\n                  return \"\"\n                } else {\n                  return \"\" + \" (reason: \" + ((function() {if ($truthy($gvars[\"!\"].$path())) {\n                    return \"\" + \"cannot load '\" + ($gvars[\"!\"].$path()) + \"'\"\n                  } else {\n                    return $gvars[\"!\"].$message()\n                  }; return nil; })()) + \")\"\n                }; return nil; })();\n                self.$logger().$warn(\"\" + \"optional gem '\" + (gem_name) + \"' is not available\" + (details) + \". Functionality disabled.\");};\n              } else {\n                $case = on_failure;\n                if (\"abort\"['$===']($case)) {self.$raise($$$('::', 'LoadError'), \"\" + \"asciidoctor: FAILED: \" + ($gvars[\"!\"].$message().$chomp(\".\")) + \". Processing aborted.\")}\n                else if (\"warn\"['$===']($case)) {self.$logger().$warn(\"\" + ($gvars[\"!\"].$message().$chomp(\".\")) + \". Functionality disabled.\")}\n              };\n              return nil;\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $Helpers_require_library$1.$$arity = -2);\n      \n      Opal.def(self, '$prepare_source_array', $Helpers_prepare_source_array$2 = function $$prepare_source_array(data, trim_end) {\n        var $$3, $$4, $$5, $$6, $$7, $$8, $$9, $$10, self = this, leading_2_bytes = nil, leading_bytes = nil, first = nil, $writer = nil;\n\n        \n        \n        if (trim_end == null) {\n          trim_end = true;\n        };\n        if ($truthy(data['$empty?']())) {\n          return []};\n        if ((leading_2_bytes = (leading_bytes = (first = data['$[]'](0)).$unpack(\"C3\")).$slice(0, 2))['$==']($$($nesting, 'BOM_BYTES_UTF_16LE'))) {\n          \n          \n          $writer = [0, first.$byteslice(2, first.$bytesize())];\n          $send(data, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return (function() {if ($truthy(trim_end)) {\n            return $send(data, 'map', [], ($$3 = function(line){var self = $$3.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16LE')).$rstrip();}, $$3.$$s = self, $$3.$$arity = 1, $$3))\n          } else {\n            return $send(data, 'map', [], ($$4 = function(line){var self = $$4.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16LE')).$chomp();}, $$4.$$s = self, $$4.$$arity = 1, $$4))\n          }; return nil; })();\n        } else if (leading_2_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_16BE'))) {\n          \n          \n          $writer = [0, first.$byteslice(2, first.$bytesize())];\n          $send(data, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return (function() {if ($truthy(trim_end)) {\n            return $send(data, 'map', [], ($$5 = function(line){var self = $$5.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16BE')).$rstrip();}, $$5.$$s = self, $$5.$$arity = 1, $$5))\n          } else {\n            return $send(data, 'map', [], ($$6 = function(line){var self = $$6.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16BE')).$chomp();}, $$6.$$s = self, $$6.$$arity = 1, $$6))\n          }; return nil; })();\n        } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {\n          \n          $writer = [0, first.$byteslice(3, first.$bytesize())];\n          $send(data, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if (first.$encoding()['$==']($$($nesting, 'UTF_8'))) {\n          if ($truthy(trim_end)) {\n            return $send(data, 'map', [], ($$7 = function(line){var self = $$7.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$rstrip();}, $$7.$$s = self, $$7.$$arity = 1, $$7))\n          } else {\n            return $send(data, 'map', [], ($$8 = function(line){var self = $$8.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return line.$chomp();}, $$8.$$s = self, $$8.$$arity = 1, $$8))\n          }\n        } else if ($truthy(trim_end)) {\n          return $send(data, 'map', [], ($$9 = function(line){var self = $$9.$$s || this;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            return line.$encode($$($nesting, 'UTF_8')).$rstrip();}, $$9.$$s = self, $$9.$$arity = 1, $$9))\n        } else {\n          return $send(data, 'map', [], ($$10 = function(line){var self = $$10.$$s || this;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            return line.$encode($$($nesting, 'UTF_8')).$chomp();}, $$10.$$s = self, $$10.$$arity = 1, $$10))\n        };\n      }, $Helpers_prepare_source_array$2.$$arity = -2);\n      \n      Opal.def(self, '$prepare_source_string', $Helpers_prepare_source_string$11 = function $$prepare_source_string(data, trim_end) {\n        var $$12, $$14, self = this, leading_2_bytes = nil, leading_bytes = nil;\n\n        \n        \n        if (trim_end == null) {\n          trim_end = true;\n        };\n        if ($truthy(data['$nil_or_empty?']())) {\n          return []};\n        if ((leading_2_bytes = (leading_bytes = data.$unpack(\"C3\")).$slice(0, 2))['$==']($$($nesting, 'BOM_BYTES_UTF_16LE'))) {\n          data = data.$byteslice(2, data.$bytesize()).$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16LE'))\n        } else if (leading_2_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_16BE'))) {\n          data = data.$byteslice(2, data.$bytesize()).$encode($$($nesting, 'UTF_8'), $$$($$$('::', 'Encoding'), 'UTF_16BE'))\n        } else if (leading_bytes['$==']($$($nesting, 'BOM_BYTES_UTF_8'))) {\n          \n          data = data.$byteslice(3, data.$bytesize());\n          if (data.$encoding()['$==']($$($nesting, 'UTF_8'))) {\n          } else {\n            data = data.$encode($$($nesting, 'UTF_8'))\n          };\n        } else if ($truthy(data.$encoding()['$!=']($$($nesting, 'UTF_8')))) {\n          data = data.$encode($$($nesting, 'UTF_8'))};\n        if ($truthy(trim_end)) {\n          return $send([], 'tap', [], ($$12 = function(lines){var self = $$12.$$s || this, $$13;\n\n          \n            \n            if (lines == null) {\n              lines = nil;\n            };\n            return $send(data, 'each_line', [], ($$13 = function(line){var self = $$13.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return lines['$<<'](line.$rstrip());}, $$13.$$s = self, $$13.$$arity = 1, $$13));}, $$12.$$s = self, $$12.$$arity = 1, $$12))\n        } else {\n          return $send([], 'tap', [], ($$14 = function(lines){var self = $$14.$$s || this, $$15;\n\n          \n            \n            if (lines == null) {\n              lines = nil;\n            };\n            return $send(data, 'each_line', [], ($$15 = function(line){var self = $$15.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return lines['$<<'](line.$chomp());}, $$15.$$s = self, $$15.$$arity = 1, $$15));}, $$14.$$s = self, $$14.$$arity = 1, $$14))\n        };\n      }, $Helpers_prepare_source_string$11.$$arity = -2);\n      \n      Opal.def(self, '$uriish?', $Helpers_uriish$ques$16 = function(str) {\n        var $a, self = this;\n\n        return ($truthy($a = str['$include?'](\":\")) ? $$($nesting, 'UriSniffRx')['$match?'](str) : $a)\n      }, $Helpers_uriish$ques$16.$$arity = 1);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        \n        Opal.def(self, '$encode_uri_component', $Helpers_encode_uri_component$17 = function $$encode_uri_component(str) {\n          var self = this;\n\n          \n        return encodeURIComponent(str).replace(/%20|[!'()*]/g, function (m) {\n          return m === '%20' ? '+' : '%' + m.charCodeAt(0).toString(16)\n        })\n      \n        }, $Helpers_encode_uri_component$17.$$arity = 1)\n      } else {\n        nil\n      };\n      \n      Opal.def(self, '$encode_spaces_in_uri', $Helpers_encode_spaces_in_uri$18 = function $$encode_spaces_in_uri(str) {\n        var self = this;\n\n        if ($truthy(str['$include?'](\" \"))) {\n          \n          return str.$gsub(\" \", \"%20\");\n        } else {\n          return str\n        }\n      }, $Helpers_encode_spaces_in_uri$18.$$arity = 1);\n      \n      Opal.def(self, '$rootname', $Helpers_rootname$19 = function $$rootname(filename) {\n        var self = this, last_dot_idx = nil;\n\n        if ($truthy((last_dot_idx = filename.$rindex(\".\")))) {\n          if ($truthy(filename.$index(\"/\", last_dot_idx))) {\n            return filename\n          } else {\n            \n            return filename.$slice(0, last_dot_idx);\n          }\n        } else {\n          return filename\n        }\n      }, $Helpers_rootname$19.$$arity = 1);\n      \n      Opal.def(self, '$basename', $Helpers_basename$20 = function $$basename(filename, drop_ext) {\n        var self = this;\n\n        \n        \n        if (drop_ext == null) {\n          drop_ext = nil;\n        };\n        if ($truthy(drop_ext)) {\n          return $$$('::', 'File').$basename(filename, (function() {if (drop_ext['$=='](true)) {\n            \n            return self.$extname(filename);\n          } else {\n            return drop_ext\n          }; return nil; })())\n        } else {\n          return $$$('::', 'File').$basename(filename)\n        };\n      }, $Helpers_basename$20.$$arity = -2);\n      \n      Opal.def(self, '$extname?', $Helpers_extname$ques$21 = function(path) {\n        var $a, self = this, last_dot_idx = nil;\n\n        return ($truthy($a = (last_dot_idx = path.$rindex(\".\"))) ? path.$index(\"/\", last_dot_idx)['$!']() : $a)\n      }, $Helpers_extname$ques$21.$$arity = 1);\n      if ($truthy($$$($$$('::', 'File'), 'ALT_SEPARATOR'))) {\n        \n        Opal.def(self, '$extname', $Helpers_extname$22 = function $$extname(path, fallback) {\n          var $a, self = this, last_dot_idx = nil;\n\n          \n          \n          if (fallback == null) {\n            fallback = \"\";\n          };\n          if ($truthy((last_dot_idx = path.$rindex(\".\")))) {\n            if ($truthy(($truthy($a = path.$index(\"/\", last_dot_idx)) ? $a : path.$index($$$($$$('::', 'File'), 'ALT_SEPARATOR'), last_dot_idx)))) {\n              return fallback\n            } else {\n              \n              return path.$slice(last_dot_idx, path.$length());\n            }\n          } else {\n            return fallback\n          };\n        }, $Helpers_extname$22.$$arity = -2)\n      } else {\n        \n        Opal.def(self, '$extname', $Helpers_extname$23 = function $$extname(path, fallback) {\n          var self = this, last_dot_idx = nil;\n\n          \n          \n          if (fallback == null) {\n            fallback = \"\";\n          };\n          if ($truthy((last_dot_idx = path.$rindex(\".\")))) {\n            if ($truthy(path.$index(\"/\", last_dot_idx))) {\n              return fallback\n            } else {\n              \n              return path.$slice(last_dot_idx, path.$length());\n            }\n          } else {\n            return fallback\n          };\n        }, $Helpers_extname$23.$$arity = -2)\n      };\n      \n      Opal.def(self, '$mkdir_p', $Helpers_mkdir_p$24 = function $$mkdir_p(dir) {\n        var self = this, parent_dir = nil;\n\n        if ($truthy($$$('::', 'File')['$directory?'](dir))) {\n          return nil\n        } else {\n          \n          if ((parent_dir = $$$('::', 'File').$dirname(dir))['$=='](\".\")) {\n          } else {\n            self.$mkdir_p(parent_dir)\n          };\n          \n          try {\n            return $$$('::', 'Dir').$mkdir(dir)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$$('::', 'SystemCallError')])) {\n              try {\n                if ($truthy($$$('::', 'File')['$directory?'](dir))) {\n                  return nil\n                } else {\n                  return self.$raise()\n                }\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          };;\n        }\n      }, $Helpers_mkdir_p$24.$$arity = 1);\n      Opal.const_set($nesting[0], 'ROMAN_NUMERALS', $hash2([\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"], {\"M\": 1000, \"CM\": 900, \"D\": 500, \"CD\": 400, \"C\": 100, \"XC\": 90, \"L\": 50, \"XL\": 40, \"X\": 10, \"IX\": 9, \"V\": 5, \"IV\": 4, \"I\": 1}));\n      self.$private_constant(\"ROMAN_NUMERALS\");\n      \n      Opal.def(self, '$int_to_roman', $Helpers_int_to_roman$25 = function $$int_to_roman(val) {\n        var $$26, self = this;\n\n        return $send($$($nesting, 'ROMAN_NUMERALS'), 'map', [], ($$26 = function(l, i){var self = $$26.$$s || this, $a, $b, repeat = nil;\n\n        \n          \n          if (l == null) {\n            l = nil;\n          };\n          \n          if (i == null) {\n            i = nil;\n          };\n          $b = val.$divmod(i), $a = Opal.to_ary($b), (repeat = ($a[0] == null ? nil : $a[0])), (val = ($a[1] == null ? nil : $a[1])), $b;\n          return $rb_times(l, repeat);}, $$26.$$s = self, $$26.$$arity = 2, $$26)).$join()\n      }, $Helpers_int_to_roman$25.$$arity = 1);\n      \n      Opal.def(self, '$nextval', $Helpers_nextval$27 = function $$nextval(current) {\n        var self = this, intval = nil;\n\n        if ($truthy($$$('::', 'Integer')['$==='](current))) {\n          return $rb_plus(current, 1)\n        } else {\n          \n          intval = current.$to_i();\n          if ($truthy(intval.$to_s()['$!='](current.$to_s()))) {\n            return $rb_plus(current['$[]'](0).$ord(), 1).$chr()\n          } else {\n            return $rb_plus(intval, 1)\n          };\n        }\n      }, $Helpers_nextval$27.$$arity = 1);\n      \n      Opal.def(self, '$resolve_class', $Helpers_resolve_class$28 = function $$resolve_class(object) {\n        var self = this;\n\n        if ($truthy($$$('::', 'Class')['$==='](object))) {\n          return object\n        } else {\n          \n          if ($truthy($$$('::', 'String')['$==='](object))) {\n            \n            return self.$class_for_name(object);\n          } else {\n            return nil\n          };\n        }\n      }, $Helpers_resolve_class$28.$$arity = 1);\n      \n      Opal.def(self, '$class_for_name', $Helpers_class_for_name$29 = function $$class_for_name(qualified_name) {\n        var self = this, resolved = nil;\n\n        try {\n          \n          if ($truthy($$$('::', 'Class')['$===']((resolved = $$$('::', 'Object').$const_get(qualified_name, false))))) {\n          } else {\n            self.$raise()\n          };\n          return resolved;\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              return self.$raise($$$('::', 'NameError'), \"\" + \"Could not resolve class for name: \" + (qualified_name))\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        }\n      }, $Helpers_class_for_name$29.$$arity = 1);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"logger\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$include', '$to_h', '$map', '$constants', '$const_get', '$to_s', '$format', '$chr', '$strftime', '$message_as_string', '$===', '$+', '$message', '$class', '$join', '$backtrace', '$inspect', '$attr_reader', '$attr_accessor', '$new', '$key', '$upcase', '$raise', '$add', '$to_proc', '$<=', '$<', '$write', '$call', '$[]', '$now']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Logger');\n\n    var $nesting = [self].concat($parent_nesting), $Logger$1, $Logger_initialize$4, $Logger_level$eq$5, $Logger_info$6, $Logger_debug$7, $Logger_warn$8, $Logger_error$9, $Logger_fatal$10, $Logger_unknown$11, $Logger_info$ques$12, $Logger_debug$ques$13, $Logger_warn$ques$14, $Logger_error$ques$15, $Logger_fatal$ques$16, $Logger_add$17;\n\n    self.$$prototype.level = self.$$prototype.progname = self.$$prototype.pipe = self.$$prototype.formatter = nil;\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Severity');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      Opal.const_set($nesting[0], 'DEBUG', 0);\n      Opal.const_set($nesting[0], 'INFO', 1);\n      Opal.const_set($nesting[0], 'WARN', 2);\n      Opal.const_set($nesting[0], 'ERROR', 3);\n      Opal.const_set($nesting[0], 'FATAL', 4);\n      Opal.const_set($nesting[0], 'UNKNOWN', 5);\n    })($nesting[0], $nesting);\n    self.$include($$($nesting, 'Severity'));\n    Opal.const_set($nesting[0], 'SEVERITY_LABELS', $send($$($nesting, 'Severity').$constants(), 'map', [], ($Logger$1 = function(s){var self = $Logger$1.$$s || this;\n\n    \n      \n      if (s == null) {\n        s = nil;\n      };\n      return [$$($nesting, 'Severity').$const_get(s), s.$to_s()];}, $Logger$1.$$s = self, $Logger$1.$$arity = 1, $Logger$1)).$to_h());\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Formatter');\n\n      var $nesting = [self].concat($parent_nesting), $Formatter_call$2, $Formatter_message_as_string$3;\n\n      \n      Opal.const_set($nesting[0], 'MESSAGE_FORMAT', \"%s, [%s] %5s -- %s: %s\\n\");\n      Opal.const_set($nesting[0], 'DATE_TIME_FORMAT', \"%Y-%m-%dT%H:%M:%S.%6N\");\n      \n      Opal.def(self, '$call', $Formatter_call$2 = function $$call(severity, time, progname, msg) {\n        var self = this;\n\n        return self.$format($$($nesting, 'MESSAGE_FORMAT'), severity.$chr(), time.$strftime($$($nesting, 'DATE_TIME_FORMAT')), severity, progname, self.$message_as_string(msg))\n      }, $Formatter_call$2.$$arity = 4);\n      return (Opal.def(self, '$message_as_string', $Formatter_message_as_string$3 = function $$message_as_string(msg) {\n        var $a, self = this, $case = nil;\n\n        return (function() {$case = msg;\n        if ($$$('::', 'String')['$===']($case)) {return msg}\n        else if ($$$('::', 'Exception')['$===']($case)) {return $rb_plus(\"\" + (msg.$message()) + \" (\" + (msg.$class()) + \")\\n\", ($truthy($a = msg.$backtrace()) ? $a : []).$join(\"\\n\"))}\n        else {return msg.$inspect()}})()\n      }, $Formatter_message_as_string$3.$$arity = 1), nil) && 'message_as_string';\n    })($nesting[0], null, $nesting);\n    self.$attr_reader(\"level\");\n    self.$attr_accessor(\"progname\");\n    self.$attr_accessor(\"formatter\");\n    \n    Opal.def(self, '$initialize', $Logger_initialize$4 = function $$initialize(pipe) {\n      var self = this;\n\n      \n      self.pipe = pipe;\n      self.level = $$($nesting, 'DEBUG');\n      return (self.formatter = $$($nesting, 'Formatter').$new());\n    }, $Logger_initialize$4.$$arity = 1);\n    \n    Opal.def(self, '$level=', $Logger_level$eq$5 = function(severity) {\n      var self = this, level = nil;\n\n      if ($truthy($$$('::', 'Integer')['$==='](severity))) {\n        return (self.level = severity)\n      } else if ($truthy((level = $$($nesting, 'SEVERITY_LABELS').$key(severity.$to_s().$upcase())))) {\n        return (self.level = level)\n      } else {\n        return self.$raise($$($nesting, 'ArgumentError'), \"\" + \"invalid log level: \" + (severity))\n      }\n    }, $Logger_level$eq$5.$$arity = 1);\n    \n    Opal.def(self, '$info', $Logger_info$6 = function $$info(progname) {\n      var $iter = $Logger_info$6.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_info$6.$$p = null;\n      \n      \n      if ($iter) $Logger_info$6.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'INFO'), nil, progname], block.$to_proc());\n    }, $Logger_info$6.$$arity = -1);\n    \n    Opal.def(self, '$debug', $Logger_debug$7 = function $$debug(progname) {\n      var $iter = $Logger_debug$7.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_debug$7.$$p = null;\n      \n      \n      if ($iter) $Logger_debug$7.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'DEBUG'), nil, progname], block.$to_proc());\n    }, $Logger_debug$7.$$arity = -1);\n    \n    Opal.def(self, '$warn', $Logger_warn$8 = function $$warn(progname) {\n      var $iter = $Logger_warn$8.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_warn$8.$$p = null;\n      \n      \n      if ($iter) $Logger_warn$8.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'WARN'), nil, progname], block.$to_proc());\n    }, $Logger_warn$8.$$arity = -1);\n    \n    Opal.def(self, '$error', $Logger_error$9 = function $$error(progname) {\n      var $iter = $Logger_error$9.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_error$9.$$p = null;\n      \n      \n      if ($iter) $Logger_error$9.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'ERROR'), nil, progname], block.$to_proc());\n    }, $Logger_error$9.$$arity = -1);\n    \n    Opal.def(self, '$fatal', $Logger_fatal$10 = function $$fatal(progname) {\n      var $iter = $Logger_fatal$10.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_fatal$10.$$p = null;\n      \n      \n      if ($iter) $Logger_fatal$10.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'FATAL'), nil, progname], block.$to_proc());\n    }, $Logger_fatal$10.$$arity = -1);\n    \n    Opal.def(self, '$unknown', $Logger_unknown$11 = function $$unknown(progname) {\n      var $iter = $Logger_unknown$11.$$p, block = $iter || nil, self = this;\n\n      if ($iter) $Logger_unknown$11.$$p = null;\n      \n      \n      if ($iter) $Logger_unknown$11.$$p = null;;\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      return $send(self, 'add', [$$($nesting, 'UNKNOWN'), nil, progname], block.$to_proc());\n    }, $Logger_unknown$11.$$arity = -1);\n    \n    Opal.def(self, '$info?', $Logger_info$ques$12 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'INFO'))\n    }, $Logger_info$ques$12.$$arity = 0);\n    \n    Opal.def(self, '$debug?', $Logger_debug$ques$13 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'DEBUG'))\n    }, $Logger_debug$ques$13.$$arity = 0);\n    \n    Opal.def(self, '$warn?', $Logger_warn$ques$14 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'WARN'))\n    }, $Logger_warn$ques$14.$$arity = 0);\n    \n    Opal.def(self, '$error?', $Logger_error$ques$15 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'ERROR'))\n    }, $Logger_error$ques$15.$$arity = 0);\n    \n    Opal.def(self, '$fatal?', $Logger_fatal$ques$16 = function() {\n      var self = this;\n\n      return $rb_le(self.level, $$($nesting, 'FATAL'))\n    }, $Logger_fatal$ques$16.$$arity = 0);\n    return (Opal.def(self, '$add', $Logger_add$17 = function $$add(severity, message, progname) {\n      var $iter = $Logger_add$17.$$p, block = $iter || nil, $a, self = this;\n\n      if ($iter) $Logger_add$17.$$p = null;\n      \n      \n      if ($iter) $Logger_add$17.$$p = null;;\n      \n      if (message == null) {\n        message = nil;\n      };\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      if ($truthy($rb_lt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), self.level))) {\n        return true};\n      progname = ($truthy($a = progname) ? $a : self.progname);\n      if ($truthy(message)) {\n      } else if ((block !== nil)) {\n        message = Opal.yieldX(block, [])\n      } else {\n        \n        message = progname;\n        progname = self.progname;\n      };\n      self.pipe.$write(self.formatter.$call(($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : \"ANY\"), $$$('::', 'Time').$now(), progname, message));\n      return true;\n    }, $Logger_add$17.$$arity = -2), nil) && 'add';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/logging\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$require', '$attr_reader', '$progname=', '$-', '$new', '$formatter=', '$level=', '$>', '$[]', '$===', '$inspect', '$tap', '$each', '$constants', '$const_get', '$[]=', '$<<', '$clear', '$empty?', '$max', '$map', '$attr_accessor', '$memoize_logger', '$private', '$private_class_method', '$extend', '$logger', '$merge']);\n  \n  self.$require(\"logger\");\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Logger');\n\n      var $nesting = [self].concat($parent_nesting), $Logger_initialize$1, $Logger_add$2;\n\n      self.$$prototype.max_severity = nil;\n      \n      self.$attr_reader(\"max_severity\");\n      \n      Opal.def(self, '$initialize', $Logger_initialize$1 = function $$initialize($a) {\n        var $post_args, args, $iter = $Logger_initialize$1.$$p, $yield = $iter || nil, self = this, $writer = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Logger_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Logger_initialize$1, false), $zuper, $iter);\n        \n        $writer = [\"asciidoctor\"];\n        $send(self, 'progname=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [$$($nesting, 'BasicFormatter').$new()];\n        $send(self, 'formatter=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [$$($nesting, 'WARN')];\n        $send(self, 'level=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $Logger_initialize$1.$$arity = -1);\n      \n      Opal.def(self, '$add', $Logger_add$2 = function $$add(severity, message, progname) {\n        var $a, $iter = $Logger_add$2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Logger_add$2.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (message == null) {\n          message = nil;\n        };\n        \n        if (progname == null) {\n          progname = nil;\n        };\n        if ($truthy($rb_gt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), (self.max_severity = ($truthy($a = self.max_severity) ? $a : severity))))) {\n          self.max_severity = severity};\n        return $send(self, Opal.find_super_dispatcher(self, 'add', $Logger_add$2, false), $zuper, $iter);\n      }, $Logger_add$2.$$arity = -2);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BasicFormatter');\n\n        var $nesting = [self].concat($parent_nesting), $BasicFormatter_call$3;\n\n        \n        Opal.const_set($nesting[0], 'SEVERITY_LABELS', $hash2([\"WARN\", \"FATAL\"], {\"WARN\": \"WARNING\", \"FATAL\": \"FAILED\"}));\n        return (Opal.def(self, '$call', $BasicFormatter_call$3 = function $$call(severity, _, progname, msg) {\n          var $a, self = this;\n\n          return \"\" + (progname) + \": \" + (($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : severity)) + \": \" + ((function() {if ($truthy($$$('::', 'String')['$==='](msg))) {\n            return msg\n          } else {\n            return msg.$inspect()\n          }; return nil; })()) + ($$($nesting, 'LF'))\n        }, $BasicFormatter_call$3.$$arity = 4), nil) && 'call';\n      })($nesting[0], $$($nesting, 'Formatter'), $nesting);\n      return (function($base, $parent_nesting) {\n        var self = $module($base, 'AutoFormattingMessage');\n\n        var $nesting = [self].concat($parent_nesting), $AutoFormattingMessage_inspect$4;\n\n        \n        Opal.def(self, '$inspect', $AutoFormattingMessage_inspect$4 = function $$inspect() {\n          var self = this, sloc = nil;\n\n          if ($truthy((sloc = self['$[]'](\"source_location\")))) {\n            return \"\" + (sloc) + \": \" + (self['$[]'](\"text\"))\n          } else {\n            return self['$[]'](\"text\")\n          }\n        }, $AutoFormattingMessage_inspect$4.$$arity = 0)\n      })($nesting[0], $nesting);\n    })($nesting[0], $$$('::', 'Logger'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'MemoryLogger');\n\n      var $nesting = [self].concat($parent_nesting), $MemoryLogger$5, $MemoryLogger_initialize$7, $MemoryLogger_add$8, $MemoryLogger_clear$9, $MemoryLogger_empty$ques$10, $MemoryLogger_max_severity$11;\n\n      self.$$prototype.messages = nil;\n      \n      Opal.const_set($nesting[0], 'SEVERITY_LABELS', $send($hash2([], {}), 'tap', [], ($MemoryLogger$5 = function(accum){var self = $MemoryLogger$5.$$s || this, $$6;\n\n      \n        \n        if (accum == null) {\n          accum = nil;\n        };\n        return $send($$($nesting, 'Severity').$constants(false), 'each', [], ($$6 = function(c){var self = $$6.$$s || this, $writer = nil;\n\n        \n          \n          if (c == null) {\n            c = nil;\n          };\n          $writer = [$$($nesting, 'Severity').$const_get(c, false), c];\n          $send(accum, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$6.$$s = self, $$6.$$arity = 1, $$6));}, $MemoryLogger$5.$$s = self, $MemoryLogger$5.$$arity = 1, $MemoryLogger$5)));\n      self.$attr_reader(\"messages\");\n      \n      Opal.def(self, '$initialize', $MemoryLogger_initialize$7 = function $$initialize() {\n        var self = this, $writer = nil;\n\n        \n        \n        $writer = [$$($nesting, 'WARN')];\n        $send(self, 'level=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        return (self.messages = []);\n      }, $MemoryLogger_initialize$7.$$arity = 0);\n      \n      Opal.def(self, '$add', $MemoryLogger_add$8 = function $$add(severity, message, progname) {\n        var $a, $iter = $MemoryLogger_add$8.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $MemoryLogger_add$8.$$p = null;\n        \n        \n        if (message == null) {\n          message = nil;\n        };\n        \n        if (progname == null) {\n          progname = nil;\n        };\n        if ($truthy(message)) {\n        } else {\n          message = (function() {if (($yield !== nil)) {\n            return Opal.yieldX($yield, []);\n          } else {\n            return progname\n          }; return nil; })()\n        };\n        self.messages['$<<']($hash2([\"severity\", \"message\"], {\"severity\": $$($nesting, 'SEVERITY_LABELS')['$[]'](($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), \"message\": message}));\n        return true;\n      }, $MemoryLogger_add$8.$$arity = -2);\n      \n      Opal.def(self, '$clear', $MemoryLogger_clear$9 = function $$clear() {\n        var self = this;\n\n        return self.messages.$clear()\n      }, $MemoryLogger_clear$9.$$arity = 0);\n      \n      Opal.def(self, '$empty?', $MemoryLogger_empty$ques$10 = function() {\n        var self = this;\n\n        return self.messages['$empty?']()\n      }, $MemoryLogger_empty$ques$10.$$arity = 0);\n      return (Opal.def(self, '$max_severity', $MemoryLogger_max_severity$11 = function $$max_severity() {\n        var $$12, self = this;\n\n        if ($truthy(self['$empty?']())) {\n          return nil\n        } else {\n          return $send(self.messages, 'map', [], ($$12 = function(m){var self = $$12.$$s || this;\n\n          \n            \n            if (m == null) {\n              m = nil;\n            };\n            return $$($nesting, 'Severity').$const_get(m['$[]'](\"severity\"), false);}, $$12.$$s = self, $$12.$$arity = 1, $$12)).$max()\n        }\n      }, $MemoryLogger_max_severity$11.$$arity = 0), nil) && 'max_severity';\n    })($nesting[0], $$$('::', 'Logger'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'NullLogger');\n\n      var $nesting = [self].concat($parent_nesting), $NullLogger_initialize$13, $NullLogger_add$14;\n\n      self.$$prototype.max_severity = nil;\n      \n      self.$attr_reader(\"max_severity\");\n      \n      Opal.def(self, '$initialize', $NullLogger_initialize$13 = function $$initialize() {\n        var self = this, $writer = nil;\n\n        \n        $writer = [$$($nesting, 'WARN')];\n        $send(self, 'level=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $NullLogger_initialize$13.$$arity = 0);\n      return (Opal.def(self, '$add', $NullLogger_add$14 = function $$add(severity, message, progname) {\n        var $a, self = this;\n\n        \n        \n        if (message == null) {\n          message = nil;\n        };\n        \n        if (progname == null) {\n          progname = nil;\n        };\n        if ($truthy($rb_gt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), (self.max_severity = ($truthy($a = self.max_severity) ? $a : severity))))) {\n          self.max_severity = severity};\n        return true;\n      }, $NullLogger_add$14.$$arity = -2), nil) && 'add';\n    })($nesting[0], $$$('::', 'Logger'), $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'LoggerManager');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      self.logger_class = $$($nesting, 'Logger');\n      (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $logger$15, $logger$eq$16, $memoize_logger$17;\n\n        \n        self.$attr_accessor(\"logger_class\");\n        \n        Opal.def(self, '$logger', $logger$15 = function $$logger(pipe) {\n          var $a, self = this;\n          if (self.logger == null) self.logger = nil;\n          if (self.logger_class == null) self.logger_class = nil;\n          if ($gvars.stderr == null) $gvars.stderr = nil;\n\n          \n          \n          if (pipe == null) {\n            pipe = $gvars.stderr;\n          };\n          self.$memoize_logger();\n          return (self.logger = ($truthy($a = self.logger) ? $a : self.logger_class.$new(pipe)));\n        }, $logger$15.$$arity = -1);\n        \n        Opal.def(self, '$logger=', $logger$eq$16 = function(new_logger) {\n          var $a, self = this;\n          if (self.logger_class == null) self.logger_class = nil;\n          if ($gvars.stderr == null) $gvars.stderr = nil;\n\n          return (self.logger = ($truthy($a = new_logger) ? $a : self.logger_class.$new($gvars.stderr)))\n        }, $logger$eq$16.$$arity = 1);\n        self.$private();\n        return (Opal.def(self, '$memoize_logger', $memoize_logger$17 = function $$memoize_logger() {\n          var self = this;\n\n          return (function(self, $parent_nesting) {\n            var $nesting = [self].concat($parent_nesting);\n\n            \n            Opal.alias(self, \"logger\", \"logger\");\n            return self.$attr_reader(\"logger\");\n          })(Opal.get_singleton_class(self), $nesting)\n        }, $memoize_logger$17.$$arity = 0), nil) && 'memoize_logger';\n      })(Opal.get_singleton_class(self), $nesting);\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Logging');\n\n      var $nesting = [self].concat($parent_nesting), $a, $Logging_included$18, $Logging_logger$19, $Logging_message_with_context$20;\n\n      \n      self.$private_class_method(($truthy($a = (Opal.defs(self, '$included', $Logging_included$18 = function $$included(into) {\n        var self = this;\n\n        return into.$extend($$($nesting, 'Logging'))\n      }, $Logging_included$18.$$arity = 1), nil) && 'included') ? $a : \"included\"));\n      \n      Opal.def(self, '$logger', $Logging_logger$19 = function $$logger() {\n        var self = this;\n\n        return $$($nesting, 'LoggerManager').$logger()\n      }, $Logging_logger$19.$$arity = 0);\n      \n      Opal.def(self, '$message_with_context', $Logging_message_with_context$20 = function $$message_with_context(text, context) {\n        var self = this;\n\n        \n        \n        if (context == null) {\n          context = $hash2([], {});\n        };\n        return $hash2([\"text\"], {\"text\": text}).$merge(context).$extend($$$($$($nesting, 'Logger'), 'AutoFormattingMessage'));\n      }, $Logging_message_with_context$20.$$arity = -2);\n    })($nesting[0], $nesting);\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/rx\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $hash = Opal.hash;\n\n  Opal.add_stubs(['$==', '$join', '$to_a', '$new', '$empty?', '$escape', '$[]=', '$-']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $Asciidoctor$1, $Asciidoctor$2;\n\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Rx');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      nil\n    })($nesting[0], $nesting);\n    Opal.const_set($nesting[0], 'AuthorInfoLineRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-'.]*)(?: +(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-'.]*))?(?: +(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-'.]*))?(?: +<([^>]+)>)?$\"));\n    Opal.const_set($nesting[0], 'AuthorDelimiterRx', /;(?: |$)/);\n    Opal.const_set($nesting[0], 'RevisionInfoLineRx', new RegExp(\"\" + \"^(?:[^\\\\d{]*(\" + ($$($nesting, 'CC_ANY')) + \"*?),)? *(?!:)(\" + ($$($nesting, 'CC_ANY')) + \"*?)(?: *(?!^),?: *(\" + ($$($nesting, 'CC_ANY')) + \"*))?$\"));\n    Opal.const_set($nesting[0], 'ManpageTitleVolnumRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"+?) *\\\\( *(\" + ($$($nesting, 'CC_ANY')) + \"+?) *\\\\)$\"));\n    Opal.const_set($nesting[0], 'ManpageNamePurposeRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"+?) +- +(\" + ($$($nesting, 'CC_ANY')) + \"+)$\"));\n    Opal.const_set($nesting[0], 'ConditionalDirectiveRx', new RegExp(\"\" + \"^(\\\\\\\\)?(ifdef|ifndef|ifeval|endif)::(\\\\S*?(?:([,+])\\\\S*?)?)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'EvalExpressionRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"+?) *([=!><]=|[><]) *(\" + ($$($nesting, 'CC_ANY')) + \"+)$\"));\n    Opal.const_set($nesting[0], 'IncludeDirectiveRx', new RegExp(\"\" + \"^(\\\\\\\\)?include::([^\\\\[][^\\\\[]*)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'TagDirectiveRx', /\\b(?:tag|(e)nd)::(\\S+?)\\[\\](?=$|[ \\r])/m);\n    Opal.const_set($nesting[0], 'AttributeEntryRx', new RegExp(\"\" + \"^:(!?\" + ($$($nesting, 'CG_WORD')) + \"[^:]*):(?:[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*))?$\"));\n    Opal.const_set($nesting[0], 'InvalidAttributeNameCharsRx', new RegExp(\"\" + \"[^\" + ($$($nesting, 'CC_WORD')) + \"-]\"));\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      Opal.const_set($nesting[0], 'AttributeEntryPassMacroRx', new RegExp(\"\" + \"^pass:([a-z]+(?:,[a-z-]+)*)?\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*)\\\\]$\"))\n    } else {\n      nil\n    };\n    Opal.const_set($nesting[0], 'AttributeReferenceRx', new RegExp(\"\" + \"(\\\\\\\\)?\\\\{(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"-]*|(set|counter2?):\" + ($$($nesting, 'CC_ANY')) + \"+?)(\\\\\\\\)?\\\\}\"));\n    Opal.const_set($nesting[0], 'BlockAnchorRx', new RegExp(\"\" + \"^\\\\[\\\\[(?:|([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+))?)\\\\]\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockAttributeListRx', new RegExp(\"\" + \"^\\\\[(|[\" + ($$($nesting, 'CC_WORD')) + \".#%{,\\\"']\" + ($$($nesting, 'CC_ANY')) + \"*)\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockAttributeLineRx', new RegExp(\"\" + \"^\\\\[(?:|[\" + ($$($nesting, 'CC_WORD')) + \".#%{,\\\"']\" + ($$($nesting, 'CC_ANY')) + \"*|\\\\[(?:|[\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*(?:, *\" + ($$($nesting, 'CC_ANY')) + \"+)?)\\\\])\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockTitleRx', new RegExp(\"\" + \"^\\\\.(\\\\.?[^ \\\\t.]\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'AdmonitionParagraphRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'ADMONITION_STYLES').$to_a().$join(\"|\")) + \"):[ \\\\t]+\"));\n    Opal.const_set($nesting[0], 'LiteralParagraphRx', new RegExp(\"\" + \"^([ \\\\t]+\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'AtxSectionTitleRx', new RegExp(\"\" + \"^(=={0,5})[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"+?)(?:[ \\\\t]+\\\\1)?$\"));\n    Opal.const_set($nesting[0], 'ExtAtxSectionTitleRx', new RegExp(\"\" + \"^(=={0,5}|#\\\\\\#{0,5})[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"+?)(?:[ \\\\t]+\\\\1)?$\"));\n    Opal.const_set($nesting[0], 'SetextSectionTitleRx', new RegExp(\"\" + \"^((?!\\\\.)\" + ($$($nesting, 'CC_ANY')) + \"*?\" + ($$($nesting, 'CG_ALNUM')) + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'InlineSectionAnchorRx', new RegExp(\"\" + \" (\\\\\\\\)?\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+))?\\\\]\\\\]$\"));\n    Opal.const_set($nesting[0], 'InvalidSectionIdCharsRx', new RegExp(\"\" + \"<[^>]+>|&(?:[a-z][a-z]+\\\\d{0,2}|#\\\\d\\\\d\\\\d{0,4}|#x[\\\\da-f][\\\\da-f][\\\\da-f]{0,3});|[^ \" + ($$($nesting, 'CC_WORD')) + \"\\\\-.]+?\"));\n    Opal.const_set($nesting[0], 'SectionLevelStyleRx', /^sect\\d$/);\n    Opal.const_set($nesting[0], 'AnyListRx', new RegExp(\"\" + \"^(?:[ \\\\t]*(?:-|\\\\*\\\\**|\\\\.\\\\.*|\\\\u2022|\\\\d+\\\\.|[a-zA-Z]\\\\.|[IVXivx]+\\\\))[ \\\\t]|(?!//[^/])[ \\\\t]*[^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?(?::::{0,2}|;;)(?:$|[ \\\\t])|<(?:\\\\d+|\\\\.)>[ \\\\t])\"));\n    Opal.const_set($nesting[0], 'UnorderedListRx', new RegExp(\"\" + \"^[ \\\\t]*(-|\\\\*\\\\**|\\\\u2022)[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'OrderedListRx', new RegExp(\"\" + \"^[ \\\\t]*(\\\\.\\\\.*|\\\\d+\\\\.|[a-zA-Z]\\\\.|[IVXivx]+\\\\))[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'OrderedListMarkerRxMap', $hash2([\"arabic\", \"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"], {\"arabic\": /\\d+\\./, \"loweralpha\": /[a-z]\\./, \"lowerroman\": /[ivx]+\\)/, \"upperalpha\": /[A-Z]\\./, \"upperroman\": /[IVX]+\\)/}));\n    Opal.const_set($nesting[0], 'DescriptionListRx', new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?)(:::{0,2}|;;)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"));\n    Opal.const_set($nesting[0], 'DescriptionListSiblingRx', $hash2([\"::\", \":::\", \"::::\", \";;\"], {\"::\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?[^:]|[^ \\\\t:])(::)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"), \":::\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?[^:]|[^ \\\\t:])(:::)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"), \"::::\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?[^:]|[^ \\\\t:])(::::)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\"), \";;\": new RegExp(\"\" + \"^(?!//[^/])[ \\\\t]*([^ \\\\t]\" + ($$($nesting, 'CC_ANY')) + \"*?)(;;)(?:$|[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$)\")}));\n    Opal.const_set($nesting[0], 'CalloutListRx', new RegExp(\"\" + \"^<(\\\\d+|\\\\.)>[ \\\\t]+(\" + ($$($nesting, 'CC_ANY')) + \"*)$\"));\n    Opal.const_set($nesting[0], 'CalloutExtractRx', /((?:\\/\\/|#|--|;;) ?)?(\\\\)?<!?(|--)(\\d+|\\.)\\3>(?=(?: ?\\\\?<!?\\3(?:\\d+|\\.)\\3>)*$)/);\n    Opal.const_set($nesting[0], 'CalloutExtractRxt', \"(\\\\\\\\)?<()(\\\\d+|\\\\.)>(?=(?: ?\\\\\\\\?<(?:\\\\d+|\\\\.)>)*$)\");\n    Opal.const_set($nesting[0], 'CalloutExtractRxMap', $send($$$('::', 'Hash'), 'new', [], ($Asciidoctor$1 = function(h, k){var self = $Asciidoctor$1.$$s || this, $writer = nil;\n\n    \n      \n      if (h == null) {\n        h = nil;\n      };\n      \n      if (k == null) {\n        k = nil;\n      };\n      $writer = [k, new RegExp(\"\" + \"(\" + ((function() {if ($truthy(k['$empty?']())) {\n        return \"\"\n      } else {\n        return \"\" + ($$$('::', 'Regexp').$escape(k)) + \" ?\"\n      }; return nil; })()) + \")?\" + ($$($nesting, 'CalloutExtractRxt')))];\n      $send(h, '[]=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];}, $Asciidoctor$1.$$s = self, $Asciidoctor$1.$$arity = 2, $Asciidoctor$1)));\n    Opal.const_set($nesting[0], 'CalloutScanRx', new RegExp(\"\" + \"\\\\\\\\?<!?(|--)(\\\\d+|\\\\.)\\\\1>(?=(?: ?\\\\\\\\?<!?\\\\1(?:\\\\d+|\\\\.)\\\\1>)*\" + ($$($nesting, 'CC_EOL')) + \")\"));\n    Opal.const_set($nesting[0], 'CalloutSourceRx', new RegExp(\"\" + \"((?://|#|--|;;) ?)?(\\\\\\\\)?&lt;!?(|--)(\\\\d+|\\\\.)\\\\3&gt;(?=(?: ?\\\\\\\\?&lt;!?\\\\3(?:\\\\d+|\\\\.)\\\\3&gt;)*\" + ($$($nesting, 'CC_EOL')) + \")\"));\n    Opal.const_set($nesting[0], 'CalloutSourceRxt', \"\" + \"(\\\\\\\\)?&lt;()(\\\\d+|\\\\.)&gt;(?=(?: ?\\\\\\\\?&lt;(?:\\\\d+|\\\\.)&gt;)*\" + ($$($nesting, 'CC_EOL')) + \")\");\n    Opal.const_set($nesting[0], 'CalloutSourceRxMap', $send($$$('::', 'Hash'), 'new', [], ($Asciidoctor$2 = function(h, k){var self = $Asciidoctor$2.$$s || this, $writer = nil;\n\n    \n      \n      if (h == null) {\n        h = nil;\n      };\n      \n      if (k == null) {\n        k = nil;\n      };\n      $writer = [k, new RegExp(\"\" + \"(\" + ((function() {if ($truthy(k['$empty?']())) {\n        return \"\"\n      } else {\n        return \"\" + ($$$('::', 'Regexp').$escape(k)) + \" ?\"\n      }; return nil; })()) + \")?\" + ($$($nesting, 'CalloutSourceRxt')))];\n      $send(h, '[]=', Opal.to_a($writer));\n      return $writer[$rb_minus($writer[\"length\"], 1)];}, $Asciidoctor$2.$$s = self, $Asciidoctor$2.$$arity = 2, $Asciidoctor$2)));\n    Opal.const_set($nesting[0], 'ListRxMap', $hash2([\"ulist\", \"olist\", \"dlist\", \"colist\"], {\"ulist\": $$($nesting, 'UnorderedListRx'), \"olist\": $$($nesting, 'OrderedListRx'), \"dlist\": $$($nesting, 'DescriptionListRx'), \"colist\": $$($nesting, 'CalloutListRx')}));\n    Opal.const_set($nesting[0], 'ColumnSpecRx', /^(?:(\\d+)\\*)?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?(\\d+%?|~)?([a-z])?$/);\n    Opal.const_set($nesting[0], 'CellSpecStartRx', /^[ \\t]*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$/);\n    Opal.const_set($nesting[0], 'CellSpecEndRx', /[ \\t]+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$/);\n    Opal.const_set($nesting[0], 'CustomBlockMacroRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"-]*)::(|\\\\S|\\\\S\" + ($$($nesting, 'CC_ANY')) + \"*?\\\\S)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockMediaMacroRx', new RegExp(\"\" + \"^(image|video|audio)::(\\\\S|\\\\S\" + ($$($nesting, 'CC_ANY')) + \"*?\\\\S)\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'BlockTocMacroRx', new RegExp(\"\" + \"^toc::\\\\[(\" + ($$($nesting, 'CC_ANY')) + \"+)?\\\\]$\"));\n    Opal.const_set($nesting[0], 'InlineAnchorRx', new RegExp(\"\" + \"(\\\\\\\\)?(?:\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]|anchor:([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)\\\\[(?:\\\\]|(\" + ($$($nesting, 'CC_ANY')) + \"*?[^\\\\\\\\])\\\\]))\"));\n    Opal.const_set($nesting[0], 'InlineAnchorScanRx', new RegExp(\"\" + \"(?:^|[^\\\\\\\\\\\\[])\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]|(?:^|[^\\\\\\\\])anchor:([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)\\\\[(?:\\\\]|(\" + ($$($nesting, 'CC_ANY')) + \"*?[^\\\\\\\\])\\\\])\"));\n    Opal.const_set($nesting[0], 'LeadingInlineAnchorRx', new RegExp(\"\" + \"^\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]\"));\n    Opal.const_set($nesting[0], 'InlineBiblioAnchorRx', new RegExp(\"\" + \"^\\\\[\\\\[\\\\[([\" + ($$($nesting, 'CC_ALPHA')) + \"_:][\" + ($$($nesting, 'CC_WORD')) + \"\\\\-:.]*)(?:, *(\" + ($$($nesting, 'CC_ANY')) + \"+?))?\\\\]\\\\]\\\\]\"));\n    Opal.const_set($nesting[0], 'InlineEmailRx', new RegExp(\"\" + \"([\\\\\\\\>:/])?\" + ($$($nesting, 'CG_WORD')) + \"(?:&amp;|[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-.%+])*@\" + ($$($nesting, 'CG_ALNUM')) + \"[\" + ($$($nesting, 'CC_ALNUM')) + \"_\\\\-.]*\\\\.[a-zA-Z]{2,5}\\\\b\"));\n    Opal.const_set($nesting[0], 'InlineFootnoteMacroRx', new RegExp(\"\" + \"\\\\\\\\?footnote(?:(ref):|:([\" + ($$($nesting, 'CC_WORD')) + \"-]+)?)\\\\[(?:|(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\]))\\\\](?!</a>)\", 'm'));\n    Opal.const_set($nesting[0], 'InlineImageMacroRx', new RegExp(\"\" + \"\\\\\\\\?i(?:mage|con):([^:\\\\s\\\\[](?:[^\\\\n\\\\[]*[^\\\\s\\\\[])?)\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineIndextermMacroRx', new RegExp(\"\" + \"\\\\\\\\?(?:(indexterm2?):\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]|\\\\(\\\\((\" + ($$($nesting, 'CC_ALL')) + \"+?)\\\\)\\\\)(?!\\\\)))\", 'm'));\n    Opal.const_set($nesting[0], 'InlineKbdBtnMacroRx', new RegExp(\"\" + \"(\\\\\\\\)?(kbd|btn):\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineLinkRx', new RegExp(\"\" + \"(^|link:|\" + ($$($nesting, 'CG_BLANK')) + \"|&lt;|[>\\\\(\\\\)\\\\[\\\\];\\\"'])(\\\\\\\\?(?:https?|file|ftp|irc)://[^\\\\s\\\\[\\\\]<]*([^\\\\s.,\\\\[\\\\]<]))(?:\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\])?\", 'm'));\n    Opal.const_set($nesting[0], 'InlineLinkMacroRx', new RegExp(\"\" + \"\\\\\\\\?(?:link|(mailto)):(|[^:\\\\s\\\\[][^\\\\s\\\\[]*)\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'MacroNameRx', new RegExp(\"\" + \"^\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"-]*$\"));\n    Opal.const_set($nesting[0], 'InlineStemMacroRx', new RegExp(\"\" + \"\\\\\\\\?(stem|(?:latex|ascii)math):([a-z]+(?:,[a-z-]+)*)?\\\\[(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineMenuMacroRx', new RegExp(\"\" + \"\\\\\\\\?menu:(\" + ($$($nesting, 'CG_WORD')) + \"|[\" + ($$($nesting, 'CC_WORD')) + \"&][^\\\\n\\\\[]*[^\\\\s\\\\[])\\\\[ *(?:|(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\]))\\\\]\", 'm'));\n    Opal.const_set($nesting[0], 'InlineMenuRx', new RegExp(\"\" + \"\\\\\\\\?\\\"([\" + ($$($nesting, 'CC_WORD')) + \"&][^\\\"]*?[ \\\\n]+&gt;[ \\\\n]+[^\\\"]*)\\\"\"));\n    Opal.const_set($nesting[0], 'InlinePassRx', $hash(false, [\"+\", \"`\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:])(?:\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\?(\\\\+|`)(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\4)(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], true, [\"`\", nil, new RegExp(\"\" + \"(^|[^`\" + ($$($nesting, 'CC_WORD')) + \"])(?:\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\?(`)([^`\\\\s]|[^`\\\\s]\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\4)(?![`\" + ($$($nesting, 'CC_WORD')) + \"])\", 'm')]));\n    Opal.const_set($nesting[0], 'SinglePlusInlinePassRx', new RegExp(\"\" + \"^(\\\\\\\\)?\\\\+(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\+$\", 'm'));\n    Opal.const_set($nesting[0], 'InlinePassMacroRx', new RegExp(\"\" + \"(?:(?:(\\\\\\\\?)\\\\[([^\\\\]]+)\\\\])?(\\\\\\\\{0,2})(\\\\+\\\\+\\\\+?|\\\\$\\\\$)(\" + ($$($nesting, 'CC_ALL')) + \"*?)\\\\4|(\\\\\\\\?)pass:([a-z]+(?:,[a-z-]+)*)?\\\\[(|\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\])\", 'm'));\n    Opal.const_set($nesting[0], 'InlineXrefMacroRx', new RegExp(\"\" + \"\\\\\\\\?(?:&lt;&lt;([\" + ($$($nesting, 'CC_WORD')) + \"#/.:{]\" + ($$($nesting, 'CC_ALL')) + \"*?)&gt;&gt;|xref:([\" + ($$($nesting, 'CC_WORD')) + \"#/.:{]\" + ($$($nesting, 'CC_ALL')) + \"*?)\\\\[(?:\\\\]|(\" + ($$($nesting, 'CC_ALL')) + \"*?[^\\\\\\\\])\\\\]))\", 'm'));\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      Opal.const_set($nesting[0], 'HardLineBreakRx', new RegExp(\"\" + \"^(\" + ($$($nesting, 'CC_ANY')) + \"*) \\\\+$\", 'm'))\n    } else {\n      nil\n    };\n    Opal.const_set($nesting[0], 'MarkdownThematicBreakRx', /^ {0,3}([-*_])( *)\\1\\2\\1$/);\n    Opal.const_set($nesting[0], 'ExtLayoutBreakRx', /^(?:'{3,}|<{3,}|([-*_])( *)\\1\\2\\1)$/);\n    Opal.const_set($nesting[0], 'BlankLineRx', /\\n{2,}/);\n    Opal.const_set($nesting[0], 'EscapedSpaceRx', /\\\\([ \\t\\n])/);\n    Opal.const_set($nesting[0], 'ReplaceableTextRx', /[&']|--|\\.\\.\\.|\\([CRT]M?\\)/);\n    Opal.const_set($nesting[0], 'SpaceDelimiterRx', /([^\\\\])[ \\t\\n]+/);\n    Opal.const_set($nesting[0], 'SubModifierSniffRx', /[+-]/);\n    Opal.const_set($nesting[0], 'TrailingDigitsRx', /\\d+$/);\n    Opal.const_set($nesting[0], 'UriSniffRx', new RegExp(\"\" + \"^\" + ($$($nesting, 'CG_ALPHA')) + \"[\" + ($$($nesting, 'CC_ALNUM')) + \".+-]+:/{0,2}\"));\n    Opal.const_set($nesting[0], 'XmlSanitizeRx', /<[^>]+>/);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/substitutors\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $hash = Opal.hash, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$freeze', '$+', '$keys', '$empty?', '$!', '$===', '$[]', '$join', '$include?', '$extract_passthroughs', '$each', '$sub_specialchars', '$sub_quotes', '$sub_attributes', '$sub_replacements', '$sub_macros', '$highlight_source', '$sub_callouts', '$sub_post_replacements', '$warn', '$logger', '$restore_passthroughs', '$clear', '$split', '$apply_subs', '$==', '$gsub', '$match?', '$compat_mode', '$convert_quoted_text', '$attributes', '$shift', '$store_attribute', '$!=', '$attribute_undefined', '$counter', '$key?', '$downcase', '$attribute_missing', '$info', '$squeeze', '$delete', '$reject', '$start_with?', '$do_replacement', '$extensions', '$inline_macros?', '$inline_macros', '$regexp', '$instance', '$slice', '$length', '$names', '$config', '$merge', '$[]=', '$-', '$normalize_text', '$parse_attributes', '$process_method', '$text', '$expand_subs', '$text=', '$convert', '$class', '$strip', '$>', '$index', '$min', '$compact', '$end_with?', '$map', '$chop', '$new', '$pop', '$rstrip', '$register', '$tr', '$basename', '$parse', '$<<', '$lstrip', '$split_simple_csv', '$partition', '$extract_attributes_from_text', '$sub', '$encode_uri_component', '$style', '$extname?', '$rindex', '$info?', '$catalog', '$fetch', '$outfilesuffix', '$natural_xrefs', '$resolve_id', '$find', '$footnotes', '$id', '$<', '$size', '$attr?', '$attr', '$to_s', '$read_next_id', '$callouts', '$syntax_highlighter', '$highlight?', '$sub_source', '$extract_callouts', '$name', '$to_sym', '$to_i', '$resolve_lines_to_highlight', '$highlight', '$nil_or_empty?', '$restore_callouts', '$count', '$to_a', '$|', '$sort', '$*', '$parse_quoted_text_attributes', '$resolve_pass_subs', '$extract_inner_passthrough', '$basebackend?', '$error', '$chr', '$drop', '$&', '$resolve_subs', '$resolve_block_subs', '$parse_into', '$private', '$=~', '$shorthand_property_syntax', '$concat', '$each_char']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Substitutors');\n\n      var $nesting = [self].concat($parent_nesting), $Substitutors_apply_subs$1, $Substitutors_apply_normal_subs$3, $Substitutors_apply_header_subs$4, $Substitutors_apply_reftext_subs$5, $Substitutors_sub_specialchars$6, $Substitutors_sub_quotes$7, $Substitutors_sub_attributes$10, $Substitutors_sub_replacements$16, $Substitutors_sub_macros$19, $Substitutors_sub_post_replacements$41, $Substitutors_sub_source$44, $Substitutors_sub_callouts$45, $Substitutors_highlight_source$47, $Substitutors_resolve_lines_to_highlight$48, $Substitutors_extract_passthroughs$51, $Substitutors_restore_passthroughs$55, $Substitutors_resolve_subs$57, $Substitutors_resolve_block_subs$59, $Substitutors_resolve_pass_subs$60, $Substitutors_expand_subs$61, $Substitutors_commit_subs$63, $Substitutors_parse_attributes$64, $Substitutors_extract_attributes_from_text$65, $Substitutors_extract_callouts$66, $Substitutors_restore_callouts$69, $Substitutors_extract_inner_passthrough$72, $Substitutors_convert_quoted_text$73, $Substitutors_do_replacement$74, $Substitutors_parse_quoted_text_attributes$75, $Substitutors_normalize_text$76, $Substitutors_split_simple_csv$77;\n\n      \n      Opal.const_set($nesting[0], 'SpecialCharsRx', /[<&>]/);\n      Opal.const_set($nesting[0], 'SpecialCharsTr', $hash2([\">\", \"<\", \"&\"], {\">\": \"&gt;\", \"<\": \"&lt;\", \"&\": \"&amp;\"}));\n      Opal.const_set($nesting[0], 'QuotedTextSniffRx', $hash(false, /[*_`#^~]/, true, /[*'_+#^~]/));\n      Opal.const_set($nesting[0], 'BASIC_SUBS', [\"specialcharacters\"]).$freeze();\n      Opal.const_set($nesting[0], 'HEADER_SUBS', [\"specialcharacters\", \"attributes\"]).$freeze();\n      Opal.const_set($nesting[0], 'NO_SUBS', []).$freeze();\n      Opal.const_set($nesting[0], 'NORMAL_SUBS', [\"specialcharacters\", \"quotes\", \"attributes\", \"replacements\", \"macros\", \"post_replacements\"]).$freeze();\n      Opal.const_set($nesting[0], 'REFTEXT_SUBS', [\"specialcharacters\", \"quotes\", \"replacements\"]).$freeze();\n      Opal.const_set($nesting[0], 'VERBATIM_SUBS', [\"specialcharacters\", \"callouts\"]).$freeze();\n      Opal.const_set($nesting[0], 'SUB_GROUPS', $hash2([\"none\", \"normal\", \"verbatim\", \"specialchars\"], {\"none\": $$($nesting, 'NO_SUBS'), \"normal\": $$($nesting, 'NORMAL_SUBS'), \"verbatim\": $$($nesting, 'VERBATIM_SUBS'), \"specialchars\": $$($nesting, 'BASIC_SUBS')}));\n      Opal.const_set($nesting[0], 'SUB_HINTS', $hash2([\"a\", \"m\", \"n\", \"p\", \"q\", \"r\", \"c\", \"v\"], {\"a\": \"attributes\", \"m\": \"macros\", \"n\": \"normal\", \"p\": \"post_replacements\", \"q\": \"quotes\", \"r\": \"replacements\", \"c\": \"specialcharacters\", \"v\": \"verbatim\"}));\n      Opal.const_set($nesting[0], 'SUB_OPTIONS', $hash2([\"block\", \"inline\"], {\"block\": $rb_plus($rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS')), [\"callouts\"]), \"inline\": $rb_plus($$($nesting, 'SUB_GROUPS').$keys(), $$($nesting, 'NORMAL_SUBS'))}));\n      Opal.const_set($nesting[0], 'CAN', \"\\u0018\");\n      Opal.const_set($nesting[0], 'DEL', \"\\u007F\");\n      Opal.const_set($nesting[0], 'PASS_START', \"\\u0096\");\n      Opal.const_set($nesting[0], 'PASS_END', \"\\u0097\");\n      Opal.const_set($nesting[0], 'PassSlotRx', new RegExp(\"\" + ($$($nesting, 'PASS_START')) + \"(\\\\d+)\" + ($$($nesting, 'PASS_END'))));\n      Opal.const_set($nesting[0], 'HighlightedPassSlotRx', new RegExp(\"\" + \"<span\\\\b[^>]*>\" + ($$($nesting, 'PASS_START')) + \"</span>[^\\\\d]*(\\\\d+)[^\\\\d]*<span\\\\b[^>]*>\" + ($$($nesting, 'PASS_END')) + \"</span>\"));\n      Opal.const_set($nesting[0], 'RS', \"\\\\\");\n      Opal.const_set($nesting[0], 'R_SB', \"]\");\n      Opal.const_set($nesting[0], 'ESC_R_SB', \"\\\\]\");\n      Opal.const_set($nesting[0], 'PLUS', \"+\");\n      \n      Opal.def(self, '$apply_subs', $Substitutors_apply_subs$1 = function $$apply_subs(text, subs) {\n        var $a, $$2, self = this, is_multiline = nil, passthrus = nil, clear_passthrus = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n        if (self.passthroughs_locked == null) self.passthroughs_locked = nil;\n\n        \n        \n        if (subs == null) {\n          subs = $$($nesting, 'NORMAL_SUBS');\n        };\n        if ($truthy(($truthy($a = text['$empty?']()) ? $a : subs['$!']()))) {\n          return text};\n        if ($truthy((is_multiline = $$$('::', 'Array')['$==='](text)))) {\n          text = (function() {if ($truthy(text['$[]'](1))) {\n            \n            return text.$join($$($nesting, 'LF'));\n          } else {\n            return text['$[]'](0)\n          }; return nil; })()};\n        if ($truthy(subs['$include?'](\"macros\"))) {\n          \n          text = self.$extract_passthroughs(text);\n          if ($truthy(self.passthroughs['$empty?']())) {\n          } else {\n            \n            passthrus = self.passthroughs;\n            self.passthroughs_locked = ($truthy($a = self.passthroughs_locked) ? $a : (clear_passthrus = true));\n          };};\n        $send(subs, 'each', [], ($$2 = function(type){var self = $$2.$$s || this, $case = nil;\n\n        \n          \n          if (type == null) {\n            type = nil;\n          };\n          return (function() {$case = type;\n          if (\"specialcharacters\"['$===']($case)) {return (text = self.$sub_specialchars(text))}\n          else if (\"quotes\"['$===']($case)) {return (text = self.$sub_quotes(text))}\n          else if (\"attributes\"['$===']($case)) {if ($truthy(text['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n            return (text = self.$sub_attributes(text))\n          } else {\n            return nil\n          }}\n          else if (\"replacements\"['$===']($case)) {return (text = self.$sub_replacements(text))}\n          else if (\"macros\"['$===']($case)) {return (text = self.$sub_macros(text))}\n          else if (\"highlight\"['$===']($case)) {return (text = self.$highlight_source(text, subs['$include?'](\"callouts\")))}\n          else if (\"callouts\"['$===']($case)) {if ($truthy(subs['$include?'](\"highlight\"))) {\n            return nil\n          } else {\n            return (text = self.$sub_callouts(text))\n          }}\n          else if (\"post_replacements\"['$===']($case)) {return (text = self.$sub_post_replacements(text))}\n          else {return self.$logger().$warn(\"\" + \"unknown substitution type \" + (type))}})();}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n        if ($truthy(passthrus)) {\n          \n          text = self.$restore_passthroughs(text);\n          if ($truthy(clear_passthrus)) {\n            \n            passthrus.$clear();\n            self.passthroughs_locked = nil;};};\n        if ($truthy(is_multiline)) {\n          \n          return text.$split($$($nesting, 'LF'), -1);\n        } else {\n          return text\n        };\n      }, $Substitutors_apply_subs$1.$$arity = -2);\n      \n      Opal.def(self, '$apply_normal_subs', $Substitutors_apply_normal_subs$3 = function $$apply_normal_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$($nesting, 'NORMAL_SUBS'))\n      }, $Substitutors_apply_normal_subs$3.$$arity = 1);\n      \n      Opal.def(self, '$apply_header_subs', $Substitutors_apply_header_subs$4 = function $$apply_header_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$($nesting, 'HEADER_SUBS'))\n      }, $Substitutors_apply_header_subs$4.$$arity = 1);\n      Opal.alias(self, \"apply_title_subs\", \"apply_subs\");\n      \n      Opal.def(self, '$apply_reftext_subs', $Substitutors_apply_reftext_subs$5 = function $$apply_reftext_subs(text) {\n        var self = this;\n\n        return self.$apply_subs(text, $$($nesting, 'REFTEXT_SUBS'))\n      }, $Substitutors_apply_reftext_subs$5.$$arity = 1);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        \n        Opal.def(self, '$sub_specialchars', $Substitutors_sub_specialchars$6 = function $$sub_specialchars(text) {\n          var $a, $b, self = this;\n\n          if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\">\")) ? $b : text['$include?'](\"&\"))) ? $a : text['$include?'](\"<\")))) {\n            \n            return text.$gsub($$($nesting, 'SpecialCharsRx'), $$($nesting, 'SpecialCharsTr'));\n          } else {\n            return text\n          }\n        }, $Substitutors_sub_specialchars$6.$$arity = 1)\n      } else {\n        nil\n      };\n      Opal.alias(self, \"sub_specialcharacters\", \"sub_specialchars\");\n      \n      Opal.def(self, '$sub_quotes', $Substitutors_sub_quotes$7 = function $$sub_quotes(text) {\n        var $$8, self = this, compat = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if ($truthy($$($nesting, 'QuotedTextSniffRx')['$[]']((compat = self.document.$compat_mode()))['$match?'](text))) {\n          $send($$($nesting, 'QUOTE_SUBS')['$[]'](compat), 'each', [], ($$8 = function(type, scope, pattern){var self = $$8.$$s || this, $$9;\n\n          \n            \n            if (type == null) {\n              type = nil;\n            };\n            \n            if (scope == null) {\n              scope = nil;\n            };\n            \n            if (pattern == null) {\n              pattern = nil;\n            };\n            return (text = $send(text, 'gsub', [pattern], ($$9 = function(){var self = $$9.$$s || this;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n            return self.$convert_quoted_text($gvars[\"~\"], type, scope)}, $$9.$$s = self, $$9.$$arity = 0, $$9)));}, $$8.$$s = self, $$8.$$arity = 3, $$8))};\n        return text;\n      }, $Substitutors_sub_quotes$7.$$arity = 1);\n      \n      Opal.def(self, '$sub_attributes', $Substitutors_sub_attributes$10 = function $$sub_attributes(text, opts) {\n        var $$11, $$13, $$14, $$15, self = this, doc_attrs = nil, drop = nil, drop_line = nil, drop_line_severity = nil, drop_empty_line = nil, attribute_undefined = nil, attribute_missing = nil, lines = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        doc_attrs = self.document.$attributes();\n        drop = (drop_line = (drop_line_severity = (drop_empty_line = (attribute_undefined = (attribute_missing = nil)))));\n        text = $send(text, 'gsub', [$$($nesting, 'AttributeReferenceRx')], ($$11 = function(){var self = $$11.$$s || this, $a, $b, $c, $$12, $case = nil, args = nil, _ = nil, value = nil, key = nil;\n          if (self.document == null) self.document = nil;\n\n        if ($truthy(($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$==']($$($nesting, 'RS'))) ? $a : (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))['$==']($$($nesting, 'RS'))))) {\n            return \"\" + \"{\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + \"}\"\n          } else if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](3)))) {\n            return (function() {$case = (args = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$split(\":\", 3)).$shift();\n            if (\"set\"['$===']($case)) {\n            $b = $$($nesting, 'Parser').$store_attribute(args['$[]'](0), ($truthy($c = args['$[]'](1)) ? $c : \"\"), self.document), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (value = ($a[1] == null ? nil : $a[1])), $b;\n            if ($truthy(($truthy($a = value) ? $a : (attribute_undefined = ($truthy($b = attribute_undefined) ? $b : ($truthy($c = doc_attrs['$[]'](\"attribute-undefined\")) ? $c : $$($nesting, 'Compliance').$attribute_undefined())))['$!='](\"drop-line\")))) {\n              return (drop = (drop_empty_line = $$($nesting, 'DEL')))\n            } else {\n              return (drop = (drop_line = $$($nesting, 'CAN')))\n            };}\n            else if (\"counter2\"['$===']($case)) {\n            $send(self.document, 'counter', Opal.to_a(args));\n            return (drop = (drop_empty_line = $$($nesting, 'DEL')));}\n            else {return $send(self.document, 'counter', Opal.to_a(args))}})()\n          } else if ($truthy(doc_attrs['$key?']((key = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)).$downcase())))) {\n            return doc_attrs['$[]'](key)\n          } else if ($truthy((value = $$($nesting, 'INTRINSIC_ATTRIBUTES')['$[]'](key)))) {\n            return value\n          } else {\n            return (function() {$case = (attribute_missing = ($truthy($a = attribute_missing) ? $a : ($truthy($b = ($truthy($c = opts['$[]'](\"attribute_missing\")) ? $c : doc_attrs['$[]'](\"attribute-missing\"))) ? $b : $$($nesting, 'Compliance').$attribute_missing())));\n            if (\"drop\"['$===']($case)) {return (drop = (drop_empty_line = $$($nesting, 'DEL')))}\n            else if (\"drop-line\"['$===']($case)) {\n            if ((drop_line_severity = ($truthy($a = drop_line_severity) ? $a : ($truthy($b = opts['$[]'](\"drop_line_severity\")) ? $b : \"info\")))['$=='](\"info\")) {\n              $send(self.$logger(), 'info', [], ($$12 = function(){var self = $$12.$$s || this;\n\n              return \"\" + \"dropping line containing reference to missing attribute: \" + (key)}, $$12.$$s = self, $$12.$$arity = 0, $$12))};\n            return (drop = (drop_line = $$($nesting, 'CAN')));}\n            else if (\"warn\"['$===']($case)) {\n            self.$logger().$warn(\"\" + \"skipping reference to missing attribute: \" + (key));\n            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0));}\n            else {return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))}})()\n          }}, $$11.$$s = self, $$11.$$arity = 0, $$11));\n        if ($truthy(drop)) {\n          if ($truthy(drop_empty_line)) {\n            \n            lines = text.$squeeze($$($nesting, 'DEL')).$split($$($nesting, 'LF'), -1);\n            if ($truthy(drop_line)) {\n              return $send(lines, 'reject', [], ($$13 = function(line){var self = $$13.$$s || this, $a, $b, $c;\n\n              \n                \n                if (line == null) {\n                  line = nil;\n                };\n                return ($truthy($a = ($truthy($b = ($truthy($c = line['$==']($$($nesting, 'DEL'))) ? $c : line['$==']($$($nesting, 'CAN')))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, $$13.$$s = self, $$13.$$arity = 1, $$13)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))\n            } else {\n              return $send(lines, 'reject', [], ($$14 = function(line){var self = $$14.$$s || this;\n\n              \n                \n                if (line == null) {\n                  line = nil;\n                };\n                return line['$==']($$($nesting, 'DEL'));}, $$14.$$s = self, $$14.$$arity = 1, $$14)).$join($$($nesting, 'LF')).$delete($$($nesting, 'DEL'))\n            };\n          } else if ($truthy(text['$include?']($$($nesting, 'LF')))) {\n            return $send(text.$split($$($nesting, 'LF'), -1), 'reject', [], ($$15 = function(line){var self = $$15.$$s || this, $a, $b;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              return ($truthy($a = ($truthy($b = line['$==']($$($nesting, 'CAN'))) ? $b : line['$start_with?']($$($nesting, 'CAN')))) ? $a : line['$include?']($$($nesting, 'CAN')));}, $$15.$$s = self, $$15.$$arity = 1, $$15)).$join($$($nesting, 'LF'))\n          } else {\n            return \"\"\n          }\n        } else {\n          return text\n        };\n      }, $Substitutors_sub_attributes$10.$$arity = -2);\n      \n      Opal.def(self, '$sub_replacements', $Substitutors_sub_replacements$16 = function $$sub_replacements(text) {\n        var $$17, self = this;\n\n        \n        if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {\n          $send($$($nesting, 'REPLACEMENTS'), 'each', [], ($$17 = function(pattern, replacement, restore){var self = $$17.$$s || this, $$18;\n\n          \n            \n            if (pattern == null) {\n              pattern = nil;\n            };\n            \n            if (replacement == null) {\n              replacement = nil;\n            };\n            \n            if (restore == null) {\n              restore = nil;\n            };\n            return (text = $send(text, 'gsub', [pattern], ($$18 = function(){var self = $$18.$$s || this;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n            return self.$do_replacement($gvars[\"~\"], replacement, restore)}, $$18.$$s = self, $$18.$$arity = 0, $$18)));}, $$17.$$s = self, $$17.$$arity = 3, $$17))};\n        return text;\n      }, $Substitutors_sub_replacements$16.$$arity = 1);\n      \n      Opal.def(self, '$sub_macros', $Substitutors_sub_macros$19 = function $$sub_macros(text) {\n        var $a, $$20, $b, $$22, $$25, $$27, $$29, $$30, $$33, $$34, $$35, $$36, $$37, $$38, $$39, self = this, found_square_bracket = nil, found_colon = nil, found_macroish = nil, found_macroish_short = nil, doc_attrs = nil, doc = nil, extensions = nil;\n        if (self.document == null) self.document = nil;\n        if (self.context == null) self.context = nil;\n        if (self.parent == null) self.parent = nil;\n\n        \n        found_square_bracket = text['$include?'](\"[\");\n        found_colon = text['$include?'](\":\");\n        found_macroish = ($truthy($a = found_square_bracket) ? found_colon : $a);\n        found_macroish_short = ($truthy($a = found_macroish) ? text['$include?'](\":[\") : $a);\n        doc_attrs = (doc = self.document).$attributes();\n        if ($truthy(($truthy($a = (extensions = doc.$extensions())) ? extensions['$inline_macros?']() : $a))) {\n          $send(extensions.$inline_macros(), 'each', [], ($$20 = function(extension){var self = $$20.$$s || this, $$21;\n\n          \n            \n            if (extension == null) {\n              extension = nil;\n            };\n            return (text = $send(text, 'gsub', [extension.$instance().$regexp()], ($$21 = function(){var self = $$21.$$s || this, $b, $c, match = nil, target = nil, content = nil, attributes = nil, default_attrs = nil, ext_config = nil, $writer = nil, replacement = nil, inline_subs = nil;\n              if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n            \n              if ($truthy((match = (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)))['$start_with?']($$($nesting, 'RS')))) {\n                return (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$slice(1, (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length());};\n              if ($truthy($gvars[\"~\"].$names()['$empty?']())) {\n                $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))], (target = $b[0]), (content = $b[1]), $b\n              } else {\n                $b = [(function() { try {\n                  return $gvars[\"~\"]['$[]'](\"target\")\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                    try {\n                      return nil\n                    } finally { Opal.pop_exception() }\n                  } else { throw $err; }\n                }})(), (function() { try {\n                  return $gvars[\"~\"]['$[]'](\"content\")\n                } catch ($err) {\n                  if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                    try {\n                      return nil\n                    } finally { Opal.pop_exception() }\n                  } else { throw $err; }\n                }})()], (target = $b[0]), (content = $b[1]), $b\n              };\n              attributes = (function() {if ($truthy((default_attrs = (ext_config = extension.$config())['$[]'](\"default_attrs\")))) {\n                return default_attrs.$merge()\n              } else {\n                return $hash2([], {})\n              }; return nil; })();\n              if ($truthy(content)) {\n                \n                if ($truthy(content['$empty?']())) {\n                  if (ext_config['$[]'](\"content_model\")['$=='](\"attributes\")) {\n                  } else {\n                    \n                    $writer = [\"text\", content];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];\n                  }\n                } else {\n                  \n                  content = self.$normalize_text(content, true, true);\n                  if (ext_config['$[]'](\"content_model\")['$=='](\"attributes\")) {\n                    self.$parse_attributes(content, ($truthy($b = ($truthy($c = ext_config['$[]'](\"positional_attrs\")) ? $c : ext_config['$[]'](\"pos_attrs\"))) ? $b : []), $hash2([\"into\"], {\"into\": attributes}))\n                  } else {\n                    \n                    $writer = [\"text\", content];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];\n                  };\n                };\n                target = ($truthy($b = target) ? $b : (function() {if (ext_config['$[]'](\"format\")['$=='](\"short\")) {\n                  return content\n                } else {\n                  return target\n                }; return nil; })());};\n              if ($truthy($$($nesting, 'Inline')['$===']((replacement = extension.$process_method()['$[]'](self, target, attributes))))) {\n                \n                if ($truthy((inline_subs = replacement.$attributes().$delete(\"subs\")))) {\n                  \n                  $writer = [self.$apply_subs(replacement.$text(), self.$expand_subs(inline_subs))];\n                  $send(replacement, 'text=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                return replacement.$convert();\n              } else if ($truthy(replacement)) {\n                \n                self.$logger().$info(\"\" + \"expected substitution value for custom inline macro to be of type Inline; got \" + (replacement.$class()) + \": \" + (match));\n                return replacement;\n              } else {\n                return \"\"\n              };}, $$21.$$s = self, $$21.$$arity = 0, $$21)));}, $$20.$$s = self, $$20.$$arity = 1, $$20))};\n        if ($truthy(doc_attrs['$key?'](\"experimental\"))) {\n          \n          if ($truthy(($truthy($a = found_macroish_short) ? ($truthy($b = text['$include?'](\"kbd:\")) ? $b : text['$include?'](\"btn:\")) : $a))) {\n            text = $send(text, 'gsub', [$$($nesting, 'InlineKbdBtnMacroRx')], ($$22 = function(){var self = $$22.$$s || this, $c, $$23, $$24, keys = nil, delim_idx = nil, delim = nil, $writer = nil;\n\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length())\n              } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))['$=='](\"kbd\")) {\n                \n                if ($truthy((keys = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$strip())['$include?']($$($nesting, 'R_SB')))) {\n                  keys = keys.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n                if ($truthy(($truthy($c = $rb_gt(keys.$length(), 1)) ? (delim_idx = (function() {if ($truthy((delim_idx = keys.$index(\",\", 1)))) {\n                  return [delim_idx, keys.$index(\"+\", 1)].$compact().$min()\n                } else {\n                  \n                  return keys.$index(\"+\", 1);\n                }; return nil; })()) : $c))) {\n                  \n                  delim = keys.$slice(delim_idx, 1);\n                  if ($truthy(keys['$end_with?'](delim))) {\n                    \n                    keys = $send(keys.$chop().$split(delim, -1), 'map', [], ($$23 = function(key){var self = $$23.$$s || this;\n\n                    \n                      \n                      if (key == null) {\n                        key = nil;\n                      };\n                      return key.$strip();}, $$23.$$s = self, $$23.$$arity = 1, $$23));\n                    \n                    $writer = [-1, $rb_plus(keys['$[]'](-1), delim)];\n                    $send(keys, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                  } else {\n                    keys = $send(keys.$split(delim), 'map', [], ($$24 = function(key){var self = $$24.$$s || this;\n\n                    \n                      \n                      if (key == null) {\n                        key = nil;\n                      };\n                      return key.$strip();}, $$24.$$s = self, $$24.$$arity = 1, $$24))\n                  };\n                } else {\n                  keys = [keys]\n                };\n                return $$($nesting, 'Inline').$new(self, \"kbd\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"keys\"], {\"keys\": keys})})).$convert();\n              } else {\n                return $$($nesting, 'Inline').$new(self, \"button\", self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), true, true)).$convert()\n              }}, $$22.$$s = self, $$22.$$arity = 0, $$22))};\n          if ($truthy(($truthy($a = found_macroish) ? text['$include?'](\"menu:\") : $a))) {\n            text = $send(text, 'gsub', [$$($nesting, 'InlineMenuMacroRx')], ($$25 = function(){var self = $$25.$$s || this, $c, $$26, menu = nil, items = nil, delim = nil, submenus = nil, menuitem = nil;\n\n            \n              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n              menu = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n              if ($truthy((items = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {\n                \n                if ($truthy(items['$include?']($$($nesting, 'R_SB')))) {\n                  items = items.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n                if ($truthy((delim = (function() {if ($truthy(items['$include?'](\"&gt;\"))) {\n                  return \"&gt;\"\n                } else {\n                  \n                  if ($truthy(items['$include?'](\",\"))) {\n                    return \",\"\n                  } else {\n                    return nil\n                  };\n                }; return nil; })()))) {\n                  \n                  submenus = $send(items.$split(delim), 'map', [], ($$26 = function(it){var self = $$26.$$s || this;\n\n                  \n                    \n                    if (it == null) {\n                      it = nil;\n                    };\n                    return it.$strip();}, $$26.$$s = self, $$26.$$arity = 1, $$26));\n                  menuitem = submenus.$pop();\n                } else {\n                  $c = [[], items.$rstrip()], (submenus = $c[0]), (menuitem = $c[1]), $c\n                };\n              } else {\n                $c = [[], nil], (submenus = $c[0]), (menuitem = $c[1]), $c\n              };\n              return $$($nesting, 'Inline').$new(self, \"menu\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"menu\", \"submenus\", \"menuitem\"], {\"menu\": menu, \"submenus\": submenus, \"menuitem\": menuitem})})).$convert();}, $$25.$$s = self, $$25.$$arity = 0, $$25))};\n          if ($truthy(($truthy($a = text['$include?'](\"\\\"\")) ? text['$include?'](\"&gt;\") : $a))) {\n            text = $send(text, 'gsub', [$$($nesting, 'InlineMenuRx')], ($$27 = function(){var self = $$27.$$s || this, $c, $d, $e, $$28, menu = nil, submenus = nil, menuitem = nil;\n\n            \n              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n              $d = $send((($e = $gvars['~']) === nil ? nil : $e['$[]'](1)).$split(\"&gt;\"), 'map', [], ($$28 = function(it){var self = $$28.$$s || this;\n\n              \n                \n                if (it == null) {\n                  it = nil;\n                };\n                return it.$strip();}, $$28.$$s = self, $$28.$$arity = 1, $$28)), $c = Opal.to_ary($d), (menu = ($c[0] == null ? nil : $c[0])), (submenus = $slice.call($c, 1)), $d;\n              menuitem = submenus.$pop();\n              return $$($nesting, 'Inline').$new(self, \"menu\", nil, $hash2([\"attributes\"], {\"attributes\": $hash2([\"menu\", \"submenus\", \"menuitem\"], {\"menu\": menu, \"submenus\": submenus, \"menuitem\": menuitem})})).$convert();}, $$27.$$s = self, $$27.$$arity = 0, $$27))};};\n        if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?'](\"image:\")) ? $b : text['$include?'](\"icon:\")) : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineImageMacroRx')], ($$29 = function(){var self = $$29.$$s || this, $c, type = nil, posattrs = nil, target = nil, attrs = nil, $writer = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n            } else if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?'](\"icon:\"))) {\n              $c = [\"icon\", [\"size\"]], (type = $c[0]), (posattrs = $c[1]), $c\n            } else {\n              $c = [\"image\", [\"alt\", \"width\", \"height\"]], (type = $c[0]), (posattrs = $c[1]), $c\n            };\n            target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            attrs = self.$parse_attributes((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), posattrs, $hash2([\"unescape_input\"], {\"unescape_input\": true}));\n            if (type['$=='](\"icon\")) {\n            } else {\n              \n              doc.$register(\"images\", target);\n              \n              $writer = [\"imagesdir\", doc_attrs['$[]'](\"imagesdir\")];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            };\n            ($truthy($c = attrs['$[]'](\"alt\")) ? $c : (($writer = [\"alt\", (($writer = [\"default-alt\", $$($nesting, 'Helpers').$basename(target, true).$tr(\"_-\", \" \")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            return $$($nesting, 'Inline').$new(self, \"image\", nil, $hash2([\"type\", \"target\", \"attributes\"], {\"type\": type, \"target\": target, \"attributes\": attrs})).$convert();}, $$29.$$s = self, $$29.$$arity = 0, $$29))};\n        if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\"((\")) ? text['$include?'](\"))\") : $b)) ? $a : ($truthy($b = found_macroish_short) ? text['$include?'](\"dexterm\") : $b)))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineIndextermMacroRx')], ($$30 = function(){var self = $$30.$$s || this, $c, $$31, $d, $$32, $case = nil, attrlist = nil, primary = nil, attrs = nil, $writer = nil, terms = nil, secondary = nil, tertiary = nil, see_also = nil, term = nil, visible = nil, before = nil, after = nil, _ = nil, see = nil, subbed_term = nil;\n\n          return (function() {$case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            if (\"indexterm\"['$===']($case)) {\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((attrlist = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), true, true))['$include?'](\"=\"))) {\n              if ($truthy((primary = (attrs = $$($nesting, 'AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {\n                \n                \n                $writer = [\"terms\", (terms = [primary])];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if ($truthy((secondary = attrs['$[]'](2)))) {\n                  \n                  terms['$<<'](secondary);\n                  if ($truthy((tertiary = attrs['$[]'](3)))) {\n                    terms['$<<'](tertiary)};};\n                if ($truthy((see_also = attrs['$[]'](\"see-also\")))) {\n                  \n                  $writer = [\"see-also\", (function() {if ($truthy(see_also['$include?'](\",\"))) {\n                    return $send(see_also.$split(\",\"), 'map', [], ($$31 = function(it){var self = $$31.$$s || this;\n\n                    \n                      \n                      if (it == null) {\n                        it = nil;\n                      };\n                      return it.$lstrip();}, $$31.$$s = self, $$31.$$arity = 1, $$31))\n                  } else {\n                    return [see_also]\n                  }; return nil; })()];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n              } else {\n                attrs = $hash2([\"terms\"], {\"terms\": (terms = attrlist)})\n              }\n            } else {\n              attrs = $hash2([\"terms\"], {\"terms\": (terms = self.$split_simple_csv(attrlist))})\n            };\n            return $$($nesting, 'Inline').$new(self, \"indexterm\", nil, $hash2([\"attributes\"], {\"attributes\": attrs})).$convert();}\n            else if (\"indexterm2\"['$===']($case)) {\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((term = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), true, true))['$include?'](\"=\"))) {\n              \n              term = ($truthy($c = ($truthy($d = (attrs = $$($nesting, 'AttributeList').$new(term, self).$parse())['$[]'](1)) ? $d : (attrs = nil))) ? $c : term);\n              if ($truthy(($truthy($c = attrs) ? (see_also = attrs['$[]'](\"see-also\")) : $c))) {\n                \n                $writer = [\"see-also\", (function() {if ($truthy(see_also['$include?'](\",\"))) {\n                  return $send(see_also.$split(\",\"), 'map', [], ($$32 = function(it){var self = $$32.$$s || this;\n\n                  \n                    \n                    if (it == null) {\n                      it = nil;\n                    };\n                    return it.$lstrip();}, $$32.$$s = self, $$32.$$arity = 1, $$32))\n                } else {\n                  return [see_also]\n                }; return nil; })()];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};};\n            return $$($nesting, 'Inline').$new(self, \"indexterm\", term, $hash2([\"attributes\", \"type\"], {\"attributes\": attrs, \"type\": \"visible\"})).$convert();}\n            else {\n            text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              if ($truthy(($truthy($c = text['$start_with?'](\"(\")) ? text['$end_with?'](\")\") : $c))) {\n                \n                text = text.$slice(1, $rb_minus(text.$length(), 2));\n                $c = [true, \"(\", \")\"], (visible = $c[0]), (before = $c[1]), (after = $c[2]), $c;\n              } else {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n              }\n            } else {\n              \n              visible = true;\n              if ($truthy(text['$start_with?'](\"(\"))) {\n                if ($truthy(text['$end_with?'](\")\"))) {\n                  $c = [text.$slice(1, $rb_minus(text.$length(), 2)), false], (text = $c[0]), (visible = $c[1]), $c\n                } else {\n                  $c = [text.$slice(1, text.$length()), \"(\", \"\"], (text = $c[0]), (before = $c[1]), (after = $c[2]), $c\n                }\n              } else if ($truthy(text['$end_with?'](\")\"))) {\n                $c = [text.$chop(), \"\", \")\"], (text = $c[0]), (before = $c[1]), (after = $c[2]), $c};\n            };\n            if ($truthy(visible)) {\n              \n              if ($truthy((term = self.$normalize_text(text, true))['$include?'](\";&\"))) {\n                if ($truthy(term['$include?'](\" &gt;&gt; \"))) {\n                  \n                  $d = term.$partition(\" &gt;&gt; \"), $c = Opal.to_ary($d), (term = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (see = ($c[2] == null ? nil : $c[2])), $d;\n                  attrs = $hash2([\"see\"], {\"see\": see});\n                } else if ($truthy(term['$include?'](\" &amp;&gt; \"))) {\n                  \n                  $d = term.$split(\" &amp;&gt; \"), $c = Opal.to_ary($d), (term = ($c[0] == null ? nil : $c[0])), (see_also = $slice.call($c, 1)), $d;\n                  attrs = $hash2([\"see-also\"], {\"see-also\": see_also});}};\n              subbed_term = $$($nesting, 'Inline').$new(self, \"indexterm\", term, $hash2([\"attributes\", \"type\"], {\"attributes\": attrs, \"type\": \"visible\"})).$convert();\n            } else {\n              \n              attrs = $hash2([], {});\n              if ($truthy((terms = self.$normalize_text(text, true))['$include?'](\";&\"))) {\n                if ($truthy(terms['$include?'](\" &gt;&gt; \"))) {\n                  \n                  $d = terms.$partition(\" &gt;&gt; \"), $c = Opal.to_ary($d), (terms = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (see = ($c[2] == null ? nil : $c[2])), $d;\n                  \n                  $writer = [\"see\", see];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                } else if ($truthy(terms['$include?'](\" &amp;&gt; \"))) {\n                  \n                  $d = terms.$split(\" &amp;&gt; \"), $c = Opal.to_ary($d), (terms = ($c[0] == null ? nil : $c[0])), (see_also = $slice.call($c, 1)), $d;\n                  \n                  $writer = [\"see-also\", see_also];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;}};\n              \n              $writer = [\"terms\", (terms = self.$split_simple_csv(terms))];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              subbed_term = $$($nesting, 'Inline').$new(self, \"indexterm\", nil, $hash2([\"attributes\"], {\"attributes\": attrs})).$convert();\n            };\n            if ($truthy(before)) {\n              return \"\" + (before) + (subbed_term) + (after)\n            } else {\n              return subbed_term\n            };}})()}, $$30.$$s = self, $$30.$$arity = 0, $$30))};\n        if ($truthy(($truthy($a = found_colon) ? text['$include?'](\"://\") : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineLinkRx')], ($$33 = function(){var self = $$33.$$s || this, $c, $d, target = nil, prefix = nil, suffix = nil, $case = nil, attrs = nil, link_opts = nil, $writer = nil;\n\n          \n            if ($truthy((target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))['$start_with?']($$($nesting, 'RS')))) {\n              return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + (target.$slice(1, target.$length())) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](4)));};\n            $c = [(($d = $gvars['~']) === nil ? nil : $d['$[]'](1)), \"\"], (prefix = $c[0]), (suffix = $c[1]), $c;\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](4)))) {\n              \n              if (prefix['$=='](\"link:\")) {\n                prefix = \"\"};\n              text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));\n            } else {\n              \n              $case = prefix;\n              if (\"link:\"['$===']($case) || \"\\\"\"['$===']($case) || \"'\"['$===']($case)) {return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};\n              text = \"\";\n              $case = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));\n              if (\")\"['$===']($case)) {\n              target = target.$chop();\n              suffix = \")\";\n              if ($truthy(target['$end_with?'](\"://\"))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};}\n              else if (\";\"['$===']($case)) {\n              if ($truthy(($truthy($c = prefix['$start_with?'](\"&lt;\")) ? target['$end_with?'](\"&gt;\") : $c))) {\n                \n                prefix = prefix.$slice(4, prefix.$length());\n                target = target.$slice(0, $rb_minus(target.$length(), 4));\n              } else if ($truthy((target = target.$chop())['$end_with?'](\")\"))) {\n                \n                target = target.$chop();\n                suffix = \");\";\n              } else {\n                suffix = \";\"\n              };\n              if ($truthy(target['$end_with?'](\"://\"))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};}\n              else if (\":\"['$===']($case)) {\n              if ($truthy((target = target.$chop())['$end_with?'](\")\"))) {\n                \n                target = target.$chop();\n                suffix = \"):\";\n              } else {\n                suffix = \":\"\n              };\n              if ($truthy(target['$end_with?'](\"://\"))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));};};\n            };\n            $c = [nil, $hash2([\"type\"], {\"type\": \"link\"})], (attrs = $c[0]), (link_opts = $c[1]), $c;\n            if ($truthy(text['$empty?']())) {\n            } else {\n              \n              if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {\n                text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n              if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?'](\"=\") : $c))) {\n                \n                $d = self.$extract_attributes_from_text(text, \"\"), $c = Opal.to_ary($d), (text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d;\n                \n                $writer = [\"id\", attrs['$[]'](\"id\")];\n                $send(link_opts, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;};\n              if ($truthy(text['$end_with?'](\"^\"))) {\n                \n                text = text.$chop();\n                if ($truthy(attrs)) {\n                  ($truthy($c = attrs['$[]'](\"window\")) ? $c : (($writer = [\"window\", \"_blank\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n                } else {\n                  attrs = $hash2([\"window\"], {\"window\": \"_blank\"})\n                };};\n            };\n            if ($truthy(text['$empty?']())) {\n              \n              text = (function() {if ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\"))) {\n                \n                return target.$sub($$($nesting, 'UriSniffRx'), \"\");\n              } else {\n                return target\n              }; return nil; })();\n              if ($truthy(attrs)) {\n                \n                $writer = [\"role\", (function() {if ($truthy(attrs['$key?'](\"role\"))) {\n                  return \"\" + \"bare \" + (attrs['$[]'](\"role\"))\n                } else {\n                  return \"bare\"\n                }; return nil; })()];\n                $send(attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              } else {\n                attrs = $hash2([\"role\"], {\"role\": \"bare\"})\n              };};\n            doc.$register(\"links\", (($writer = [\"target\", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            if ($truthy(attrs)) {\n              \n              $writer = [\"attributes\", attrs];\n              $send(link_opts, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            return \"\" + (prefix) + ($$($nesting, 'Inline').$new(self, \"anchor\", text, link_opts).$convert()) + (suffix);}, $$33.$$s = self, $$33.$$arity = 0, $$33))};\n        if ($truthy(($truthy($a = found_macroish) ? ($truthy($b = text['$include?'](\"link:\")) ? $b : text['$include?'](\"ilto:\")) : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineLinkMacroRx')], ($$34 = function(){var self = $$34.$$s || this, $c, $d, mailto = nil, target = nil, mailto_text = nil, attrs = nil, link_opts = nil, $writer = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n            } else if ($truthy((mailto = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))))) {\n              target = $rb_plus(\"mailto:\", (mailto_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))\n            } else {\n              target = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))\n            };\n            $c = [nil, $hash2([\"type\"], {\"type\": \"link\"})], (attrs = $c[0]), (link_opts = $c[1]), $c;\n            if ($truthy((text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))['$empty?']())) {\n            } else {\n              \n              if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {\n                text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n              if ($truthy(mailto)) {\n                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?'](\",\") : $c))) {\n                  \n                  $d = self.$extract_attributes_from_text(text, \"\"), $c = Opal.to_ary($d), (text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d;\n                  \n                  $writer = [\"id\", attrs['$[]'](\"id\")];\n                  $send(link_opts, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  if ($truthy(attrs['$key?'](2))) {\n                    if ($truthy(attrs['$key?'](3))) {\n                      target = \"\" + (target) + \"?subject=\" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](2))) + \"&amp;body=\" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](3)))\n                    } else {\n                      target = \"\" + (target) + \"?subject=\" + ($$($nesting, 'Helpers').$encode_uri_component(attrs['$[]'](2)))\n                    }};}\n              } else if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?'](\"=\") : $c))) {\n                \n                $d = self.$extract_attributes_from_text(text, \"\"), $c = Opal.to_ary($d), (text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d;\n                \n                $writer = [\"id\", attrs['$[]'](\"id\")];\n                $send(link_opts, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;};\n              if ($truthy(text['$end_with?'](\"^\"))) {\n                \n                text = text.$chop();\n                if ($truthy(attrs)) {\n                  ($truthy($c = attrs['$[]'](\"window\")) ? $c : (($writer = [\"window\", \"_blank\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n                } else {\n                  attrs = $hash2([\"window\"], {\"window\": \"_blank\"})\n                };};\n            };\n            if ($truthy(text['$empty?']())) {\n              if ($truthy(mailto)) {\n                text = mailto_text\n              } else {\n                \n                if ($truthy(doc_attrs['$key?'](\"hide-uri-scheme\"))) {\n                  if ($truthy((text = target.$sub($$($nesting, 'UriSniffRx'), \"\"))['$empty?']())) {\n                    text = target}\n                } else {\n                  text = target\n                };\n                if ($truthy(attrs)) {\n                  \n                  $writer = [\"role\", (function() {if ($truthy(attrs['$key?'](\"role\"))) {\n                    return \"\" + \"bare \" + (attrs['$[]'](\"role\"))\n                  } else {\n                    return \"bare\"\n                  }; return nil; })()];\n                  $send(attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  attrs = $hash2([\"role\"], {\"role\": \"bare\"})\n                };\n              }};\n            doc.$register(\"links\", (($writer = [\"target\", target]), $send(link_opts, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            if ($truthy(attrs)) {\n              \n              $writer = [\"attributes\", attrs];\n              $send(link_opts, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            return $$($nesting, 'Inline').$new(self, \"anchor\", text, link_opts).$convert();}, $$34.$$s = self, $$34.$$arity = 0, $$34))};\n        if ($truthy(text['$include?'](\"@\"))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineEmailRx')], ($$35 = function(){var self = $$35.$$s || this, $c, target = nil, address = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n              return (function() {if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$==']($$($nesting, 'RS'))) {\n                \n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());\n              } else {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0))\n              }; return nil; })();};\n            target = $rb_plus(\"mailto:\", (address = (($c = $gvars['~']) === nil ? nil : $c['$[]'](0))));\n            doc.$register(\"links\", target);\n            return $$($nesting, 'Inline').$new(self, \"anchor\", address, $hash2([\"type\", \"target\"], {\"type\": \"link\", \"target\": target})).$convert();}, $$35.$$s = self, $$35.$$arity = 0, $$35))};\n        if ($truthy(($truthy($a = ($truthy($b = found_square_bracket) ? self.context['$=='](\"list_item\") : $b)) ? self.parent.$style()['$=='](\"bibliography\") : $a))) {\n          text = $send(text, 'sub', [$$($nesting, 'InlineBiblioAnchorRx')], ($$36 = function(){var self = $$36.$$s || this, $c;\n\n          return $$($nesting, 'Inline').$new(self, \"anchor\", (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), $hash2([\"type\", \"id\"], {\"type\": \"bibref\", \"id\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))})).$convert()}, $$36.$$s = self, $$36.$$arity = 0, $$36))};\n        if ($truthy(($truthy($a = ($truthy($b = found_square_bracket) ? text['$include?'](\"[[\") : $b)) ? $a : ($truthy($b = found_macroish) ? text['$include?'](\"or:\") : $b)))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineAnchorRx')], ($$37 = function(){var self = $$37.$$s || this, $c, $d, id = nil, reftext = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {\n              reftext = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))\n            } else {\n              \n              id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));\n              if ($truthy(($truthy($c = (reftext = (($d = $gvars['~']) === nil ? nil : $d['$[]'](5)))) ? reftext['$include?']($$($nesting, 'R_SB')) : $c))) {\n                reftext = reftext.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n            };\n            return $$($nesting, 'Inline').$new(self, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id})).$convert();}, $$37.$$s = self, $$37.$$arity = 0, $$37))};\n        if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\"&\")) ? text['$include?'](\";&l\") : $b)) ? $a : ($truthy($b = found_macroish) ? text['$include?'](\"xref:\") : $b)))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineXrefMacroRx')], ($$38 = function(){var self = $$38.$$s || this, $c, $d, attrs = nil, refid = nil, macro = nil, fragment = nil, hash_idx = nil, fragment_len = nil, path = nil, src2src = nil, target = nil, $writer = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            attrs = $hash2([], {});\n            if ($truthy((refid = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1))))) {\n              \n              $d = refid.$split(\",\", 2), $c = Opal.to_ary($d), (refid = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d;\n              if ($truthy(text)) {\n                text = text.$lstrip()};\n            } else {\n              \n              macro = true;\n              refid = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n              if ($truthy((text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))))) {\n                \n                if ($truthy(text['$include?']($$($nesting, 'R_SB')))) {\n                  text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n                if ($truthy(($truthy($c = doc.$compat_mode()['$!']()) ? text['$include?'](\"=\") : $c))) {\n                  $d = self.$extract_attributes_from_text(text), $c = Opal.to_ary($d), (text = ($c[0] == null ? nil : $c[0])), (attrs = ($c[1] == null ? nil : $c[1])), $d};};\n            };\n            if ($truthy(doc.$compat_mode())) {\n              fragment = refid\n            } else if ($truthy((hash_idx = refid.$index(\"#\")))) {\n              if ($truthy($rb_gt(hash_idx, 0))) {\n                \n                if ($truthy($rb_gt((fragment_len = $rb_minus($rb_minus(refid.$length(), 1), hash_idx)), 0))) {\n                  $c = [refid.$slice(0, hash_idx), refid.$slice($rb_plus(hash_idx, 1), fragment_len)], (path = $c[0]), (fragment = $c[1]), $c\n                } else {\n                  path = refid.$chop()\n                };\n                if ($truthy(macro)) {\n                  if ($truthy(path['$end_with?'](\".adoc\"))) {\n                    src2src = (path = path.$slice(0, $rb_minus(path.$length(), 5)))\n                  } else if ($truthy($$($nesting, 'Helpers')['$extname?'](path)['$!']())) {\n                    src2src = path}\n                } else if ($truthy($send(path, 'end_with?', Opal.to_a($$($nesting, 'ASCIIDOC_EXTENSIONS').$keys())))) {\n                  src2src = (path = path.$slice(0, path.$rindex(\".\")))\n                } else {\n                  src2src = path\n                };\n              } else {\n                $c = [refid, refid.$slice(1, refid.$length())], (target = $c[0]), (fragment = $c[1]), $c\n              }\n            } else if ($truthy(macro)) {\n              if ($truthy(refid['$end_with?'](\".adoc\"))) {\n                src2src = (path = refid.$slice(0, $rb_minus(refid.$length(), 5)))\n              } else if ($truthy($$($nesting, 'Helpers')['$extname?'](refid))) {\n                path = refid\n              } else {\n                fragment = refid\n              }\n            } else {\n              fragment = refid\n            };\n            if ($truthy(target)) {\n              \n              refid = fragment;\n              if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]'](\"refs\")['$[]'](refid)['$!']() : $c))) {\n                self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n            } else if ($truthy(path)) {\n              if ($truthy(($truthy($c = src2src) ? ($truthy($d = doc.$attributes()['$[]'](\"docname\")['$=='](path)) ? $d : doc.$catalog()['$[]'](\"includes\")['$[]'](path)) : $c))) {\n                if ($truthy(fragment)) {\n                  \n                  $c = [fragment, nil, \"\" + \"#\" + (fragment)], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c;\n                  if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]'](\"refs\")['$[]'](refid)['$!']() : $c))) {\n                    self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n                } else {\n                  $c = [nil, nil, \"#\"], (refid = $c[0]), (path = $c[1]), (target = $c[2]), $c\n                }\n              } else {\n                \n                $c = [path, \"\" + (doc.$attributes()['$[]'](\"relfileprefix\")) + (path) + ((function() {if ($truthy(src2src)) {\n                  \n                  return doc.$attributes().$fetch(\"relfilesuffix\", doc.$outfilesuffix());\n                } else {\n                  return \"\"\n                }; return nil; })())], (refid = $c[0]), (path = $c[1]), $c;\n                if ($truthy(fragment)) {\n                  $c = [\"\" + (refid) + \"#\" + (fragment), \"\" + (path) + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c\n                } else {\n                  target = path\n                };\n              }\n            } else if ($truthy(($truthy($c = doc.$compat_mode()) ? $c : $$($nesting, 'Compliance').$natural_xrefs()['$!']()))) {\n              \n              $c = [fragment, \"\" + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;\n              if ($truthy(($truthy($c = self.$logger()['$info?']()) ? doc.$catalog()['$[]'](\"refs\")['$[]'](refid)['$!']() : $c))) {\n                self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n            } else if ($truthy(doc.$catalog()['$[]'](\"refs\")['$[]'](fragment))) {\n              $c = [fragment, \"\" + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c\n            } else if ($truthy(($truthy($c = ($truthy($d = fragment['$include?'](\" \")) ? $d : fragment.$downcase()['$!='](fragment))) ? (refid = doc.$resolve_id(fragment)) : $c))) {\n              $c = [refid, \"\" + \"#\" + (refid)], (fragment = $c[0]), (target = $c[1]), $c\n            } else {\n              \n              $c = [fragment, \"\" + \"#\" + (fragment)], (refid = $c[0]), (target = $c[1]), $c;\n              if ($truthy(self.$logger()['$info?']())) {\n                self.$logger().$info(\"\" + \"possible invalid reference: \" + (refid))};\n            };\n            \n            $writer = [\"path\", path];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"fragment\", fragment];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"refid\", refid];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return $$($nesting, 'Inline').$new(self, \"anchor\", text, $hash2([\"type\", \"target\", \"attributes\"], {\"type\": \"xref\", \"target\": target, \"attributes\": attrs})).$convert();}, $$38.$$s = self, $$38.$$arity = 0, $$38))};\n        if ($truthy(($truthy($a = found_macroish) ? text['$include?'](\"tnote\") : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineFootnoteMacroRx')], ($$39 = function(){var self = $$39.$$s || this, $c, $d, $e, $$40, id = nil, footnote = nil, index = nil, type = nil, target = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](1)))) {\n              if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))) {\n                \n                $d = (($e = $gvars['~']) === nil ? nil : $e['$[]'](3)).$split(\",\", 2), $c = Opal.to_ary($d), (id = ($c[0] == null ? nil : $c[0])), (text = ($c[1] == null ? nil : $c[1])), $d;\n                if ($truthy(doc.$compat_mode())) {\n                } else {\n                  self.$logger().$warn(\"\" + \"found deprecated footnoteref macro: \" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))) + \"; use footnote macro with target instead\")\n                };\n              } else {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));\n              }\n            } else {\n              \n              id = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n              text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3));\n            };\n            if ($truthy(id)) {\n              if ($truthy((footnote = $send(doc.$footnotes(), 'find', [], ($$40 = function(candidate){var self = $$40.$$s || this;\n\n              \n                \n                if (candidate == null) {\n                  candidate = nil;\n                };\n                return candidate.$id()['$=='](id);}, $$40.$$s = self, $$40.$$arity = 1, $$40))))) {\n                \n                $c = [footnote.$index(), footnote.$text()], (index = $c[0]), (text = $c[1]), $c;\n                $c = [\"xref\", id, nil], (type = $c[0]), (target = $c[1]), (id = $c[2]), $c;\n              } else if ($truthy(text)) {\n                \n                text = self.$restore_passthroughs(self.$normalize_text(text, true, true));\n                index = doc.$counter(\"footnote-number\");\n                doc.$register(\"footnotes\", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, text));\n                $c = [\"ref\", nil], (type = $c[0]), (target = $c[1]), $c;\n              } else {\n                \n                self.$logger().$warn(\"\" + \"invalid footnote reference: \" + (id));\n                $c = [\"xref\", id, id, nil], (type = $c[0]), (target = $c[1]), (text = $c[2]), (id = $c[3]), $c;\n              }\n            } else if ($truthy(text)) {\n              \n              text = self.$restore_passthroughs(self.$normalize_text(text, true, true));\n              index = doc.$counter(\"footnote-number\");\n              doc.$register(\"footnotes\", $$$($$($nesting, 'Document'), 'Footnote').$new(index, id, text));\n              type = (target = nil);\n            } else {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0));\n            };\n            return $$($nesting, 'Inline').$new(self, \"footnote\", text, $hash2([\"attributes\", \"id\", \"target\", \"type\"], {\"attributes\": $hash2([\"index\"], {\"index\": index}), \"id\": id, \"target\": target, \"type\": type})).$convert();}, $$39.$$s = self, $$39.$$arity = 0, $$39))};\n        return text;\n      }, $Substitutors_sub_macros$19.$$arity = 1);\n      \n      Opal.def(self, '$sub_post_replacements', $Substitutors_sub_post_replacements$41 = function $$sub_post_replacements(text) {\n        var $a, $$42, $$43, self = this, lines = nil, last = nil;\n        if (self.attributes == null) self.attributes = nil;\n        if (self.document == null) self.document = nil;\n\n        if ($truthy(($truthy($a = self.attributes['$[]'](\"hardbreaks-option\")) ? $a : self.document.$attributes()['$[]'](\"hardbreaks-option\")))) {\n          \n          lines = text.$split($$($nesting, 'LF'), -1);\n          if ($truthy($rb_lt(lines.$size(), 2))) {\n            return text};\n          last = lines.$pop();\n          return $send(lines, 'map', [], ($$42 = function(line){var self = $$42.$$s || this;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            return $$($nesting, 'Inline').$new(self, \"break\", (function() {if ($truthy(line['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {\n              \n              return line.$slice(0, $rb_minus(line.$length(), 2));\n            } else {\n              return line\n            }; return nil; })(), $hash2([\"type\"], {\"type\": \"line\"})).$convert();}, $$42.$$s = self, $$42.$$arity = 1, $$42))['$<<'](last).$join($$($nesting, 'LF'));\n        } else if ($truthy(($truthy($a = text['$include?']($$($nesting, 'PLUS'))) ? text['$include?']($$($nesting, 'HARD_LINE_BREAK')) : $a))) {\n          return $send(text, 'gsub', [$$($nesting, 'HardLineBreakRx')], ($$43 = function(){var self = $$43.$$s || this, $b;\n\n          return $$($nesting, 'Inline').$new(self, \"break\", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), $hash2([\"type\"], {\"type\": \"line\"})).$convert()}, $$43.$$s = self, $$43.$$arity = 0, $$43))\n        } else {\n          return text\n        }\n      }, $Substitutors_sub_post_replacements$41.$$arity = 1);\n      \n      Opal.def(self, '$sub_source', $Substitutors_sub_source$44 = function $$sub_source(source, process_callouts) {\n        var self = this;\n\n        if ($truthy(process_callouts)) {\n          return self.$sub_callouts(self.$sub_specialchars(source))\n        } else {\n          \n          return self.$sub_specialchars(source);\n        }\n      }, $Substitutors_sub_source$44.$$arity = 2);\n      \n      Opal.def(self, '$sub_callouts', $Substitutors_sub_callouts$45 = function $$sub_callouts(text) {\n        var $$46, self = this, callout_rx = nil, autonum = nil;\n\n        \n        callout_rx = (function() {if ($truthy(self['$attr?'](\"line-comment\"))) {\n          return $$($nesting, 'CalloutSourceRxMap')['$[]'](self.$attr(\"line-comment\"))\n        } else {\n          return $$($nesting, 'CalloutSourceRx')\n        }; return nil; })();\n        autonum = 0;\n        return $send(text, 'gsub', [callout_rx], ($$46 = function(){var self = $$46.$$s || this, $a, $b;\n          if (self.document == null) self.document = nil;\n\n        if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {\n            return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), \"\")\n          } else {\n            return $$($nesting, 'Inline').$new(self, \"callout\", (function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))['$=='](\".\")) {\n              return (autonum = $rb_plus(autonum, 1)).$to_s()\n            } else {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))\n            }; return nil; })(), $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": ($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))) ? $a : (function() {if ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$=='](\"--\")) {\n              return [\"<!--\", \"-->\"]\n            } else {\n              return nil\n            }; return nil; })())})})).$convert()\n          }}, $$46.$$s = self, $$46.$$arity = 0, $$46));\n      }, $Substitutors_sub_callouts$45.$$arity = 1);\n      \n      Opal.def(self, '$highlight_source', $Substitutors_highlight_source$47 = function $$highlight_source(source, process_callouts) {\n        var $a, $b, $c, self = this, syntax_hl = nil, callout_marks = nil, doc_attrs = nil, syntax_hl_name = nil, linenums_mode = nil, start_line_number = nil, highlight_lines = nil, highlighted = nil, source_offset = nil;\n        if (self.document == null) self.document = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        if ($truthy(($truthy($a = (syntax_hl = self.document.$syntax_highlighter())) ? syntax_hl['$highlight?']() : $a))) {\n        } else {\n          return self.$sub_source(source, process_callouts)\n        };\n        if ($truthy(process_callouts)) {\n          $b = self.$extract_callouts(source), $a = Opal.to_ary($b), (source = ($a[0] == null ? nil : $a[0])), (callout_marks = ($a[1] == null ? nil : $a[1])), $b};\n        doc_attrs = self.document.$attributes();\n        syntax_hl_name = syntax_hl.$name();\n        if ($truthy((linenums_mode = (function() {if ($truthy(self['$attr?'](\"linenums\"))) {\n          return ($truthy($a = doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-linenums-mode\")) ? $a : \"table\").$to_sym()\n        } else {\n          return nil\n        }; return nil; })()))) {\n          if ($truthy($rb_lt((start_line_number = self.$attr(\"start\", 1).$to_i()), 1))) {\n            start_line_number = 1}};\n        if ($truthy(self['$attr?'](\"highlight\"))) {\n          highlight_lines = self.$resolve_lines_to_highlight(source, self.$attr(\"highlight\"), start_line_number)};\n        $b = syntax_hl.$highlight(self, source, self.$attr(\"language\"), $hash2([\"callouts\", \"css_mode\", \"highlight_lines\", \"number_lines\", \"start_line_number\", \"style\"], {\"callouts\": callout_marks, \"css_mode\": ($truthy($c = doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-css\")) ? $c : \"class\").$to_sym(), \"highlight_lines\": highlight_lines, \"number_lines\": linenums_mode, \"start_line_number\": start_line_number, \"style\": doc_attrs['$[]'](\"\" + (syntax_hl_name) + \"-style\")})), $a = Opal.to_ary($b), (highlighted = ($a[0] == null ? nil : $a[0])), (source_offset = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(self.passthroughs['$empty?']())) {\n        } else {\n          highlighted = highlighted.$gsub($$($nesting, 'HighlightedPassSlotRx'), \"\" + ($$($nesting, 'PASS_START')) + \"\\\\1\" + ($$($nesting, 'PASS_END')))\n        };\n        if ($truthy(callout_marks['$nil_or_empty?']())) {\n          return highlighted\n        } else {\n          \n          return self.$restore_callouts(highlighted, callout_marks, source_offset);\n        };\n      }, $Substitutors_highlight_source$47.$$arity = 2);\n      \n      Opal.def(self, '$resolve_lines_to_highlight', $Substitutors_resolve_lines_to_highlight$48 = function $$resolve_lines_to_highlight(source, spec, start) {\n        var $$49, $$50, self = this, lines = nil, shift = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        lines = [];\n        if ($truthy(spec['$include?'](\" \"))) {\n          spec = spec.$delete(\" \")};\n        $send((function() {if ($truthy(spec['$include?'](\",\"))) {\n          \n          return spec.$split(\",\");\n        } else {\n          \n          return spec.$split(\";\");\n        }; return nil; })(), 'map', [], ($$49 = function(entry){var self = $$49.$$s || this, $a, $b, negate = nil, delim = nil, from = nil, to = nil, line = nil;\n\n        \n          \n          if (entry == null) {\n            entry = nil;\n          };\n          if ($truthy(entry['$start_with?'](\"!\"))) {\n            \n            entry = entry.$slice(1, entry.$length());\n            negate = true;};\n          if ($truthy((delim = (function() {if ($truthy(entry['$include?'](\"..\"))) {\n            return \"..\"\n          } else {\n            \n            if ($truthy(entry['$include?'](\"-\"))) {\n              return \"-\"\n            } else {\n              return nil\n            };\n          }; return nil; })()))) {\n            \n            $b = entry.$partition(delim), $a = Opal.to_ary($b), (from = ($a[0] == null ? nil : $a[0])), (delim = ($a[1] == null ? nil : $a[1])), (to = ($a[2] == null ? nil : $a[2])), $b;\n            if ($truthy(($truthy($a = to['$empty?']()) ? $a : $rb_lt((to = to.$to_i()), 0)))) {\n              to = $rb_plus(source.$count($$($nesting, 'LF')), 1)};\n            if ($truthy(negate)) {\n              return (lines = $rb_minus(lines, Opal.Range.$new(from.$to_i(), to, false).$to_a()))\n            } else {\n              return (lines = lines['$|'](Opal.Range.$new(from.$to_i(), to, false).$to_a()))\n            };\n          } else if ($truthy(negate)) {\n            return lines.$delete(entry.$to_i())\n          } else if ($truthy(lines['$include?']((line = entry.$to_i()))['$!']())) {\n            return lines['$<<'](line)\n          } else {\n            return nil\n          };}, $$49.$$s = self, $$49.$$arity = 1, $$49));\n        if ((shift = (function() {if ($truthy(start)) {\n          return $rb_minus(start, 1)\n        } else {\n          return 0\n        }; return nil; })())['$=='](0)) {\n        } else {\n          lines = $send(lines, 'map', [], ($$50 = function(it){var self = $$50.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return $rb_minus(it, shift);}, $$50.$$s = self, $$50.$$arity = 1, $$50))\n        };\n        return lines.$sort();\n      }, $Substitutors_resolve_lines_to_highlight$48.$$arity = -3);\n      \n      Opal.def(self, '$extract_passthroughs', $Substitutors_extract_passthroughs$51 = function $$extract_passthroughs(text) {\n        var $a, $b, $$52, $$53, $$54, self = this, compat_mode = nil, passthrus = nil, pass_inline_char1 = nil, pass_inline_char2 = nil, pass_inline_rx = nil;\n        if (self.document == null) self.document = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        compat_mode = self.document.$compat_mode();\n        passthrus = self.passthroughs;\n        if ($truthy(($truthy($a = ($truthy($b = text['$include?'](\"++\")) ? $b : text['$include?'](\"$$\"))) ? $a : text['$include?'](\"ss:\")))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlinePassMacroRx')], ($$52 = function(){var self = $$52.$$s || this, $c, boundary = nil, attrlist = nil, escape_count = nil, preceding = nil, old_behavior = nil, attributes = nil, subs = nil, $writer = nil, passthru_key = nil;\n\n          \n            if ($truthy((boundary = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4))))) {\n              \n              if ($truthy(($truthy($c = compat_mode) ? boundary['$=='](\"++\") : $c))) {\n                return \"\" + ((function() {if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](2)))) {\n                  return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + \"[\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](2))) + \"]\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))\n                } else {\n                  return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))\n                }; return nil; })()) + \"++\" + (self.$extract_passthroughs((($c = $gvars['~']) === nil ? nil : $c['$[]'](5)))) + \"++\";};\n              if ($truthy((attrlist = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2))))) {\n                if ($truthy($rb_gt((escape_count = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$length()), 0))) {\n                  return \"\" + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))) + \"[\" + (attrlist) + \"]\" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5))) + (boundary);\n                } else if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](1))['$==']($$($nesting, 'RS'))) {\n                  preceding = \"\" + \"[\" + (attrlist) + \"]\"\n                } else {\n                  \n                  if ($truthy((($c = boundary['$=='](\"++\")) ? attrlist['$end_with?'](\"x-\") : boundary['$=='](\"++\")))) {\n                    \n                    old_behavior = true;\n                    attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2));};\n                  attributes = self.$parse_quoted_text_attributes(attrlist);\n                }\n              } else if ($truthy($rb_gt((escape_count = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)).$length()), 0))) {\n                return \"\" + ($rb_times($$($nesting, 'RS'), $rb_minus(escape_count, 1))) + (boundary) + ((($c = $gvars['~']) === nil ? nil : $c['$[]'](5))) + (boundary);};\n              subs = (function() {if (boundary['$=='](\"+++\")) {\n                return []\n              } else {\n                return $$($nesting, 'BASIC_SUBS')\n              }; return nil; })();\n              if ($truthy(attributes)) {\n                if ($truthy(old_behavior)) {\n                  \n                  $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\", \"attributes\"], {\"text\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), \"subs\": $$($nesting, 'NORMAL_SUBS'), \"type\": \"monospaced\", \"attributes\": attributes})];\n                  $send(passthrus, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  \n                  $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\", \"attributes\"], {\"text\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), \"subs\": subs, \"type\": \"unquoted\", \"attributes\": attributes})];\n                  $send(passthrus, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                }\n              } else {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": (($c = $gvars['~']) === nil ? nil : $c['$[]'](5)), \"subs\": subs})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n            } else {\n              \n              if ((($c = $gvars['~']) === nil ? nil : $c['$[]'](6))['$==']($$($nesting, 'RS'))) {\n                return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n              if ($truthy((subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](7))))) {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](8)), nil, true), \"subs\": self.$resolve_pass_subs(subs)})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              } else {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\"], {\"text\": self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](8)), nil, true)})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n            };\n            return \"\" + (($truthy($c = preceding) ? $c : \"\")) + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, $$52.$$s = self, $$52.$$arity = 0, $$52))};\n        $b = $$($nesting, 'InlinePassRx')['$[]'](compat_mode), $a = Opal.to_ary($b), (pass_inline_char1 = ($a[0] == null ? nil : $a[0])), (pass_inline_char2 = ($a[1] == null ? nil : $a[1])), (pass_inline_rx = ($a[2] == null ? nil : $a[2])), $b;\n        if ($truthy(($truthy($a = text['$include?'](pass_inline_char1)) ? $a : ($truthy($b = pass_inline_char2) ? text['$include?'](pass_inline_char2) : $b)))) {\n          text = $send(text, 'gsub', [pass_inline_rx], ($$53 = function(){var self = $$53.$$s || this, $c, preceding = nil, attrlist = nil, quoted_text = nil, escape_mark = nil, format_mark = nil, content = nil, old_behavior = nil, attributes = nil, $writer = nil, passthru_key = nil, subs = nil;\n\n          \n            preceding = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1));\n            attrlist = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n            if ($truthy((quoted_text = (($c = $gvars['~']) === nil ? nil : $c['$[]'](3)))['$start_with?']($$($nesting, 'RS')))) {\n              escape_mark = $$($nesting, 'RS')};\n            format_mark = (($c = $gvars['~']) === nil ? nil : $c['$[]'](4));\n            content = (($c = $gvars['~']) === nil ? nil : $c['$[]'](5));\n            if ($truthy(compat_mode)) {\n              old_behavior = true\n            } else if ($truthy((old_behavior = ($truthy($c = attrlist) ? attrlist['$end_with?'](\"x-\") : $c)))) {\n              attrlist = attrlist.$slice(0, $rb_minus(attrlist.$length(), 2))};\n            if ($truthy(attrlist)) {\n              if ($truthy((($c = format_mark['$=='](\"`\")) ? old_behavior['$!']() : format_mark['$=='](\"`\")))) {\n                return self.$extract_inner_passthrough(content, \"\" + (preceding) + \"[\" + (attrlist) + \"]\" + (escape_mark));\n              } else if ($truthy(escape_mark)) {\n                return \"\" + (preceding) + \"[\" + (attrlist) + \"]\" + (quoted_text.$slice(1, quoted_text.$length()));\n              } else if (preceding['$==']($$($nesting, 'RS'))) {\n                preceding = \"\" + \"[\" + (attrlist) + \"]\"\n              } else {\n                attributes = self.$parse_quoted_text_attributes(attrlist)\n              }\n            } else if ($truthy((($c = format_mark['$=='](\"`\")) ? old_behavior['$!']() : format_mark['$=='](\"`\")))) {\n              return self.$extract_inner_passthrough(content, \"\" + (preceding) + (escape_mark));\n            } else if ($truthy(escape_mark)) {\n              return \"\" + (preceding) + (quoted_text.$slice(1, quoted_text.$length()));};\n            if ($truthy(compat_mode)) {\n              \n              $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": $$($nesting, 'BASIC_SUBS'), \"attributes\": attributes, \"type\": \"monospaced\"})];\n              $send(passthrus, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else if ($truthy(attributes)) {\n              if ($truthy(old_behavior)) {\n                \n                subs = (function() {if (format_mark['$=='](\"`\")) {\n                  return $$($nesting, 'BASIC_SUBS')\n                } else {\n                  return $$($nesting, 'NORMAL_SUBS')\n                }; return nil; })();\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": subs, \"attributes\": attributes, \"type\": \"monospaced\"})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n              } else {\n                \n                $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"attributes\", \"type\"], {\"text\": content, \"subs\": $$($nesting, 'BASIC_SUBS'), \"attributes\": attributes, \"type\": \"unquoted\"})];\n                $send(passthrus, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              }\n            } else {\n              \n              $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\"], {\"text\": content, \"subs\": $$($nesting, 'BASIC_SUBS')})];\n              $send(passthrus, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            return \"\" + (preceding) + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, $$53.$$s = self, $$53.$$arity = 0, $$53))};\n        if ($truthy(($truthy($a = text['$include?'](\":\")) ? ($truthy($b = text['$include?'](\"stem:\")) ? $b : text['$include?'](\"math:\")) : $a))) {\n          text = $send(text, 'gsub', [$$($nesting, 'InlineStemMacroRx')], ($$54 = function(){var self = $$54.$$s || this, $c, $d, type = nil, subs = nil, content = nil, $writer = nil, passthru_key = nil;\n            if (self.document == null) self.document = nil;\n\n          \n            if ($truthy((($c = $gvars['~']) === nil ? nil : $c['$[]'](0))['$start_with?']($$($nesting, 'RS')))) {\n              return (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$slice(1, (($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$length());};\n            if ((type = (($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym())['$=='](\"stem\")) {\n              type = $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](self.document.$attributes()['$[]'](\"stem\")).$to_sym()};\n            subs = (($c = $gvars['~']) === nil ? nil : $c['$[]'](2));\n            content = self.$normalize_text((($c = $gvars['~']) === nil ? nil : $c['$[]'](3)), nil, true);\n            if ($truthy(($truthy($c = (($d = type['$=='](\"latexmath\")) ? content['$start_with?'](\"$\") : type['$=='](\"latexmath\"))) ? content['$end_with?'](\"$\") : $c))) {\n              content = content.$slice(1, $rb_minus(content.$length(), 2))};\n            subs = (function() {if ($truthy(subs)) {\n              \n              return self.$resolve_pass_subs(subs);\n            } else {\n              \n              if ($truthy(self.document['$basebackend?'](\"html\"))) {\n                return $$($nesting, 'BASIC_SUBS')\n              } else {\n                return nil\n              };\n            }; return nil; })();\n            \n            $writer = [(passthru_key = passthrus.$size()), $hash2([\"text\", \"subs\", \"type\"], {\"text\": content, \"subs\": subs, \"type\": type})];\n            $send(passthrus, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return \"\" + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END'));}, $$54.$$s = self, $$54.$$arity = 0, $$54))};\n        return text;\n      }, $Substitutors_extract_passthroughs$51.$$arity = 1);\n      \n      Opal.def(self, '$restore_passthroughs', $Substitutors_restore_passthroughs$55 = function $$restore_passthroughs(text) {\n        var $$56, self = this, passthrus = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        \n        passthrus = self.passthroughs;\n        return $send(text, 'gsub', [$$($nesting, 'PassSlotRx')], ($$56 = function(){var self = $$56.$$s || this, $a, pass = nil, subbed_text = nil, type = nil, attributes = nil, id = nil;\n\n        if ($truthy((pass = passthrus['$[]']((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$to_i())))) {\n            \n            subbed_text = self.$apply_subs(pass['$[]'](\"text\"), pass['$[]'](\"subs\"));\n            if ($truthy((type = pass['$[]'](\"type\")))) {\n              \n              if ($truthy((attributes = pass['$[]'](\"attributes\")))) {\n                id = attributes['$[]'](\"id\")};\n              subbed_text = $$($nesting, 'Inline').$new(self, \"quoted\", subbed_text, $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert();};\n            if ($truthy(subbed_text['$include?']($$($nesting, 'PASS_START')))) {\n              return self.$restore_passthroughs(subbed_text)\n            } else {\n              return subbed_text\n            };\n          } else {\n            \n            self.$logger().$error(\"\" + \"unresolved passthrough detected: \" + (text));\n            return \"??pass??\";\n          }}, $$56.$$s = self, $$56.$$arity = 0, $$56));\n      }, $Substitutors_restore_passthroughs$55.$$arity = 1);\n      \n      Opal.def(self, '$resolve_subs', $Substitutors_resolve_subs$57 = function $$resolve_subs(subs, type, defaults, subject) {\n        var $$58, self = this, candidates = nil, modifiers_present = nil, resolved = nil, invalid = nil;\n\n        \n        \n        if (type == null) {\n          type = \"block\";\n        };\n        \n        if (defaults == null) {\n          defaults = nil;\n        };\n        \n        if (subject == null) {\n          subject = nil;\n        };\n        if ($truthy(subs['$nil_or_empty?']())) {\n          return nil};\n        candidates = nil;\n        if ($truthy(subs['$include?'](\" \"))) {\n          subs = subs.$delete(\" \")};\n        modifiers_present = $$($nesting, 'SubModifierSniffRx')['$match?'](subs);\n        $send(subs.$split(\",\"), 'each', [], ($$58 = function(key){var self = $$58.$$s || this, $a, $b, modifier_operation = nil, first = nil, resolved_keys = nil, resolved_key = nil, candidate = nil, $case = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          modifier_operation = nil;\n          if ($truthy(modifiers_present)) {\n            if ((first = key.$chr())['$=='](\"+\")) {\n              \n              modifier_operation = \"append\";\n              key = key.$slice(1, key.$length());\n            } else if (first['$=='](\"-\")) {\n              \n              modifier_operation = \"remove\";\n              key = key.$slice(1, key.$length());\n            } else if ($truthy(key['$end_with?'](\"+\"))) {\n              \n              modifier_operation = \"prepend\";\n              key = key.$chop();}};\n          key = key.$to_sym();\n          if ($truthy((($a = type['$=='](\"inline\")) ? ($truthy($b = key['$=='](\"verbatim\")) ? $b : key['$=='](\"v\")) : type['$=='](\"inline\")))) {\n            resolved_keys = $$($nesting, 'BASIC_SUBS')\n          } else if ($truthy($$($nesting, 'SUB_GROUPS')['$key?'](key))) {\n            resolved_keys = $$($nesting, 'SUB_GROUPS')['$[]'](key)\n          } else if ($truthy(($truthy($a = (($b = type['$=='](\"inline\")) ? key.$length()['$=='](1) : type['$=='](\"inline\"))) ? $$($nesting, 'SUB_HINTS')['$key?'](key) : $a))) {\n            \n            resolved_key = $$($nesting, 'SUB_HINTS')['$[]'](key);\n            if ($truthy((candidate = $$($nesting, 'SUB_GROUPS')['$[]'](resolved_key)))) {\n              resolved_keys = candidate\n            } else {\n              resolved_keys = [resolved_key]\n            };\n          } else {\n            resolved_keys = [key]\n          };\n          if ($truthy(modifier_operation)) {\n            \n            candidates = ($truthy($a = candidates) ? $a : (function() {if ($truthy(defaults)) {\n              \n              return defaults.$drop(0);\n            } else {\n              return []\n            }; return nil; })());\n            return (function() {$case = modifier_operation;\n            if (\"append\"['$===']($case)) {return (candidates = $rb_plus(candidates, resolved_keys))}\n            else if (\"prepend\"['$===']($case)) {return (candidates = $rb_plus(resolved_keys, candidates))}\n            else if (\"remove\"['$===']($case)) {return (candidates = $rb_minus(candidates, resolved_keys))}\n            else { return nil }})();\n          } else {\n            \n            candidates = ($truthy($a = candidates) ? $a : []);\n            return (candidates = $rb_plus(candidates, resolved_keys));\n          };}, $$58.$$s = self, $$58.$$arity = 1, $$58));\n        if ($truthy(candidates)) {\n        } else {\n          return nil\n        };\n        resolved = candidates['$&']($$($nesting, 'SUB_OPTIONS')['$[]'](type));\n        if ($truthy($rb_minus(candidates, resolved)['$empty?']())) {\n        } else {\n          \n          invalid = $rb_minus(candidates, resolved);\n          self.$logger().$warn(\"\" + \"invalid substitution type\" + ((function() {if ($truthy($rb_gt(invalid.$size(), 1))) {\n            return \"s\"\n          } else {\n            return \"\"\n          }; return nil; })()) + ((function() {if ($truthy(subject)) {\n            return \" for \"\n          } else {\n            return \"\"\n          }; return nil; })()) + (subject) + \": \" + (invalid.$join(\", \")));\n        };\n        return resolved;\n      }, $Substitutors_resolve_subs$57.$$arity = -2);\n      \n      Opal.def(self, '$resolve_block_subs', $Substitutors_resolve_block_subs$59 = function $$resolve_block_subs(subs, defaults, subject) {\n        var self = this;\n\n        return self.$resolve_subs(subs, \"block\", defaults, subject)\n      }, $Substitutors_resolve_block_subs$59.$$arity = 3);\n      \n      Opal.def(self, '$resolve_pass_subs', $Substitutors_resolve_pass_subs$60 = function $$resolve_pass_subs(subs) {\n        var self = this;\n\n        return self.$resolve_subs(subs, \"inline\", nil, \"passthrough macro\")\n      }, $Substitutors_resolve_pass_subs$60.$$arity = 1);\n      \n      Opal.def(self, '$expand_subs', $Substitutors_expand_subs$61 = function $$expand_subs(subs) {\n        var $a, $$62, self = this, expanded_subs = nil;\n\n        if ($truthy($$$('::', 'Symbol')['$==='](subs))) {\n          if (subs['$=='](\"none\")) {\n            return nil\n          } else {\n            return ($truthy($a = $$($nesting, 'SUB_GROUPS')['$[]'](subs)) ? $a : [subs])\n          }\n        } else {\n          \n          expanded_subs = [];\n          $send(subs, 'each', [], ($$62 = function(key){var self = $$62.$$s || this, sub_group = nil;\n\n          \n            \n            if (key == null) {\n              key = nil;\n            };\n            if (key['$=='](\"none\")) {\n              return nil\n            } else if ($truthy((sub_group = $$($nesting, 'SUB_GROUPS')['$[]'](key)))) {\n              return (expanded_subs = $rb_plus(expanded_subs, sub_group))\n            } else {\n              return expanded_subs['$<<'](key)\n            };}, $$62.$$s = self, $$62.$$arity = 1, $$62));\n          if ($truthy(expanded_subs['$empty?']())) {\n            return nil\n          } else {\n            return expanded_subs\n          };\n        }\n      }, $Substitutors_expand_subs$61.$$arity = 1);\n      \n      Opal.def(self, '$commit_subs', $Substitutors_commit_subs$63 = function $$commit_subs() {\n        var $a, $b, $c, $d, self = this, default_subs = nil, $case = nil, custom_subs = nil, syntax_hl = nil, idx = nil, $writer = nil;\n        if (self.default_subs == null) self.default_subs = nil;\n        if (self.content_model == null) self.content_model = nil;\n        if (self.context == null) self.context = nil;\n        if (self.subs == null) self.subs = nil;\n        if (self.attributes == null) self.attributes = nil;\n        if (self.style == null) self.style = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        if ($truthy((default_subs = self.default_subs))) {\n        } else {\n          $case = self.content_model;\n          if (\"simple\"['$===']($case)) {default_subs = $$($nesting, 'NORMAL_SUBS')}\n          else if (\"verbatim\"['$===']($case)) {default_subs = (function() {if (self.context['$=='](\"verse\")) {\n            return $$($nesting, 'NORMAL_SUBS')\n          } else {\n            return $$($nesting, 'VERBATIM_SUBS')\n          }; return nil; })()}\n          else if (\"raw\"['$===']($case)) {default_subs = (function() {if (self.context['$=='](\"stem\")) {\n            return $$($nesting, 'BASIC_SUBS')\n          } else {\n            return $$($nesting, 'NO_SUBS')\n          }; return nil; })()}\n          else {return self.subs}\n        };\n        if ($truthy((custom_subs = self.attributes['$[]'](\"subs\")))) {\n          self.subs = ($truthy($a = self.$resolve_block_subs(custom_subs, default_subs, self.context)) ? $a : [])\n        } else {\n          self.subs = default_subs.$drop(0)\n        };\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (($d = self.context['$=='](\"listing\")) ? self.style['$=='](\"source\") : self.context['$=='](\"listing\"))) ? (syntax_hl = self.document.$syntax_highlighter()) : $c)) ? syntax_hl['$highlight?']() : $b)) ? (idx = self.subs.$index(\"specialcharacters\")) : $a))) {\n          \n          $writer = [idx, \"highlight\"];\n          $send(self.subs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        return nil;\n      }, $Substitutors_commit_subs$63.$$arity = 0);\n      \n      Opal.def(self, '$parse_attributes', $Substitutors_parse_attributes$64 = function $$parse_attributes(attrlist, posattrs, opts) {\n        var $a, self = this, block = nil, into = nil;\n        if (self.document == null) self.document = nil;\n\n        \n        \n        if (posattrs == null) {\n          posattrs = [];\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy((function() {if ($truthy(attrlist)) {\n          return attrlist['$empty?']()\n        } else {\n          return true\n        }; return nil; })())) {\n          return $hash2([], {})};\n        if ($truthy(opts['$[]'](\"unescape_input\"))) {\n          attrlist = self.$normalize_text(attrlist, true, true)};\n        if ($truthy(($truthy($a = opts['$[]'](\"sub_input\")) ? attrlist['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {\n          attrlist = self.document.$sub_attributes(attrlist)};\n        if ($truthy(opts['$[]'](\"sub_result\"))) {\n          block = self};\n        if ($truthy((into = opts['$[]'](\"into\")))) {\n          return $$($nesting, 'AttributeList').$new(attrlist, block).$parse_into(into, posattrs)\n        } else {\n          return $$($nesting, 'AttributeList').$new(attrlist, block).$parse(posattrs)\n        };\n      }, $Substitutors_parse_attributes$64.$$arity = -2);\n      self.$private();\n      \n      Opal.def(self, '$extract_attributes_from_text', $Substitutors_extract_attributes_from_text$65 = function $$extract_attributes_from_text(text, default_text) {\n        var self = this, attrlist = nil, resolved_text = nil, attrs = nil;\n\n        \n        \n        if (default_text == null) {\n          default_text = nil;\n        };\n        attrlist = (function() {if ($truthy(text['$include?']($$($nesting, 'LF')))) {\n          \n          return text.$tr($$($nesting, 'LF'), \" \");\n        } else {\n          return text\n        }; return nil; })();\n        if ($truthy((resolved_text = (attrs = $$($nesting, 'AttributeList').$new(attrlist, self).$parse())['$[]'](1)))) {\n          if (resolved_text['$=='](attrlist)) {\n            return [text, attrs.$clear()]\n          } else {\n            return [resolved_text, attrs]\n          }\n        } else {\n          return [default_text, attrs]\n        };\n      }, $Substitutors_extract_attributes_from_text$65.$$arity = -2);\n      \n      Opal.def(self, '$extract_callouts', $Substitutors_extract_callouts$66 = function $$extract_callouts(source) {\n        var $$67, self = this, callout_marks = nil, autonum = nil, lineno = nil, last_lineno = nil, callout_rx = nil;\n\n        \n        callout_marks = $hash2([], {});\n        autonum = (lineno = 0);\n        last_lineno = nil;\n        callout_rx = (function() {if ($truthy(self['$attr?'](\"line-comment\"))) {\n          return $$($nesting, 'CalloutExtractRxMap')['$[]'](self.$attr(\"line-comment\"))\n        } else {\n          return $$($nesting, 'CalloutExtractRx')\n        }; return nil; })();\n        source = $send(source.$split($$($nesting, 'LF'), -1), 'map', [], ($$67 = function(line){var self = $$67.$$s || this, $$68;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          lineno = $rb_plus(lineno, 1);\n          return $send(line, 'gsub', [callout_rx], ($$68 = function(){var self = $$68.$$s || this, $a, $b, $writer = nil;\n\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))) {\n              return (($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$sub($$($nesting, 'RS'), \"\")\n            } else {\n              \n              ($truthy($a = callout_marks['$[]'](lineno)) ? $a : (($writer = [lineno, []]), $send(callout_marks, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<']([($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))) ? $a : (function() {if ((($b = $gvars['~']) === nil ? nil : $b['$[]'](3))['$=='](\"--\")) {\n                return [\"<!--\", \"-->\"]\n              } else {\n                return nil\n              }; return nil; })()), (function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](4))['$=='](\".\")) {\n                return (autonum = $rb_plus(autonum, 1)).$to_s()\n              } else {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](4))\n              }; return nil; })()]);\n              last_lineno = lineno;\n              return \"\";\n            }}, $$68.$$s = self, $$68.$$arity = 0, $$68));}, $$67.$$s = self, $$67.$$arity = 1, $$67)).$join($$($nesting, 'LF'));\n        if ($truthy(last_lineno)) {\n          if (last_lineno['$=='](lineno)) {\n            source = \"\" + (source) + ($$($nesting, 'LF'))}\n        } else {\n          callout_marks = nil\n        };\n        return [source, callout_marks];\n      }, $Substitutors_extract_callouts$66.$$arity = 1);\n      \n      Opal.def(self, '$restore_callouts', $Substitutors_restore_callouts$69 = function $$restore_callouts(source, callout_marks, source_offset) {\n        var $$70, self = this, preamble = nil, lineno = nil;\n\n        \n        \n        if (source_offset == null) {\n          source_offset = nil;\n        };\n        if ($truthy(source_offset)) {\n          \n          preamble = source.$slice(0, source_offset);\n          source = source.$slice(source_offset, source.$length());\n        } else {\n          preamble = \"\"\n        };\n        lineno = 0;\n        return $rb_plus(preamble, $send(source.$split($$($nesting, 'LF'), -1), 'map', [], ($$70 = function(line){var self = $$70.$$s || this, $a, $b, $$71, conums = nil, guard = nil, numeral = nil;\n          if (self.document == null) self.document = nil;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          if ($truthy((conums = callout_marks.$delete((lineno = $rb_plus(lineno, 1)))))) {\n            if (conums.$size()['$=='](1)) {\n              \n              $b = conums['$[]'](0), $a = Opal.to_ary($b), (guard = ($a[0] == null ? nil : $a[0])), (numeral = ($a[1] == null ? nil : $a[1])), $b;\n              return \"\" + (line) + ($$($nesting, 'Inline').$new(self, \"callout\", numeral, $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": guard})})).$convert());\n            } else {\n              return \"\" + (line) + ($send(conums, 'map', [], ($$71 = function(guard_it, numeral_it){var self = $$71.$$s || this;\n                if (self.document == null) self.document = nil;\n\n              \n                \n                if (guard_it == null) {\n                  guard_it = nil;\n                };\n                \n                if (numeral_it == null) {\n                  numeral_it = nil;\n                };\n                return $$($nesting, 'Inline').$new(self, \"callout\", numeral_it, $hash2([\"id\", \"attributes\"], {\"id\": self.document.$callouts().$read_next_id(), \"attributes\": $hash2([\"guard\"], {\"guard\": guard_it})})).$convert();}, $$71.$$s = self, $$71.$$arity = 2, $$71)).$join(\" \"))\n            }\n          } else {\n            return line\n          };}, $$70.$$s = self, $$70.$$arity = 1, $$70)).$join($$($nesting, 'LF')));\n      }, $Substitutors_restore_callouts$69.$$arity = -3);\n      \n      Opal.def(self, '$extract_inner_passthrough', $Substitutors_extract_inner_passthrough$72 = function $$extract_inner_passthrough(text, pre) {\n        var $a, $b, self = this, $writer = nil, passthru_key = nil;\n        if (self.passthroughs == null) self.passthroughs = nil;\n\n        if ($truthy(($truthy($a = ($truthy($b = text['$end_with?'](\"+\")) ? text['$start_with?'](\"+\", \"\\\\+\") : $b)) ? $$($nesting, 'SinglePlusInlinePassRx')['$=~'](text) : $a))) {\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n            return \"\" + (pre) + \"`+\" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))) + \"+`\"\n          } else {\n            \n            \n            $writer = [(passthru_key = self.passthroughs.$size()), $hash2([\"text\", \"subs\"], {\"text\": (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), \"subs\": $$($nesting, 'BASIC_SUBS')})];\n            $send(self.passthroughs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return \"\" + (pre) + \"`\" + ($$($nesting, 'PASS_START')) + (passthru_key) + ($$($nesting, 'PASS_END')) + \"`\";\n          }\n        } else {\n          return \"\" + (pre) + \"`\" + (text) + \"`\"\n        }\n      }, $Substitutors_extract_inner_passthrough$72.$$arity = 2);\n      \n      Opal.def(self, '$convert_quoted_text', $Substitutors_convert_quoted_text$73 = function $$convert_quoted_text(match, type, scope) {\n        var $a, self = this, attrs = nil, unescaped_attrs = nil, attrlist = nil, id = nil, attributes = nil;\n\n        \n        if ($truthy(match['$[]'](0)['$start_with?']($$($nesting, 'RS')))) {\n          if ($truthy((($a = scope['$=='](\"constrained\")) ? (attrs = match['$[]'](2)) : scope['$=='](\"constrained\")))) {\n            unescaped_attrs = \"\" + \"[\" + (attrs) + \"]\"\n          } else {\n            return match['$[]'](0).$slice(1, match['$[]'](0).$length())\n          }};\n        if (scope['$=='](\"constrained\")) {\n          if ($truthy(unescaped_attrs)) {\n            return \"\" + (unescaped_attrs) + ($$($nesting, 'Inline').$new(self, \"quoted\", match['$[]'](3), $hash2([\"type\"], {\"type\": type})).$convert())\n          } else {\n            \n            if ($truthy((attrlist = match['$[]'](2)))) {\n              \n              id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]'](\"id\");\n              if (type['$=='](\"mark\")) {\n                type = \"unquoted\"};};\n            return \"\" + (match['$[]'](1)) + ($$($nesting, 'Inline').$new(self, \"quoted\", match['$[]'](3), $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert());\n          }\n        } else {\n          \n          if ($truthy((attrlist = match['$[]'](1)))) {\n            \n            id = (attributes = self.$parse_quoted_text_attributes(attrlist))['$[]'](\"id\");\n            if (type['$=='](\"mark\")) {\n              type = \"unquoted\"};};\n          return $$($nesting, 'Inline').$new(self, \"quoted\", match['$[]'](2), $hash2([\"type\", \"id\", \"attributes\"], {\"type\": type, \"id\": id, \"attributes\": attributes})).$convert();\n        };\n      }, $Substitutors_convert_quoted_text$73.$$arity = 3);\n      \n      Opal.def(self, '$do_replacement', $Substitutors_do_replacement$74 = function $$do_replacement(m, replacement, restore) {\n        var self = this, captured = nil, $case = nil;\n\n        if ($truthy((captured = m['$[]'](0))['$include?']($$($nesting, 'RS')))) {\n          return captured.$sub($$($nesting, 'RS'), \"\")\n        } else {\n          return (function() {$case = restore;\n          if (\"none\"['$===']($case)) {return replacement}\n          else if (\"bounding\"['$===']($case)) {return $rb_plus($rb_plus(m['$[]'](1), replacement), m['$[]'](2))}\n          else {return $rb_plus(m['$[]'](1), replacement)}})()\n        }\n      }, $Substitutors_do_replacement$74.$$arity = 3);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n      } else {\n        nil\n      };\n      \n      Opal.def(self, '$parse_quoted_text_attributes', $Substitutors_parse_quoted_text_attributes$75 = function $$parse_quoted_text_attributes(str) {\n        var $a, $b, self = this, segments = nil, id = nil, more_roles = nil, roles = nil, attrs = nil, $writer = nil;\n\n        \n        if ($truthy((str = str.$rstrip())['$empty?']())) {\n          return $hash2([], {})};\n        if ($truthy(str['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n          str = self.$sub_attributes(str)};\n        if ($truthy(str['$include?'](\",\"))) {\n          str = str.$slice(0, str.$index(\",\"))};\n        if ($truthy(($truthy($a = str['$start_with?'](\".\", \"#\")) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {\n          \n          segments = str.$split(\"#\", 2);\n          if ($truthy($rb_gt(segments.$size(), 1))) {\n            $b = segments['$[]'](1).$split(\".\"), $a = Opal.to_ary($b), (id = ($a[0] == null ? nil : $a[0])), (more_roles = $slice.call($a, 1)), $b\n          } else {\n            more_roles = []\n          };\n          roles = (function() {if ($truthy(segments['$[]'](0)['$empty?']())) {\n            return []\n          } else {\n            return segments['$[]'](0).$split(\".\")\n          }; return nil; })();\n          if ($truthy($rb_gt(roles.$size(), 1))) {\n            roles.$shift()};\n          if ($truthy($rb_gt(more_roles.$size(), 0))) {\n            roles.$concat(more_roles)};\n          attrs = $hash2([], {});\n          if ($truthy(id)) {\n            \n            $writer = [\"id\", id];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(roles['$empty?']())) {\n          } else {\n            \n            $writer = [\"role\", roles.$join(\" \")];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          return attrs;\n        } else {\n          return $hash2([\"role\"], {\"role\": str})\n        };\n      }, $Substitutors_parse_quoted_text_attributes$75.$$arity = 1);\n      \n      Opal.def(self, '$normalize_text', $Substitutors_normalize_text$76 = function $$normalize_text(text, normalize_whitespace, unescape_closing_square_brackets) {\n        var $a, self = this;\n\n        \n        \n        if (normalize_whitespace == null) {\n          normalize_whitespace = nil;\n        };\n        \n        if (unescape_closing_square_brackets == null) {\n          unescape_closing_square_brackets = nil;\n        };\n        if ($truthy(text['$empty?']())) {\n        } else {\n          \n          if ($truthy(normalize_whitespace)) {\n            text = text.$strip().$tr($$($nesting, 'LF'), \" \")};\n          if ($truthy(($truthy($a = unescape_closing_square_brackets) ? text['$include?']($$($nesting, 'R_SB')) : $a))) {\n            text = text.$gsub($$($nesting, 'ESC_R_SB'), $$($nesting, 'R_SB'))};\n        };\n        return text;\n      }, $Substitutors_normalize_text$76.$$arity = -2);\n      \n      Opal.def(self, '$split_simple_csv', $Substitutors_split_simple_csv$77 = function $$split_simple_csv(str) {\n        var $$78, $$79, self = this, values = nil, accum = nil, quote_open = nil;\n\n        if ($truthy(str['$empty?']())) {\n          return []\n        } else if ($truthy(str['$include?'](\"\\\"\"))) {\n          \n          values = [];\n          accum = \"\";\n          quote_open = nil;\n          $send(str, 'each_char', [], ($$78 = function(c){var self = $$78.$$s || this, $case = nil;\n\n          \n            \n            if (c == null) {\n              c = nil;\n            };\n            return (function() {$case = c;\n            if (\",\"['$===']($case)) {if ($truthy(quote_open)) {\n              return (accum = $rb_plus(accum, c))\n            } else {\n              \n              values['$<<'](accum.$strip());\n              return (accum = \"\");\n            }}\n            else if (\"\\\"\"['$===']($case)) {return (quote_open = quote_open['$!']())}\n            else {return (accum = $rb_plus(accum, c))}})();}, $$78.$$s = self, $$78.$$arity = 1, $$78));\n          return values['$<<'](accum.$strip());\n        } else {\n          return $send(str.$split(\",\"), 'map', [], ($$79 = function(it){var self = $$79.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return it.$strip();}, $$79.$$s = self, $$79.$$arity = 1, $$79))\n        }\n      }, $Substitutors_split_simple_csv$77.$$arity = 1);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/version\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    Opal.const_set($nesting[0], 'VERSION', \"2.0.12\")\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/abstract_node\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$include', '$attr_reader', '$attr_accessor', '$==', '$document', '$to_s', '$[]', '$merge', '$raise', '$converter', '$attributes', '$key?', '$[]=', '$-', '$delete', '$tap', '$new', '$each_key', '$end_with?', '$<<', '$slice', '$length', '$update', '$split', '$include?', '$===', '$join', '$empty?', '$apply_reftext_subs', '$attr?', '$attr', '$extname?', '$image_uri', '$<', '$safe', '$uriish?', '$encode_spaces_in_uri', '$normalize_web_path', '$generate_data_uri_from_uri', '$generate_data_uri', '$extname', '$normalize_system_path', '$readable?', '$strict_encode64', '$binread', '$warn', '$logger', '$require_library', '$!', '$open_uri', '$content_type', '$read', '$base_dir', '$root?', '$path_resolver', '$system_path', '$web_path', '$!=', '$prepare_source_string', '$fetch', '$read_asset']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractNode');\n\n      var $nesting = [self].concat($parent_nesting), $AbstractNode_initialize$1, $AbstractNode_block$ques$2, $AbstractNode_inline$ques$3, $AbstractNode_converter$4, $AbstractNode_parent$eq$5, $AbstractNode_attr$6, $AbstractNode_attr$ques$7, $AbstractNode_set_attr$8, $AbstractNode_remove_attr$9, $AbstractNode_option$ques$10, $AbstractNode_set_option$11, $AbstractNode_enabled_options$12, $AbstractNode_update_attributes$15, $AbstractNode_role$16, $AbstractNode_roles$17, $AbstractNode_role$ques$18, $AbstractNode_has_role$ques$19, $AbstractNode_role$eq$20, $AbstractNode_add_role$21, $AbstractNode_remove_role$22, $AbstractNode_reftext$23, $AbstractNode_reftext$ques$24, $AbstractNode_icon_uri$25, $AbstractNode_image_uri$26, $AbstractNode_media_uri$27, $AbstractNode_generate_data_uri$28, $AbstractNode_generate_data_uri_from_uri$29, $AbstractNode_normalize_asset_path$31, $AbstractNode_normalize_system_path$32, $AbstractNode_normalize_web_path$33, $AbstractNode_read_asset$34, $AbstractNode_read_contents$35, $AbstractNode_is_uri$ques$38;\n\n      self.$$prototype.document = self.$$prototype.attributes = self.$$prototype.parent = nil;\n      \n      self.$include($$($nesting, 'Substitutors'), $$($nesting, 'Logging'));\n      self.$attr_reader(\"attributes\");\n      self.$attr_reader(\"context\");\n      self.$attr_reader(\"document\");\n      self.$attr_accessor(\"id\");\n      self.$attr_reader(\"node_name\");\n      self.$attr_reader(\"parent\");\n      \n      Opal.def(self, '$initialize', $AbstractNode_initialize$1 = function $$initialize(parent, context, opts) {\n        var self = this, attrs = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if (context['$=='](\"document\")) {\n          self.document = self\n        } else if ($truthy(parent)) {\n          self.document = (self.parent = parent).$document()};\n        self.node_name = (self.context = context).$to_s();\n        self.attributes = (function() {if ($truthy((attrs = opts['$[]'](\"attributes\")))) {\n          return attrs.$merge()\n        } else {\n          return $hash2([], {})\n        }; return nil; })();\n        return (self.passthroughs = []);\n      }, $AbstractNode_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$block?', $AbstractNode_block$ques$2 = function() {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'))\n      }, $AbstractNode_block$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$inline?', $AbstractNode_inline$ques$3 = function() {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'))\n      }, $AbstractNode_inline$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$converter', $AbstractNode_converter$4 = function $$converter() {\n        var self = this;\n\n        return self.document.$converter()\n      }, $AbstractNode_converter$4.$$arity = 0);\n      \n      Opal.def(self, '$parent=', $AbstractNode_parent$eq$5 = function(parent) {\n        var $a, self = this;\n\n        return $a = [parent, parent.$document()], (self.parent = $a[0]), (self.document = $a[1]), $a\n      }, $AbstractNode_parent$eq$5.$$arity = 1);\n      \n      Opal.def(self, '$attr', $AbstractNode_attr$6 = function $$attr(name, default_value, fallback_name) {\n        var $a, $b, $c, $d, self = this;\n\n        \n        \n        if (default_value == null) {\n          default_value = nil;\n        };\n        \n        if (fallback_name == null) {\n          fallback_name = nil;\n        };\n        return ($truthy($a = self.attributes['$[]'](name.$to_s())) ? $a : ($truthy($b = ($truthy($c = ($truthy($d = fallback_name) ? self.parent : $d)) ? self.document.$attributes()['$[]']((function() {if (fallback_name['$=='](true)) {\n          return name\n        } else {\n          return fallback_name\n        }; return nil; })().$to_s()) : $c)) ? $b : default_value));\n      }, $AbstractNode_attr$6.$$arity = -2);\n      \n      Opal.def(self, '$attr?', $AbstractNode_attr$ques$7 = function(name, expected_value, fallback_name) {\n        var $a, $b, self = this;\n\n        \n        \n        if (expected_value == null) {\n          expected_value = nil;\n        };\n        \n        if (fallback_name == null) {\n          fallback_name = nil;\n        };\n        if ($truthy(expected_value)) {\n          return expected_value['$=='](($truthy($a = self.attributes['$[]'](name.$to_s())) ? $a : (function() {if ($truthy(($truthy($b = fallback_name) ? self.parent : $b))) {\n            return self.document.$attributes()['$[]']((function() {if (fallback_name['$=='](true)) {\n              return name\n            } else {\n              return fallback_name\n            }; return nil; })().$to_s())\n          } else {\n            return nil\n          }; return nil; })()))\n        } else {\n          return ($truthy($a = self.attributes['$key?'](name.$to_s())) ? $a : (function() {if ($truthy(($truthy($b = fallback_name) ? self.parent : $b))) {\n            \n            return self.document.$attributes()['$key?']((function() {if (fallback_name['$=='](true)) {\n              return name\n            } else {\n              return fallback_name\n            }; return nil; })().$to_s());\n          } else {\n            return false\n          }; return nil; })())\n        };\n      }, $AbstractNode_attr$ques$7.$$arity = -2);\n      \n      Opal.def(self, '$set_attr', $AbstractNode_set_attr$8 = function $$set_attr(name, value, overwrite) {\n        var $a, self = this, $writer = nil;\n\n        \n        \n        if (value == null) {\n          value = \"\";\n        };\n        \n        if (overwrite == null) {\n          overwrite = true;\n        };\n        if ($truthy((($a = overwrite['$=='](false)) ? self.attributes['$key?'](name) : overwrite['$=='](false)))) {\n          return false\n        } else {\n          \n          \n          $writer = [name, value];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return true;\n        };\n      }, $AbstractNode_set_attr$8.$$arity = -2);\n      \n      Opal.def(self, '$remove_attr', $AbstractNode_remove_attr$9 = function $$remove_attr(name) {\n        var self = this;\n\n        return self.attributes.$delete(name)\n      }, $AbstractNode_remove_attr$9.$$arity = 1);\n      \n      Opal.def(self, '$option?', $AbstractNode_option$ques$10 = function(name) {\n        var self = this;\n\n        if ($truthy(self.attributes['$[]'](\"\" + (name) + \"-option\"))) {\n          return true\n        } else {\n          return false\n        }\n      }, $AbstractNode_option$ques$10.$$arity = 1);\n      \n      Opal.def(self, '$set_option', $AbstractNode_set_option$11 = function $$set_option(name) {\n        var self = this, $writer = nil;\n\n        \n        \n        $writer = [\"\" + (name) + \"-option\", \"\"];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        return nil;\n      }, $AbstractNode_set_option$11.$$arity = 1);\n      \n      Opal.def(self, '$enabled_options', $AbstractNode_enabled_options$12 = function $$enabled_options() {\n        var $$13, self = this;\n\n        return $send($$$('::', 'Set').$new(), 'tap', [], ($$13 = function(accum){var self = $$13.$$s || this, $$14;\n          if (self.attributes == null) self.attributes = nil;\n\n        \n          \n          if (accum == null) {\n            accum = nil;\n          };\n          return $send(self.attributes, 'each_key', [], ($$14 = function(k){var self = $$14.$$s || this;\n\n          \n            \n            if (k == null) {\n              k = nil;\n            };\n            if ($truthy(k.$to_s()['$end_with?'](\"-option\"))) {\n              return accum['$<<'](k.$slice(0, $rb_minus(k.$length(), 7)))\n            } else {\n              return nil\n            };}, $$14.$$s = self, $$14.$$arity = 1, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13))\n      }, $AbstractNode_enabled_options$12.$$arity = 0);\n      \n      Opal.def(self, '$update_attributes', $AbstractNode_update_attributes$15 = function $$update_attributes(new_attributes) {\n        var self = this;\n\n        return self.attributes.$update(new_attributes)\n      }, $AbstractNode_update_attributes$15.$$arity = 1);\n      \n      Opal.def(self, '$role', $AbstractNode_role$16 = function $$role() {\n        var self = this;\n\n        return self.attributes['$[]'](\"role\")\n      }, $AbstractNode_role$16.$$arity = 0);\n      \n      Opal.def(self, '$roles', $AbstractNode_roles$17 = function $$roles() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          return val.$split()\n        } else {\n          return []\n        }\n      }, $AbstractNode_roles$17.$$arity = 0);\n      \n      Opal.def(self, '$role?', $AbstractNode_role$ques$18 = function(expected_value) {\n        var self = this;\n\n        \n        \n        if (expected_value == null) {\n          expected_value = nil;\n        };\n        if ($truthy(expected_value)) {\n          return expected_value['$=='](self.attributes['$[]'](\"role\"))\n        } else {\n          \n          return self.attributes['$key?'](\"role\");\n        };\n      }, $AbstractNode_role$ques$18.$$arity = -1);\n      \n      Opal.def(self, '$has_role?', $AbstractNode_has_role$ques$19 = function(name) {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          \n          return (((\"\" + \" \") + (val)) + \" \")['$include?'](\"\" + \" \" + (name) + \" \");\n        } else {\n          return false\n        }\n      }, $AbstractNode_has_role$ques$19.$$arity = 1);\n      \n      Opal.def(self, '$role=', $AbstractNode_role$eq$20 = function(names) {\n        var self = this, $writer = nil;\n\n        \n        $writer = [\"role\", (function() {if ($truthy($$$('::', 'Array')['$==='](names))) {\n          \n          return names.$join(\" \");\n        } else {\n          return names\n        }; return nil; })()];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $AbstractNode_role$eq$20.$$arity = 1);\n      \n      Opal.def(self, '$add_role', $AbstractNode_add_role$21 = function $$add_role(name) {\n        var self = this, val = nil, $writer = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"role\")))) {\n          if ($truthy((((\"\" + \" \") + (val)) + \" \")['$include?'](\"\" + \" \" + (name) + \" \"))) {\n            return false\n          } else {\n            \n            \n            $writer = [\"role\", \"\" + (val) + \" \" + (name)];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return true;\n          }\n        } else {\n          \n          \n          $writer = [\"role\", name];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return true;\n        }\n      }, $AbstractNode_add_role$21.$$arity = 1);\n      \n      Opal.def(self, '$remove_role', $AbstractNode_remove_role$22 = function $$remove_role(name) {\n        var $a, self = this, val = nil, $writer = nil;\n\n        if ($truthy(($truthy($a = (val = self.attributes['$[]'](\"role\"))) ? (val = val.$split()).$delete(name) : $a))) {\n          \n          if ($truthy(val['$empty?']())) {\n            self.attributes.$delete(\"role\")\n          } else {\n            \n            $writer = [\"role\", val.$join(\" \")];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          return true;\n        } else {\n          return false\n        }\n      }, $AbstractNode_remove_role$22.$$arity = 1);\n      \n      Opal.def(self, '$reftext', $AbstractNode_reftext$23 = function $$reftext() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.attributes['$[]'](\"reftext\")))) {\n          \n          return self.$apply_reftext_subs(val);\n        } else {\n          return nil\n        }\n      }, $AbstractNode_reftext$23.$$arity = 0);\n      \n      Opal.def(self, '$reftext?', $AbstractNode_reftext$ques$24 = function() {\n        var self = this;\n\n        return self.attributes['$key?'](\"reftext\")\n      }, $AbstractNode_reftext$ques$24.$$arity = 0);\n      \n      Opal.def(self, '$icon_uri', $AbstractNode_icon_uri$25 = function $$icon_uri(name) {\n        var self = this, icon = nil;\n\n        \n        if ($truthy(self['$attr?'](\"icon\"))) {\n          \n          icon = self.$attr(\"icon\");\n          if ($truthy($$($nesting, 'Helpers')['$extname?'](icon))) {\n          } else {\n            icon = \"\" + (icon) + \".\" + (self.document.$attr(\"icontype\", \"png\"))\n          };\n        } else {\n          icon = \"\" + (name) + \".\" + (self.document.$attr(\"icontype\", \"png\"))\n        };\n        return self.$image_uri(icon, \"iconsdir\");\n      }, $AbstractNode_icon_uri$25.$$arity = 1);\n      \n      Opal.def(self, '$image_uri', $AbstractNode_image_uri$26 = function $$image_uri(target_image, asset_dir_key) {\n        var $a, $b, $c, $d, self = this, doc = nil, images_base = nil;\n\n        \n        \n        if (asset_dir_key == null) {\n          asset_dir_key = \"imagesdir\";\n        };\n        if ($truthy(($truthy($a = $rb_lt((doc = self.document).$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE'))) ? doc['$attr?'](\"data-uri\") : $a))) {\n          if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Helpers')['$uriish?'](target_image)) ? (target_image = $$($nesting, 'Helpers').$encode_spaces_in_uri(target_image)) : $b)) ? $a : ($truthy($b = ($truthy($c = ($truthy($d = asset_dir_key) ? (images_base = doc.$attr(asset_dir_key)) : $d)) ? $$($nesting, 'Helpers')['$uriish?'](images_base) : $c)) ? (target_image = self.$normalize_web_path(target_image, images_base, false)) : $b)))) {\n            if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n              \n              return self.$generate_data_uri_from_uri(target_image, doc['$attr?'](\"cache-uri\"));\n            } else {\n              return target_image\n            }\n          } else {\n            return self.$generate_data_uri(target_image, asset_dir_key)\n          }\n        } else {\n          return self.$normalize_web_path(target_image, (function() {if ($truthy(asset_dir_key)) {\n            \n            return doc.$attr(asset_dir_key);\n          } else {\n            return nil\n          }; return nil; })())\n        };\n      }, $AbstractNode_image_uri$26.$$arity = -2);\n      \n      Opal.def(self, '$media_uri', $AbstractNode_media_uri$27 = function $$media_uri(target, asset_dir_key) {\n        var self = this;\n\n        \n        \n        if (asset_dir_key == null) {\n          asset_dir_key = \"imagesdir\";\n        };\n        return self.$normalize_web_path(target, (function() {if ($truthy(asset_dir_key)) {\n          return self.document.$attr(asset_dir_key)\n        } else {\n          return nil\n        }; return nil; })());\n      }, $AbstractNode_media_uri$27.$$arity = -2);\n      \n      Opal.def(self, '$generate_data_uri', $AbstractNode_generate_data_uri$28 = function $$generate_data_uri(target_image, asset_dir_key) {\n        var self = this, ext = nil, mimetype = nil, image_path = nil;\n\n        \n        \n        if (asset_dir_key == null) {\n          asset_dir_key = nil;\n        };\n        if ($truthy((ext = $$($nesting, 'Helpers').$extname(target_image, nil)))) {\n          mimetype = (function() {if (ext['$=='](\".svg\")) {\n            return \"image/svg+xml\"\n          } else {\n            return \"\" + \"image/\" + (ext.$slice(1, ext.$length()))\n          }; return nil; })()\n        } else {\n          mimetype = \"application/octet-stream\"\n        };\n        if ($truthy(asset_dir_key)) {\n          image_path = self.$normalize_system_path(target_image, self.document.$attr(asset_dir_key), nil, $hash2([\"target_name\"], {\"target_name\": \"image\"}))\n        } else {\n          image_path = self.$normalize_system_path(target_image)\n        };\n        if ($truthy($$$('::', 'File')['$readable?'](image_path))) {\n          return \"\" + \"data:\" + (mimetype) + \";base64,\" + ($$$('::', 'Base64').$strict_encode64($$$('::', 'File').$binread(image_path)))\n        } else {\n          \n          self.$logger().$warn(\"\" + \"image to embed not found or not readable: \" + (image_path));\n          return \"\" + \"data:\" + (mimetype) + \";base64,\";\n        };\n      }, $AbstractNode_generate_data_uri$28.$$arity = -2);\n      \n      Opal.def(self, '$generate_data_uri_from_uri', $AbstractNode_generate_data_uri_from_uri$29 = function $$generate_data_uri_from_uri(image_uri, cache_uri) {\n        var $a, $b, $$30, self = this, mimetype = nil, bindata = nil;\n\n        \n        \n        if (cache_uri == null) {\n          cache_uri = false;\n        };\n        if ($truthy(cache_uri)) {\n          $$($nesting, 'Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n        } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL')['$!']())) {\n          $$$('::', 'OpenURI')};\n        \n        try {\n          \n          $b = $send($$$('::', 'OpenURI'), 'open_uri', [image_uri, $$($nesting, 'URI_READ_MODE')], ($$30 = function(f){var self = $$30.$$s || this;\n\n          \n            \n            if (f == null) {\n              f = nil;\n            };\n            return [f.$content_type(), f.$read()];}, $$30.$$s = self, $$30.$$arity = 1, $$30)), $a = Opal.to_ary($b), (mimetype = ($a[0] == null ? nil : $a[0])), (bindata = ($a[1] == null ? nil : $a[1])), $b;\n          return \"\" + \"data:\" + (mimetype) + \";base64,\" + ($$$('::', 'Base64').$strict_encode64(bindata));\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              \n              self.$logger().$warn(\"\" + \"could not retrieve image data from URI: \" + (image_uri));\n              return image_uri;\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };;\n      }, $AbstractNode_generate_data_uri_from_uri$29.$$arity = -2);\n      \n      Opal.def(self, '$normalize_asset_path', $AbstractNode_normalize_asset_path$31 = function $$normalize_asset_path(asset_ref, asset_name, autocorrect) {\n        var self = this;\n\n        \n        \n        if (asset_name == null) {\n          asset_name = \"path\";\n        };\n        \n        if (autocorrect == null) {\n          autocorrect = true;\n        };\n        return self.$normalize_system_path(asset_ref, self.document.$base_dir(), nil, $hash2([\"target_name\", \"recover\"], {\"target_name\": asset_name, \"recover\": autocorrect}));\n      }, $AbstractNode_normalize_asset_path$31.$$arity = -2);\n      \n      Opal.def(self, '$normalize_system_path', $AbstractNode_normalize_system_path$32 = function $$normalize_system_path(target, start, jail, opts) {\n        var self = this, doc = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        \n        if (jail == null) {\n          jail = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy($rb_lt((doc = self.document).$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n          if ($truthy(start)) {\n            if ($truthy(doc.$path_resolver()['$root?'](start))) {\n            } else {\n              start = $$$('::', 'File').$join(doc.$base_dir(), start)\n            }\n          } else {\n            start = doc.$base_dir()\n          }\n        } else {\n          \n          if ($truthy(start)) {\n          } else {\n            start = doc.$base_dir()\n          };\n          if ($truthy(jail)) {\n          } else {\n            jail = doc.$base_dir()\n          };\n        };\n        return doc.$path_resolver().$system_path(target, start, jail, opts);\n      }, $AbstractNode_normalize_system_path$32.$$arity = -2);\n      \n      Opal.def(self, '$normalize_web_path', $AbstractNode_normalize_web_path$33 = function $$normalize_web_path(target, start, preserve_uri_target) {\n        var $a, self = this;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        \n        if (preserve_uri_target == null) {\n          preserve_uri_target = true;\n        };\n        if ($truthy(($truthy($a = preserve_uri_target) ? $$($nesting, 'Helpers')['$uriish?'](target) : $a))) {\n          return $$($nesting, 'Helpers').$encode_spaces_in_uri(target)\n        } else {\n          return self.document.$path_resolver().$web_path(target, start)\n        };\n      }, $AbstractNode_normalize_web_path$33.$$arity = -2);\n      \n      Opal.def(self, '$read_asset', $AbstractNode_read_asset$34 = function $$read_asset(path, opts) {\n        var $a, self = this;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy($$$('::', 'Hash')['$==='](opts))) {\n        } else {\n          opts = $hash2([\"warn_on_failure\"], {\"warn_on_failure\": opts['$!='](false)})\n        };\n        if ($truthy($$$('::', 'File')['$readable?'](path))) {\n          if ($truthy(opts['$[]'](\"normalize\"))) {\n            \n            return $$($nesting, 'Helpers').$prepare_source_string($$$('::', 'File').$read(path, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_READ_MODE')}))).$join($$($nesting, 'LF'));\n          } else {\n            \n            return $$$('::', 'File').$read(path, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_READ_MODE')}));\n          }\n        } else if ($truthy(opts['$[]'](\"warn_on_failure\"))) {\n          \n          self.$logger().$warn(\"\" + (($truthy($a = self.$attr(\"docfile\")) ? $a : \"<stdin>\")) + \": \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"file\")) + \" does not exist or cannot be read: \" + (path));\n          return nil;\n        } else {\n          return nil\n        };\n      }, $AbstractNode_read_asset$34.$$arity = -2);\n      \n      Opal.def(self, '$read_contents', $AbstractNode_read_contents$35 = function $$read_contents(target, opts) {\n        var $a, $b, $c, $$36, $$37, self = this, doc = nil, start = nil, contents = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        doc = self.document;\n        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : ($truthy($b = ($truthy($c = (start = opts['$[]'](\"start\"))) ? $$($nesting, 'Helpers')['$uriish?'](start) : $c)) ? (target = doc.$path_resolver().$web_path(target, start)) : $b)))) {\n          if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n            \n            if ($truthy(doc['$attr?'](\"cache-uri\"))) {\n              $$($nesting, 'Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")};\n            \n            try {\n              if ($truthy(opts['$[]'](\"normalize\"))) {\n                contents = $$($nesting, 'Helpers').$prepare_source_string($send($$$('::', 'OpenURI'), 'open_uri', [target, $$($nesting, 'URI_READ_MODE')], ($$36 = function(f){var self = $$36.$$s || this;\n\n                \n                  \n                  if (f == null) {\n                    f = nil;\n                  };\n                  return f.$read();}, $$36.$$s = self, $$36.$$arity = 1, $$36))).$join($$($nesting, 'LF'))\n              } else {\n                contents = $send($$$('::', 'OpenURI'), 'open_uri', [target, $$($nesting, 'URI_READ_MODE')], ($$37 = function(f){var self = $$37.$$s || this;\n\n                \n                  \n                  if (f == null) {\n                    f = nil;\n                  };\n                  return f.$read();}, $$37.$$s = self, $$37.$$arity = 1, $$37))\n              }\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n                    self.$logger().$warn(\"\" + \"could not retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target))}\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };;\n          } else if ($truthy(opts.$fetch(\"warn_on_failure\", true))) {\n            self.$logger().$warn(\"\" + \"cannot retrieve contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" at URI: \" + (target) + \" (allow-uri-read attribute not enabled)\")}\n        } else {\n          \n          target = self.$normalize_system_path(target, opts['$[]'](\"start\"), nil, $hash2([\"target_name\"], {\"target_name\": ($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")}));\n          contents = self.$read_asset(target, $hash2([\"normalize\", \"warn_on_failure\", \"label\"], {\"normalize\": opts['$[]'](\"normalize\"), \"warn_on_failure\": opts.$fetch(\"warn_on_failure\", true), \"label\": opts['$[]'](\"label\")}));\n        };\n        if ($truthy(($truthy($a = ($truthy($b = contents) ? opts['$[]'](\"warn_if_empty\") : $b)) ? contents['$empty?']() : $a))) {\n          self.$logger().$warn(\"\" + \"contents of \" + (($truthy($a = opts['$[]'](\"label\")) ? $a : \"asset\")) + \" is empty: \" + (target))};\n        return contents;\n      }, $AbstractNode_read_contents$35.$$arity = -2);\n      return (Opal.def(self, '$is_uri?', $AbstractNode_is_uri$ques$38 = function(str) {\n        var self = this;\n\n        return $$($nesting, 'Helpers')['$uriish?'](str)\n      }, $AbstractNode_is_uri$ques$38.$$arity = 1), nil) && 'is_uri?';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/abstract_block\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_reader', '$attr_writer', '$attr_accessor', '$==', '$===', '$level', '$file', '$lineno', '$playback_attributes', '$convert', '$converter', '$join', '$map', '$to_s', '$parent', '$parent=', '$-', '$<<', '$empty?', '$>', '$Integer', '$find_by_internal', '$to_proc', '$context', '$[]', '$items', '$+', '$find_index', '$include?', '$next_adjacent_block', '$blocks', '$select', '$sub_specialchars', '$match?', '$sub_replacements', '$title', '$apply_title_subs', '$delete', '$reftext', '$!', '$nil_or_empty?', '$sub_placeholder', '$sub_quotes', '$compat_mode', '$attributes', '$chomp', '$increment_and_store_counter', '$index=', '$numbered', '$sectname', '$counter', '$numeral=', '$numeral', '$caption=', '$int_to_roman', '$each', '$assign_numeral', '$reindex_sections', '$protected', '$has_role?', '$raise', '$header?', '$!=', '$flatten', '$head', '$rows', '$merge', '$body', '$foot', '$style', '$inner_document']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AbstractBlock');\n\n      var $nesting = [self].concat($parent_nesting), $AbstractBlock_initialize$1, $AbstractBlock_block$ques$2, $AbstractBlock_inline$ques$3, $AbstractBlock_file$4, $AbstractBlock_lineno$5, $AbstractBlock_convert$6, $AbstractBlock_content$7, $AbstractBlock_context$eq$9, $AbstractBlock_$lt$lt$10, $AbstractBlock_blocks$ques$11, $AbstractBlock_sections$ques$12, $AbstractBlock_number$13, $AbstractBlock_number$eq$14, $AbstractBlock_find_by$15, $AbstractBlock_next_adjacent_block$16, $AbstractBlock_sections$18, $AbstractBlock_alt$20, $AbstractBlock_caption$21, $AbstractBlock_captioned_title$22, $AbstractBlock_list_marker_keyword$23, $AbstractBlock_title$24, $AbstractBlock_title$ques$25, $AbstractBlock_title$eq$26, $AbstractBlock_sub$ques$27, $AbstractBlock_remove_sub$28, $AbstractBlock_xreftext$29, $AbstractBlock_assign_caption$30, $AbstractBlock_assign_numeral$31, $AbstractBlock_reindex_sections$32, $AbstractBlock_find_by_internal$34;\n\n      self.$$prototype.source_location = self.$$prototype.document = self.$$prototype.attributes = self.$$prototype.blocks = self.$$prototype.next_section_index = self.$$prototype.numeral = self.$$prototype.context = self.$$prototype.parent = self.$$prototype.caption = self.$$prototype.style = self.$$prototype.converted_title = self.$$prototype.title = self.$$prototype.subs = self.$$prototype.next_section_ordinal = self.$$prototype.id = self.$$prototype.header = nil;\n      \n      self.$attr_reader(\"blocks\");\n      self.$attr_writer(\"caption\");\n      self.$attr_accessor(\"content_model\");\n      self.$attr_accessor(\"level\");\n      self.$attr_accessor(\"numeral\");\n      self.$attr_accessor(\"source_location\");\n      self.$attr_accessor(\"style\");\n      self.$attr_reader(\"subs\");\n      \n      Opal.def(self, '$initialize', $AbstractBlock_initialize$1 = function $$initialize(parent, context, opts) {\n        var $a, $iter = $AbstractBlock_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $AbstractBlock_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $AbstractBlock_initialize$1, false), $zuper, $iter);\n        self.content_model = \"compound\";\n        self.blocks = [];\n        self.subs = [];\n        self.id = (self.title = (self.caption = (self.numeral = (self.style = (self.default_subs = (self.source_location = nil))))));\n        if ($truthy(($truthy($a = context['$=='](\"document\")) ? $a : context['$=='](\"section\")))) {\n          \n          self.level = (self.next_section_index = 0);\n          return (self.next_section_ordinal = 1);\n        } else if ($truthy($$($nesting, 'AbstractBlock')['$==='](parent))) {\n          return (self.level = parent.$level())\n        } else {\n          return (self.level = nil)\n        };\n      }, $AbstractBlock_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$block?', $AbstractBlock_block$ques$2 = function() {\n        var self = this;\n\n        return true\n      }, $AbstractBlock_block$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$inline?', $AbstractBlock_inline$ques$3 = function() {\n        var self = this;\n\n        return false\n      }, $AbstractBlock_inline$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$file', $AbstractBlock_file$4 = function $$file() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$file() : $a)\n      }, $AbstractBlock_file$4.$$arity = 0);\n      \n      Opal.def(self, '$lineno', $AbstractBlock_lineno$5 = function $$lineno() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$lineno() : $a)\n      }, $AbstractBlock_lineno$5.$$arity = 0);\n      \n      Opal.def(self, '$convert', $AbstractBlock_convert$6 = function $$convert() {\n        var self = this;\n\n        \n        self.document.$playback_attributes(self.attributes);\n        return self.$converter().$convert(self);\n      }, $AbstractBlock_convert$6.$$arity = 0);\n      Opal.alias(self, \"render\", \"convert\");\n      \n      Opal.def(self, '$content', $AbstractBlock_content$7 = function $$content() {\n        var $$8, self = this;\n\n        return $send(self.blocks, 'map', [], ($$8 = function(b){var self = $$8.$$s || this;\n\n        \n          \n          if (b == null) {\n            b = nil;\n          };\n          return b.$convert();}, $$8.$$s = self, $$8.$$arity = 1, $$8)).$join($$($nesting, 'LF'))\n      }, $AbstractBlock_content$7.$$arity = 0);\n      \n      Opal.def(self, '$context=', $AbstractBlock_context$eq$9 = function(context) {\n        var self = this;\n\n        return (self.node_name = (self.context = context).$to_s())\n      }, $AbstractBlock_context$eq$9.$$arity = 1);\n      \n      Opal.def(self, '$<<', $AbstractBlock_$lt$lt$10 = function(block) {\n        var self = this, $writer = nil;\n\n        \n        if (block.$parent()['$=='](self)) {\n        } else {\n          \n          $writer = [self];\n          $send(block, 'parent=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        self.blocks['$<<'](block);\n        return self;\n      }, $AbstractBlock_$lt$lt$10.$$arity = 1);\n      Opal.alias(self, \"append\", \"<<\");\n      \n      Opal.def(self, '$blocks?', $AbstractBlock_blocks$ques$11 = function() {\n        var self = this;\n\n        if ($truthy(self.blocks['$empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      }, $AbstractBlock_blocks$ques$11.$$arity = 0);\n      \n      Opal.def(self, '$sections?', $AbstractBlock_sections$ques$12 = function() {\n        var self = this;\n\n        return $rb_gt(self.next_section_index, 0)\n      }, $AbstractBlock_sections$ques$12.$$arity = 0);\n      \n      Opal.def(self, '$number', $AbstractBlock_number$13 = function $$number() {\n        var self = this;\n\n        try {\n          \n          return self.$Integer(self.numeral);\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              return self.numeral\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        }\n      }, $AbstractBlock_number$13.$$arity = 0);\n      \n      Opal.def(self, '$number=', $AbstractBlock_number$eq$14 = function(val) {\n        var self = this;\n\n        return (self.numeral = val.$to_s())\n      }, $AbstractBlock_number$eq$14.$$arity = 1);\n      \n      Opal.def(self, '$find_by', $AbstractBlock_find_by$15 = function $$find_by(selector) {\n        var $iter = $AbstractBlock_find_by$15.$$p, block = $iter || nil, self = this, result = nil;\n\n        if ($iter) $AbstractBlock_find_by$15.$$p = null;\n        \n        \n        if ($iter) $AbstractBlock_find_by$15.$$p = null;;\n        \n        if (selector == null) {\n          selector = $hash2([], {});\n        };\n        try {\n          return $send(self, 'find_by_internal', [selector, (result = [])], block.$to_proc())\n        } catch ($err) {\n          if (Opal.rescue($err, [$$$('::', 'StopIteration')])) {\n            try {\n              return result\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $AbstractBlock_find_by$15.$$arity = -1);\n      Opal.alias(self, \"query\", \"find_by\");\n      \n      Opal.def(self, '$next_adjacent_block', $AbstractBlock_next_adjacent_block$16 = function $$next_adjacent_block() {\n        var $a, $$17, self = this, p = nil, sib = nil;\n\n        if (self.context['$=='](\"document\")) {\n          return nil\n        } else if ($truthy((($a = (p = self.parent).$context()['$=='](\"dlist\")) ? self.context['$=='](\"list_item\") : (p = self.parent).$context()['$=='](\"dlist\")))) {\n          if ($truthy((sib = p.$items()['$[]']($rb_plus($send(p.$items(), 'find_index', [], ($$17 = function(terms, desc){var self = $$17.$$s || this, $b;\n\n          \n            \n            if (terms == null) {\n              terms = nil;\n            };\n            \n            if (desc == null) {\n              desc = nil;\n            };\n            return ($truthy($b = terms['$include?'](self)) ? $b : desc['$=='](self));}, $$17.$$s = self, $$17.$$arity = 2, $$17)), 1))))) {\n            return sib\n          } else {\n            return p.$next_adjacent_block()\n          }\n        } else if ($truthy((sib = p.$blocks()['$[]']($rb_plus(p.$blocks().$find_index(self), 1))))) {\n          return sib\n        } else {\n          return p.$next_adjacent_block()\n        }\n      }, $AbstractBlock_next_adjacent_block$16.$$arity = 0);\n      \n      Opal.def(self, '$sections', $AbstractBlock_sections$18 = function $$sections() {\n        var $$19, self = this;\n\n        return $send(self.blocks, 'select', [], ($$19 = function(block){var self = $$19.$$s || this;\n\n        \n          \n          if (block == null) {\n            block = nil;\n          };\n          return block.$context()['$=='](\"section\");}, $$19.$$s = self, $$19.$$arity = 1, $$19))\n      }, $AbstractBlock_sections$18.$$arity = 0);\n      \n      Opal.def(self, '$alt', $AbstractBlock_alt$20 = function $$alt() {\n        var self = this, text = nil;\n\n        if ($truthy((text = self.attributes['$[]'](\"alt\")))) {\n          if (text['$=='](self.attributes['$[]'](\"default-alt\"))) {\n            return self.$sub_specialchars(text)\n          } else {\n            \n            text = self.$sub_specialchars(text);\n            if ($truthy($$($nesting, 'ReplaceableTextRx')['$match?'](text))) {\n              \n              return self.$sub_replacements(text);\n            } else {\n              return text\n            };\n          }\n        } else {\n          return \"\"\n        }\n      }, $AbstractBlock_alt$20.$$arity = 0);\n      \n      Opal.def(self, '$caption', $AbstractBlock_caption$21 = function $$caption() {\n        var self = this;\n\n        if (self.context['$=='](\"admonition\")) {\n          return self.attributes['$[]'](\"textlabel\")\n        } else {\n          return self.caption\n        }\n      }, $AbstractBlock_caption$21.$$arity = 0);\n      \n      Opal.def(self, '$captioned_title', $AbstractBlock_captioned_title$22 = function $$captioned_title() {\n        var self = this;\n\n        return \"\" + (self.caption) + (self.$title())\n      }, $AbstractBlock_captioned_title$22.$$arity = 0);\n      \n      Opal.def(self, '$list_marker_keyword', $AbstractBlock_list_marker_keyword$23 = function $$list_marker_keyword(list_type) {\n        var $a, self = this;\n\n        \n        \n        if (list_type == null) {\n          list_type = nil;\n        };\n        return $$($nesting, 'ORDERED_LIST_KEYWORDS')['$[]'](($truthy($a = list_type) ? $a : self.style));\n      }, $AbstractBlock_list_marker_keyword$23.$$arity = -1);\n      \n      Opal.def(self, '$title', $AbstractBlock_title$24 = function $$title() {\n        var $a, $b, self = this;\n\n        return (self.converted_title = ($truthy($a = self.converted_title) ? $a : ($truthy($b = self.title) ? self.$apply_title_subs(self.title) : $b)))\n      }, $AbstractBlock_title$24.$$arity = 0);\n      \n      Opal.def(self, '$title?', $AbstractBlock_title$ques$25 = function() {\n        var self = this;\n\n        if ($truthy(self.title)) {\n          return true\n        } else {\n          return false\n        }\n      }, $AbstractBlock_title$ques$25.$$arity = 0);\n      \n      Opal.def(self, '$title=', $AbstractBlock_title$eq$26 = function(val) {\n        var self = this;\n\n        \n        self.converted_title = nil;\n        return (self.title = val);\n      }, $AbstractBlock_title$eq$26.$$arity = 1);\n      \n      Opal.def(self, '$sub?', $AbstractBlock_sub$ques$27 = function(name) {\n        var self = this;\n\n        return self.subs['$include?'](name)\n      }, $AbstractBlock_sub$ques$27.$$arity = 1);\n      \n      Opal.def(self, '$remove_sub', $AbstractBlock_remove_sub$28 = function $$remove_sub(sub) {\n        var self = this;\n\n        \n        self.subs.$delete(sub);\n        return nil;\n      }, $AbstractBlock_remove_sub$28.$$arity = 1);\n      \n      Opal.def(self, '$xreftext', $AbstractBlock_xreftext$29 = function $$xreftext(xrefstyle) {\n        var $a, $b, self = this, val = nil, $case = nil, quoted_title = nil, caption_attr_name = nil, prefix = nil;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {\n          return val\n        } else if ($truthy(($truthy($a = ($truthy($b = xrefstyle) ? self.title : $b)) ? self.caption['$nil_or_empty?']()['$!']() : $a))) {\n          return (function() {$case = xrefstyle;\n          if (\"full\"['$===']($case)) {\n          quoted_title = self.$sub_placeholder(self.$sub_quotes((function() {if ($truthy(self.document.$compat_mode())) {\n            return \"``%s''\"\n          } else {\n            return \"\\\"`%s`\\\"\"\n          }; return nil; })()), self.$title());\n          if ($truthy(($truthy($a = ($truthy($b = self.numeral) ? (caption_attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](self.context)) : $b)) ? (prefix = self.document.$attributes()['$[]'](caption_attr_name)) : $a))) {\n            return \"\" + (prefix) + \" \" + (self.numeral) + \", \" + (quoted_title)\n          } else {\n            return \"\" + (self.caption.$chomp(\". \")) + \", \" + (quoted_title)\n          };}\n          else if (\"short\"['$===']($case)) {if ($truthy(($truthy($a = ($truthy($b = self.numeral) ? (caption_attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](self.context)) : $b)) ? (prefix = self.document.$attributes()['$[]'](caption_attr_name)) : $a))) {\n            return \"\" + (prefix) + \" \" + (self.numeral)\n          } else {\n            return self.caption.$chomp(\". \")\n          }}\n          else {return self.$title()}})()\n        } else {\n          return self.$title()\n        };\n      }, $AbstractBlock_xreftext$29.$$arity = -1);\n      \n      Opal.def(self, '$assign_caption', $AbstractBlock_assign_caption$30 = function $$assign_caption(value, caption_context) {\n        var $a, $b, self = this, attr_name = nil, prefix = nil;\n\n        \n        \n        if (caption_context == null) {\n          caption_context = self.context;\n        };\n        if ($truthy(($truthy($a = ($truthy($b = self.caption) ? $b : self.title['$!']())) ? $a : (self.caption = ($truthy($b = value) ? $b : self.document.$attributes()['$[]'](\"caption\")))))) {\n          return nil\n        } else if ($truthy(($truthy($a = (attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](caption_context))) ? (prefix = self.document.$attributes()['$[]'](attr_name)) : $a))) {\n          \n          self.caption = \"\" + (prefix) + \" \" + ((self.numeral = self.document.$increment_and_store_counter(\"\" + (caption_context) + \"-number\", self))) + \". \";\n          return nil;\n        } else {\n          return nil\n        };\n      }, $AbstractBlock_assign_caption$30.$$arity = -2);\n      \n      Opal.def(self, '$assign_numeral', $AbstractBlock_assign_numeral$31 = function $$assign_numeral(section) {\n        var $a, self = this, $writer = nil, like = nil, sectname = nil, caption = nil;\n\n        \n        self.next_section_index = $rb_plus((($writer = [self.next_section_index]), $send(section, 'index=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]), 1);\n        if ($truthy((like = section.$numbered()))) {\n          if ((sectname = section.$sectname())['$=='](\"appendix\")) {\n            \n            \n            $writer = [self.document.$counter(\"appendix-number\", \"A\")];\n            $send(section, 'numeral=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [(function() {if ($truthy((caption = self.document.$attributes()['$[]'](\"appendix-caption\")))) {\n              return \"\" + (caption) + \" \" + (section.$numeral()) + \": \"\n            } else {\n              return \"\" + (section.$numeral()) + \". \"\n            }; return nil; })()];\n            $send(section, 'caption=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else if ($truthy(($truthy($a = sectname['$=='](\"chapter\")) ? $a : like['$=='](\"chapter\")))) {\n            \n            $writer = [self.document.$counter(\"chapter-number\", 1).$to_s()];\n            $send(section, 'numeral=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            \n            $writer = [(function() {if (sectname['$=='](\"part\")) {\n              \n              return $$($nesting, 'Helpers').$int_to_roman(self.next_section_ordinal);\n            } else {\n              return self.next_section_ordinal.$to_s()\n            }; return nil; })()];\n            $send(section, 'numeral=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            self.next_section_ordinal = $rb_plus(self.next_section_ordinal, 1);\n          }};\n        return nil;\n      }, $AbstractBlock_assign_numeral$31.$$arity = 1);\n      \n      Opal.def(self, '$reindex_sections', $AbstractBlock_reindex_sections$32 = function $$reindex_sections() {\n        var $$33, self = this;\n\n        \n        self.next_section_index = 0;\n        self.next_section_ordinal = 1;\n        return $send(self.blocks, 'each', [], ($$33 = function(block){var self = $$33.$$s || this;\n\n        \n          \n          if (block == null) {\n            block = nil;\n          };\n          if (block.$context()['$=='](\"section\")) {\n            \n            self.$assign_numeral(block);\n            return block.$reindex_sections();\n          } else {\n            return nil\n          };}, $$33.$$s = self, $$33.$$arity = 1, $$33));\n      }, $AbstractBlock_reindex_sections$32.$$arity = 0);\n      self.$protected();\n      return (Opal.def(self, '$find_by_internal', $AbstractBlock_find_by_internal$34 = function $$find_by_internal(selector, result) {\n        var $iter = $AbstractBlock_find_by_internal$34.$$p, block = $iter || nil, $a, $b, $c, $d, $$35, $$36, $$37, $$39, $$41, $$43, self = this, any_context = nil, context_selector = nil, style_selector = nil, role_selector = nil, id_selector = nil, verdict = nil, $case = nil;\n\n        if ($iter) $AbstractBlock_find_by_internal$34.$$p = null;\n        \n        \n        if ($iter) $AbstractBlock_find_by_internal$34.$$p = null;;\n        \n        if (selector == null) {\n          selector = $hash2([], {});\n        };\n        \n        if (result == null) {\n          result = [];\n        };\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = (any_context = (function() {if ($truthy((context_selector = selector['$[]'](\"context\")))) {\n          return nil\n        } else {\n          return true\n        }; return nil; })())) ? $d : context_selector['$=='](self.context))) ? ($truthy($d = (style_selector = selector['$[]'](\"style\"))['$!']()) ? $d : style_selector['$=='](self.style)) : $c)) ? ($truthy($c = (role_selector = selector['$[]'](\"role\"))['$!']()) ? $c : self['$has_role?'](role_selector)) : $b)) ? ($truthy($b = (id_selector = selector['$[]'](\"id\"))['$!']()) ? $b : id_selector['$=='](self.id)) : $a))) {\n          if ((block !== nil)) {\n            if ($truthy((verdict = Opal.yield1(block, self)))) {\n              $case = verdict;\n              if (\"prune\"['$===']($case)) {\n              result['$<<'](self);\n              if ($truthy(id_selector)) {\n                self.$raise($$$('::', 'StopIteration'))};\n              return result;}\n              else if (\"reject\"['$===']($case)) {\n              if ($truthy(id_selector)) {\n                self.$raise($$$('::', 'StopIteration'))};\n              return result;}\n              else if (\"stop\"['$===']($case)) {self.$raise($$$('::', 'StopIteration'))}\n              else {\n              result['$<<'](self);\n              if ($truthy(id_selector)) {\n                self.$raise($$$('::', 'StopIteration'))};}\n            } else if ($truthy(id_selector)) {\n              self.$raise($$$('::', 'StopIteration'))}\n          } else {\n            \n            result['$<<'](self);\n            if ($truthy(id_selector)) {\n              self.$raise($$$('::', 'StopIteration'))};\n          }};\n        $case = self.context;\n        if (\"document\"['$===']($case)) {if (context_selector['$=='](\"document\")) {\n        } else {\n          \n          if ($truthy(($truthy($a = self['$header?']()) ? ($truthy($b = any_context) ? $b : context_selector['$=='](\"section\")) : $a))) {\n            $send(self.header, 'find_by_internal', [selector, result], block.$to_proc())};\n          $send(self.blocks, 'each', [], ($$35 = function(b){var self = $$35.$$s || this, $e;\n\n          \n            \n            if (b == null) {\n              b = nil;\n            };\n            if ($truthy((($e = context_selector['$=='](\"section\")) ? b.$context()['$!='](\"section\") : context_selector['$=='](\"section\")))) {\n              return nil;};\n            return $send(b, 'find_by_internal', [selector, result], block.$to_proc());}, $$35.$$s = self, $$35.$$arity = 1, $$35));\n        }}\n        else if (\"dlist\"['$===']($case)) {if ($truthy(($truthy($a = any_context) ? $a : context_selector['$!='](\"section\")))) {\n          $send(self.blocks.$flatten(), 'each', [], ($$36 = function(b){var self = $$36.$$s || this;\n\n          \n            \n            if (b == null) {\n              b = nil;\n            };\n            if ($truthy(b)) {\n              return $send(b, 'find_by_internal', [selector, result], block.$to_proc())\n            } else {\n              return nil\n            };}, $$36.$$s = self, $$36.$$arity = 1, $$36))}}\n        else if (\"table\"['$===']($case)) {if ($truthy(selector['$[]'](\"traverse_documents\"))) {\n          \n          $send(self.$rows().$head(), 'each', [], ($$37 = function(r){var self = $$37.$$s || this, $$38;\n\n          \n            \n            if (r == null) {\n              r = nil;\n            };\n            return $send(r, 'each', [], ($$38 = function(c){var self = $$38.$$s || this;\n\n            \n              \n              if (c == null) {\n                c = nil;\n              };\n              return $send(c, 'find_by_internal', [selector, result], block.$to_proc());}, $$38.$$s = self, $$38.$$arity = 1, $$38));}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n          if (context_selector['$=='](\"inner_document\")) {\n            selector = selector.$merge($hash2([\"context\"], {\"context\": \"document\"}))};\n          $send($rb_plus(self.$rows().$body(), self.$rows().$foot()), 'each', [], ($$39 = function(r){var self = $$39.$$s || this, $$40;\n\n          \n            \n            if (r == null) {\n              r = nil;\n            };\n            return $send(r, 'each', [], ($$40 = function(c){var self = $$40.$$s || this;\n\n            \n              \n              if (c == null) {\n                c = nil;\n              };\n              $send(c, 'find_by_internal', [selector, result], block.$to_proc());\n              if (c.$style()['$=='](\"asciidoc\")) {\n                return $send(c.$inner_document(), 'find_by_internal', [selector, result], block.$to_proc())\n              } else {\n                return nil\n              };}, $$40.$$s = self, $$40.$$arity = 1, $$40));}, $$39.$$s = self, $$39.$$arity = 1, $$39));\n        } else {\n          $send($rb_plus($rb_plus(self.$rows().$head(), self.$rows().$body()), self.$rows().$foot()), 'each', [], ($$41 = function(r){var self = $$41.$$s || this, $$42;\n\n          \n            \n            if (r == null) {\n              r = nil;\n            };\n            return $send(r, 'each', [], ($$42 = function(c){var self = $$42.$$s || this;\n\n            \n              \n              if (c == null) {\n                c = nil;\n              };\n              return $send(c, 'find_by_internal', [selector, result], block.$to_proc());}, $$42.$$s = self, $$42.$$arity = 1, $$42));}, $$41.$$s = self, $$41.$$arity = 1, $$41))\n        }}\n        else {$send(self.blocks, 'each', [], ($$43 = function(b){var self = $$43.$$s || this, $e;\n\n        \n          \n          if (b == null) {\n            b = nil;\n          };\n          if ($truthy((($e = context_selector['$=='](\"section\")) ? b.$context()['$!='](\"section\") : context_selector['$=='](\"section\")))) {\n            return nil;};\n          return $send(b, 'find_by_internal', [selector, result], block.$to_proc());}, $$43.$$s = self, $$43.$$arity = 1, $$43))};\n        return result;\n      }, $AbstractBlock_find_by_internal$34.$$arity = -1), nil) && 'find_by_internal';\n    })($nesting[0], $$($nesting, 'AbstractNode'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/attribute_list\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$new', '$[]', '$update', '$parse', '$parse_attribute', '$eos?', '$skip_delimiter', '$+', '$rekey', '$each_with_index', '$[]=', '$-', '$private', '$skip_blank', '$peek', '$===', '$parse_attribute_value', '$get_byte', '$start_with?', '$scan_name', '$end_with?', '$rstrip', '$string', '$==', '$unscan', '$scan_to_delimiter', '$*', '$include?', '$delete', '$each', '$split', '$empty?', '$apply_subs', '$scan_to_quote', '$gsub', '$skip', '$scan']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'AttributeList');\n\n      var $nesting = [self].concat($parent_nesting), $AttributeList_initialize$1, $AttributeList_parse_into$2, $AttributeList_parse$3, $AttributeList_rekey$4, $AttributeList_rekey$5, $AttributeList_parse_attribute$7, $AttributeList_parse_attribute_value$9, $AttributeList_skip_blank$10, $AttributeList_skip_delimiter$11, $AttributeList_scan_name$12, $AttributeList_scan_to_delimiter$13, $AttributeList_scan_to_quote$14;\n\n      self.$$prototype.attributes = self.$$prototype.scanner = self.$$prototype.delimiter = self.$$prototype.block = self.$$prototype.delimiter_skip_pattern = self.$$prototype.delimiter_boundary_pattern = nil;\n      \n      Opal.const_set($nesting[0], 'APOS', \"'\");\n      Opal.const_set($nesting[0], 'BACKSLASH', \"\\\\\");\n      Opal.const_set($nesting[0], 'QUOT', \"\\\"\");\n      Opal.const_set($nesting[0], 'BoundaryRxs', $hash($$($nesting, 'QUOT'), /.*?[^\\\\](?=\")/, $$($nesting, 'APOS'), /.*?[^\\\\](?=')/, \",\", /.*?(?=[ \\t]*(,|$))/));\n      Opal.const_set($nesting[0], 'EscapedQuotes', $hash($$($nesting, 'QUOT'), \"\\\\\\\"\", $$($nesting, 'APOS'), \"\\\\'\"));\n      Opal.const_set($nesting[0], 'NameRx', new RegExp(\"\" + ($$($nesting, 'CG_WORD')) + \"[\" + ($$($nesting, 'CC_WORD')) + \"\\\\-.]*\"));\n      Opal.const_set($nesting[0], 'BlankRx', /[ \\t]+/);\n      Opal.const_set($nesting[0], 'SkipRxs', $hash2([\",\"], {\",\": /[ \\t]*(,|$)/}));\n      \n      Opal.def(self, '$initialize', $AttributeList_initialize$1 = function $$initialize(source, block, delimiter) {\n        var self = this;\n\n        \n        \n        if (block == null) {\n          block = nil;\n        };\n        \n        if (delimiter == null) {\n          delimiter = \",\";\n        };\n        self.scanner = $$$('::', 'StringScanner').$new(source);\n        self.block = block;\n        self.delimiter = delimiter;\n        self.delimiter_skip_pattern = $$($nesting, 'SkipRxs')['$[]'](delimiter);\n        self.delimiter_boundary_pattern = $$($nesting, 'BoundaryRxs')['$[]'](delimiter);\n        return (self.attributes = nil);\n      }, $AttributeList_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$parse_into', $AttributeList_parse_into$2 = function $$parse_into(attributes, positional_attrs) {\n        var self = this;\n\n        \n        \n        if (positional_attrs == null) {\n          positional_attrs = [];\n        };\n        return attributes.$update(self.$parse(positional_attrs));\n      }, $AttributeList_parse_into$2.$$arity = -2);\n      \n      Opal.def(self, '$parse', $AttributeList_parse$3 = function $$parse(positional_attrs) {\n        var $a, self = this, index = nil;\n\n        \n        \n        if (positional_attrs == null) {\n          positional_attrs = [];\n        };\n        if ($truthy(self.attributes)) {\n          return self.attributes};\n        self.attributes = $hash2([], {});\n        index = 0;\n        while ($truthy(self.$parse_attribute(index, positional_attrs))) {\n          \n          if ($truthy(self.scanner['$eos?']())) {\n            break;};\n          self.$skip_delimiter();\n          index = $rb_plus(index, 1);\n        };\n        return self.attributes;\n      }, $AttributeList_parse$3.$$arity = -1);\n      \n      Opal.def(self, '$rekey', $AttributeList_rekey$4 = function $$rekey(positional_attrs) {\n        var self = this;\n\n        return $$($nesting, 'AttributeList').$rekey(self.attributes, positional_attrs)\n      }, $AttributeList_rekey$4.$$arity = 1);\n      Opal.defs(self, '$rekey', $AttributeList_rekey$5 = function $$rekey(attributes, positional_attrs) {\n        var $$6, self = this;\n\n        \n        $send(positional_attrs, 'each_with_index', [], ($$6 = function(key, index){var self = $$6.$$s || this, $a, val = nil, $writer = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          \n          if (index == null) {\n            index = nil;\n          };\n          if ($truthy(($truthy($a = key) ? (val = attributes['$[]']($rb_plus(index, 1))) : $a))) {\n            \n            $writer = [key, val];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            return nil\n          };}, $$6.$$s = self, $$6.$$arity = 2, $$6));\n        return attributes;\n      }, $AttributeList_rekey$5.$$arity = 2);\n      self.$private();\n      \n      Opal.def(self, '$parse_attribute', $AttributeList_parse_attribute$7 = function $$parse_attribute(index, positional_attrs) {\n        var $a, $b, $$8, self = this, continue$ = nil, $case = nil, name = nil, single_quoted = nil, skipped = nil, c = nil, value = nil, $writer = nil, positional_attr_name = nil;\n\n        \n        continue$ = true;\n        self.$skip_blank();\n        $case = self.scanner.$peek(1);\n        if ($$($nesting, 'QUOT')['$===']($case)) {name = self.$parse_attribute_value(self.scanner.$get_byte())}\n        else if ($$($nesting, 'APOS')['$===']($case)) {\n        name = self.$parse_attribute_value(self.scanner.$get_byte());\n        if ($truthy(name['$start_with?']($$($nesting, 'APOS')))) {\n        } else {\n          single_quoted = true\n        };}\n        else {\n        skipped = ($truthy($a = ($truthy($b = (name = self.$scan_name())) ? self.$skip_blank() : $b)) ? $a : 0);\n        if ($truthy(self.scanner['$eos?']())) {\n          \n          if ($truthy(($truthy($a = name) ? $a : self.scanner.$string().$rstrip()['$end_with?'](self.delimiter)))) {\n          } else {\n            return nil\n          };\n          continue$ = nil;\n        } else if ((c = self.scanner.$get_byte())['$=='](self.delimiter)) {\n          self.scanner.$unscan()\n        } else if ($truthy(name)) {\n          if (c['$=='](\"=\")) {\n            \n            self.$skip_blank();\n            $case = (c = self.scanner.$get_byte());\n            if ($$($nesting, 'QUOT')['$===']($case)) {value = self.$parse_attribute_value(c)}\n            else if ($$($nesting, 'APOS')['$===']($case)) {\n            value = self.$parse_attribute_value(c);\n            if ($truthy(value['$start_with?']($$($nesting, 'APOS')))) {\n            } else {\n              single_quoted = true\n            };}\n            else if (self.delimiter['$===']($case)) {\n            value = \"\";\n            self.scanner.$unscan();}\n            else if (nil['$===']($case)) {value = \"\"}\n            else {\n            value = \"\" + (c) + (self.$scan_to_delimiter());\n            if (value['$=='](\"None\")) {\n              return true};};\n          } else {\n            name = \"\" + (name) + ($rb_times(\" \", skipped)) + (c) + (self.$scan_to_delimiter())\n          }\n        } else {\n          name = \"\" + (c) + (self.$scan_to_delimiter())\n        };};\n        if ($truthy(value)) {\n          $case = name;\n          if (\"options\"['$===']($case) || \"opts\"['$===']($case)) {if ($truthy(value['$include?'](\",\"))) {\n            \n            if ($truthy(value['$include?'](\" \"))) {\n              value = value.$delete(\" \")};\n            $send(value.$split(\",\"), 'each', [], ($$8 = function(opt){var self = $$8.$$s || this, $writer = nil;\n              if (self.attributes == null) self.attributes = nil;\n\n            \n              \n              if (opt == null) {\n                opt = nil;\n              };\n              if ($truthy(opt['$empty?']())) {\n                return nil\n              } else {\n                \n                $writer = [\"\" + (opt) + \"-option\", \"\"];\n                $send(self.attributes, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];\n              };}, $$8.$$s = self, $$8.$$arity = 1, $$8));\n          } else if ($truthy(value['$empty?']())) {\n          } else {\n            \n            $writer = [\"\" + (value) + \"-option\", \"\"];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          }}\n          else {if ($truthy(($truthy($a = single_quoted) ? self.block : $a))) {\n            $case = name;\n            if (\"title\"['$===']($case) || \"reftext\"['$===']($case)) {\n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else {\n            $writer = [name, self.block.$apply_subs(value)];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else {\n            \n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          }}\n        } else {\n          \n          if ($truthy(($truthy($a = single_quoted) ? self.block : $a))) {\n            name = self.block.$apply_subs(name)};\n          if ($truthy((positional_attr_name = positional_attrs['$[]'](index)))) {\n            \n            $writer = [positional_attr_name, name];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          \n          $writer = [$rb_plus(index, 1), name];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        };\n        return continue$;\n      }, $AttributeList_parse_attribute$7.$$arity = 2);\n      \n      Opal.def(self, '$parse_attribute_value', $AttributeList_parse_attribute_value$9 = function $$parse_attribute_value(quote) {\n        var self = this, value = nil;\n\n        if (self.scanner.$peek(1)['$=='](quote)) {\n          \n          self.scanner.$get_byte();\n          return \"\";\n        } else if ($truthy((value = self.$scan_to_quote(quote)))) {\n          \n          self.scanner.$get_byte();\n          if ($truthy(value['$include?']($$($nesting, 'BACKSLASH')))) {\n            \n            return value.$gsub($$($nesting, 'EscapedQuotes')['$[]'](quote), quote);\n          } else {\n            return value\n          };\n        } else {\n          return \"\" + (quote) + (self.$scan_to_delimiter())\n        }\n      }, $AttributeList_parse_attribute_value$9.$$arity = 1);\n      \n      Opal.def(self, '$skip_blank', $AttributeList_skip_blank$10 = function $$skip_blank() {\n        var self = this;\n\n        return self.scanner.$skip($$($nesting, 'BlankRx'))\n      }, $AttributeList_skip_blank$10.$$arity = 0);\n      \n      Opal.def(self, '$skip_delimiter', $AttributeList_skip_delimiter$11 = function $$skip_delimiter() {\n        var self = this;\n\n        return self.scanner.$skip(self.delimiter_skip_pattern)\n      }, $AttributeList_skip_delimiter$11.$$arity = 0);\n      \n      Opal.def(self, '$scan_name', $AttributeList_scan_name$12 = function $$scan_name() {\n        var self = this;\n\n        return self.scanner.$scan($$($nesting, 'NameRx'))\n      }, $AttributeList_scan_name$12.$$arity = 0);\n      \n      Opal.def(self, '$scan_to_delimiter', $AttributeList_scan_to_delimiter$13 = function $$scan_to_delimiter() {\n        var self = this;\n\n        return self.scanner.$scan(self.delimiter_boundary_pattern)\n      }, $AttributeList_scan_to_delimiter$13.$$arity = 0);\n      return (Opal.def(self, '$scan_to_quote', $AttributeList_scan_to_quote$14 = function $$scan_to_quote(quote) {\n        var self = this;\n\n        return self.scanner.$scan($$($nesting, 'BoundaryRxs')['$[]'](quote))\n      }, $AttributeList_scan_to_quote$14.$$arity = 1), nil) && 'scan_to_quote';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/block\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$default=', '$-', '$attr_accessor', '$[]', '$key?', '$==', '$===', '$drop', '$delete', '$[]=', '$commit_subs', '$nil_or_empty?', '$prepare_source_string', '$apply_subs', '$join', '$<', '$size', '$empty?', '$rstrip', '$shift', '$pop', '$warn', '$logger', '$to_s', '$class', '$object_id', '$inspect']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Block');\n\n      var $nesting = [self].concat($parent_nesting), $Block_initialize$1, $Block_content$2, $Block_source$3, $Block_to_s$4, $writer = nil;\n\n      self.$$prototype.attributes = self.$$prototype.content_model = self.$$prototype.lines = self.$$prototype.subs = self.$$prototype.blocks = self.$$prototype.context = self.$$prototype.style = nil;\n      \n      \n      $writer = [\"simple\"];\n      $send(Opal.const_set($nesting[0], 'DEFAULT_CONTENT_MODEL', $hash2([\"audio\", \"image\", \"listing\", \"literal\", \"stem\", \"open\", \"page_break\", \"pass\", \"thematic_break\", \"video\"], {\"audio\": \"empty\", \"image\": \"empty\", \"listing\": \"verbatim\", \"literal\": \"verbatim\", \"stem\": \"raw\", \"open\": \"compound\", \"page_break\": \"empty\", \"pass\": \"raw\", \"thematic_break\": \"empty\", \"video\": \"empty\"})), 'default=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      Opal.alias(self, \"blockname\", \"context\");\n      self.$attr_accessor(\"lines\");\n      \n      Opal.def(self, '$initialize', $Block_initialize$1 = function $$initialize(parent, context, opts) {\n        var $a, $iter = $Block_initialize$1.$$p, $yield = $iter || nil, self = this, subs = nil, $writer = nil, raw_source = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Block_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Block_initialize$1, false), $zuper, $iter);\n        self.content_model = ($truthy($a = opts['$[]'](\"content_model\")) ? $a : $$($nesting, 'DEFAULT_CONTENT_MODEL')['$[]'](context));\n        if ($truthy(opts['$key?'](\"subs\"))) {\n          if ($truthy((subs = opts['$[]'](\"subs\")))) {\n            \n            if (subs['$=='](\"default\")) {\n              self.default_subs = opts['$[]'](\"default_subs\")\n            } else if ($truthy($$$('::', 'Array')['$==='](subs))) {\n              \n              self.default_subs = subs.$drop(0);\n              self.attributes.$delete(\"subs\");\n            } else {\n              \n              self.default_subs = nil;\n              \n              $writer = [\"subs\", \"\" + (subs)];\n              $send(self.attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            };\n            self.$commit_subs();\n          } else {\n            \n            self.default_subs = [];\n            self.attributes.$delete(\"subs\");\n          }\n        } else {\n          self.default_subs = nil\n        };\n        if ($truthy((raw_source = opts['$[]'](\"source\"))['$nil_or_empty?']())) {\n          return (self.lines = [])\n        } else if ($truthy($$$('::', 'String')['$==='](raw_source))) {\n          return (self.lines = $$($nesting, 'Helpers').$prepare_source_string(raw_source))\n        } else {\n          return (self.lines = raw_source.$drop(0))\n        };\n      }, $Block_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$content', $Block_content$2 = function $$content() {\n        var $a, $b, $iter = $Block_content$2.$$p, $yield = $iter || nil, self = this, $case = nil, result = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Block_content$2.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        return (function() {$case = self.content_model;\n        if (\"compound\"['$===']($case)) {return $send(self, Opal.find_super_dispatcher(self, 'content', $Block_content$2, false), $zuper, $iter)}\n        else if (\"simple\"['$===']($case)) {return self.$apply_subs(self.lines.$join($$($nesting, 'LF')), self.subs)}\n        else if (\"verbatim\"['$===']($case) || \"raw\"['$===']($case)) {\n        result = self.$apply_subs(self.lines, self.subs);\n        if ($truthy($rb_lt(result.$size(), 2))) {\n          return result['$[]'](0)\n        } else {\n          \n          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first.$rstrip()['$empty?']() : $b))) {\n            result.$shift()\n          };\n          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last.$rstrip()['$empty?']() : $b))) {\n            result.$pop()\n          };\n          return result.$join($$($nesting, 'LF'));\n        };}\n        else {\n        if (self.content_model['$=='](\"empty\")) {\n        } else {\n          self.$logger().$warn(\"\" + \"Unknown content model '\" + (self.content_model) + \"' for block: \" + (self.$to_s()))\n        };\n        return nil;}})()\n      }, $Block_content$2.$$arity = 0);\n      \n      Opal.def(self, '$source', $Block_source$3 = function $$source() {\n        var self = this;\n\n        return self.lines.$join($$($nesting, 'LF'))\n      }, $Block_source$3.$$arity = 0);\n      return (Opal.def(self, '$to_s', $Block_to_s$4 = function $$to_s() {\n        var self = this, content_summary = nil;\n\n        \n        content_summary = (function() {if (self.content_model['$=='](\"compound\")) {\n          return \"\" + \"blocks: \" + (self.blocks.$size())\n        } else {\n          return \"\" + \"lines: \" + (self.lines.$size())\n        }; return nil; })();\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {context: \" + (self.context.$inspect()) + \", content_model: \" + (self.content_model.$inspect()) + \", style: \" + (self.style.$inspect()) + \", \" + (content_summary) + \"}>\";\n      }, $Block_to_s$4.$$arity = 0), nil) && 'to_s';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/callouts\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$next_list', '$<<', '$current_list', '$to_i', '$generate_next_callout_id', '$+', '$<=', '$size', '$[]', '$-', '$chop', '$join', '$map', '$==', '$<', '$private', '$generate_callout_id']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Callouts');\n\n      var $nesting = [self].concat($parent_nesting), $Callouts_initialize$1, $Callouts_register$2, $Callouts_read_next_id$3, $Callouts_callout_ids$4, $Callouts_current_list$6, $Callouts_next_list$7, $Callouts_rewind$8, $Callouts_generate_next_callout_id$9, $Callouts_generate_callout_id$10;\n\n      self.$$prototype.co_index = self.$$prototype.lists = self.$$prototype.list_index = nil;\n      \n      \n      Opal.def(self, '$initialize', $Callouts_initialize$1 = function $$initialize() {\n        var self = this;\n\n        \n        self.lists = [];\n        self.list_index = 0;\n        return self.$next_list();\n      }, $Callouts_initialize$1.$$arity = 0);\n      \n      Opal.def(self, '$register', $Callouts_register$2 = function $$register(li_ordinal) {\n        var self = this, id = nil;\n\n        \n        self.$current_list()['$<<']($hash2([\"ordinal\", \"id\"], {\"ordinal\": li_ordinal.$to_i(), \"id\": (id = self.$generate_next_callout_id())}));\n        self.co_index = $rb_plus(self.co_index, 1);\n        return id;\n      }, $Callouts_register$2.$$arity = 1);\n      \n      Opal.def(self, '$read_next_id', $Callouts_read_next_id$3 = function $$read_next_id() {\n        var self = this, id = nil, list = nil;\n\n        \n        id = nil;\n        list = self.$current_list();\n        if ($truthy($rb_le(self.co_index, list.$size()))) {\n          id = list['$[]']($rb_minus(self.co_index, 1))['$[]'](\"id\")};\n        self.co_index = $rb_plus(self.co_index, 1);\n        return id;\n      }, $Callouts_read_next_id$3.$$arity = 0);\n      \n      Opal.def(self, '$callout_ids', $Callouts_callout_ids$4 = function $$callout_ids(li_ordinal) {\n        var $$5, self = this;\n\n        return $send(self.$current_list(), 'map', [], ($$5 = function(it){var self = $$5.$$s || this;\n\n        \n          \n          if (it == null) {\n            it = nil;\n          };\n          if (it['$[]'](\"ordinal\")['$=='](li_ordinal)) {\n            return \"\" + (it['$[]'](\"id\")) + \" \"\n          } else {\n            return \"\"\n          };}, $$5.$$s = self, $$5.$$arity = 1, $$5)).$join().$chop()\n      }, $Callouts_callout_ids$4.$$arity = 1);\n      \n      Opal.def(self, '$current_list', $Callouts_current_list$6 = function $$current_list() {\n        var self = this;\n\n        return self.lists['$[]']($rb_minus(self.list_index, 1))\n      }, $Callouts_current_list$6.$$arity = 0);\n      \n      Opal.def(self, '$next_list', $Callouts_next_list$7 = function $$next_list() {\n        var self = this;\n\n        \n        self.list_index = $rb_plus(self.list_index, 1);\n        if ($truthy($rb_lt(self.lists.$size(), self.list_index))) {\n          self.lists['$<<']([])};\n        self.co_index = 1;\n        return nil;\n      }, $Callouts_next_list$7.$$arity = 0);\n      \n      Opal.def(self, '$rewind', $Callouts_rewind$8 = function $$rewind() {\n        var self = this;\n\n        \n        self.list_index = 1;\n        self.co_index = 1;\n        return nil;\n      }, $Callouts_rewind$8.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$generate_next_callout_id', $Callouts_generate_next_callout_id$9 = function $$generate_next_callout_id() {\n        var self = this;\n\n        return self.$generate_callout_id(self.list_index, self.co_index)\n      }, $Callouts_generate_next_callout_id$9.$$arity = 0);\n      return (Opal.def(self, '$generate_callout_id', $Callouts_generate_callout_id$10 = function $$generate_callout_id(list_index, co_index) {\n        var self = this;\n\n        return \"\" + \"CO\" + (list_index) + \"-\" + (co_index)\n      }, $Callouts_generate_callout_id$10.$$arity = 2), nil) && 'generate_callout_id';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/converter\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $klass = Opal.klass, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$autoload', '$__dir__', '$attr_reader', '$raise', '$class', '$[]', '$sub', '$slice', '$length', '$==', '$[]=', '$backend_traits', '$-', '$derive_backend_traits', '$register', '$map', '$to_s', '$new', '$create', '$default', '$each', '$default=', '$registry', '$for', '$===', '$supports_templates?', '$merge', '$private', '$include', '$delete', '$clear', '$private_class_method', '$send', '$extend', '$node_name', '$+', '$receiver', '$name', '$warn', '$logger', '$respond_to?', '$content']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Converter');\n\n      var $nesting = [self].concat($parent_nesting), $Converter_initialize$1, $Converter_convert$2, $Converter_handles$ques$3, $Converter_derive_backend_traits$4, $a, $Converter_included$28;\n\n      \n      self.$autoload(\"CompositeConverter\", \"\" + (self.$__dir__()) + \"/converter/composite\");\n      self.$autoload(\"TemplateConverter\", \"\" + (self.$__dir__()) + \"/converter/template\");\n      self.$attr_reader(\"backend\");\n      \n      Opal.def(self, '$initialize', $Converter_initialize$1 = function $$initialize(backend, opts) {\n        var self = this;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        return (self.backend = backend);\n      }, $Converter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$convert', $Converter_convert$2 = function $$convert(node, transform, opts) {\n        var self = this;\n        if (self.backend == null) self.backend = nil;\n\n        \n        \n        if (transform == null) {\n          transform = nil;\n        };\n        \n        if (opts == null) {\n          opts = nil;\n        };\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + (self.$class()) + \" (backend: \" + (self.backend) + \") must implement the #\" + (\"convert\") + \" method\");\n      }, $Converter_convert$2.$$arity = -2);\n      \n      Opal.def(self, '$handles?', $Converter_handles$ques$3 = function(transform) {\n        var self = this;\n\n        return true\n      }, $Converter_handles$ques$3.$$arity = 1);\n      Opal.defs(self, '$derive_backend_traits', $Converter_derive_backend_traits$4 = function $$derive_backend_traits(backend, basebackend) {\n        var $a, self = this, outfilesuffix = nil, filetype = nil;\n\n        \n        \n        if (basebackend == null) {\n          basebackend = nil;\n        };\n        if ($truthy(backend)) {\n        } else {\n          return $hash2([], {})\n        };\n        if ($truthy((outfilesuffix = $$($nesting, 'DEFAULT_EXTENSIONS')['$[]']((basebackend = ($truthy($a = basebackend) ? $a : backend.$sub($$($nesting, 'TrailingDigitsRx'), \"\"))))))) {\n          filetype = outfilesuffix.$slice(1, outfilesuffix.$length())\n        } else {\n          outfilesuffix = \"\" + \".\" + ((filetype = basebackend))\n        };\n        if (filetype['$=='](\"html\")) {\n          return $hash2([\"basebackend\", \"filetype\", \"htmlsyntax\", \"outfilesuffix\"], {\"basebackend\": basebackend, \"filetype\": filetype, \"htmlsyntax\": \"html\", \"outfilesuffix\": outfilesuffix})\n        } else {\n          return $hash2([\"basebackend\", \"filetype\", \"outfilesuffix\"], {\"basebackend\": basebackend, \"filetype\": filetype, \"outfilesuffix\": outfilesuffix})\n        };\n      }, $Converter_derive_backend_traits$4.$$arity = -2);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'BackendTraits');\n\n        var $nesting = [self].concat($parent_nesting), $BackendTraits_basebackend$5, $BackendTraits_filetype$6, $BackendTraits_htmlsyntax$7, $BackendTraits_outfilesuffix$8, $BackendTraits_supports_templates$9, $BackendTraits_supports_templates$ques$10, $BackendTraits_init_backend_traits$11, $BackendTraits_backend_traits$12, $BackendTraits_derive_backend_traits$13;\n\n        \n        \n        Opal.def(self, '$basebackend', $BackendTraits_basebackend$5 = function $$basebackend(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"basebackend\", value];\n            $send(self.$backend_traits(value), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"basebackend\")\n          };\n        }, $BackendTraits_basebackend$5.$$arity = -1);\n        \n        Opal.def(self, '$filetype', $BackendTraits_filetype$6 = function $$filetype(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"filetype\", value];\n            $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"filetype\")\n          };\n        }, $BackendTraits_filetype$6.$$arity = -1);\n        \n        Opal.def(self, '$htmlsyntax', $BackendTraits_htmlsyntax$7 = function $$htmlsyntax(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"htmlsyntax\", value];\n            $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"htmlsyntax\")\n          };\n        }, $BackendTraits_htmlsyntax$7.$$arity = -1);\n        \n        Opal.def(self, '$outfilesuffix', $BackendTraits_outfilesuffix$8 = function $$outfilesuffix(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          if ($truthy(value)) {\n            \n            \n            $writer = [\"outfilesuffix\", value];\n            $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            return self.$backend_traits()['$[]'](\"outfilesuffix\")\n          };\n        }, $BackendTraits_outfilesuffix$8.$$arity = -1);\n        \n        Opal.def(self, '$supports_templates', $BackendTraits_supports_templates$9 = function $$supports_templates(value) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (value == null) {\n            value = true;\n          };\n          $writer = [\"supports_templates\", value];\n          $send(self.$backend_traits(), '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        }, $BackendTraits_supports_templates$9.$$arity = -1);\n        \n        Opal.def(self, '$supports_templates?', $BackendTraits_supports_templates$ques$10 = function() {\n          var self = this;\n\n          return self.$backend_traits()['$[]'](\"supports_templates\")\n        }, $BackendTraits_supports_templates$ques$10.$$arity = 0);\n        \n        Opal.def(self, '$init_backend_traits', $BackendTraits_init_backend_traits$11 = function $$init_backend_traits(value) {\n          var $a, self = this;\n\n          \n          \n          if (value == null) {\n            value = nil;\n          };\n          return (self.backend_traits = ($truthy($a = value) ? $a : $hash2([], {})));\n        }, $BackendTraits_init_backend_traits$11.$$arity = -1);\n        \n        Opal.def(self, '$backend_traits', $BackendTraits_backend_traits$12 = function $$backend_traits(basebackend) {\n          var $a, self = this;\n          if (self.backend_traits == null) self.backend_traits = nil;\n          if (self.backend == null) self.backend = nil;\n\n          \n          \n          if (basebackend == null) {\n            basebackend = nil;\n          };\n          return (self.backend_traits = ($truthy($a = self.backend_traits) ? $a : $$($nesting, 'Converter').$derive_backend_traits(self.backend, basebackend)));\n        }, $BackendTraits_backend_traits$12.$$arity = -1);\n        Opal.alias(self, \"backend_info\", \"backend_traits\");\n        Opal.defs(self, '$derive_backend_traits', $BackendTraits_derive_backend_traits$13 = function $$derive_backend_traits(backend, basebackend) {\n          var self = this;\n\n          \n          \n          if (basebackend == null) {\n            basebackend = nil;\n          };\n          return $$($nesting, 'Converter').$derive_backend_traits(backend, basebackend);\n        }, $BackendTraits_derive_backend_traits$13.$$arity = -2);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Config');\n\n        var $nesting = [self].concat($parent_nesting), $Config_register_for$14;\n\n        \n        Opal.def(self, '$register_for', $Config_register_for$14 = function $$register_for($a) {\n          var $post_args, backends, $$15, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          backends = $post_args;;\n          return $send($$($nesting, 'Converter'), 'register', [self].concat(Opal.to_a($send(backends, 'map', [], ($$15 = function(backend){var self = $$15.$$s || this;\n\n          \n            \n            if (backend == null) {\n              backend = nil;\n            };\n            return backend.$to_s();}, $$15.$$s = self, $$15.$$arity = 1, $$15)))));\n        }, $Config_register_for$14.$$arity = -1)\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $Factory_new$16, $Factory_default$17, $Factory_create$18, $Factory_register$19, $Factory_for$21, $Factory_create$22, $Factory_converters$23, $Factory_registry$24;\n\n        \n        Opal.defs(self, '$new', $Factory_new$16 = function($a, $b) {\n          var $post_args, $kwargs, converters, proxy_default, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          $kwargs = Opal.extract_kwargs($post_args);\n          \n          if ($kwargs == null) {\n            $kwargs = $hash2([], {});\n          } else if (!$kwargs.$$is_hash) {\n            throw Opal.ArgumentError.$new('expected kwargs');\n          };\n          \n          if ($post_args.length > 0) {\n            converters = $post_args[0];\n            $post_args.splice(0, 1);\n          }\n          if (converters == null) {\n            converters = nil;\n          };\n          \n          proxy_default = $kwargs.$$smap[\"proxy_default\"];\n          if (proxy_default == null) {\n            proxy_default = true\n          };\n          if ($truthy(proxy_default)) {\n            \n            return $$($nesting, 'DefaultFactoryProxy').$new(converters);\n          } else {\n            \n            return $$($nesting, 'CustomFactory').$new(converters);\n          };\n        }, $Factory_new$16.$$arity = -1);\n        Opal.defs(self, '$default', $Factory_default$17 = function($a) {\n          var $post_args, args, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $$($nesting, 'Converter');\n        }, $Factory_default$17.$$arity = -1);\n        Opal.defs(self, '$create', $Factory_create$18 = function $$create(backend, opts) {\n          var self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          return self.$default().$create(backend, opts);\n        }, $Factory_create$18.$$arity = -2);\n        \n        Opal.def(self, '$register', $Factory_register$19 = function $$register(converter, $a) {\n          var $post_args, backends, $$20, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          backends = $post_args;;\n          return $send(backends, 'each', [], ($$20 = function(backend){var self = $$20.$$s || this, $writer = nil;\n\n          \n            \n            if (backend == null) {\n              backend = nil;\n            };\n            if (backend['$=='](\"*\")) {\n              \n              \n              $writer = [converter];\n              $send(self.$registry(), 'default=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else {\n              \n              \n              $writer = [backend, converter];\n              $send(self.$registry(), '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            };}, $$20.$$s = self, $$20.$$arity = 1, $$20));\n        }, $Factory_register$19.$$arity = -2);\n        \n        Opal.def(self, '$for', $Factory_for$21 = function(backend) {\n          var self = this;\n\n          return self.$registry()['$[]'](backend)\n        }, $Factory_for$21.$$arity = 1);\n        \n        Opal.def(self, '$create', $Factory_create$22 = function $$create(backend, opts) {\n          var $a, $b, self = this, converter = nil, template_dirs = nil, delegate_backend = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((converter = self.$for(backend)))) {\n            \n            if ($truthy($$$('::', 'Class')['$==='](converter))) {\n              converter = converter.$new(backend, opts)};\n            if ($truthy(($truthy($a = ($truthy($b = (template_dirs = opts['$[]'](\"template_dirs\"))) ? $$($nesting, 'BackendTraits')['$==='](converter) : $b)) ? converter['$supports_templates?']() : $a))) {\n              return $$($nesting, 'CompositeConverter').$new(backend, $$($nesting, 'TemplateConverter').$new(backend, template_dirs, opts), converter, $hash2([\"backend_traits_source\"], {\"backend_traits_source\": converter}))\n            } else {\n              return converter\n            };\n          } else if ($truthy((template_dirs = opts['$[]'](\"template_dirs\")))) {\n            if ($truthy(($truthy($a = (delegate_backend = opts['$[]'](\"delegate_backend\"))) ? (converter = self.$for(delegate_backend)) : $a))) {\n              \n              if ($truthy($$$('::', 'Class')['$==='](converter))) {\n                converter = converter.$new(delegate_backend, opts)};\n              return $$($nesting, 'CompositeConverter').$new(backend, $$($nesting, 'TemplateConverter').$new(backend, template_dirs, opts), converter, $hash2([\"backend_traits_source\"], {\"backend_traits_source\": converter}));\n            } else {\n              return $$($nesting, 'TemplateConverter').$new(backend, template_dirs, opts)\n            }\n          } else {\n            return nil\n          };\n        }, $Factory_create$22.$$arity = -2);\n        \n        Opal.def(self, '$converters', $Factory_converters$23 = function $$converters() {\n          var self = this;\n\n          return self.$registry().$merge()\n        }, $Factory_converters$23.$$arity = 0);\n        self.$private();\n        \n        Opal.def(self, '$registry', $Factory_registry$24 = function $$registry() {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Factory')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"registry\") + \" method\")\n        }, $Factory_registry$24.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'CustomFactory');\n\n        var $nesting = [self].concat($parent_nesting), $CustomFactory_initialize$25, $CustomFactory_unregister_all$26;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        \n        Opal.def(self, '$initialize', $CustomFactory_initialize$25 = function $$initialize(seed_registry) {\n          var self = this, $writer = nil;\n\n          \n          \n          if (seed_registry == null) {\n            seed_registry = nil;\n          };\n          if ($truthy(seed_registry)) {\n            \n            \n            $writer = [seed_registry.$delete(\"*\")];\n            $send(seed_registry, 'default=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            return (self.registry = seed_registry);\n          } else {\n            return (self.registry = $hash2([], {}))\n          };\n        }, $CustomFactory_initialize$25.$$arity = -1);\n        \n        Opal.def(self, '$unregister_all', $CustomFactory_unregister_all$26 = function $$unregister_all() {\n          var self = this, $writer = nil;\n\n          \n          $writer = [nil];\n          $send(self.$registry().$clear(), 'default=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        }, $CustomFactory_unregister_all$26.$$arity = 0);\n        self.$private();\n        return self.$attr_reader(\"registry\");\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DefaultFactory');\n\n        var $nesting = [self].concat($parent_nesting), $DefaultFactory_registry$27;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        self.$private();\n        (Opal.class_variable_set($nesting[0], '@@registry', $hash2([], {})));\n        \n        Opal.def(self, '$registry', $DefaultFactory_registry$27 = function $$registry() {\n          var $a, self = this;\n\n          return (($a = $nesting[0].$$cvars['@@registry']) == null ? nil : $a)\n        }, $DefaultFactory_registry$27.$$arity = 0);\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        } else {\n          nil\n        };\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DefaultFactoryProxy');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        \n        self.$include($$($nesting, 'DefaultFactory'));\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n          return nil\n        } else {\n          return nil\n        };\n      })($nesting[0], $$($nesting, 'CustomFactory'), $nesting);\n      self.$private_class_method(($truthy($a = (Opal.defs(self, '$included', $Converter_included$28 = function $$included(into) {\n        var self = this;\n\n        \n        into.$send(\"include\", $$($nesting, 'BackendTraits'));\n        return into.$extend($$($nesting, 'Config'));\n      }, $Converter_included$28.$$arity = 1), nil) && 'included') ? $a : \"included\"));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Base');\n\n        var $nesting = [self].concat($parent_nesting), $Base_convert$29, $Base_handles$ques$30, $Base_content_only$31, $Base_skip$32;\n\n        self.$$prototype.backend = nil;\n        \n        self.$include($$($nesting, 'Converter'), $$($nesting, 'Logging'));\n        \n        Opal.def(self, '$convert', $Base_convert$29 = function $$convert(node, transform, opts) {\n          var $a, $b, self = this, ex = nil;\n          if ($gvars[\"!\"] == null) $gvars[\"!\"] = nil;\n\n          \n          \n          if (transform == null) {\n            transform = node.$node_name();\n          };\n          \n          if (opts == null) {\n            opts = nil;\n          };\n          try {\n            if ($truthy(opts)) {\n              \n              return self.$send($rb_plus(\"convert_\", transform), node, opts);\n            } else {\n              \n              return self.$send($rb_plus(\"convert_\", transform), node);\n            }\n          } catch ($err) {\n            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n              try {\n                \n                if ($truthy(($truthy($a = ($truthy($b = $$$('::', 'NoMethodError')['$===']((ex = $gvars[\"!\"]))) ? ex.$receiver()['$=='](self) : $b)) ? ex.$name().$to_s()['$=='](transform) : $a))) {\n                } else {\n                  self.$raise()\n                };\n                self.$logger().$warn(\"\" + \"missing convert handler for \" + (ex.$name()) + \" node in \" + (self.backend) + \" backend (\" + (self.$class()) + \")\");\n                return nil;\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          };\n        }, $Base_convert$29.$$arity = -2);\n        \n        Opal.def(self, '$handles?', $Base_handles$ques$30 = function(transform) {\n          var self = this;\n\n          return self['$respond_to?'](\"\" + \"convert_\" + (transform))\n        }, $Base_handles$ques$30.$$arity = 1);\n        \n        Opal.def(self, '$content_only', $Base_content_only$31 = function $$content_only(node) {\n          var self = this;\n\n          return node.$content()\n        }, $Base_content_only$31.$$arity = 1);\n        return (Opal.def(self, '$skip', $Base_skip$32 = function $$skip(node) {\n          var self = this;\n\n          return nil\n        }, $Base_skip$32.$$arity = 1), nil) && 'skip';\n      })($nesting[0], null, $nesting);\n      self.$extend($$($nesting, 'DefaultFactory'));\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/document\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $hash = Opal.hash, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$new', '$attr_reader', '$nil?', '$<<', '$[]', '$[]=', '$-', '$include?', '$strip', '$squeeze', '$gsub', '$empty?', '$!', '$rpartition', '$attr_accessor', '$delete', '$base_dir', '$options', '$merge', '$catalog', '$attributes', '$safe', '$compat_mode', '$outfilesuffix', '$sourcemap', '$path_resolver', '$converter', '$extensions', '$syntax_highlighter', '$each', '$end_with?', '$start_with?', '$slice', '$length', '$chop', '$==', '$downcase', '$extname', '$===', '$value_for_name', '$key?', '$freeze', '$attribute_undefined', '$attribute_missing', '$update', '$&', '$keys', '$name_for_value', '$expand_path', '$pwd', '$>=', '$+', '$abs', '$to_i', '$delete_if', '$update_doctype_attributes', '$cursor', '$parse', '$restore_attributes', '$update_backend_attributes', '$fetch', '$fill_datetime_attributes', '$activate', '$groups', '$create', '$to_proc', '$preprocessors?', '$preprocessors', '$process_method', '$tree_processors?', '$tree_processors', '$!=', '$counter', '$nil_or_empty?', '$nextval', '$to_s', '$value', '$save_to', '$register', '$tap', '$xreftext', '$source', '$source_lines', '$doctitle', '$sectname=', '$title=', '$first_section', '$title', '$reftext', '$>', '$<', '$find', '$context', '$assign_numeral', '$clear_playback_attributes', '$save_attributes', '$name', '$negate', '$rewind', '$replace', '$attribute_locked?', '$apply_attribute_value_subs', '$delete?', '$start', '$doctype', '$content_model', '$warn', '$logger', '$content', '$convert', '$postprocessors?', '$postprocessors', '$record', '$write', '$respond_to?', '$chomp', '$class', '$write_alternate_pages', '$map', '$split', '$resolve_docinfo_subs', '$normalize_system_path', '$read_asset', '$apply_subs', '$docinfo_processors?', '$join', '$concat', '$compact', '$docinfo_processors', '$object_id', '$inspect', '$size', '$private', '$=~', '$resolve_pass_subs', '$apply_header_subs', '$limit_bytesize', '$bytesize', '$valid_encoding?', '$byteslice', '$resolve_subs', '$utc', '$at', '$Integer', '$now', '$index', '$strftime', '$year', '$utc_offset', '$partition', '$create_converter', '$basebackend', '$filetype', '$htmlsyntax', '$derive_backend_traits', '$raise']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Document');\n\n      var $nesting = [self].concat($parent_nesting), $Document$1, $Document_initialize$8, $Document_parse$11, $Document_parsed$ques$14, $Document_counter$15, $Document_increment_and_store_counter$16, $Document_register$17, $Document_resolve_id$18, $Document_footnotes$ques$23, $Document_footnotes$24, $Document_callouts$25, $Document_nested$ques$26, $Document_embedded$ques$27, $Document_extensions$ques$28, $Document_source$29, $Document_source_lines$30, $Document_basebackend$ques$31, $Document_title$32, $Document_title$eq$33, $Document_doctitle$34, $Document_xreftext$35, $Document_author$36, $Document_authors$37, $Document_revdate$38, $Document_notitle$39, $Document_noheader$40, $Document_nofooter$41, $Document_first_section$42, $Document_header$ques$44, $Document_$lt$lt$45, $Document_finalize_header$46, $Document_playback_attributes$47, $Document_restore_attributes$49, $Document_set_attribute$50, $Document_delete_attribute$51, $Document_attribute_locked$ques$52, $Document_set_header_attribute$53, $Document_convert$54, $Document_write$56, $Document_content$57, $Document_docinfo$58, $Document_docinfo_processors$ques$61, $Document_to_s$62, $Document_apply_attribute_value_subs$63, $Document_limit_bytesize$64, $Document_resolve_docinfo_subs$65, $Document_create_converter$66, $Document_clear_playback_attributes$67, $Document_save_attributes$68, $Document_fill_datetime_attributes$70, $Document_update_backend_attributes$71, $Document_update_doctype_attributes$72;\n\n      self.$$prototype.attributes = self.$$prototype.safe = self.$$prototype.sourcemap = self.$$prototype.reader = self.$$prototype.base_dir = self.$$prototype.parsed = self.$$prototype.parent_document = self.$$prototype.extensions = self.$$prototype.options = self.$$prototype.counters = self.$$prototype.catalog = self.$$prototype.reftexts = self.$$prototype.header = self.$$prototype.blocks = self.$$prototype.header_attributes = self.$$prototype.attributes_modified = self.$$prototype.backend = self.$$prototype.attribute_overrides = self.$$prototype.timings = self.$$prototype.converter = self.$$prototype.outfilesuffix = self.$$prototype.docinfo_processor_extensions = self.$$prototype.document = self.$$prototype.max_attribute_value_size = self.$$prototype.id = self.$$prototype.doctype = nil;\n      \n      Opal.const_set($nesting[0], 'ImageReference', $send($$$('::', 'Struct'), 'new', [\"target\", \"imagesdir\"], ($Document$1 = function(){var self = $Document$1.$$s || this;\n\n      return Opal.alias(self, \"to_s\", \"target\")}, $Document$1.$$s = self, $Document$1.$$arity = 0, $Document$1)));\n      Opal.const_set($nesting[0], 'Footnote', $$$('::', 'Struct').$new(\"index\", \"id\", \"text\"));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'AttributeEntry');\n\n        var $nesting = [self].concat($parent_nesting), $AttributeEntry_initialize$2, $AttributeEntry_save_to$3;\n\n        \n        self.$attr_reader(\"name\", \"value\", \"negate\");\n        \n        Opal.def(self, '$initialize', $AttributeEntry_initialize$2 = function $$initialize(name, value, negate) {\n          var self = this;\n\n          \n          \n          if (negate == null) {\n            negate = nil;\n          };\n          self.name = name;\n          self.value = value;\n          return (self.negate = (function() {if ($truthy(negate['$nil?']())) {\n            return value['$nil?']()\n          } else {\n            return negate\n          }; return nil; })());\n        }, $AttributeEntry_initialize$2.$$arity = -3);\n        return (Opal.def(self, '$save_to', $AttributeEntry_save_to$3 = function $$save_to(block_attributes) {\n          var $a, self = this, $writer = nil;\n\n          \n          ($truthy($a = block_attributes['$[]'](\"attribute_entries\")) ? $a : (($writer = [\"attribute_entries\", []]), $send(block_attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<'](self);\n          return self;\n        }, $AttributeEntry_save_to$3.$$arity = 1), nil) && 'save_to';\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Title');\n\n        var $nesting = [self].concat($parent_nesting), $Title_initialize$4, $Title_sanitized$ques$5, $Title_subtitle$ques$6, $Title_to_s$7;\n\n        self.$$prototype.sanitized = self.$$prototype.subtitle = self.$$prototype.combined = nil;\n        \n        self.$attr_reader(\"main\");\n        Opal.alias(self, \"title\", \"main\");\n        self.$attr_reader(\"subtitle\");\n        self.$attr_reader(\"combined\");\n        \n        Opal.def(self, '$initialize', $Title_initialize$4 = function $$initialize(val, opts) {\n          var $a, $b, self = this, sep = nil, _ = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy(($truthy($a = (self.sanitized = opts['$[]'](\"sanitize\"))) ? val['$include?'](\"<\") : $a))) {\n            val = val.$gsub($$($nesting, 'XmlSanitizeRx'), \"\").$squeeze(\" \").$strip()};\n          if ($truthy(($truthy($a = (sep = ($truthy($b = opts['$[]'](\"separator\")) ? $b : \":\"))['$empty?']()) ? $a : val['$include?']((sep = \"\" + (sep) + \" \"))['$!']()))) {\n            \n            self.main = val;\n            self.subtitle = nil;\n          } else {\n            $b = val.$rpartition(sep), $a = Opal.to_ary($b), (self.main = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (self.subtitle = ($a[2] == null ? nil : $a[2])), $b\n          };\n          return (self.combined = val);\n        }, $Title_initialize$4.$$arity = -2);\n        \n        Opal.def(self, '$sanitized?', $Title_sanitized$ques$5 = function() {\n          var self = this;\n\n          return self.sanitized\n        }, $Title_sanitized$ques$5.$$arity = 0);\n        \n        Opal.def(self, '$subtitle?', $Title_subtitle$ques$6 = function() {\n          var self = this;\n\n          if ($truthy(self.subtitle)) {\n            return true\n          } else {\n            return false\n          }\n        }, $Title_subtitle$ques$6.$$arity = 0);\n        return (Opal.def(self, '$to_s', $Title_to_s$7 = function $$to_s() {\n          var self = this;\n\n          return self.combined\n        }, $Title_to_s$7.$$arity = 0), nil) && 'to_s';\n      })($nesting[0], null, $nesting);\n      Opal.const_set($nesting[0], 'Author', $$$('::', 'Struct').$new(\"name\", \"firstname\", \"middlename\", \"lastname\", \"initials\", \"email\"));\n      self.$attr_reader(\"safe\");\n      self.$attr_reader(\"compat_mode\");\n      self.$attr_reader(\"backend\");\n      self.$attr_reader(\"doctype\");\n      self.$attr_accessor(\"sourcemap\");\n      self.$attr_reader(\"catalog\");\n      Opal.alias(self, \"references\", \"catalog\");\n      self.$attr_reader(\"counters\");\n      self.$attr_reader(\"header\");\n      self.$attr_reader(\"base_dir\");\n      self.$attr_reader(\"options\");\n      self.$attr_reader(\"outfilesuffix\");\n      self.$attr_reader(\"parent_document\");\n      self.$attr_reader(\"reader\");\n      self.$attr_reader(\"path_resolver\");\n      self.$attr_reader(\"converter\");\n      self.$attr_reader(\"syntax_highlighter\");\n      self.$attr_reader(\"extensions\");\n      \n      Opal.def(self, '$initialize', $Document_initialize$8 = function $$initialize(data, options) {\n        var $a, $$9, $b, $c, $$10, $d, $e, $f, $g, $iter = $Document_initialize$8.$$p, $yield = $iter || nil, self = this, parent_doc = nil, $writer = nil, attr_overrides = nil, parent_doctype = nil, initialize_extensions = nil, to_file = nil, safe_mode = nil, input_mtime = nil, standalone = nil, attrs = nil, safe_mode_name = nil, base_dir_val = nil, backend_val = nil, doctype_val = nil, size = nil, initial_backend = nil, ext_registry = nil, ext_block = nil;\n\n        if ($iter) $Document_initialize$8.$$p = null;\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Document_initialize$8, false), [self, \"document\"], null);\n        if ($truthy((parent_doc = options.$delete(\"parent\")))) {\n          \n          self.parent_document = parent_doc;\n          ($truthy($a = options['$[]'](\"base_dir\")) ? $a : (($writer = [\"base_dir\", parent_doc.$base_dir()]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          if ($truthy(parent_doc.$options()['$[]'](\"catalog_assets\"))) {\n            \n            $writer = [\"catalog_assets\", true];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          self.catalog = parent_doc.$catalog().$merge($hash2([\"footnotes\"], {\"footnotes\": []}));\n          self.attribute_overrides = (attr_overrides = parent_doc.$attributes().$merge());\n          parent_doctype = attr_overrides.$delete(\"doctype\");\n          attr_overrides.$delete(\"compat-mode\");\n          attr_overrides.$delete(\"toc\");\n          attr_overrides.$delete(\"toc-placement\");\n          attr_overrides.$delete(\"toc-position\");\n          self.safe = parent_doc.$safe();\n          if ($truthy((self.compat_mode = parent_doc.$compat_mode()))) {\n            \n            $writer = [\"compat-mode\", \"\"];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          self.outfilesuffix = parent_doc.$outfilesuffix();\n          self.sourcemap = parent_doc.$sourcemap();\n          self.timings = nil;\n          self.path_resolver = parent_doc.$path_resolver();\n          self.converter = parent_doc.$converter();\n          initialize_extensions = nil;\n          self.extensions = parent_doc.$extensions();\n          self.syntax_highlighter = parent_doc.$syntax_highlighter();\n        } else {\n          \n          self.parent_document = nil;\n          self.catalog = $hash2([\"ids\", \"refs\", \"footnotes\", \"links\", \"images\", \"callouts\", \"includes\"], {\"ids\": $hash2([], {}), \"refs\": $hash2([], {}), \"footnotes\": [], \"links\": [], \"images\": [], \"callouts\": $$($nesting, 'Callouts').$new(), \"includes\": $hash2([], {})});\n          self.attribute_overrides = (attr_overrides = $hash2([], {}));\n          $send(($truthy($a = options['$[]'](\"attributes\")) ? $a : $hash2([], {})), 'each', [], ($$9 = function(key, val){var self = $$9.$$s || this, $b;\n\n          \n            \n            if (key == null) {\n              key = nil;\n            };\n            \n            if (val == null) {\n              val = nil;\n            };\n            if ($truthy(key['$end_with?'](\"@\"))) {\n              if ($truthy(key['$start_with?'](\"!\"))) {\n                $b = [key.$slice(1, $rb_minus(key.$length(), 2)), false], (key = $b[0]), (val = $b[1]), $b\n              } else if ($truthy(key['$end_with?'](\"!@\"))) {\n                $b = [key.$slice(0, $rb_minus(key.$length(), 2)), false], (key = $b[0]), (val = $b[1]), $b\n              } else {\n                $b = [key.$chop(), \"\" + (val) + \"@\"], (key = $b[0]), (val = $b[1]), $b\n              }\n            } else if ($truthy(key['$start_with?'](\"!\"))) {\n              $b = [key.$slice(1, key.$length()), (function() {if (val['$=='](\"@\")) {\n                return false\n              } else {\n                return nil\n              }; return nil; })()], (key = $b[0]), (val = $b[1]), $b\n            } else if ($truthy(key['$end_with?'](\"!\"))) {\n              $b = [key.$chop(), (function() {if (val['$=='](\"@\")) {\n                return false\n              } else {\n                return nil\n              }; return nil; })()], (key = $b[0]), (val = $b[1]), $b};\n            \n            $writer = [key.$downcase(), val];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$9.$$s = self, $$9.$$arity = 2, $$9));\n          if ($truthy((to_file = options['$[]'](\"to_file\")))) {\n            \n            $writer = [\"outfilesuffix\", $$($nesting, 'Helpers').$extname(to_file)];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy((safe_mode = options['$[]'](\"safe\"))['$!']())) {\n            self.safe = $$$($$($nesting, 'SafeMode'), 'SECURE')\n          } else if ($truthy($$$('::', 'Integer')['$==='](safe_mode))) {\n            self.safe = safe_mode\n          } else {\n            self.safe = (function() { try {\n              \n              return $$($nesting, 'SafeMode').$value_for_name(safe_mode);\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  return $$$($$($nesting, 'SafeMode'), 'SECURE')\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            }})()\n          };\n          input_mtime = options.$delete(\"input_mtime\");\n          self.compat_mode = attr_overrides['$key?'](\"compat-mode\");\n          self.sourcemap = options['$[]'](\"sourcemap\");\n          self.timings = options.$delete(\"timings\");\n          self.path_resolver = $$($nesting, 'PathResolver').$new();\n          initialize_extensions = (function() {if ($truthy(($truthy($a = (($c = $$$('::', 'Asciidoctor', 'skip_raise')) && ($b = $$$($c, 'Extensions', 'skip_raise')) ? 'constant' : nil)) ? $a : options['$key?'](\"extensions\")))) {\n            return $$$($$$('::', 'Asciidoctor'), 'Extensions')\n          } else {\n            return nil\n          }; return nil; })();\n          self.extensions = nil;\n          if ($truthy(($truthy($a = options['$key?'](\"header_footer\")) ? options['$key?'](\"standalone\")['$!']() : $a))) {\n            \n            $writer = [\"standalone\", options['$[]'](\"header_footer\")];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n        };\n        self.parsed = (self.reftexts = (self.header = (self.header_attributes = nil)));\n        self.counters = $hash2([], {});\n        self.attributes_modified = $$$('::', 'Set').$new();\n        self.docinfo_processor_extensions = $hash2([], {});\n        standalone = options['$[]'](\"standalone\");\n        (self.options = options).$freeze();\n        attrs = self.attributes;\n        \n        $writer = [\"attribute-undefined\", $$($nesting, 'Compliance').$attribute_undefined()];\n        $send(attrs, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"attribute-missing\", $$($nesting, 'Compliance').$attribute_missing()];\n        $send(attrs, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        attrs.$update($$($nesting, 'DEFAULT_ATTRIBUTES'));\n        if ($truthy(standalone)) {\n          \n          \n          $writer = [\"embedded\", nil];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"copycss\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"iconfont-remote\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"stylesheet\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"webfonts\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        } else {\n          \n          \n          $writer = [\"embedded\", \"\"];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(($truthy($a = attr_overrides['$key?'](\"showtitle\")) ? attr_overrides.$keys()['$&']([\"notitle\", \"showtitle\"])['$[]'](-1)['$=='](\"showtitle\") : $a))) {\n            \n            $writer = [\"notitle\", $hash(nil, \"\", false, \"@\", \"@\", false)['$[]'](attr_overrides['$[]'](\"showtitle\"))];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else if ($truthy(attr_overrides['$key?'](\"notitle\"))) {\n            \n            $writer = [\"showtitle\", $hash(nil, \"\", false, \"@\", \"@\", false)['$[]'](attr_overrides['$[]'](\"notitle\"))];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            $writer = [\"notitle\", \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n        };\n        \n        $writer = [\"asciidoctor\", \"\"];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"asciidoctor-version\", $$$($$$('::', 'Asciidoctor'), 'VERSION')];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"safe-mode-name\", (safe_mode_name = $$($nesting, 'SafeMode').$name_for_value(self.safe))];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"\" + \"safe-mode-\" + (safe_mode_name), \"\"];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"safe-mode-level\", self.safe];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        ($truthy($a = attr_overrides['$[]'](\"max-include-depth\")) ? $a : (($writer = [\"max-include-depth\", 64]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attr_overrides['$[]'](\"allow-uri-read\")) ? $a : (($writer = [\"allow-uri-read\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        \n        $writer = [\"user-home\", $$($nesting, 'USER_HOME')];\n        $send(attr_overrides, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        if ($truthy(attr_overrides['$key?'](\"numbered\"))) {\n          \n          $writer = [\"sectnums\", attr_overrides.$delete(\"numbered\")];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(attr_overrides['$key?'](\"hardbreaks\"))) {\n          \n          $writer = [\"hardbreaks-option\", attr_overrides.$delete(\"hardbreaks\")];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy((base_dir_val = options['$[]'](\"base_dir\")))) {\n          self.base_dir = (($writer = [\"docdir\", $$$('::', 'File').$expand_path(base_dir_val)]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        } else if ($truthy(attr_overrides['$[]'](\"docdir\"))) {\n          self.base_dir = attr_overrides['$[]'](\"docdir\")\n        } else {\n          self.base_dir = (($writer = [\"docdir\", $$$('::', 'Dir').$pwd()]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n        };\n        if ($truthy((backend_val = options['$[]'](\"backend\")))) {\n          \n          $writer = [\"backend\", \"\" + (backend_val)];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy((doctype_val = options['$[]'](\"doctype\")))) {\n          \n          $writer = [\"doctype\", \"\" + (doctype_val)];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy($rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SERVER')))) {\n          \n          ($truthy($a = attr_overrides['$[]'](\"copycss\")) ? $a : (($writer = [\"copycss\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          ($truthy($a = attr_overrides['$[]'](\"source-highlighter\")) ? $a : (($writer = [\"source-highlighter\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          ($truthy($a = attr_overrides['$[]'](\"backend\")) ? $a : (($writer = [\"backend\", $$($nesting, 'DEFAULT_BACKEND')]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          if ($truthy(($truthy($a = parent_doc['$!']()) ? attr_overrides['$key?'](\"docfile\") : $a))) {\n            \n            $writer = [\"docfile\", attr_overrides['$[]'](\"docfile\")['$[]'](Opal.Range.$new($rb_plus(attr_overrides['$[]'](\"docdir\").$length(), 1), -1, false))];\n            $send(attr_overrides, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          \n          $writer = [\"docdir\", \"\"];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"user-home\", \".\"];\n          $send(attr_overrides, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy($rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SECURE')))) {\n            \n            if ($truthy(attr_overrides['$key?'](\"max-attribute-value-size\"))) {\n            } else {\n              \n              $writer = [\"max-attribute-value-size\", 4096];\n              $send(attr_overrides, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(attr_overrides['$key?'](\"linkcss\"))) {\n            } else {\n              \n              $writer = [\"linkcss\", \"\"];\n              $send(attr_overrides, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            ($truthy($a = attr_overrides['$[]'](\"icons\")) ? $a : (($writer = [\"icons\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));};};\n        self.max_attribute_value_size = (function() {if ($truthy((size = ($truthy($a = attr_overrides['$[]'](\"max-attribute-value-size\")) ? $a : (($writer = [\"max-attribute-value-size\", nil]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))))) {\n          return size.$to_i().$abs()\n        } else {\n          return nil\n        }; return nil; })();\n        $send(attr_overrides, 'delete_if', [], ($$10 = function(key, val){var self = $$10.$$s || this, $d, verdict = nil;\n\n        \n          \n          if (key == null) {\n            key = nil;\n          };\n          \n          if (val == null) {\n            val = nil;\n          };\n          if ($truthy(val)) {\n            \n            if ($truthy(($truthy($d = $$$('::', 'String')['$==='](val)) ? val['$end_with?'](\"@\") : $d))) {\n              $d = [val.$chop(), true], (val = $d[0]), (verdict = $d[1]), $d};\n            \n            $writer = [key, val];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            \n            attrs.$delete(key);\n            verdict = val['$=='](false);\n          };\n          return verdict;}, $$10.$$s = self, $$10.$$arity = 2, $$10));\n        if ($truthy(parent_doc)) {\n          \n          self.backend = attrs['$[]'](\"backend\");\n          if ((self.doctype = (($writer = [\"doctype\", parent_doctype]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$==']($$($nesting, 'DEFAULT_DOCTYPE'))) {\n          } else {\n            self.$update_doctype_attributes($$($nesting, 'DEFAULT_DOCTYPE'))\n          };\n          self.reader = $$($nesting, 'Reader').$new(data, options['$[]'](\"cursor\"));\n          if ($truthy(self.sourcemap)) {\n            self.source_location = self.reader.$cursor()};\n          $$($nesting, 'Parser').$parse(self.reader, self);\n          self.$restore_attributes();\n          return (self.parsed = true);\n        } else {\n          \n          self.backend = nil;\n          if ((initial_backend = ($truthy($a = attrs['$[]'](\"backend\")) ? $a : $$($nesting, 'DEFAULT_BACKEND')))['$=='](\"manpage\")) {\n            self.doctype = (($writer = [\"doctype\", (($writer = [\"doctype\", \"manpage\"]), $send(attr_overrides, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n          } else {\n            self.doctype = ($truthy($a = attrs['$[]'](\"doctype\")) ? $a : (($writer = [\"doctype\", $$($nesting, 'DEFAULT_DOCTYPE')]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n          };\n          self.$update_backend_attributes(initial_backend, true);\n          ($truthy($a = attrs['$[]'](\"stylesdir\")) ? $a : (($writer = [\"stylesdir\", \".\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          ($truthy($a = attrs['$[]'](\"iconsdir\")) ? $a : (($writer = [\"iconsdir\", \"\" + (attrs.$fetch(\"imagesdir\", \"./images\")) + \"/icons\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          self.$fill_datetime_attributes(attrs, input_mtime);\n          if ($truthy(initialize_extensions)) {\n            if ($truthy((ext_registry = options['$[]'](\"extension_registry\")))) {\n              if ($truthy(($truthy($a = $$$($$($nesting, 'Extensions'), 'Registry')['$==='](ext_registry)) ? $a : ($truthy($d = (($g = $$$('::', 'AsciidoctorJ', 'skip_raise')) && ($f = $$$($g, 'Extensions', 'skip_raise')) && ($e = $$$($f, 'ExtensionRegistry', 'skip_raise')) ? 'constant' : nil)) ? $$$($$$($$$('::', 'AsciidoctorJ'), 'Extensions'), 'ExtensionRegistry')['$==='](ext_registry) : $d)))) {\n                self.extensions = ext_registry.$activate(self)}\n            } else if ($truthy((ext_block = options['$[]'](\"extensions\"))['$nil?']())) {\n              if ($truthy($$($nesting, 'Extensions').$groups()['$empty?']())) {\n              } else {\n                self.extensions = $$$($$($nesting, 'Extensions'), 'Registry').$new().$activate(self)\n              }\n            } else if ($truthy($$$('::', 'Proc')['$==='](ext_block))) {\n              self.extensions = $send($$($nesting, 'Extensions'), 'create', [], ext_block.$to_proc()).$activate(self)}};\n          self.reader = $$($nesting, 'PreprocessorReader').$new(self, data, $$$($$($nesting, 'Reader'), 'Cursor').$new(attrs['$[]'](\"docfile\"), self.base_dir), $hash2([\"normalize\"], {\"normalize\": true}));\n          if ($truthy(self.sourcemap)) {\n            return (self.source_location = self.reader.$cursor())\n          } else {\n            return nil\n          };\n        };\n      }, $Document_initialize$8.$$arity = -1);\n      \n      Opal.def(self, '$parse', $Document_parse$11 = function $$parse(data) {\n        var $a, $$12, $$13, self = this, doc = nil, exts = nil;\n\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        if ($truthy(self.parsed)) {\n          return self\n        } else {\n          \n          doc = self;\n          if ($truthy(data)) {\n            \n            self.reader = $$($nesting, 'PreprocessorReader').$new(doc, data, $$$($$($nesting, 'Reader'), 'Cursor').$new(self.attributes['$[]'](\"docfile\"), self.base_dir), $hash2([\"normalize\"], {\"normalize\": true}));\n            if ($truthy(self.sourcemap)) {\n              self.source_location = self.reader.$cursor()};};\n          if ($truthy(($truthy($a = (exts = (function() {if ($truthy(self.parent_document)) {\n            return nil\n          } else {\n            return self.extensions\n          }; return nil; })())) ? exts['$preprocessors?']() : $a))) {\n            $send(exts.$preprocessors(), 'each', [], ($$12 = function(ext){var self = $$12.$$s || this, $b;\n              if (self.reader == null) self.reader = nil;\n\n            \n              \n              if (ext == null) {\n                ext = nil;\n              };\n              return (self.reader = ($truthy($b = ext.$process_method()['$[]'](doc, self.reader)) ? $b : self.reader));}, $$12.$$s = self, $$12.$$arity = 1, $$12))};\n          $$($nesting, 'Parser').$parse(self.reader, doc, $hash2([\"header_only\"], {\"header_only\": self.options['$[]'](\"parse_header_only\")}));\n          self.$restore_attributes();\n          if ($truthy(($truthy($a = exts) ? exts['$tree_processors?']() : $a))) {\n            $send(exts.$tree_processors(), 'each', [], ($$13 = function(ext){var self = $$13.$$s || this, $b, $c, result = nil;\n\n            \n              \n              if (ext == null) {\n                ext = nil;\n              };\n              if ($truthy(($truthy($b = ($truthy($c = (result = ext.$process_method()['$[]'](doc))) ? $$($nesting, 'Document')['$==='](result) : $c)) ? result['$!='](doc) : $b))) {\n                return (doc = result)\n              } else {\n                return nil\n              };}, $$13.$$s = self, $$13.$$arity = 1, $$13))};\n          self.parsed = true;\n          return doc;\n        };\n      }, $Document_parse$11.$$arity = -1);\n      \n      Opal.def(self, '$parsed?', $Document_parsed$ques$14 = function() {\n        var self = this;\n\n        return self.parsed\n      }, $Document_parsed$ques$14.$$arity = 0);\n      \n      Opal.def(self, '$counter', $Document_counter$15 = function $$counter(name, seed) {\n        var $a, self = this, attr_seed = nil, attr_val = nil, $writer = nil;\n\n        \n        \n        if (seed == null) {\n          seed = nil;\n        };\n        if ($truthy(self.parent_document)) {\n          return self.parent_document.$counter(name, seed)};\n        if ($truthy(($truthy($a = (attr_seed = (attr_val = self.attributes['$[]'](name))['$nil_or_empty?']()['$!']())) ? self.counters['$key?'](name) : $a))) {\n          \n          $writer = [name, (($writer = [name, $$($nesting, 'Helpers').$nextval(attr_val)]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(seed)) {\n          \n          $writer = [name, (($writer = [name, (function() {if (seed['$=='](seed.$to_i().$to_s())) {\n            return seed.$to_i()\n          } else {\n            return seed\n          }; return nil; })()]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        } else {\n          \n          $writer = [name, (($writer = [name, $$($nesting, 'Helpers').$nextval((function() {if ($truthy(attr_seed)) {\n            return attr_val\n          } else {\n            return 0\n          }; return nil; })())]), $send(self.counters, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n      }, $Document_counter$15.$$arity = -2);\n      \n      Opal.def(self, '$increment_and_store_counter', $Document_increment_and_store_counter$16 = function $$increment_and_store_counter(counter_name, block) {\n        var self = this;\n\n        return $$($nesting, 'AttributeEntry').$new(counter_name, self.$counter(counter_name)).$save_to(block.$attributes()).$value()\n      }, $Document_increment_and_store_counter$16.$$arity = 2);\n      Opal.alias(self, \"counter_increment\", \"increment_and_store_counter\");\n      \n      Opal.def(self, '$register', $Document_register$17 = function $$register(type, value) {\n        var $a, self = this, $case = nil, id = nil, $logical_op_recvr_tmp_1 = nil, $writer = nil, ref = nil;\n\n        return (function() {$case = type;\n        if (\"ids\"['$===']($case)) {return self.$register(\"refs\", [(id = value['$[]'](0)), $$($nesting, 'Inline').$new(self, \"anchor\", value['$[]'](1), $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))])}\n        else if (\"refs\"['$===']($case)) {\n        \n        $logical_op_recvr_tmp_1 = self.catalog['$[]'](\"refs\");\n        ($truthy($a = $logical_op_recvr_tmp_1['$[]'](value['$[]'](0))) ? $a : (($writer = [value['$[]'](0), (ref = value['$[]'](1))]), $send($logical_op_recvr_tmp_1, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));;\n        return ref;}\n        else if (\"footnotes\"['$===']($case)) {return self.catalog['$[]'](type)['$<<'](value)}\n        else {if ($truthy(self.options['$[]'](\"catalog_assets\"))) {\n          return self.catalog['$[]'](type)['$<<']((function() {if (type['$=='](\"images\")) {\n            \n            return $$($nesting, 'ImageReference').$new(value, self.attributes['$[]'](\"imagesdir\"));\n          } else {\n            return value\n          }; return nil; })())\n        } else {\n          return nil\n        }}})()\n      }, $Document_register$17.$$arity = 2);\n      \n      Opal.def(self, '$resolve_id', $Document_resolve_id$18 = function $$resolve_id(text) {\n        var $$19, $$21, self = this, resolved_id = nil;\n\n        if ($truthy(self.reftexts)) {\n          return self.reftexts['$[]'](text)\n        } else if ($truthy(self.parsed)) {\n          return $send((self.reftexts = $hash2([], {})), 'tap', [], ($$19 = function(accum){var self = $$19.$$s || this, $$20;\n            if (self.catalog == null) self.catalog = nil;\n\n          \n            \n            if (accum == null) {\n              accum = nil;\n            };\n            return $send(self.catalog['$[]'](\"refs\"), 'each', [], ($$20 = function(id, ref){var self = $$20.$$s || this, $a, $writer = nil;\n\n            \n              \n              if (id == null) {\n                id = nil;\n              };\n              \n              if (ref == null) {\n                ref = nil;\n              };\n              return ($truthy($a = accum['$[]'](ref.$xreftext())) ? $a : (($writer = [ref.$xreftext(), id]), $send(accum, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));}, $$20.$$s = self, $$20.$$arity = 2, $$20));}, $$19.$$s = self, $$19.$$arity = 1, $$19))['$[]'](text)\n        } else {\n          \n          resolved_id = nil;\n          (function(){var $brk = Opal.new_brk(); try {return $send((self.reftexts = $hash2([], {})), 'tap', [], ($$21 = function(accum){var self = $$21.$$s || this, $$22;\n            if (self.catalog == null) self.catalog = nil;\n\n          \n            \n            if (accum == null) {\n              accum = nil;\n            };\n            return (function(){var $brk = Opal.new_brk(); try {return $send(self.catalog['$[]'](\"refs\"), 'each', [], ($$22 = function(id, ref){var self = $$22.$$s || this, $a, xreftext = nil, $writer = nil;\n\n            \n              \n              if (id == null) {\n                id = nil;\n              };\n              \n              if (ref == null) {\n                ref = nil;\n              };\n              if ((xreftext = ref.$xreftext())['$=='](text)) {\n                \n                \n                Opal.brk((resolved_id = id), $brk);\n              } else {\n                \n                return ($truthy($a = accum['$[]'](xreftext)) ? $a : (($writer = [xreftext, id]), $send(accum, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n              };}, $$22.$$s = self, $$22.$$brk = $brk, $$22.$$arity = 2, $$22))\n            } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();}, $$21.$$s = self, $$21.$$brk = $brk, $$21.$$arity = 1, $$21))\n          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n          self.reftexts = nil;\n          return resolved_id;\n        }\n      }, $Document_resolve_id$18.$$arity = 1);\n      \n      Opal.def(self, '$footnotes?', $Document_footnotes$ques$23 = function() {\n        var self = this;\n\n        if ($truthy(self.catalog['$[]'](\"footnotes\")['$empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      }, $Document_footnotes$ques$23.$$arity = 0);\n      \n      Opal.def(self, '$footnotes', $Document_footnotes$24 = function $$footnotes() {\n        var self = this;\n\n        return self.catalog['$[]'](\"footnotes\")\n      }, $Document_footnotes$24.$$arity = 0);\n      \n      Opal.def(self, '$callouts', $Document_callouts$25 = function $$callouts() {\n        var self = this;\n\n        return self.catalog['$[]'](\"callouts\")\n      }, $Document_callouts$25.$$arity = 0);\n      \n      Opal.def(self, '$nested?', $Document_nested$ques$26 = function() {\n        var self = this;\n\n        if ($truthy(self.parent_document)) {\n          return true\n        } else {\n          return false\n        }\n      }, $Document_nested$ques$26.$$arity = 0);\n      \n      Opal.def(self, '$embedded?', $Document_embedded$ques$27 = function() {\n        var self = this;\n\n        return self.attributes['$key?'](\"embedded\")\n      }, $Document_embedded$ques$27.$$arity = 0);\n      \n      Opal.def(self, '$extensions?', $Document_extensions$ques$28 = function() {\n        var self = this;\n\n        if ($truthy(self.extensions)) {\n          return true\n        } else {\n          return false\n        }\n      }, $Document_extensions$ques$28.$$arity = 0);\n      \n      Opal.def(self, '$source', $Document_source$29 = function $$source() {\n        var self = this;\n\n        if ($truthy(self.reader)) {\n          return self.reader.$source()\n        } else {\n          return nil\n        }\n      }, $Document_source$29.$$arity = 0);\n      \n      Opal.def(self, '$source_lines', $Document_source_lines$30 = function $$source_lines() {\n        var self = this;\n\n        if ($truthy(self.reader)) {\n          return self.reader.$source_lines()\n        } else {\n          return nil\n        }\n      }, $Document_source_lines$30.$$arity = 0);\n      \n      Opal.def(self, '$basebackend?', $Document_basebackend$ques$31 = function(base) {\n        var self = this;\n\n        return self.attributes['$[]'](\"basebackend\")['$=='](base)\n      }, $Document_basebackend$ques$31.$$arity = 1);\n      \n      Opal.def(self, '$title', $Document_title$32 = function $$title() {\n        var self = this;\n\n        return self.$doctitle()\n      }, $Document_title$32.$$arity = 0);\n      \n      Opal.def(self, '$title=', $Document_title$eq$33 = function(title) {\n        var self = this, sect = nil, $writer = nil;\n\n        \n        if ($truthy((sect = self.header))) {\n        } else {\n          \n          $writer = [\"header\"];\n          $send((sect = (self.header = $$($nesting, 'Section').$new(self, 0))), 'sectname=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        \n        $writer = [title];\n        $send(sect, 'title=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $Document_title$eq$33.$$arity = 1);\n      \n      Opal.def(self, '$doctitle', $Document_doctitle$34 = function $$doctitle(opts) {\n        var $a, self = this, val = nil, sect = nil, separator = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy((val = self.attributes['$[]'](\"title\")))) {\n        } else if ($truthy((sect = self.$first_section()))) {\n          val = sect.$title()\n        } else if ($truthy(($truthy($a = opts['$[]'](\"use_fallback\")) ? (val = self.attributes['$[]'](\"untitled-label\")) : $a)['$!']())) {\n          return nil};\n        if ($truthy((separator = opts['$[]'](\"partition\")))) {\n          return $$($nesting, 'Title').$new(val, opts.$merge($hash2([\"separator\"], {\"separator\": (function() {if (separator['$=='](true)) {\n            return self.attributes['$[]'](\"title-separator\")\n          } else {\n            return separator\n          }; return nil; })()})))\n        } else if ($truthy(($truthy($a = opts['$[]'](\"sanitize\")) ? val['$include?'](\"<\") : $a))) {\n          return val.$gsub($$($nesting, 'XmlSanitizeRx'), \"\").$squeeze(\" \").$strip()\n        } else {\n          return val\n        };\n      }, $Document_doctitle$34.$$arity = -1);\n      Opal.alias(self, \"name\", \"doctitle\");\n      \n      Opal.def(self, '$xreftext', $Document_xreftext$35 = function $$xreftext(xrefstyle) {\n        var $a, self = this, val = nil;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {\n          return val\n        } else {\n          return self.$title()\n        };\n      }, $Document_xreftext$35.$$arity = -1);\n      \n      Opal.def(self, '$author', $Document_author$36 = function $$author() {\n        var self = this;\n\n        return self.attributes['$[]'](\"author\")\n      }, $Document_author$36.$$arity = 0);\n      \n      Opal.def(self, '$authors', $Document_authors$37 = function $$authors() {\n        var $a, self = this, attrs = nil, authors = nil, num_authors = nil, idx = nil;\n\n        if ($truthy((attrs = self.attributes)['$key?'](\"author\"))) {\n          \n          authors = [$$($nesting, 'Author').$new(attrs['$[]'](\"author\"), attrs['$[]'](\"firstname\"), attrs['$[]'](\"middlename\"), attrs['$[]'](\"lastname\"), attrs['$[]'](\"authorinitials\"), attrs['$[]'](\"email\"))];\n          if ($truthy($rb_gt((num_authors = ($truthy($a = attrs['$[]'](\"authorcount\")) ? $a : 0)), 1))) {\n            \n            idx = 1;\n            while ($truthy($rb_lt(idx, num_authors))) {\n              \n              idx = $rb_plus(idx, 1);\n              authors['$<<']($$($nesting, 'Author').$new(attrs['$[]'](\"\" + \"author_\" + (idx)), attrs['$[]'](\"\" + \"firstname_\" + (idx)), attrs['$[]'](\"\" + \"middlename_\" + (idx)), attrs['$[]'](\"\" + \"lastname_\" + (idx)), attrs['$[]'](\"\" + \"authorinitials_\" + (idx)), attrs['$[]'](\"\" + \"email_\" + (idx))));\n            };};\n          return authors;\n        } else {\n          return []\n        }\n      }, $Document_authors$37.$$arity = 0);\n      \n      Opal.def(self, '$revdate', $Document_revdate$38 = function $$revdate() {\n        var self = this;\n\n        return self.attributes['$[]'](\"revdate\")\n      }, $Document_revdate$38.$$arity = 0);\n      \n      Opal.def(self, '$notitle', $Document_notitle$39 = function $$notitle() {\n        var self = this;\n\n        return self.attributes['$key?'](\"notitle\")\n      }, $Document_notitle$39.$$arity = 0);\n      \n      Opal.def(self, '$noheader', $Document_noheader$40 = function $$noheader() {\n        var self = this;\n\n        return self.attributes['$key?'](\"noheader\")\n      }, $Document_noheader$40.$$arity = 0);\n      \n      Opal.def(self, '$nofooter', $Document_nofooter$41 = function $$nofooter() {\n        var self = this;\n\n        return self.attributes['$key?'](\"nofooter\")\n      }, $Document_nofooter$41.$$arity = 0);\n      \n      Opal.def(self, '$first_section', $Document_first_section$42 = function $$first_section() {\n        var $a, $$43, self = this;\n\n        return ($truthy($a = self.header) ? $a : $send(self.blocks, 'find', [], ($$43 = function(e){var self = $$43.$$s || this;\n\n        \n          \n          if (e == null) {\n            e = nil;\n          };\n          return e.$context()['$=='](\"section\");}, $$43.$$s = self, $$43.$$arity = 1, $$43)))\n      }, $Document_first_section$42.$$arity = 0);\n      \n      Opal.def(self, '$header?', $Document_header$ques$44 = function() {\n        var self = this;\n\n        if ($truthy(self.header)) {\n          return true\n        } else {\n          return false\n        }\n      }, $Document_header$ques$44.$$arity = 0);\n      Opal.alias(self, \"has_header?\", \"header?\");\n      \n      Opal.def(self, '$<<', $Document_$lt$lt$45 = function(block) {\n        var $iter = $Document_$lt$lt$45.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Document_$lt$lt$45.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        if (block.$context()['$=='](\"section\")) {\n          self.$assign_numeral(block)};\n        return $send(self, Opal.find_super_dispatcher(self, '<<', $Document_$lt$lt$45, false), $zuper, $iter);\n      }, $Document_$lt$lt$45.$$arity = 1);\n      \n      Opal.def(self, '$finalize_header', $Document_finalize_header$46 = function $$finalize_header(unrooted_attributes, header_valid) {\n        var self = this, $writer = nil;\n\n        \n        \n        if (header_valid == null) {\n          header_valid = true;\n        };\n        self.$clear_playback_attributes(unrooted_attributes);\n        self.$save_attributes();\n        if ($truthy(header_valid)) {\n        } else {\n          \n          $writer = [\"invalid-header\", true];\n          $send(unrooted_attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        return unrooted_attributes;\n      }, $Document_finalize_header$46.$$arity = -2);\n      \n      Opal.def(self, '$playback_attributes', $Document_playback_attributes$47 = function $$playback_attributes(block_attributes) {\n        var $$48, self = this;\n\n        if ($truthy(block_attributes['$key?'](\"attribute_entries\"))) {\n          return $send(block_attributes['$[]'](\"attribute_entries\"), 'each', [], ($$48 = function(entry){var self = $$48.$$s || this, name = nil, $writer = nil;\n            if (self.attributes == null) self.attributes = nil;\n\n          \n            \n            if (entry == null) {\n              entry = nil;\n            };\n            name = entry.$name();\n            if ($truthy(entry.$negate())) {\n              \n              self.attributes.$delete(name);\n              if (name['$=='](\"compat-mode\")) {\n                return (self.compat_mode = false)\n              } else {\n                return nil\n              };\n            } else {\n              \n              \n              $writer = [name, entry.$value()];\n              $send(self.attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              if (name['$=='](\"compat-mode\")) {\n                return (self.compat_mode = true)\n              } else {\n                return nil\n              };\n            };}, $$48.$$s = self, $$48.$$arity = 1, $$48))\n        } else {\n          return nil\n        }\n      }, $Document_playback_attributes$47.$$arity = 1);\n      \n      Opal.def(self, '$restore_attributes', $Document_restore_attributes$49 = function $$restore_attributes() {\n        var self = this;\n\n        \n        if ($truthy(self.parent_document)) {\n        } else {\n          self.catalog['$[]'](\"callouts\").$rewind()\n        };\n        return self.attributes.$replace(self.header_attributes);\n      }, $Document_restore_attributes$49.$$arity = 0);\n      \n      Opal.def(self, '$set_attribute', $Document_set_attribute$50 = function $$set_attribute(name, value) {\n        var $a, self = this, $writer = nil, $case = nil;\n\n        \n        \n        if (value == null) {\n          value = \"\";\n        };\n        if ($truthy(self['$attribute_locked?'](name))) {\n          return nil\n        } else {\n          \n          if ($truthy(value['$empty?']())) {\n          } else {\n            value = self.$apply_attribute_value_subs(value)\n          };\n          if ($truthy(self.header_attributes)) {\n            \n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            $case = name;\n            if (\"backend\"['$===']($case)) {self.$update_backend_attributes(value, ($truthy($a = self.attributes_modified['$delete?'](\"htmlsyntax\")) ? value['$=='](self.backend) : $a))}\n            else if (\"doctype\"['$===']($case)) {self.$update_doctype_attributes(value)}\n            else {\n            $writer = [name, value];\n            $send(self.attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n            self.attributes_modified['$<<'](name);\n          };\n          return value;\n        };\n      }, $Document_set_attribute$50.$$arity = -2);\n      \n      Opal.def(self, '$delete_attribute', $Document_delete_attribute$51 = function $$delete_attribute(name) {\n        var self = this;\n\n        if ($truthy(self['$attribute_locked?'](name))) {\n          return false\n        } else {\n          \n          self.attributes.$delete(name);\n          self.attributes_modified['$<<'](name);\n          return true;\n        }\n      }, $Document_delete_attribute$51.$$arity = 1);\n      \n      Opal.def(self, '$attribute_locked?', $Document_attribute_locked$ques$52 = function(name) {\n        var self = this;\n\n        return self.attribute_overrides['$key?'](name)\n      }, $Document_attribute_locked$ques$52.$$arity = 1);\n      \n      Opal.def(self, '$set_header_attribute', $Document_set_header_attribute$53 = function $$set_header_attribute(name, value, overwrite) {\n        var $a, self = this, attrs = nil, $writer = nil;\n\n        \n        \n        if (value == null) {\n          value = \"\";\n        };\n        \n        if (overwrite == null) {\n          overwrite = true;\n        };\n        attrs = ($truthy($a = self.header_attributes) ? $a : self.attributes);\n        if ($truthy((($a = overwrite['$=='](false)) ? attrs['$key?'](name) : overwrite['$=='](false)))) {\n          return false\n        } else {\n          \n          \n          $writer = [name, value];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return true;\n        };\n      }, $Document_set_header_attribute$53.$$arity = -2);\n      \n      Opal.def(self, '$convert', $Document_convert$54 = function $$convert(opts) {\n        var $a, $$55, self = this, $writer = nil, block = nil, output = nil, transform = nil, exts = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(self.timings)) {\n          self.timings.$start(\"convert\")};\n        if ($truthy(self.parsed)) {\n        } else {\n          self.$parse()\n        };\n        if ($truthy(($truthy($a = $rb_ge(self.safe, $$$($$($nesting, 'SafeMode'), 'SERVER'))) ? $a : opts['$empty?']()))) {\n        } else {\n          \n          if ($truthy((($writer = [\"outfile\", opts['$[]'](\"outfile\")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))) {\n          } else {\n            self.attributes.$delete(\"outfile\")\n          };\n          if ($truthy((($writer = [\"outdir\", opts['$[]'](\"outdir\")]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))) {\n          } else {\n            self.attributes.$delete(\"outdir\")\n          };\n        };\n        if (self.$doctype()['$=='](\"inline\")) {\n          if ($truthy((block = ($truthy($a = self.blocks['$[]'](0)) ? $a : self.header)))) {\n            if ($truthy(($truthy($a = block.$content_model()['$=='](\"compound\")) ? $a : block.$content_model()['$=='](\"empty\")))) {\n              self.$logger().$warn(\"no inline candidate; use the inline doctype to convert a single paragragh, verbatim, or raw block\")\n            } else {\n              output = block.$content()\n            }}\n        } else {\n          \n          if ($truthy(opts['$key?'](\"standalone\"))) {\n            transform = (function() {if ($truthy(opts['$[]'](\"standalone\"))) {\n              return \"document\"\n            } else {\n              return \"embedded\"\n            }; return nil; })()\n          } else if ($truthy(opts['$key?'](\"header_footer\"))) {\n            transform = (function() {if ($truthy(opts['$[]'](\"header_footer\"))) {\n              return \"document\"\n            } else {\n              return \"embedded\"\n            }; return nil; })()\n          } else {\n            transform = (function() {if ($truthy(self.options['$[]'](\"standalone\"))) {\n              return \"document\"\n            } else {\n              return \"embedded\"\n            }; return nil; })()\n          };\n          output = self.converter.$convert(self, transform);\n        };\n        if ($truthy(self.parent_document)) {\n        } else if ($truthy(($truthy($a = (exts = self.extensions)) ? exts['$postprocessors?']() : $a))) {\n          $send(exts.$postprocessors(), 'each', [], ($$55 = function(ext){var self = $$55.$$s || this;\n\n          \n            \n            if (ext == null) {\n              ext = nil;\n            };\n            return (output = ext.$process_method()['$[]'](self, output));}, $$55.$$s = self, $$55.$$arity = 1, $$55))};\n        if ($truthy(self.timings)) {\n          self.timings.$record(\"convert\")};\n        return output;\n      }, $Document_convert$54.$$arity = -1);\n      Opal.alias(self, \"render\", \"convert\");\n      \n      Opal.def(self, '$write', $Document_write$56 = function $$write(output, target) {\n        var $a, $b, self = this;\n\n        \n        if ($truthy(self.timings)) {\n          self.timings.$start(\"write\")};\n        if ($truthy($$($nesting, 'Writer')['$==='](self.converter))) {\n          self.converter.$write(output, target)\n        } else {\n          \n          if ($truthy(target['$respond_to?'](\"write\"))) {\n            if ($truthy(output['$nil_or_empty?']())) {\n            } else {\n              \n              target.$write(output.$chomp());\n              target.$write($$($nesting, 'LF'));\n            }\n          } else {\n            $$$('::', 'File').$write(target, output, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}))\n          };\n          if ($truthy(($truthy($a = (($b = self.backend['$=='](\"manpage\")) ? $$$('::', 'String')['$==='](target) : self.backend['$=='](\"manpage\"))) ? self.converter.$class()['$respond_to?'](\"write_alternate_pages\") : $a))) {\n            self.converter.$class().$write_alternate_pages(self.attributes['$[]'](\"mannames\"), self.attributes['$[]'](\"manvolnum\"), target)};\n        };\n        if ($truthy(self.timings)) {\n          self.timings.$record(\"write\")};\n        return nil;\n      }, $Document_write$56.$$arity = 2);\n      \n      Opal.def(self, '$content', $Document_content$57 = function $$content() {\n        var $iter = $Document_content$57.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Document_content$57.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        self.attributes.$delete(\"title\");\n        return $send(self, Opal.find_super_dispatcher(self, 'content', $Document_content$57, false), $zuper, $iter);\n      }, $Document_content$57.$$arity = 0);\n      \n      Opal.def(self, '$docinfo', $Document_docinfo$58 = function $$docinfo(location, suffix) {\n        var $$59, $a, $$60, self = this, qualifier = nil, docinfo = nil, content = nil, docinfo_file = nil, docinfo_dir = nil, docinfo_subs = nil, docinfo_path = nil, shared_docinfo = nil, private_docinfo = nil;\n\n        \n        \n        if (location == null) {\n          location = \"head\";\n        };\n        \n        if (suffix == null) {\n          suffix = nil;\n        };\n        if ($truthy($rb_lt(self.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')))) {\n          \n          if (location['$=='](\"head\")) {\n          } else {\n            qualifier = \"\" + \"-\" + (location)\n          };\n          if ($truthy(suffix)) {\n          } else {\n            suffix = self.outfilesuffix\n          };\n          if ($truthy((docinfo = self.attributes['$[]'](\"docinfo\"))['$nil_or_empty?']())) {\n            if ($truthy(self.attributes['$key?'](\"docinfo2\"))) {\n              docinfo = [\"private\", \"shared\"]\n            } else if ($truthy(self.attributes['$key?'](\"docinfo1\"))) {\n              docinfo = [\"shared\"]\n            } else {\n              docinfo = (function() {if ($truthy(docinfo)) {\n                return [\"private\"]\n              } else {\n                return nil\n              }; return nil; })()\n            }\n          } else {\n            docinfo = $send(docinfo.$split(\",\"), 'map', [], ($$59 = function(it){var self = $$59.$$s || this;\n\n            \n              \n              if (it == null) {\n                it = nil;\n              };\n              return it.$strip();}, $$59.$$s = self, $$59.$$arity = 1, $$59))\n          };\n          if ($truthy(docinfo)) {\n            \n            content = [];\n            $a = [\"\" + \"docinfo\" + (qualifier) + (suffix), self.attributes['$[]'](\"docinfodir\"), self.$resolve_docinfo_subs()], (docinfo_file = $a[0]), (docinfo_dir = $a[1]), (docinfo_subs = $a[2]), $a;\n            if ($truthy(docinfo['$&']([\"shared\", \"\" + \"shared-\" + (location)])['$empty?']())) {\n            } else {\n              \n              docinfo_path = self.$normalize_system_path(docinfo_file, docinfo_dir);\n              if ($truthy((shared_docinfo = self.$read_asset(docinfo_path, $hash2([\"normalize\"], {\"normalize\": true}))))) {\n                content['$<<'](self.$apply_subs(shared_docinfo, docinfo_subs))};\n            };\n            if ($truthy(($truthy($a = self.attributes['$[]'](\"docname\")['$nil_or_empty?']()) ? $a : docinfo['$&']([\"private\", \"\" + \"private-\" + (location)])['$empty?']()))) {\n            } else {\n              \n              docinfo_path = self.$normalize_system_path(\"\" + (self.attributes['$[]'](\"docname\")) + \"-\" + (docinfo_file), docinfo_dir);\n              if ($truthy((private_docinfo = self.$read_asset(docinfo_path, $hash2([\"normalize\"], {\"normalize\": true}))))) {\n                content['$<<'](self.$apply_subs(private_docinfo, docinfo_subs))};\n            };};};\n        if ($truthy(($truthy($a = self.extensions) ? self['$docinfo_processors?'](location) : $a))) {\n          return ($truthy($a = content) ? $a : []).$concat($send(self.docinfo_processor_extensions['$[]'](location), 'map', [], ($$60 = function(ext){var self = $$60.$$s || this;\n\n          \n            \n            if (ext == null) {\n              ext = nil;\n            };\n            return ext.$process_method()['$[]'](self);}, $$60.$$s = self, $$60.$$arity = 1, $$60)).$compact()).$join($$($nesting, 'LF'))\n        } else if ($truthy(content)) {\n          return content.$join($$($nesting, 'LF'))\n        } else {\n          return \"\"\n        };\n      }, $Document_docinfo$58.$$arity = -1);\n      \n      Opal.def(self, '$docinfo_processors?', $Document_docinfo_processors$ques$61 = function(location) {\n        var $a, self = this, $writer = nil;\n\n        \n        \n        if (location == null) {\n          location = \"head\";\n        };\n        if ($truthy(self.docinfo_processor_extensions['$key?'](location))) {\n          return self.docinfo_processor_extensions['$[]'](location)['$!='](false)\n        } else if ($truthy(($truthy($a = self.extensions) ? self.document.$extensions()['$docinfo_processors?'](location) : $a))) {\n          return (($writer = [location, self.document.$extensions().$docinfo_processors(location)]), $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])['$!']()['$!']()\n        } else {\n          \n          $writer = [location, false];\n          $send(self.docinfo_processor_extensions, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n      }, $Document_docinfo_processors$ques$61.$$arity = -1);\n      \n      Opal.def(self, '$to_s', $Document_to_s$62 = function $$to_s() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {doctype: \" + (self.$doctype().$inspect()) + \", doctitle: \" + ((function() {if ($truthy(self.header['$!='](nil))) {\n          return self.header.$title()\n        } else {\n          return nil\n        }; return nil; })().$inspect()) + \", blocks: \" + (self.blocks.$size()) + \"}>\"\n      }, $Document_to_s$62.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$apply_attribute_value_subs', $Document_apply_attribute_value_subs$63 = function $$apply_attribute_value_subs(value) {\n        var $a, self = this;\n\n        \n        if ($truthy($$($nesting, 'AttributeEntryPassMacroRx')['$=~'](value))) {\n          \n          value = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n          if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) {\n            value = self.$apply_subs(value, self.$resolve_pass_subs((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))))};\n        } else {\n          value = self.$apply_header_subs(value)\n        };\n        if ($truthy(self.max_attribute_value_size)) {\n          \n          return self.$limit_bytesize(value, self.max_attribute_value_size);\n        } else {\n          return value\n        };\n      }, $Document_apply_attribute_value_subs$63.$$arity = 1);\n      \n      Opal.def(self, '$limit_bytesize', $Document_limit_bytesize$64 = function $$limit_bytesize(str, max) {\n        var $a, self = this;\n\n        \n        if ($truthy($rb_gt(str.$bytesize(), max))) {\n          while (!($truthy((str = str.$byteslice(0, max))['$valid_encoding?']()))) {\n            max = $rb_minus(max, 1)\n          }};\n        return str;\n      }, $Document_limit_bytesize$64.$$arity = 2);\n      \n      Opal.def(self, '$resolve_docinfo_subs', $Document_resolve_docinfo_subs$65 = function $$resolve_docinfo_subs() {\n        var self = this;\n\n        if ($truthy(self.attributes['$key?'](\"docinfosubs\"))) {\n          \n          return self.$resolve_subs(self.attributes['$[]'](\"docinfosubs\"), \"block\", nil, \"docinfo\");\n        } else {\n          return [\"attributes\"]\n        }\n      }, $Document_resolve_docinfo_subs$65.$$arity = 0);\n      \n      Opal.def(self, '$create_converter', $Document_create_converter$66 = function $$create_converter(backend, delegate_backend) {\n        var $a, self = this, converter_opts = nil, template_dirs = nil, opts = nil, $writer = nil, converter = nil;\n\n        \n        converter_opts = $hash2([\"document\", \"htmlsyntax\"], {\"document\": self, \"htmlsyntax\": self.attributes['$[]'](\"htmlsyntax\")});\n        if ($truthy((template_dirs = ($truthy($a = (opts = self.options)['$[]'](\"template_dirs\")) ? $a : opts['$[]'](\"template_dir\"))))) {\n          \n          \n          $writer = [\"template_dirs\", [].concat(Opal.to_a(template_dirs))];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"template_cache\", opts.$fetch(\"template_cache\", true)];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"template_engine\", opts['$[]'](\"template_engine\")];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"template_engine_options\", opts['$[]'](\"template_engine_options\")];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"eruby\", opts['$[]'](\"eruby\")];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"safe\", self.safe];\n          $send(converter_opts, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(delegate_backend)) {\n            \n            $writer = [\"delegate_backend\", delegate_backend];\n            $send(converter_opts, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};};\n        if ($truthy((converter = opts['$[]'](\"converter\")))) {\n          return $$$($$($nesting, 'Converter'), 'CustomFactory').$new($hash(backend, converter)).$create(backend, converter_opts)\n        } else {\n          return opts.$fetch(\"converter_factory\", $$($nesting, 'Converter')).$create(backend, converter_opts)\n        };\n      }, $Document_create_converter$66.$$arity = 2);\n      \n      Opal.def(self, '$clear_playback_attributes', $Document_clear_playback_attributes$67 = function $$clear_playback_attributes(attributes) {\n        var self = this;\n\n        return attributes.$delete(\"attribute_entries\")\n      }, $Document_clear_playback_attributes$67.$$arity = 1);\n      \n      Opal.def(self, '$save_attributes', $Document_save_attributes$68 = function $$save_attributes() {\n        var $a, $$69, self = this, attrs = nil, doctitle_val = nil, $writer = nil, toc_val = nil, toc_position_val = nil, toc_placement_val = nil, default_toc_position = nil, default_toc_class = nil, position = nil, $case = nil, icons_val = nil, basebackend = nil, syntax_hl_name = nil, syntax_hl_factory = nil, syntax_hls = nil;\n\n        \n        if ($truthy(($truthy($a = (attrs = self.attributes)['$key?'](\"doctitle\")) ? $a : (doctitle_val = self.$doctitle())['$!']()))) {\n        } else {\n          \n          $writer = [\"doctitle\", doctitle_val];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        self.id = ($truthy($a = self.id) ? $a : attrs['$[]'](\"css-signature\"));\n        if ($truthy((toc_val = (function() {if ($truthy(attrs.$delete(\"toc2\"))) {\n          return \"left\"\n        } else {\n          return attrs['$[]'](\"toc\")\n        }; return nil; })()))) {\n          \n          toc_position_val = (function() {if ($truthy(($truthy($a = (toc_placement_val = attrs.$fetch(\"toc-placement\", \"macro\"))) ? toc_placement_val['$!='](\"auto\") : $a))) {\n            return toc_placement_val\n          } else {\n            return attrs['$[]'](\"toc-position\")\n          }; return nil; })();\n          if ($truthy(($truthy($a = toc_val['$empty?']()) ? toc_position_val['$nil_or_empty?']() : $a))) {\n          } else {\n            \n            default_toc_position = \"left\";\n            default_toc_class = \"toc2\";\n            position = (function() {if ($truthy(toc_position_val['$nil_or_empty?']())) {\n              \n              if ($truthy(toc_val['$empty?']())) {\n                return default_toc_position\n              } else {\n                return toc_val\n              };\n            } else {\n              return toc_position_val\n            }; return nil; })();\n            \n            $writer = [\"toc\", \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"toc-placement\", \"auto\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            $case = position;\n            if (\"left\"['$===']($case) || \"<\"['$===']($case) || \"&lt;\"['$===']($case)) {\n            $writer = [\"toc-position\", \"left\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"right\"['$===']($case) || \">\"['$===']($case) || \"&gt;\"['$===']($case)) {\n            $writer = [\"toc-position\", \"right\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"top\"['$===']($case) || \"^\"['$===']($case)) {\n            $writer = [\"toc-position\", \"top\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"bottom\"['$===']($case) || \"v\"['$===']($case)) {\n            $writer = [\"toc-position\", \"bottom\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}\n            else if (\"preamble\"['$===']($case) || \"macro\"['$===']($case)) {\n            \n            $writer = [\"toc-position\", \"content\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"toc-placement\", position];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            default_toc_class = nil;}\n            else {\n            attrs.$delete(\"toc-position\");\n            default_toc_class = nil;};\n            if ($truthy(default_toc_class)) {\n              ($truthy($a = attrs['$[]'](\"toc-class\")) ? $a : (($writer = [\"toc-class\", default_toc_class]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))};\n          };};\n        if ($truthy(($truthy($a = (icons_val = attrs['$[]'](\"icons\"))) ? attrs['$key?'](\"icontype\")['$!']() : $a))) {\n          $case = icons_val;\n          if (\"\"['$===']($case) || \"font\"['$===']($case)) {nil}\n          else {\n          \n          $writer = [\"icons\", \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if (icons_val['$=='](\"image\")) {\n          } else {\n            \n            $writer = [\"icontype\", icons_val];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };}};\n        if ($truthy((self.compat_mode = attrs['$key?'](\"compat-mode\")))) {\n          if ($truthy(attrs['$key?'](\"language\"))) {\n            \n            $writer = [\"source-language\", attrs['$[]'](\"language\")];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}};\n        if ($truthy(self.parent_document)) {\n        } else {\n          \n          if ((basebackend = attrs['$[]'](\"basebackend\"))['$=='](\"html\")) {\n            if ($truthy(($truthy($a = (syntax_hl_name = attrs['$[]'](\"source-highlighter\"))) ? attrs['$[]'](\"\" + (syntax_hl_name) + \"-unavailable\")['$!']() : $a))) {\n              if ($truthy((syntax_hl_factory = self.options['$[]'](\"syntax_highlighter_factory\")))) {\n                self.syntax_highlighter = syntax_hl_factory.$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              } else if ($truthy((syntax_hls = self.options['$[]'](\"syntax_highlighters\")))) {\n                self.syntax_highlighter = $$$($$($nesting, 'SyntaxHighlighter'), 'DefaultFactoryProxy').$new(syntax_hls).$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              } else {\n                self.syntax_highlighter = $$($nesting, 'SyntaxHighlighter').$create(syntax_hl_name, self.backend, $hash2([\"document\"], {\"document\": self}))\n              }}\n          } else if (basebackend['$=='](\"docbook\")) {\n            \n            if ($truthy(($truthy($a = self['$attribute_locked?'](\"toc\")) ? $a : self.attributes_modified['$include?'](\"toc\")))) {\n            } else {\n              \n              $writer = [\"toc\", \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(($truthy($a = self['$attribute_locked?'](\"sectnums\")) ? $a : self.attributes_modified['$include?'](\"sectnums\")))) {\n            } else {\n              \n              $writer = [\"sectnums\", \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };};\n          self.outfilesuffix = attrs['$[]'](\"outfilesuffix\");\n          $send($$($nesting, 'FLEXIBLE_ATTRIBUTES'), 'each', [], ($$69 = function(name){var self = $$69.$$s || this, $b;\n            if (self.attribute_overrides == null) self.attribute_overrides = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            if ($truthy(($truthy($b = self.attribute_overrides['$key?'](name)) ? self.attribute_overrides['$[]'](name) : $b))) {\n              return self.attribute_overrides.$delete(name)\n            } else {\n              return nil\n            };}, $$69.$$s = self, $$69.$$arity = 1, $$69));\n        };\n        return (self.header_attributes = attrs.$merge());\n      }, $Document_save_attributes$68.$$arity = 0);\n      \n      Opal.def(self, '$fill_datetime_attributes', $Document_fill_datetime_attributes$70 = function $$fill_datetime_attributes(attrs, input_mtime) {\n        var $a, $b, self = this, now = nil, source_date_epoch = nil, localdate = nil, $writer = nil, localtime = nil, docdate = nil, doctime = nil;\n\n        \n        now = (function() {if ($truthy($$$('::', 'ENV')['$key?'](\"SOURCE_DATE_EPOCH\"))) {\n          \n          return (source_date_epoch = $$$('::', 'Time').$at(self.$Integer($$$('::', 'ENV')['$[]'](\"SOURCE_DATE_EPOCH\"))).$utc());\n        } else {\n          return $$$('::', 'Time').$now()\n        }; return nil; })();\n        if ($truthy((localdate = attrs['$[]'](\"localdate\")))) {\n          ($truthy($a = attrs['$[]'](\"localyear\")) ? $a : (($writer = [\"localyear\", (function() {if (localdate.$index(\"-\")['$=='](4)) {\n            \n            return localdate.$slice(0, 4);\n          } else {\n            return nil\n          }; return nil; })()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        } else {\n          \n          localdate = (($writer = [\"localdate\", now.$strftime(\"%F\")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n          ($truthy($a = attrs['$[]'](\"localyear\")) ? $a : (($writer = [\"localyear\", now.$year().$to_s()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        };\n        localtime = ($truthy($a = attrs['$[]'](\"localtime\")) ? $a : (($writer = [\"localtime\", now.$strftime(\"\" + \"%T \" + ((function() {if (now.$utc_offset()['$=='](0)) {\n          return \"UTC\"\n        } else {\n          return \"%z\"\n        }; return nil; })()))]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attrs['$[]'](\"localdatetime\")) ? $a : (($writer = [\"localdatetime\", \"\" + (localdate) + \" \" + (localtime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        input_mtime = ($truthy($a = ($truthy($b = source_date_epoch) ? $b : input_mtime)) ? $a : now);\n        if ($truthy((docdate = attrs['$[]'](\"docdate\")))) {\n          ($truthy($a = attrs['$[]'](\"docyear\")) ? $a : (($writer = [\"docyear\", (function() {if (docdate.$index(\"-\")['$=='](4)) {\n            \n            return docdate.$slice(0, 4);\n          } else {\n            return nil\n          }; return nil; })()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        } else {\n          \n          docdate = (($writer = [\"docdate\", input_mtime.$strftime(\"%F\")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n          ($truthy($a = attrs['$[]'](\"docyear\")) ? $a : (($writer = [\"docyear\", input_mtime.$year().$to_s()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        };\n        doctime = ($truthy($a = attrs['$[]'](\"doctime\")) ? $a : (($writer = [\"doctime\", input_mtime.$strftime(\"\" + \"%T \" + ((function() {if (input_mtime.$utc_offset()['$=='](0)) {\n          return \"UTC\"\n        } else {\n          return \"%z\"\n        }; return nil; })()))]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attrs['$[]'](\"docdatetime\")) ? $a : (($writer = [\"docdatetime\", \"\" + (docdate) + \" \" + (doctime)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        return nil;\n      }, $Document_fill_datetime_attributes$70.$$arity = 2);\n      \n      Opal.def(self, '$update_backend_attributes', $Document_update_backend_attributes$71 = function $$update_backend_attributes(new_backend, init) {\n        var $a, $b, self = this, current_backend = nil, current_basebackend = nil, attrs = nil, current_doctype = nil, actual_backend = nil, _ = nil, $writer = nil, delegate_backend = nil, converter = nil, new_basebackend = nil, new_filetype = nil, htmlsyntax = nil, backend_traits = nil, current_filetype = nil, page_width = nil;\n\n        \n        \n        if (init == null) {\n          init = nil;\n        };\n        if ($truthy(($truthy($a = init) ? $a : new_backend['$!='](self.backend)))) {\n          \n          current_backend = self.backend;\n          current_basebackend = (attrs = self.attributes)['$[]'](\"basebackend\");\n          current_doctype = self.doctype;\n          if ($truthy(new_backend['$include?'](\":\"))) {\n            $b = new_backend.$partition(\":\"), $a = Opal.to_ary($b), (actual_backend = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (new_backend = ($a[2] == null ? nil : $a[2])), $b};\n          if ($truthy(new_backend['$start_with?'](\"xhtml\"))) {\n            \n            \n            $writer = [\"htmlsyntax\", \"xml\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            new_backend = new_backend.$slice(1, new_backend.$length());\n          } else if ($truthy(new_backend['$start_with?'](\"html\"))) {\n            ($truthy($a = attrs['$[]'](\"htmlsyntax\")) ? $a : (($writer = [\"htmlsyntax\", \"html\"]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))};\n          new_backend = ($truthy($a = $$($nesting, 'BACKEND_ALIASES')['$[]'](new_backend)) ? $a : new_backend);\n          if ($truthy(actual_backend)) {\n            $a = [actual_backend, new_backend], (new_backend = $a[0]), (delegate_backend = $a[1]), $a};\n          if ($truthy(current_doctype)) {\n            \n            if ($truthy(current_backend)) {\n              \n              attrs.$delete(\"\" + \"backend-\" + (current_backend));\n              attrs.$delete(\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (current_doctype));};\n            \n            $writer = [\"\" + \"backend-\" + (new_backend) + \"-doctype-\" + (current_doctype), \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"\" + \"doctype-\" + (current_doctype), \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else if ($truthy(current_backend)) {\n            attrs.$delete(\"\" + \"backend-\" + (current_backend))};\n          \n          $writer = [\"\" + \"backend-\" + (new_backend), \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          self.backend = (($writer = [\"backend\", new_backend]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n          if ($truthy($$$($$($nesting, 'Converter'), 'BackendTraits')['$===']((converter = self.$create_converter(new_backend, delegate_backend))))) {\n            \n            new_basebackend = converter.$basebackend();\n            new_filetype = converter.$filetype();\n            if ($truthy((htmlsyntax = converter.$htmlsyntax()))) {\n              \n              $writer = [\"htmlsyntax\", htmlsyntax];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(init)) {\n              ($truthy($a = attrs['$[]'](\"outfilesuffix\")) ? $a : (($writer = [\"outfilesuffix\", converter.$outfilesuffix()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n            } else if ($truthy(self['$attribute_locked?'](\"outfilesuffix\"))) {\n            } else {\n              \n              $writer = [\"outfilesuffix\", converter.$outfilesuffix()];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else if ($truthy(converter)) {\n            \n            backend_traits = $$($nesting, 'Converter').$derive_backend_traits(new_backend);\n            new_basebackend = backend_traits['$[]'](\"basebackend\");\n            new_filetype = backend_traits['$[]'](\"filetype\");\n            if ($truthy(init)) {\n              ($truthy($a = attrs['$[]'](\"outfilesuffix\")) ? $a : (($writer = [\"outfilesuffix\", backend_traits['$[]'](\"outfilesuffix\")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n            } else if ($truthy(self['$attribute_locked?'](\"outfilesuffix\"))) {\n            } else {\n              \n              $writer = [\"outfilesuffix\", backend_traits['$[]'](\"outfilesuffix\")];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else {\n            self.$raise($$$('::', 'NotImplementedError'), \"\" + \"asciidoctor: FAILED: missing converter for backend '\" + (new_backend) + \"'. Processing aborted.\")\n          };\n          self.converter = converter;\n          if ($truthy((current_filetype = attrs['$[]'](\"filetype\")))) {\n            attrs.$delete(\"\" + \"filetype-\" + (current_filetype))};\n          \n          $writer = [\"filetype\", new_filetype];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"\" + \"filetype-\" + (new_filetype), \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy((page_width = $$($nesting, 'DEFAULT_PAGE_WIDTHS')['$[]'](new_basebackend)))) {\n            \n            $writer = [\"pagewidth\", page_width];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            attrs.$delete(\"pagewidth\")\n          };\n          if ($truthy(new_basebackend['$!='](current_basebackend))) {\n            \n            if ($truthy(current_doctype)) {\n              \n              if ($truthy(current_basebackend)) {\n                \n                attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend));\n                attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (current_doctype));};\n              \n              $writer = [\"\" + \"basebackend-\" + (new_basebackend) + \"-doctype-\" + (current_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else if ($truthy(current_basebackend)) {\n              attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend))};\n            \n            $writer = [\"\" + \"basebackend-\" + (new_basebackend), \"\"];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"basebackend\", new_basebackend];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;};\n          return new_backend;\n        } else {\n          return nil\n        };\n      }, $Document_update_backend_attributes$71.$$arity = -2);\n      return (Opal.def(self, '$update_doctype_attributes', $Document_update_doctype_attributes$72 = function $$update_doctype_attributes(new_doctype) {\n        var $a, self = this, attrs = nil, current_backend = nil, current_basebackend = nil, current_doctype = nil, $writer = nil;\n\n        if ($truthy(($truthy($a = new_doctype) ? new_doctype['$!='](self.doctype) : $a))) {\n          \n          $a = [self.backend, (attrs = self.attributes)['$[]'](\"basebackend\"), self.doctype], (current_backend = $a[0]), (current_basebackend = $a[1]), (current_doctype = $a[2]), $a;\n          if ($truthy(current_doctype)) {\n            \n            attrs.$delete(\"\" + \"doctype-\" + (current_doctype));\n            if ($truthy(current_backend)) {\n              \n              attrs.$delete(\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (current_doctype));\n              \n              $writer = [\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n            if ($truthy(current_basebackend)) {\n              \n              attrs.$delete(\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (current_doctype));\n              \n              $writer = [\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n          } else {\n            \n            if ($truthy(current_backend)) {\n              \n              $writer = [\"\" + \"backend-\" + (current_backend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(current_basebackend)) {\n              \n              $writer = [\"\" + \"basebackend-\" + (current_basebackend) + \"-doctype-\" + (new_doctype), \"\"];\n              $send(attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          };\n          \n          $writer = [\"\" + \"doctype-\" + (new_doctype), \"\"];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          return (self.doctype = (($writer = [\"doctype\", new_doctype]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        } else {\n          return nil\n        }\n      }, $Document_update_doctype_attributes$72.$$arity = 1), nil) && 'update_doctype_attributes';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/inline\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$[]', '$convert', '$converter', '$attr', '$==', '$apply_reftext_subs', '$reftext']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Inline');\n\n      var $nesting = [self].concat($parent_nesting), $Inline_initialize$1, $Inline_block$ques$2, $Inline_inline$ques$3, $Inline_convert$4, $Inline_alt$5, $Inline_reftext$ques$6, $Inline_reftext$7, $Inline_xreftext$8;\n\n      self.$$prototype.text = self.$$prototype.type = nil;\n      \n      self.$attr_accessor(\"text\");\n      self.$attr_reader(\"type\");\n      self.$attr_accessor(\"target\");\n      \n      Opal.def(self, '$initialize', $Inline_initialize$1 = function $$initialize(parent, context, text, opts) {\n        var $iter = $Inline_initialize$1.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $Inline_initialize$1.$$p = null;\n        \n        \n        if (text == null) {\n          text = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Inline_initialize$1, false), [parent, context, opts], null);\n        self.node_name = \"\" + \"inline_\" + (context);\n        self.text = text;\n        self.id = opts['$[]'](\"id\");\n        self.type = opts['$[]'](\"type\");\n        return (self.target = opts['$[]'](\"target\"));\n      }, $Inline_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$block?', $Inline_block$ques$2 = function() {\n        var self = this;\n\n        return false\n      }, $Inline_block$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$inline?', $Inline_inline$ques$3 = function() {\n        var self = this;\n\n        return true\n      }, $Inline_inline$ques$3.$$arity = 0);\n      \n      Opal.def(self, '$convert', $Inline_convert$4 = function $$convert() {\n        var self = this;\n\n        return self.$converter().$convert(self)\n      }, $Inline_convert$4.$$arity = 0);\n      Opal.alias(self, \"render\", \"convert\");\n      \n      Opal.def(self, '$alt', $Inline_alt$5 = function $$alt() {\n        var $a, self = this;\n\n        return ($truthy($a = self.$attr(\"alt\")) ? $a : \"\")\n      }, $Inline_alt$5.$$arity = 0);\n      \n      Opal.def(self, '$reftext?', $Inline_reftext$ques$6 = function() {\n        var $a, $b, self = this;\n\n        return ($truthy($a = self.text) ? ($truthy($b = self.type['$=='](\"ref\")) ? $b : self.type['$=='](\"bibref\")) : $a)\n      }, $Inline_reftext$ques$6.$$arity = 0);\n      \n      Opal.def(self, '$reftext', $Inline_reftext$7 = function $$reftext() {\n        var self = this, val = nil;\n\n        if ($truthy((val = self.text))) {\n          \n          return self.$apply_reftext_subs(val);\n        } else {\n          return nil\n        }\n      }, $Inline_reftext$7.$$arity = 0);\n      return (Opal.def(self, '$xreftext', $Inline_xreftext$8 = function $$xreftext(xrefstyle) {\n        var self = this;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        return self.$reftext();\n      }, $Inline_xreftext$8.$$arity = -1), nil) && 'xreftext';\n    })($nesting[0], $$($nesting, 'AbstractNode'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/list\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$==', '$next_list', '$callouts', '$class', '$object_id', '$inspect', '$size', '$items', '$attr_accessor', '$level', '$drop', '$nil_or_empty?', '$apply_subs', '$empty?', '$===', '$[]', '$outline?', '$!', '$simple?', '$source', '$shift', '$context', '$parent']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'List');\n\n      var $nesting = [self].concat($parent_nesting), $List_initialize$1, $List_outline$ques$2, $List_convert$3, $List_to_s$4;\n\n      self.$$prototype.context = self.$$prototype.document = self.$$prototype.style = nil;\n      \n      Opal.alias(self, \"items\", \"blocks\");\n      Opal.alias(self, \"content\", \"blocks\");\n      Opal.alias(self, \"items?\", \"blocks?\");\n      \n      Opal.def(self, '$initialize', $List_initialize$1 = function $$initialize(parent, context, opts) {\n        var $iter = $List_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $List_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $List_initialize$1, false), $zuper, $iter);\n      }, $List_initialize$1.$$arity = -3);\n      \n      Opal.def(self, '$outline?', $List_outline$ques$2 = function() {\n        var $a, self = this;\n\n        return ($truthy($a = self.context['$=='](\"ulist\")) ? $a : self.context['$=='](\"olist\"))\n      }, $List_outline$ques$2.$$arity = 0);\n      \n      Opal.def(self, '$convert', $List_convert$3 = function $$convert() {\n        var $iter = $List_convert$3.$$p, $yield = $iter || nil, self = this, result = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $List_convert$3.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        if (self.context['$=='](\"colist\")) {\n          \n          result = $send(self, Opal.find_super_dispatcher(self, 'convert', $List_convert$3, false), $zuper, $iter);\n          self.document.$callouts().$next_list();\n          return result;\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'convert', $List_convert$3, false), $zuper, $iter)\n        }\n      }, $List_convert$3.$$arity = 0);\n      Opal.alias(self, \"render\", \"convert\");\n      return (Opal.def(self, '$to_s', $List_to_s$4 = function $$to_s() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {context: \" + (self.context.$inspect()) + \", style: \" + (self.style.$inspect()) + \", items: \" + (self.$items().$size()) + \"}>\"\n      }, $List_to_s$4.$$arity = 0), nil) && 'to_s';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ListItem');\n\n      var $nesting = [self].concat($parent_nesting), $ListItem_initialize$5, $ListItem_text$ques$6, $ListItem_text$7, $ListItem_text$eq$8, $ListItem_simple$ques$9, $ListItem_compound$ques$10, $ListItem_fold_first$11, $ListItem_to_s$12;\n\n      self.$$prototype.text = self.$$prototype.subs = self.$$prototype.blocks = nil;\n      \n      Opal.alias(self, \"list\", \"parent\");\n      self.$attr_accessor(\"marker\");\n      \n      Opal.def(self, '$initialize', $ListItem_initialize$5 = function $$initialize(parent, text) {\n        var $iter = $ListItem_initialize$5.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $ListItem_initialize$5.$$p = null;\n        \n        \n        if (text == null) {\n          text = nil;\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $ListItem_initialize$5, false), [parent, \"list_item\"], null);\n        self.text = text;\n        self.level = parent.$level();\n        return (self.subs = $$($nesting, 'NORMAL_SUBS').$drop(0));\n      }, $ListItem_initialize$5.$$arity = -2);\n      \n      Opal.def(self, '$text?', $ListItem_text$ques$6 = function() {\n        var self = this;\n\n        if ($truthy(self.text['$nil_or_empty?']())) {\n          return false\n        } else {\n          return true\n        }\n      }, $ListItem_text$ques$6.$$arity = 0);\n      \n      Opal.def(self, '$text', $ListItem_text$7 = function $$text() {\n        var $a, self = this;\n\n        return ($truthy($a = self.text) ? self.$apply_subs(self.text, self.subs) : $a)\n      }, $ListItem_text$7.$$arity = 0);\n      \n      Opal.def(self, '$text=', $ListItem_text$eq$8 = function(val) {\n        var self = this;\n\n        return (self.text = val)\n      }, $ListItem_text$eq$8.$$arity = 1);\n      \n      Opal.def(self, '$simple?', $ListItem_simple$ques$9 = function() {\n        var $a, $b, $c, self = this, blk = nil;\n\n        return ($truthy($a = self.blocks['$empty?']()) ? $a : ($truthy($b = (($c = self.blocks.$size()['$=='](1)) ? $$($nesting, 'List')['$===']((blk = self.blocks['$[]'](0))) : self.blocks.$size()['$=='](1))) ? blk['$outline?']() : $b))\n      }, $ListItem_simple$ques$9.$$arity = 0);\n      \n      Opal.def(self, '$compound?', $ListItem_compound$ques$10 = function() {\n        var self = this;\n\n        return self['$simple?']()['$!']()\n      }, $ListItem_compound$ques$10.$$arity = 0);\n      \n      Opal.def(self, '$fold_first', $ListItem_fold_first$11 = function $$fold_first() {\n        var self = this;\n\n        \n        self.text = (function() {if ($truthy(self.text['$nil_or_empty?']())) {\n          return self.blocks.$shift().$source()\n        } else {\n          return \"\" + (self.text) + ($$($nesting, 'LF')) + (self.blocks.$shift().$source())\n        }; return nil; })();\n        return nil;\n      }, $ListItem_fold_first$11.$$arity = 0);\n      return (Opal.def(self, '$to_s', $ListItem_to_s$12 = function $$to_s() {\n        var $a, self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {list_context: \" + (self.$parent().$context().$inspect()) + \", text: \" + (self.text.$inspect()) + \", blocks: \" + (($truthy($a = self.blocks) ? $a : []).$size()) + \"}>\"\n      }, $ListItem_to_s$12.$$arity = 0), nil) && 'to_s';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/parser\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$include', '$new', '$proc', '$start_with?', '$match?', '$is_delimited_block?', '$private_class_method', '$parse_document_header', '$[]', '$has_more_lines?', '$next_section', '$assign_numeral', '$<<', '$blocks', '$parse_block_metadata_lines', '$attributes', '$is_next_line_doctitle?', '$finalize_header', '$nil_or_empty?', '$title=', '$-', '$sourcemap', '$cursor', '$parse_section_title', '$id=', '$apply_header_subs', '$[]=', '$source_location=', '$header', '$attribute_locked?', '$id', '$clear', '$delete', '$instance_variable_get', '$parse_header_metadata', '$include?', '$==', '$!', '$register', '$doctype', '$parse_manpage_header', '$=~', '$downcase', '$sub_attributes', '$error', '$logger', '$message_with_context', '$cursor_at_line', '$backend', '$skip_blank_lines', '$save', '$update', '$is_next_line_section?', '$initialize_section', '$join', '$map', '$read_lines_until', '$lstrip', '$title', '$split', '$restore_save', '$discard_save', '$context', '$empty?', '$header?', '$!=', '$attr?', '$attr', '$key?', '$document', '$+', '$level', '$special', '$sectname', '$to_i', '$<', '$>', '$warn', '$next_block', '$blocks?', '$style', '$context=', '$style=', '$parent=', '$size', '$content_model', '$shift', '$unwrap_standalone_preamble', '$source_location', '$merge', '$fetch', '$parse_block_metadata_line', '$extensions', '$block_macros?', '$mark', '$read_line', '$terminator', '$to_s', '$masq', '$to_sym', '$registered_for_block?', '$debug?', '$debug', '$cursor_at_mark', '$strict_verbatim_paragraphs', '$unshift_line', '$markdown_syntax', '$keys', '$chr', '$uniform?', '$length', '$end_with?', '$===', '$parse_attributes', '$attribute_missing', '$tr', '$basename', '$assign_caption', '$registered_for_block_macro?', '$config', '$process_method', '$replace', '$parse_callout_list', '$callouts', '$parse_list', '$parse_description_list', '$underline_style_section_titles', '$is_section_title?', '$peek_line', '$atx_section_title?', '$generate_id', '$level=', '$read_paragraph_lines', '$adjust_indentation!', '$map!', '$slice', '$pop', '$build_block', '$apply_subs', '$chop', '$catalog_inline_anchors', '$rekey', '$index', '$strip', '$parse_table', '$each', '$raise', '$title?', '$update_attributes', '$commit_subs', '$sub?', '$catalog_callouts', '$source', '$remove_sub', '$block_terminates_paragraph', '$to_proc', '$nil?', '$lines', '$parse_blocks', '$parse_list_item', '$items', '$scan', '$gsub', '$count', '$advance', '$dup', '$match', '$callout_ids', '$next_list', '$catalog_inline_anchor', '$marker=', '$catalog_inline_biblio_anchor', '$set_option', '$text=', '$resolve_ordered_list_marker', '$read_lines_for_list_item', '$skip_line_comments', '$unshift_lines', '$fold_first', '$text?', '$is_sibling_list_item?', '$concat', '$find', '$casecmp', '$sectname=', '$special=', '$numbered=', '$numbered', '$lineno', '$peek_lines', '$setext_section_title?', '$abs', '$cursor_at_prev_line', '$process_attribute_entries', '$next_line_empty?', '$process_authors', '$rstrip', '$each_with_index', '$compact', '$squeeze', '$to_a', '$parse_style_attribute', '$process_attribute_entry', '$skip_comment_lines', '$store_attribute', '$sanitize_attribute_name', '$set_attribute', '$save_to', '$delete_attribute', '$ord', '$int_to_roman', '$resolve_list_marker', '$parse_colspecs', '$create_columns', '$has_header_option=', '$format', '$starts_with_delimiter?', '$close_open_cell', '$parse_cellspec', '$delimiter', '$match_delimiter', '$pre_match', '$post_match', '$buffer_has_unclosed_quotes?', '$skip_past_delimiter', '$buffer', '$buffer=', '$skip_past_escaped_delimiter', '$keep_cell_open', '$push_cellspec', '$close_cell', '$cell_open?', '$columns', '$assign_column_widths', '$partition_header_footer', '$upto', '$partition', '$shorthand_property_syntax', '$each_char', '$yield_buffered_attribute', '$any?', '$*', '$each_byte', '$%']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Parser');\n\n      var $nesting = [self].concat($parent_nesting), $Parser$1, $Parser$2, $Parser$3, $Parser_parse$4, $Parser_parse_document_header$5, $Parser_parse_manpage_header$6, $Parser_next_section$9, $Parser_next_block$10, $Parser_read_paragraph_lines$14, $Parser_is_delimited_block$ques$15, $Parser_build_block$16, $Parser_parse_blocks$17, $Parser_parse_list$18, $Parser_catalog_callouts$19, $Parser_catalog_inline_anchor$21, $Parser_catalog_inline_anchors$22, $Parser_catalog_inline_biblio_anchor$24, $Parser_parse_description_list$25, $Parser_parse_callout_list$26, $Parser_parse_list_item$27, $Parser_read_lines_for_list_item$28, $Parser_initialize_section$34, $Parser_is_next_line_section$ques$35, $Parser_is_next_line_doctitle$ques$36, $Parser_is_section_title$ques$37, $Parser_atx_section_title$ques$38, $Parser_setext_section_title$ques$39, $Parser_parse_section_title$40, $Parser_parse_header_metadata$41, $Parser_process_authors$46, $Parser_parse_block_metadata_lines$51, $Parser_parse_block_metadata_line$52, $Parser_process_attribute_entries$53, $Parser_process_attribute_entry$54, $Parser_store_attribute$55, $Parser_resolve_list_marker$56, $Parser_resolve_ordered_list_marker$57, $Parser_is_sibling_list_item$ques$59, $Parser_parse_table$60, $Parser_parse_colspecs$61, $Parser_parse_cellspec$65, $Parser_parse_style_attribute$66, $Parser_yield_buffered_attribute$69, $Parser_adjust_indentation$excl$70, $Parser_uniform$ques$79, $Parser_sanitize_attribute_name$80;\n\n      \n      self.$include($$($nesting, 'Logging'));\n      Opal.const_set($nesting[0], 'BlockMatchData', $$($nesting, 'Struct').$new(\"context\", \"masq\", \"tip\", \"terminator\"));\n      Opal.const_set($nesting[0], 'TAB', \"\\t\");\n      Opal.const_set($nesting[0], 'TabIndentRx', /^\\t+/);\n      Opal.const_set($nesting[0], 'StartOfBlockProc', $send(self, 'proc', [], ($Parser$1 = function(l){var self = $Parser$1.$$s || this, $a, $b;\n\n      \n        \n        if (l == null) {\n          l = nil;\n        };\n        return ($truthy($a = ($truthy($b = l['$start_with?'](\"[\")) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](l) : $b)) ? $a : self['$is_delimited_block?'](l));}, $Parser$1.$$s = self, $Parser$1.$$arity = 1, $Parser$1)));\n      Opal.const_set($nesting[0], 'StartOfListProc', $send(self, 'proc', [], ($Parser$2 = function(l){var self = $Parser$2.$$s || this;\n\n      \n        \n        if (l == null) {\n          l = nil;\n        };\n        return $$($nesting, 'AnyListRx')['$match?'](l);}, $Parser$2.$$s = self, $Parser$2.$$arity = 1, $Parser$2)));\n      Opal.const_set($nesting[0], 'StartOfBlockOrListProc', $send(self, 'proc', [], ($Parser$3 = function(l){var self = $Parser$3.$$s || this, $a, $b, $c;\n\n      \n        \n        if (l == null) {\n          l = nil;\n        };\n        return ($truthy($a = ($truthy($b = self['$is_delimited_block?'](l)) ? $b : ($truthy($c = l['$start_with?'](\"[\")) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](l) : $c))) ? $a : $$($nesting, 'AnyListRx')['$match?'](l));}, $Parser$3.$$s = self, $Parser$3.$$arity = 1, $Parser$3)));\n      Opal.const_set($nesting[0], 'NoOp', nil);\n      Opal.const_set($nesting[0], 'AuthorKeys', [\"author\", \"authorinitials\", \"firstname\", \"middlename\", \"lastname\", \"email\"]);\n      Opal.const_set($nesting[0], 'TableCellHorzAlignments', $hash2([\"<\", \">\", \"^\"], {\"<\": \"left\", \">\": \"right\", \"^\": \"center\"}));\n      Opal.const_set($nesting[0], 'TableCellVertAlignments', $hash2([\"<\", \">\", \"^\"], {\"<\": \"top\", \">\": \"bottom\", \"^\": \"middle\"}));\n      Opal.const_set($nesting[0], 'TableCellStyles', $hash2([\"d\", \"s\", \"e\", \"m\", \"h\", \"l\", \"a\"], {\"d\": \"none\", \"s\": \"strong\", \"e\": \"emphasis\", \"m\": \"monospaced\", \"h\": \"header\", \"l\": \"literal\", \"a\": \"asciidoc\"}));\n      self.$private_class_method(\"new\");\n      Opal.defs(self, '$parse', $Parser_parse$4 = function $$parse(reader, document, options) {\n        var $a, $b, $c, self = this, block_attributes = nil, new_section = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        block_attributes = self.$parse_document_header(reader, document);\n        if ($truthy(options['$[]'](\"header_only\"))) {\n        } else {\n          while ($truthy(reader['$has_more_lines?']())) {\n            \n            $c = self.$next_section(reader, document, block_attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (block_attributes = ($b[1] == null ? nil : $b[1])), $c;\n            if ($truthy(new_section)) {\n              \n              document.$assign_numeral(new_section);\n              document.$blocks()['$<<'](new_section);};\n          }\n        };\n        return document;\n      }, $Parser_parse$4.$$arity = -3);\n      Opal.defs(self, '$parse_document_header', $Parser_parse_document_header$5 = function $$parse_document_header(reader, document) {\n        var $a, $b, self = this, block_attrs = nil, doc_attrs = nil, implicit_doctitle = nil, val = nil, $writer = nil, doctitle_attr_val = nil, source_location = nil, _ = nil, l0_section_title = nil, atx = nil, separator = nil, doc_id = nil, role = nil, reftext = nil, modified_attrs = nil;\n\n        \n        block_attrs = self.$parse_block_metadata_lines(reader, document);\n        doc_attrs = document.$attributes();\n        if ($truthy(($truthy($a = (implicit_doctitle = self['$is_next_line_doctitle?'](reader, block_attrs, doc_attrs['$[]'](\"leveloffset\")))) ? block_attrs['$[]'](\"title\") : $a))) {\n          return document.$finalize_header(block_attrs, false)};\n        if ($truthy((val = doc_attrs['$[]'](\"doctitle\"))['$nil_or_empty?']())) {\n        } else {\n          \n          $writer = [(doctitle_attr_val = val)];\n          $send(document, 'title=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        if ($truthy(implicit_doctitle)) {\n          \n          if ($truthy(document.$sourcemap())) {\n            source_location = reader.$cursor()};\n          $b = self.$parse_section_title(reader, document), $a = Opal.to_ary($b), document['$id='](($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), (l0_section_title = ($a[2] == null ? nil : $a[2])), (_ = ($a[3] == null ? nil : $a[3])), (atx = ($a[4] == null ? nil : $a[4])), $b;\n          if ($truthy(doctitle_attr_val)) {\n            l0_section_title = nil\n          } else {\n            \n            \n            $writer = [l0_section_title];\n            $send(document, 'title=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"doctitle\", (doctitle_attr_val = document.$apply_header_subs(l0_section_title))];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          };\n          if ($truthy(source_location)) {\n            \n            $writer = [source_location];\n            $send(document.$header(), 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(($truthy($a = atx) ? $a : document['$attribute_locked?'](\"compat-mode\")))) {\n          } else {\n            \n            $writer = [\"compat-mode\", \"\"];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          if ($truthy((separator = block_attrs['$[]'](\"separator\")))) {\n            if ($truthy(document['$attribute_locked?'](\"title-separator\"))) {\n            } else {\n              \n              $writer = [\"title-separator\", separator];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }};\n          if ($truthy((doc_id = block_attrs['$[]'](\"id\")))) {\n            \n            $writer = [doc_id];\n            $send(document, 'id=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            doc_id = document.$id()\n          };\n          if ($truthy((role = block_attrs['$[]'](\"role\")))) {\n            \n            $writer = [\"role\", role];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy((reftext = block_attrs['$[]'](\"reftext\")))) {\n            \n            $writer = [\"reftext\", reftext];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          block_attrs.$clear();\n          (modified_attrs = document.$instance_variable_get(\"@attributes_modified\")).$delete(\"doctitle\");\n          self.$parse_header_metadata(reader, document);\n          if ($truthy(modified_attrs['$include?'](\"doctitle\"))) {\n            if ($truthy(($truthy($a = (val = doc_attrs['$[]'](\"doctitle\"))['$nil_or_empty?']()) ? $a : val['$=='](doctitle_attr_val)))) {\n              \n              $writer = [\"doctitle\", doctitle_attr_val];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [val];\n              $send(document, 'title=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }\n          } else if ($truthy(l0_section_title['$!']())) {\n            modified_attrs['$<<'](\"doctitle\")};\n          if ($truthy(doc_id)) {\n            document.$register(\"refs\", [doc_id, document])};};\n        if (document.$doctype()['$=='](\"manpage\")) {\n          self.$parse_manpage_header(reader, document, block_attrs)};\n        return document.$finalize_header(block_attrs);\n      }, $Parser_parse_document_header$5.$$arity = 2);\n      Opal.defs(self, '$parse_manpage_header', $Parser_parse_manpage_header$6 = function $$parse_manpage_header(reader, document, block_attributes) {\n        var $a, $b, $$7, $$8, self = this, doc_attrs = nil, $writer = nil, manvolnum = nil, mantitle = nil, manname = nil, name_section_level = nil, name_section = nil, name_section_buffer = nil, mannames = nil, error_msg = nil;\n\n        \n        if ($truthy($$($nesting, 'ManpageTitleVolnumRx')['$=~']((doc_attrs = document.$attributes())['$[]'](\"doctitle\")))) {\n          \n          \n          $writer = [\"manvolnum\", (manvolnum = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)))];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"mantitle\", (function() {if ($truthy((mantitle = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n            \n            return document.$sub_attributes(mantitle);\n          } else {\n            return mantitle\n          }; return nil; })().$downcase()];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        } else {\n          \n          self.$logger().$error(self.$message_with_context(\"non-conforming manpage title\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_line(1)})));\n          \n          $writer = [\"mantitle\", ($truthy($a = ($truthy($b = doc_attrs['$[]'](\"doctitle\")) ? $b : doc_attrs['$[]'](\"docname\"))) ? $a : \"command\")];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"manvolnum\", (manvolnum = \"1\")];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n        };\n        if ($truthy(($truthy($a = (manname = doc_attrs['$[]'](\"manname\"))) ? doc_attrs['$[]'](\"manpurpose\") : $a))) {\n          \n          ($truthy($a = doc_attrs['$[]'](\"manname-title\")) ? $a : (($writer = [\"manname-title\", \"Name\"]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          \n          $writer = [\"mannames\", [manname]];\n          $send(doc_attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if (document.$backend()['$=='](\"manpage\")) {\n            \n            \n            $writer = [\"docname\", manname];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"outfilesuffix\", \"\" + \".\" + (manvolnum)];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;};\n        } else {\n          \n          reader.$skip_blank_lines();\n          reader.$save();\n          block_attributes.$update(self.$parse_block_metadata_lines(reader, document));\n          if ($truthy((name_section_level = self['$is_next_line_section?'](reader, $hash2([], {}))))) {\n            if (name_section_level['$=='](1)) {\n              \n              name_section = self.$initialize_section(reader, document, $hash2([], {}));\n              name_section_buffer = $send(reader.$read_lines_until($hash2([\"break_on_blank_lines\", \"skip_line_comments\"], {\"break_on_blank_lines\": true, \"skip_line_comments\": true})), 'map', [], ($$7 = function(l){var self = $$7.$$s || this;\n\n              \n                \n                if (l == null) {\n                  l = nil;\n                };\n                return l.$lstrip();}, $$7.$$s = self, $$7.$$arity = 1, $$7)).$join(\" \");\n              if ($truthy($$($nesting, 'ManpageNamePurposeRx')['$=~'](name_section_buffer))) {\n                \n                ($truthy($a = doc_attrs['$[]'](\"manname-title\")) ? $a : (($writer = [\"manname-title\", name_section.$title()]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n                if ($truthy(name_section.$id())) {\n                  \n                  $writer = [\"manname-id\", name_section.$id()];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                \n                $writer = [\"manpurpose\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if ($truthy((manname = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                  manname = document.$sub_attributes(manname)};\n                if ($truthy(manname['$include?'](\",\"))) {\n                  manname = (mannames = $send(manname.$split(\",\"), 'map', [], ($$8 = function(n){var self = $$8.$$s || this;\n\n                  \n                    \n                    if (n == null) {\n                      n = nil;\n                    };\n                    return n.$lstrip();}, $$8.$$s = self, $$8.$$arity = 1, $$8)))['$[]'](0)\n                } else {\n                  mannames = [manname]\n                };\n                \n                $writer = [\"manname\", manname];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"mannames\", mannames];\n                $send(doc_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if (document.$backend()['$=='](\"manpage\")) {\n                  \n                  \n                  $writer = [\"docname\", manname];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  \n                  $writer = [\"outfilesuffix\", \"\" + \".\" + (manvolnum)];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;};\n              } else {\n                error_msg = \"non-conforming name section body\"\n              };\n            } else {\n              error_msg = \"name section must be at level 1\"\n            }\n          } else {\n            error_msg = \"name section expected\"\n          };\n          if ($truthy(error_msg)) {\n            \n            reader.$restore_save();\n            self.$logger().$error(self.$message_with_context(error_msg, $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})));\n            \n            $writer = [\"manname\", (manname = ($truthy($a = doc_attrs['$[]'](\"docname\")) ? $a : \"command\"))];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"mannames\", [manname]];\n            $send(doc_attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if (document.$backend()['$=='](\"manpage\")) {\n              \n              \n              $writer = [\"docname\", manname];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              \n              $writer = [\"outfilesuffix\", \"\" + \".\" + (manvolnum)];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n          } else {\n            reader.$discard_save()\n          };\n        };\n        return nil;\n      }, $Parser_parse_manpage_header$6.$$arity = 3);\n      Opal.defs(self, '$next_section', $Parser_next_section$9 = function $$next_section(reader, parent, attributes) {\n        var $a, $b, $c, $d, self = this, preamble = nil, intro = nil, part = nil, has_header = nil, book = nil, document = nil, $writer = nil, section = nil, current_level = nil, expected_next_level = nil, expected_next_level_alt = nil, title = nil, sectname = nil, next_level = nil, expected_condition = nil, new_section = nil, block_cursor = nil, new_block = nil, first_block = nil, child_block = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        preamble = (intro = (part = false));\n        if ($truthy(($truthy($a = (($b = parent.$context()['$=='](\"document\")) ? parent.$blocks()['$empty?']() : parent.$context()['$=='](\"document\"))) ? ($truthy($b = ($truthy($c = (has_header = parent['$header?']())) ? $c : attributes.$delete(\"invalid-header\"))) ? $b : self['$is_next_line_section?'](reader, attributes)['$!']()) : $a))) {\n          \n          book = (document = parent).$doctype()['$=='](\"book\");\n          if ($truthy(($truthy($a = has_header) ? $a : ($truthy($b = book) ? attributes['$[]'](1)['$!='](\"abstract\") : $b)))) {\n            \n            preamble = (intro = $$($nesting, 'Block').$new(parent, \"preamble\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})));\n            if ($truthy(($truthy($a = book) ? parent['$attr?'](\"preface-title\") : $a))) {\n              \n              $writer = [parent.$attr(\"preface-title\")];\n              $send(preamble, 'title=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            parent.$blocks()['$<<'](preamble);};\n          section = parent;\n          current_level = 0;\n          if ($truthy(parent.$attributes()['$key?'](\"fragment\"))) {\n            expected_next_level = -1\n          } else if ($truthy(book)) {\n            $a = [1, 0], (expected_next_level = $a[0]), (expected_next_level_alt = $a[1]), $a\n          } else {\n            expected_next_level = 1\n          };\n        } else {\n          \n          book = (document = parent.$document()).$doctype()['$=='](\"book\");\n          section = self.$initialize_section(reader, parent, attributes);\n          attributes = (function() {if ($truthy((title = attributes['$[]'](\"title\")))) {\n            return $hash2([\"title\"], {\"title\": title})\n          } else {\n            return $hash2([], {})\n          }; return nil; })();\n          expected_next_level = $rb_plus((current_level = section.$level()), 1);\n          if (current_level['$=='](0)) {\n            part = book\n          } else if ($truthy((($a = current_level['$=='](1)) ? section.$special() : current_level['$=='](1)))) {\n            if ($truthy(($truthy($a = ($truthy($b = (sectname = section.$sectname())['$=='](\"appendix\")) ? $b : sectname['$=='](\"preface\"))) ? $a : sectname['$=='](\"abstract\")))) {\n            } else {\n              expected_next_level = nil\n            }};\n        };\n        reader.$skip_blank_lines();\n        while ($truthy(reader['$has_more_lines?']())) {\n          \n          self.$parse_block_metadata_lines(reader, document, attributes);\n          if ($truthy((next_level = self['$is_next_line_section?'](reader, attributes)))) {\n            \n            if ($truthy(document['$attr?'](\"leveloffset\"))) {\n              \n              next_level = $rb_plus(next_level, document.$attr(\"leveloffset\").$to_i());\n              if ($truthy($rb_lt(next_level, 0))) {\n                next_level = 0};};\n            if ($truthy($rb_gt(next_level, current_level))) {\n              \n              if ($truthy(expected_next_level)) {\n                if ($truthy(($truthy($b = ($truthy($c = next_level['$=='](expected_next_level)) ? $c : ($truthy($d = expected_next_level_alt) ? next_level['$=='](expected_next_level_alt) : $d))) ? $b : $rb_lt(expected_next_level, 0)))) {\n                } else {\n                  \n                  expected_condition = (function() {if ($truthy(expected_next_level_alt)) {\n                    return \"\" + \"expected levels \" + (expected_next_level_alt) + \" or \" + (expected_next_level)\n                  } else {\n                    return \"\" + \"expected level \" + (expected_next_level)\n                  }; return nil; })();\n                  self.$logger().$warn(self.$message_with_context(\"\" + \"section title out of sequence: \" + (expected_condition) + \", got level \" + (next_level), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})));\n                }\n              } else {\n                self.$logger().$error(self.$message_with_context(\"\" + (sectname) + \" sections do not support nested sections\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n              };\n              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;\n              section.$assign_numeral(new_section);\n              section.$blocks()['$<<'](new_section);\n            } else if ($truthy((($b = next_level['$=='](0)) ? section['$=='](document) : next_level['$=='](0)))) {\n              \n              if ($truthy(book)) {\n              } else {\n                self.$logger().$error(self.$message_with_context(\"level 0 sections can only be used when doctype is book\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n              };\n              $c = self.$next_section(reader, section, attributes), $b = Opal.to_ary($c), (new_section = ($b[0] == null ? nil : $b[0])), (attributes = ($b[1] == null ? nil : $b[1])), $c;\n              section.$assign_numeral(new_section);\n              section.$blocks()['$<<'](new_section);\n            } else {\n              break;\n            };\n          } else {\n            \n            block_cursor = reader.$cursor();\n            if ($truthy((new_block = self.$next_block(reader, ($truthy($b = intro) ? $b : section), attributes, $hash2([\"parse_metadata\"], {\"parse_metadata\": false}))))) {\n              \n              if ($truthy(part)) {\n                if ($truthy(section['$blocks?']()['$!']())) {\n                  if ($truthy(new_block.$style()['$!='](\"partintro\"))) {\n                    if (new_block.$context()['$=='](\"paragraph\")) {\n                      \n                      \n                      $writer = [\"open\"];\n                      $send(new_block, 'context=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      \n                      $writer = [\"partintro\"];\n                      $send(new_block, 'style=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                    } else {\n                      \n                      \n                      $writer = [(intro = $$($nesting, 'Block').$new(section, \"open\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})))];\n                      $send(new_block, 'parent=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      \n                      $writer = [\"partintro\"];\n                      $send(intro, 'style=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      section.$blocks()['$<<'](intro);\n                    }}\n                } else if (section.$blocks().$size()['$=='](1)) {\n                  \n                  first_block = section.$blocks()['$[]'](0);\n                  if ($truthy(($truthy($b = intro['$!']()) ? first_block.$content_model()['$=='](\"compound\") : $b))) {\n                    self.$logger().$error(self.$message_with_context(\"illegal block content outside of partintro block\", $hash2([\"source_location\"], {\"source_location\": block_cursor})))\n                  } else if ($truthy(first_block.$content_model()['$!='](\"compound\"))) {\n                    \n                    \n                    $writer = [(intro = $$($nesting, 'Block').$new(section, \"open\", $hash2([\"content_model\"], {\"content_model\": \"compound\"})))];\n                    $send(new_block, 'parent=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                    \n                    $writer = [\"partintro\"];\n                    $send(intro, 'style=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                    section.$blocks().$shift();\n                    if (first_block.$style()['$=='](\"partintro\")) {\n                      \n                      \n                      $writer = [\"paragraph\"];\n                      $send(first_block, 'context=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      \n                      $writer = [nil];\n                      $send(first_block, 'style=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;};\n                    intro['$<<'](first_block);\n                    section.$blocks()['$<<'](intro);};}};\n              ($truthy($b = intro) ? $b : section).$blocks()['$<<'](new_block);\n              attributes.$clear();};\n          };\n          if ($truthy($b = reader.$skip_blank_lines())) {\n            $b\n          } else {\n            break;\n          };\n        };\n        if ($truthy(part)) {\n          if ($truthy(($truthy($a = section['$blocks?']()) ? section.$blocks()['$[]'](-1).$context()['$=='](\"section\") : $a))) {\n          } else {\n            self.$logger().$error(self.$message_with_context(\"invalid part, must have at least one section (e.g., chapter, appendix, etc.)\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n          }\n        } else if ($truthy(preamble)) {\n          if ($truthy(preamble['$blocks?']())) {\n            if ($truthy(($truthy($a = ($truthy($b = book) ? $b : document.$blocks()['$[]'](1))) ? $a : $$($nesting, 'Compliance').$unwrap_standalone_preamble()['$!']()))) {\n              if ($truthy(document.$sourcemap())) {\n                \n                $writer = [preamble.$blocks()['$[]'](0).$source_location()];\n                $send(preamble, 'source_location=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];}\n            } else {\n              \n              document.$blocks().$shift();\n              while ($truthy((child_block = preamble.$blocks().$shift()))) {\n                document['$<<'](child_block)\n              };\n            }\n          } else {\n            document.$blocks().$shift()\n          }};\n        return [(function() {if ($truthy(section['$!='](parent))) {\n          return section\n        } else {\n          return nil\n        }; return nil; })(), attributes.$merge()];\n      }, $Parser_next_section$9.$$arity = -3);\n      Opal.defs(self, '$next_block', $Parser_next_block$10 = function $$next_block(reader, parent, attributes, options) {try {\n\n        var $a, $b, $c, $d, $$11, $$12, $$13, self = this, skipped = nil, text_only = nil, document = nil, extensions = nil, block_extensions = nil, block_macro_extensions = nil, this_line = nil, doc_attrs = nil, style = nil, block = nil, block_context = nil, cloaked_context = nil, terminator = nil, delimited_block = nil, $writer = nil, indented = nil, md_syntax = nil, ch0 = nil, layout_break_chars = nil, ll = nil, blk_ctx = nil, target = nil, blk_attrs = nil, $case = nil, posattrs = nil, expanded_target = nil, scaledwidth = nil, block_title = nil, extension = nil, report_unknown_block_macro = nil, content = nil, ext_config = nil, default_attrs = nil, float_id = nil, float_reftext = nil, float_level = nil, lines = nil, content_adjacent = nil, admonition_name = nil, credit_line = nil, attribution = nil, citetitle = nil, language = nil, comma_idx = nil, block_cursor = nil, block_reader = nil, content_model = nil, positional_attrs = nil, caption_attr_name = nil, block_id = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        if ($truthy((skipped = reader.$skip_blank_lines()))) {\n        } else {\n          return nil\n        };\n        if ($truthy(($truthy($a = (text_only = options['$[]'](\"text_only\"))) ? $rb_gt(skipped, 0) : $a))) {\n          \n          options.$delete(\"text_only\");\n          text_only = nil;};\n        document = parent.$document();\n        if ($truthy(options.$fetch(\"parse_metadata\", true))) {\n          while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {\n            \n            reader.$shift();\n            ($truthy($b = reader.$skip_blank_lines()) ? $b : Opal.ret(nil));\n          }};\n        if ($truthy((extensions = document.$extensions()))) {\n          $a = [extensions['$blocks?'](), extensions['$block_macros?']()], (block_extensions = $a[0]), (block_macro_extensions = $a[1]), $a};\n        reader.$mark();\n        $a = [reader.$read_line(), document.$attributes(), attributes['$[]'](1)], (this_line = $a[0]), (doc_attrs = $a[1]), (style = $a[2]), $a;\n        block = (block_context = (cloaked_context = (terminator = nil)));\n        if ($truthy((delimited_block = self['$is_delimited_block?'](this_line, true)))) {\n          \n          block_context = (cloaked_context = delimited_block.$context());\n          terminator = delimited_block.$terminator();\n          if ($truthy(style)) {\n            if (style['$=='](block_context.$to_s())) {\n            } else if ($truthy(delimited_block.$masq()['$include?'](style))) {\n              block_context = style.$to_sym()\n            } else if ($truthy(($truthy($a = delimited_block.$masq()['$include?'](\"admonition\")) ? $$($nesting, 'ADMONITION_STYLES')['$include?'](style) : $a))) {\n              block_context = \"admonition\"\n            } else if ($truthy(($truthy($a = block_extensions) ? extensions['$registered_for_block?'](style, block_context) : $a))) {\n              block_context = style.$to_sym()\n            } else {\n              \n              if ($truthy(self.$logger()['$debug?']())) {\n                self.$logger().$debug(self.$message_with_context(\"\" + \"unknown style for \" + (block_context) + \" block: \" + (style), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))};\n              style = block_context.$to_s();\n            }\n          } else {\n            style = (($writer = [\"style\", block_context.$to_s()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])\n          };};\n        if ($truthy(delimited_block)) {\n        } else {\n          while ($truthy(true)) {\n            \n            if ($truthy(($truthy($b = ($truthy($c = style) ? $$($nesting, 'Compliance').$strict_verbatim_paragraphs() : $c)) ? $$($nesting, 'VERBATIM_STYLES')['$include?'](style) : $b))) {\n              \n              block_context = style.$to_sym();\n              reader.$unshift_line(this_line);\n              break;;};\n            if ($truthy(text_only)) {\n              indented = this_line['$start_with?'](\" \", $$($nesting, 'TAB'))\n            } else {\n              \n              md_syntax = $$($nesting, 'Compliance').$markdown_syntax();\n              if ($truthy(this_line['$start_with?'](\" \"))) {\n                \n                $b = [true, \" \"], (indented = $b[0]), (ch0 = $b[1]), $b;\n                if ($truthy(($truthy($b = ($truthy($c = md_syntax) ? $send(this_line.$lstrip(), 'start_with?', Opal.to_a($$($nesting, 'MARKDOWN_THEMATIC_BREAK_CHARS').$keys())) : $c)) ? $$($nesting, 'MarkdownThematicBreakRx')['$match?'](this_line) : $b))) {\n                  \n                  block = $$($nesting, 'Block').$new(parent, \"thematic_break\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                  break;;};\n              } else if ($truthy(this_line['$start_with?']($$($nesting, 'TAB')))) {\n                $b = [true, $$($nesting, 'TAB')], (indented = $b[0]), (ch0 = $b[1]), $b\n              } else {\n                \n                $b = [false, this_line.$chr()], (indented = $b[0]), (ch0 = $b[1]), $b;\n                layout_break_chars = (function() {if ($truthy(md_syntax)) {\n                  return $$($nesting, 'HYBRID_LAYOUT_BREAK_CHARS')\n                } else {\n                  return $$($nesting, 'LAYOUT_BREAK_CHARS')\n                }; return nil; })();\n                if ($truthy(($truthy($b = layout_break_chars['$key?'](ch0)) ? (function() {if ($truthy(md_syntax)) {\n                  \n                  return $$($nesting, 'ExtLayoutBreakRx')['$match?'](this_line);\n                } else {\n                  return ($truthy($c = self['$uniform?'](this_line, ch0, (ll = this_line.$length()))) ? $rb_gt(ll, 2) : $c)\n                }; return nil; })() : $b))) {\n                  \n                  block = $$($nesting, 'Block').$new(parent, layout_break_chars['$[]'](ch0), $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                  break;;\n                } else if ($truthy(($truthy($b = this_line['$end_with?'](\"]\")) ? this_line['$include?'](\"::\") : $b))) {\n                  if ($truthy(($truthy($b = ($truthy($c = ch0['$=='](\"i\")) ? $c : this_line['$start_with?'](\"video:\", \"audio:\"))) ? $$($nesting, 'BlockMediaMacroRx')['$=~'](this_line) : $b))) {\n                    \n                    $b = [(($c = $gvars['~']) === nil ? nil : $c['$[]'](1)).$to_sym(), (($c = $gvars['~']) === nil ? nil : $c['$[]'](2)), (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))], (blk_ctx = $b[0]), (target = $b[1]), (blk_attrs = $b[2]), $b;\n                    block = $$($nesting, 'Block').$new(parent, blk_ctx, $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                    if ($truthy(blk_attrs)) {\n                      \n                      $case = blk_ctx;\n                      if (\"video\"['$===']($case)) {posattrs = [\"poster\", \"width\", \"height\"]}\n                      else if (\"audio\"['$===']($case)) {posattrs = []}\n                      else {posattrs = [\"alt\", \"width\", \"height\"]};\n                      block.$parse_attributes(blk_attrs, posattrs, $hash2([\"sub_input\", \"into\"], {\"sub_input\": true, \"into\": attributes}));};\n                    if ($truthy(attributes['$key?'](\"style\"))) {\n                      attributes.$delete(\"style\")};\n                    if ($truthy(target['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                      if ($truthy(($truthy($b = ($truthy($c = (expanded_target = block.$sub_attributes(target))['$empty?']()) ? ($truthy($d = doc_attrs['$[]'](\"attribute-missing\")) ? $d : $$($nesting, 'Compliance').$attribute_missing())['$=='](\"drop-line\") : $c)) ? block.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : $b))) {\n                        \n                        attributes.$clear();\n                        return nil;\n                      } else {\n                        target = expanded_target\n                      }};\n                    if (blk_ctx['$=='](\"image\")) {\n                      \n                      document.$register(\"images\", target);\n                      \n                      $writer = [\"imagesdir\", doc_attrs['$[]'](\"imagesdir\")];\n                      $send(attributes, '[]=', Opal.to_a($writer));\n                      $writer[$rb_minus($writer[\"length\"], 1)];;\n                      ($truthy($b = attributes['$[]'](\"alt\")) ? $b : (($writer = [\"alt\", ($truthy($c = style) ? $c : (($writer = [\"default-alt\", $$($nesting, 'Helpers').$basename(target, true).$tr(\"_-\", \" \")]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n                      if ($truthy((scaledwidth = attributes.$delete(\"scaledwidth\"))['$nil_or_empty?']())) {\n                      } else {\n                        \n                        $writer = [\"scaledwidth\", (function() {if ($truthy($$($nesting, 'TrailingDigitsRx')['$match?'](scaledwidth))) {\n                          return \"\" + (scaledwidth) + \"%\"\n                        } else {\n                          return scaledwidth\n                        }; return nil; })()];\n                        $send(attributes, '[]=', Opal.to_a($writer));\n                        $writer[$rb_minus($writer[\"length\"], 1)];\n                      };\n                      if ($truthy(attributes['$[]'](\"title\"))) {\n                        \n                        \n                        $writer = [(block_title = attributes.$delete(\"title\"))];\n                        $send(block, 'title=', Opal.to_a($writer));\n                        $writer[$rb_minus($writer[\"length\"], 1)];;\n                        block.$assign_caption(attributes.$delete(\"caption\"), \"figure\");};};\n                    \n                    $writer = [\"target\", target];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];;\n                    break;;\n                  } else if ($truthy(($truthy($b = (($c = ch0['$=='](\"t\")) ? this_line['$start_with?'](\"toc:\") : ch0['$=='](\"t\"))) ? $$($nesting, 'BlockTocMacroRx')['$=~'](this_line) : $b))) {\n                    \n                    block = $$($nesting, 'Block').$new(parent, \"toc\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n                    if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)))) {\n                      block.$parse_attributes((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), [], $hash2([\"into\"], {\"into\": attributes}))};\n                    break;;\n                  } else if ($truthy((function() {if ($truthy(block_macro_extensions)) {\n                    \n                    return ($truthy($b = ($truthy($c = $$($nesting, 'CustomBlockMacroRx')['$=~'](this_line)) ? (extension = extensions['$registered_for_block_macro?']((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) : $c)) ? $b : (report_unknown_block_macro = self.$logger()['$debug?']()));\n                  } else {\n                    \n                    return ($truthy($b = self.$logger()['$debug?']()) ? (report_unknown_block_macro = $$($nesting, 'CustomBlockMacroRx')['$=~'](this_line)) : $b);\n                  }; return nil; })())) {\n                    if ($truthy(report_unknown_block_macro)) {\n                      self.$logger().$debug(self.$message_with_context(\"\" + \"unknown name for block macro: \" + ((($b = $gvars['~']) === nil ? nil : $b['$[]'](1))), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n                    } else {\n                      \n                      content = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3));\n                      if ($truthy((target = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)))['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                        if ($truthy(($truthy($b = ($truthy($c = (expanded_target = parent.$sub_attributes(target))['$empty?']()) ? ($truthy($d = doc_attrs['$[]'](\"attribute-missing\")) ? $d : $$($nesting, 'Compliance').$attribute_missing())['$=='](\"drop-line\") : $c)) ? parent.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : $b))) {\n                          \n                          attributes.$clear();\n                          return nil;\n                        } else {\n                          target = expanded_target\n                        }};\n                      if ((ext_config = extension.$config())['$[]'](\"content_model\")['$=='](\"attributes\")) {\n                        if ($truthy(content)) {\n                          document.$parse_attributes(content, ($truthy($b = ($truthy($c = ext_config['$[]'](\"positional_attrs\")) ? $c : ext_config['$[]'](\"pos_attrs\"))) ? $b : []), $hash2([\"sub_input\", \"into\"], {\"sub_input\": true, \"into\": attributes}))}\n                      } else {\n                        \n                        $writer = [\"text\", ($truthy($b = content) ? $b : \"\")];\n                        $send(attributes, '[]=', Opal.to_a($writer));\n                        $writer[$rb_minus($writer[\"length\"], 1)];\n                      };\n                      if ($truthy((default_attrs = ext_config['$[]'](\"default_attrs\")))) {\n                        $send(attributes, 'update', [default_attrs], ($$11 = function(_, old_v){var self = $$11.$$s || this;\n\n                        \n                          \n                          if (_ == null) {\n                            _ = nil;\n                          };\n                          \n                          if (old_v == null) {\n                            old_v = nil;\n                          };\n                          return old_v;}, $$11.$$s = self, $$11.$$arity = 2, $$11))};\n                      if ($truthy((block = extension.$process_method()['$[]'](parent, target, attributes)))) {\n                        \n                        attributes.$replace(block.$attributes());\n                        break;;\n                      } else {\n                        \n                        attributes.$clear();\n                        return nil;\n                      };\n                    }}};\n              };\n            };\n            if ($truthy(($truthy($b = ($truthy($c = indented['$!']()) ? (ch0 = ($truthy($d = ch0) ? $d : this_line.$chr()))['$=='](\"<\") : $c)) ? $$($nesting, 'CalloutListRx')['$=~'](this_line) : $b))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_callout_list(reader, $gvars[\"~\"], parent, document.$callouts());\n              \n              $writer = [\"style\", \"arabic\"];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              break;;\n            } else if ($truthy($$($nesting, 'UnorderedListRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              if ($truthy(($truthy($b = ($truthy($c = style['$!']()) ? $$($nesting, 'Section')['$==='](parent) : $c)) ? parent.$sectname()['$=='](\"bibliography\") : $b))) {\n                \n                $writer = [\"style\", (style = \"bibliography\")];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              block = self.$parse_list(reader, \"ulist\", parent, style);\n              break;;\n            } else if ($truthy($$($nesting, 'OrderedListRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_list(reader, \"olist\", parent, style);\n              if ($truthy(block.$style())) {\n                \n                $writer = [\"style\", block.$style()];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              break;;\n            } else if ($truthy(($truthy($b = ($truthy($c = this_line['$include?'](\"::\")) ? $c : this_line['$include?'](\";;\"))) ? $$($nesting, 'DescriptionListRx')['$=~'](this_line) : $b))) {\n              \n              reader.$unshift_line(this_line);\n              block = self.$parse_description_list(reader, $gvars[\"~\"], parent);\n              break;;\n            } else if ($truthy(($truthy($b = ($truthy($c = style['$=='](\"float\")) ? $c : style['$=='](\"discrete\"))) ? (function() {if ($truthy($$($nesting, 'Compliance').$underline_style_section_titles())) {\n              \n              return self['$is_section_title?'](this_line, reader.$peek_line());\n            } else {\n              return ($truthy($c = indented['$!']()) ? self['$atx_section_title?'](this_line) : $c)\n            }; return nil; })() : $b))) {\n              \n              reader.$unshift_line(this_line);\n              $c = self.$parse_section_title(reader, document, attributes['$[]'](\"id\")), $b = Opal.to_ary($c), (float_id = ($b[0] == null ? nil : $b[0])), (float_reftext = ($b[1] == null ? nil : $b[1])), (block_title = ($b[2] == null ? nil : $b[2])), (float_level = ($b[3] == null ? nil : $b[3])), $c;\n              if ($truthy(float_reftext)) {\n                \n                $writer = [\"reftext\", float_reftext];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              block = $$($nesting, 'Block').$new(parent, \"floating_title\", $hash2([\"content_model\"], {\"content_model\": \"empty\"}));\n              \n              $writer = [block_title];\n              $send(block, 'title=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              attributes.$delete(\"title\");\n              \n              $writer = [($truthy($b = float_id) ? $b : (function() {if ($truthy(doc_attrs['$key?'](\"sectids\"))) {\n                \n                return $$($nesting, 'Section').$generate_id(block.$title(), document);\n              } else {\n                return nil\n              }; return nil; })())];\n              $send(block, 'id=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              \n              $writer = [float_level];\n              $send(block, 'level=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              break;;\n            } else if ($truthy(($truthy($b = style) ? style['$!='](\"normal\") : $b))) {\n              if ($truthy($$($nesting, 'PARAGRAPH_STYLES')['$include?'](style))) {\n                \n                block_context = style.$to_sym();\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;;\n              } else if ($truthy($$($nesting, 'ADMONITION_STYLES')['$include?'](style))) {\n                \n                block_context = \"admonition\";\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;;\n              } else if ($truthy(($truthy($b = block_extensions) ? extensions['$registered_for_block?'](style, \"paragraph\") : $b))) {\n                \n                block_context = style.$to_sym();\n                cloaked_context = \"paragraph\";\n                reader.$unshift_line(this_line);\n                break;;\n              } else {\n                \n                if ($truthy(self.$logger()['$debug?']())) {\n                  self.$logger().$debug(self.$message_with_context(\"\" + \"unknown style for paragraph: \" + (style), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))};\n                style = nil;\n              }};\n            reader.$unshift_line(this_line);\n            if ($truthy(($truthy($b = indented) ? style['$!']() : $b))) {\n              \n              lines = self.$read_paragraph_lines(reader, (content_adjacent = (function() {if (skipped['$=='](0)) {\n                return options['$[]'](\"list_type\")\n              } else {\n                return nil\n              }; return nil; })()), $hash2([\"skip_line_comments\"], {\"skip_line_comments\": text_only}));\n              self['$adjust_indentation!'](lines);\n              if ($truthy(($truthy($b = text_only) ? $b : content_adjacent['$=='](\"dlist\")))) {\n                block = $$($nesting, 'Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}))\n              } else {\n                block = $$($nesting, 'Block').$new(parent, \"literal\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"verbatim\", \"source\": lines, \"attributes\": attributes}))\n              };\n            } else {\n              \n              lines = self.$read_paragraph_lines(reader, (($b = skipped['$=='](0)) ? options['$[]'](\"list_type\") : skipped['$=='](0)), $hash2([\"skip_line_comments\"], {\"skip_line_comments\": true}));\n              if ($truthy(text_only)) {\n                \n                if ($truthy(($truthy($b = indented) ? style['$=='](\"normal\") : $b))) {\n                  self['$adjust_indentation!'](lines)};\n                block = $$($nesting, 'Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              } else if ($truthy(($truthy($b = ($truthy($c = $$($nesting, 'ADMONITION_STYLE_HEADS')['$include?'](ch0)) ? this_line['$include?'](\":\") : $c)) ? $$($nesting, 'AdmonitionParagraphRx')['$=~'](this_line) : $b))) {\n                \n                \n                $writer = [0, (($b = $gvars['~']) === nil ? nil : $b.$post_match())];\n                $send(lines, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"name\", (admonition_name = (($writer = [\"style\", (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]).$downcase())];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [\"textlabel\", ($truthy($b = attributes.$delete(\"caption\")) ? $b : doc_attrs['$[]'](\"\" + (admonition_name) + \"-caption\"))];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                block = $$($nesting, 'Block').$new(parent, \"admonition\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              } else if ($truthy(($truthy($b = ($truthy($c = md_syntax) ? ch0['$=='](\">\") : $c)) ? this_line['$start_with?'](\"> \") : $b))) {\n                \n                $send(lines, 'map!', [], ($$12 = function(line){var self = $$12.$$s || this;\n\n                \n                  \n                  if (line == null) {\n                    line = nil;\n                  };\n                  if (line['$=='](\">\")) {\n                    \n                    return line.$slice(1, line.$length());\n                  } else {\n                    \n                    if ($truthy(line['$start_with?'](\"> \"))) {\n                      \n                      return line.$slice(2, line.$length());\n                    } else {\n                      return line\n                    };\n                  };}, $$12.$$s = self, $$12.$$arity = 1, $$12));\n                if ($truthy(lines['$[]'](-1)['$start_with?'](\"-- \"))) {\n                  \n                  credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());\n                  if ($truthy(lines['$empty?']())) {\n                  } else {\n                    while ($truthy(lines['$[]'](-1)['$empty?']())) {\n                      lines.$pop()\n                    }\n                  };};\n                \n                $writer = [\"style\", \"quote\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                block = self.$build_block(\"quote\", \"compound\", false, parent, $$($nesting, 'Reader').$new(lines), attributes);\n                if ($truthy(credit_line)) {\n                  \n                  $c = block.$apply_subs(credit_line).$split(\", \", 2), $b = Opal.to_ary($c), (attribution = ($b[0] == null ? nil : $b[0])), (citetitle = ($b[1] == null ? nil : $b[1])), $c;\n                  if ($truthy(attribution)) {\n                    \n                    $writer = [\"attribution\", attribution];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];};\n                  if ($truthy(citetitle)) {\n                    \n                    $writer = [\"citetitle\", citetitle];\n                    $send(attributes, '[]=', Opal.to_a($writer));\n                    $writer[$rb_minus($writer[\"length\"], 1)];};};\n              } else if ($truthy(($truthy($b = ($truthy($c = (($d = ch0['$=='](\"\\\"\")) ? $rb_gt(lines.$size(), 1) : ch0['$=='](\"\\\"\"))) ? lines['$[]'](-1)['$start_with?'](\"-- \") : $c)) ? lines['$[]'](-2)['$end_with?'](\"\\\"\") : $b))) {\n                \n                \n                $writer = [0, this_line.$slice(1, this_line.$length())];\n                $send(lines, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                credit_line = (credit_line = lines.$pop()).$slice(3, credit_line.$length());\n                while ($truthy(lines['$[]'](-1)['$empty?']())) {\n                  lines.$pop()\n                };\n                lines['$<<'](lines.$pop().$chop());\n                \n                $writer = [\"style\", \"quote\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                block = $$($nesting, 'Block').$new(parent, \"quote\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n                $c = block.$apply_subs(credit_line).$split(\", \", 2), $b = Opal.to_ary($c), (attribution = ($b[0] == null ? nil : $b[0])), (citetitle = ($b[1] == null ? nil : $b[1])), $c;\n                if ($truthy(attribution)) {\n                  \n                  $writer = [\"attribution\", attribution];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                if ($truthy(citetitle)) {\n                  \n                  $writer = [\"citetitle\", citetitle];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n              } else {\n                \n                if ($truthy(($truthy($b = indented) ? style['$=='](\"normal\") : $b))) {\n                  self['$adjust_indentation!'](lines)};\n                block = $$($nesting, 'Block').$new(parent, \"paragraph\", $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": \"simple\", \"source\": lines, \"attributes\": attributes}));\n              };\n              self.$catalog_inline_anchors(lines.$join($$($nesting, 'LF')), block, document, reader);\n            };\n            break;;\n          }\n        };\n        if ($truthy(block)) {\n        } else {\n          $case = block_context;\n          if (\"listing\"['$===']($case) || \"source\"['$===']($case)) {\n          if ($truthy(($truthy($a = block_context['$=='](\"source\")) ? $a : ($truthy($b = attributes['$[]'](1)['$!']()) ? (language = ($truthy($c = attributes['$[]'](2)) ? $c : doc_attrs['$[]'](\"source-language\"))) : $b)))) {\n            \n            if ($truthy(language)) {\n              \n              \n              $writer = [\"style\", \"source\"];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              \n              $writer = [\"language\", language];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              $$($nesting, 'AttributeList').$rekey(attributes, [nil, nil, \"linenums\"]);\n            } else {\n              \n              $$($nesting, 'AttributeList').$rekey(attributes, [nil, \"language\", \"linenums\"]);\n              if ($truthy(attributes['$key?'](\"language\"))) {\n              } else if ($truthy(doc_attrs['$key?'](\"source-language\"))) {\n                \n                $writer = [\"language\", doc_attrs['$[]'](\"source-language\")];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n            };\n            if ($truthy(attributes['$key?'](\"linenums\"))) {\n            } else if ($truthy(($truthy($a = attributes['$[]'](\"linenums-option\")) ? $a : doc_attrs['$[]'](\"source-linenums-option\")))) {\n              \n              $writer = [\"linenums\", \"\"];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(attributes['$key?'](\"indent\"))) {\n            } else if ($truthy(doc_attrs['$key?'](\"source-indent\"))) {\n              \n              $writer = [\"indent\", doc_attrs['$[]'](\"source-indent\")];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};};\n          block = self.$build_block(\"listing\", \"verbatim\", terminator, parent, reader, attributes);}\n          else if (\"fenced_code\"['$===']($case)) {\n          \n          $writer = [\"style\", \"source\"];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy($rb_gt((ll = this_line.$length()), 3))) {\n            if ($truthy((comma_idx = (language = this_line.$slice(3, ll)).$index(\",\")))) {\n              if ($truthy($rb_gt(comma_idx, 0))) {\n                \n                language = language.$slice(0, comma_idx).$strip();\n                if ($truthy($rb_lt(comma_idx, $rb_minus(ll, 4)))) {\n                  \n                  $writer = [\"linenums\", \"\"];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n              } else if ($truthy($rb_gt(ll, 4))) {\n                \n                $writer = [\"linenums\", \"\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];}\n            } else {\n              language = language.$lstrip()\n            }};\n          if ($truthy(language['$nil_or_empty?']())) {\n            if ($truthy(doc_attrs['$key?'](\"source-language\"))) {\n              \n              $writer = [\"language\", doc_attrs['$[]'](\"source-language\")];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else {\n            \n            $writer = [\"language\", language];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          if ($truthy(attributes['$key?'](\"linenums\"))) {\n          } else if ($truthy(($truthy($a = attributes['$[]'](\"linenums-option\")) ? $a : doc_attrs['$[]'](\"source-linenums-option\")))) {\n            \n            $writer = [\"linenums\", \"\"];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(attributes['$key?'](\"indent\"))) {\n          } else if ($truthy(doc_attrs['$key?'](\"source-indent\"))) {\n            \n            $writer = [\"indent\", doc_attrs['$[]'](\"source-indent\")];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          terminator = terminator.$slice(0, 3);\n          block = self.$build_block(\"listing\", \"verbatim\", terminator, parent, reader, attributes);}\n          else if (\"table\"['$===']($case)) {\n          block_cursor = reader.$cursor();\n          block_reader = $$($nesting, 'Reader').$new(reader.$read_lines_until($hash2([\"terminator\", \"skip_line_comments\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_line_comments\": true, \"context\": \"table\", \"cursor\": \"at_mark\"})), block_cursor);\n          if ($truthy(terminator['$start_with?'](\"|\", \"!\"))) {\n          } else {\n            ($truthy($a = attributes['$[]'](\"format\")) ? $a : (($writer = [\"format\", (function() {if ($truthy(terminator['$start_with?'](\",\"))) {\n              return \"csv\"\n            } else {\n              return \"dsv\"\n            }; return nil; })()]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n          };\n          block = self.$parse_table(block_reader, parent, attributes);}\n          else if (\"sidebar\"['$===']($case)) {block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes)}\n          else if (\"admonition\"['$===']($case)) {\n          \n          $writer = [\"name\", (admonition_name = style.$downcase())];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          \n          $writer = [\"textlabel\", ($truthy($a = attributes.$delete(\"caption\")) ? $a : doc_attrs['$[]'](\"\" + (admonition_name) + \"-caption\"))];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes);}\n          else if (\"open\"['$===']($case) || \"abstract\"['$===']($case) || \"partintro\"['$===']($case)) {block = self.$build_block(\"open\", \"compound\", terminator, parent, reader, attributes)}\n          else if (\"literal\"['$===']($case)) {block = self.$build_block(block_context, \"verbatim\", terminator, parent, reader, attributes)}\n          else if (\"example\"['$===']($case)) {\n          if ($truthy(attributes['$[]'](\"collapsible-option\"))) {\n            \n            $writer = [\"caption\", \"\"];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          block = self.$build_block(block_context, \"compound\", terminator, parent, reader, attributes);}\n          else if (\"quote\"['$===']($case) || \"verse\"['$===']($case)) {\n          $$($nesting, 'AttributeList').$rekey(attributes, [nil, \"attribution\", \"citetitle\"]);\n          block = self.$build_block(block_context, (function() {if (block_context['$=='](\"verse\")) {\n            return \"verbatim\"\n          } else {\n            return \"compound\"\n          }; return nil; })(), terminator, parent, reader, attributes);}\n          else if (\"stem\"['$===']($case) || \"latexmath\"['$===']($case) || \"asciimath\"['$===']($case)) {\n          if (block_context['$=='](\"stem\")) {\n            \n            $writer = [\"style\", $$($nesting, 'STEM_TYPE_ALIASES')['$[]'](($truthy($a = attributes['$[]'](2)) ? $a : doc_attrs['$[]'](\"stem\")))];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          block = self.$build_block(\"stem\", \"raw\", terminator, parent, reader, attributes);}\n          else if (\"pass\"['$===']($case)) {block = self.$build_block(block_context, \"raw\", terminator, parent, reader, attributes)}\n          else if (\"comment\"['$===']($case)) {\n          self.$build_block(block_context, \"skip\", terminator, parent, reader, attributes);\n          attributes.$clear();\n          return nil;}\n          else {if ($truthy(($truthy($a = block_extensions) ? (extension = extensions['$registered_for_block?'](block_context, cloaked_context)) : $a))) {\n            \n            if ((content_model = (ext_config = extension.$config())['$[]'](\"content_model\"))['$=='](\"skip\")) {\n            } else {\n              \n              if ($truthy((positional_attrs = ($truthy($a = ext_config['$[]'](\"positional_attrs\")) ? $a : ext_config['$[]'](\"pos_attrs\")))['$nil_or_empty?']())) {\n              } else {\n                $$($nesting, 'AttributeList').$rekey(attributes, $rb_plus([nil], positional_attrs))\n              };\n              if ($truthy((default_attrs = ext_config['$[]'](\"default_attrs\")))) {\n                $send(default_attrs, 'each', [], ($$13 = function(k, v){var self = $$13.$$s || this, $e;\n\n                \n                  \n                  if (k == null) {\n                    k = nil;\n                  };\n                  \n                  if (v == null) {\n                    v = nil;\n                  };\n                  return ($truthy($e = attributes['$[]'](k)) ? $e : (($writer = [k, v]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));}, $$13.$$s = self, $$13.$$arity = 2, $$13))};\n              \n              $writer = [\"cloaked-context\", cloaked_context];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n            };\n            if ($truthy((block = self.$build_block(block_context, content_model, terminator, parent, reader, attributes, $hash2([\"extension\"], {\"extension\": extension}))))) {\n            } else {\n              \n              attributes.$clear();\n              return nil;\n            };\n          } else {\n            self.$raise(\"\" + \"Unsupported block type \" + (block_context) + \" at \" + (reader.$cursor()))\n          }}\n        };\n        if ($truthy(document.$sourcemap())) {\n          \n          $writer = [reader.$cursor_at_mark()];\n          $send(block, 'source_location=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(attributes['$[]'](\"title\"))) {\n          \n          \n          $writer = [(block_title = attributes.$delete(\"title\"))];\n          $send(block, 'title=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(($truthy($a = (caption_attr_name = $$($nesting, 'CAPTION_ATTRIBUTE_NAMES')['$[]'](block.$context()))) ? document.$attributes()['$[]'](caption_attr_name) : $a))) {\n            block.$assign_caption(attributes.$delete(\"caption\"))};};\n        \n        $writer = [attributes['$[]'](\"style\")];\n        $send(block, 'style=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        if ($truthy((block_id = ($truthy($a = block.$id()) ? $a : (($writer = [attributes['$[]'](\"id\")]), $send(block, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))))) {\n          \n          if ($truthy((function() {if ($truthy(block_title)) {\n            \n            return block_title['$include?']($$($nesting, 'ATTR_REF_HEAD'));\n          } else {\n            return block['$title?']()\n          }; return nil; })())) {\n            block.$title()};\n          if ($truthy(document.$register(\"refs\", [block_id, block]))) {\n          } else {\n            self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to block already in use: \" + (block_id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n          };};\n        if ($truthy(attributes['$empty?']())) {\n        } else {\n          block.$update_attributes(attributes)\n        };\n        block.$commit_subs();\n        if ($truthy(block['$sub?'](\"callouts\"))) {\n          if ($truthy(self.$catalog_callouts(block.$source(), document))) {\n          } else {\n            block.$remove_sub(\"callouts\")\n          }};\n        return block;\n        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n      }, $Parser_next_block$10.$$arity = -3);\n      Opal.defs(self, '$read_paragraph_lines', $Parser_read_paragraph_lines$14 = function $$read_paragraph_lines(reader, break_at_list, opts) {\n        var self = this, $writer = nil, break_condition = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        \n        $writer = [\"break_on_blank_lines\", true];\n        $send(opts, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"break_on_list_continuation\", true];\n        $send(opts, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        \n        $writer = [\"preserve_last_line\", true];\n        $send(opts, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        break_condition = (function() {if ($truthy(break_at_list)) {\n          \n          if ($truthy($$($nesting, 'Compliance').$block_terminates_paragraph())) {\n            return $$($nesting, 'StartOfBlockOrListProc')\n          } else {\n            return $$($nesting, 'StartOfListProc')\n          };\n        } else {\n          \n          if ($truthy($$($nesting, 'Compliance').$block_terminates_paragraph())) {\n            return $$($nesting, 'StartOfBlockProc')\n          } else {\n            return $$($nesting, 'NoOp')\n          };\n        }; return nil; })();\n        return $send(reader, 'read_lines_until', [opts], break_condition.$to_proc());\n      }, $Parser_read_paragraph_lines$14.$$arity = -3);\n      Opal.defs(self, '$is_delimited_block?', $Parser_is_delimited_block$ques$15 = function(line, return_match_data) {\n        var $a, $b, self = this, line_len = nil, tip = nil, tip_len = nil, context = nil, masq = nil;\n\n        \n        \n        if (return_match_data == null) {\n          return_match_data = nil;\n        };\n        if ($truthy(($truthy($a = $rb_gt((line_len = line.$length()), 1)) ? $$($nesting, 'DELIMITED_BLOCK_HEADS')['$[]'](line.$slice(0, 2)) : $a))) {\n        } else {\n          return nil\n        };\n        if (line_len['$=='](2)) {\n          \n          tip = line;\n          tip_len = 2;\n        } else {\n          \n          if ($truthy($rb_lt(line_len, 5))) {\n            \n            tip = line;\n            tip_len = line_len;\n          } else {\n            tip = line.$slice(0, (tip_len = 4))\n          };\n          if ($truthy(($truthy($a = $$($nesting, 'Compliance').$markdown_syntax()) ? tip['$start_with?'](\"`\") : $a))) {\n            if (tip_len['$=='](4)) {\n              if (tip['$=='](\"````\")) {\n                return nil\n              } else if ((tip = tip.$chop())['$=='](\"```\")) {\n                \n                line = tip;\n                line_len = (tip_len = 3);\n              } else {\n                return nil\n              }\n            } else if (tip['$=='](\"```\")) {\n            } else {\n              return nil\n            }\n          } else if (tip_len['$=='](3)) {\n            return nil};\n        };\n        $b = $$($nesting, 'DELIMITED_BLOCKS')['$[]'](tip), $a = Opal.to_ary($b), (context = ($a[0] == null ? nil : $a[0])), (masq = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(($truthy($a = context) ? ($truthy($b = line_len['$=='](tip_len)) ? $b : self['$uniform?'](line.$slice(1, line_len), $$($nesting, 'DELIMITED_BLOCK_TAILS')['$[]'](tip), $rb_minus(line_len, 1))) : $a))) {\n          if ($truthy(return_match_data)) {\n            \n            return $$($nesting, 'BlockMatchData').$new(context, masq, tip, line);\n          } else {\n            return true\n          }\n        } else {\n          return nil\n        };\n      }, $Parser_is_delimited_block$ques$15.$$arity = -2);\n      Opal.defs(self, '$build_block', $Parser_build_block$16 = function $$build_block(block_context, content_model, terminator, parent, reader, attributes, options) {\n        var $a, self = this, skip_processing = nil, parse_as_content_model = nil, lines = nil, block_reader = nil, block_cursor = nil, tab_size = nil, indent = nil, extension = nil, block = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        if (content_model['$=='](\"skip\")) {\n          $a = [true, \"simple\"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a\n        } else if (content_model['$=='](\"raw\")) {\n          $a = [false, \"simple\"], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a\n        } else {\n          $a = [false, content_model], (skip_processing = $a[0]), (parse_as_content_model = $a[1]), $a\n        };\n        if ($truthy(terminator['$nil?']())) {\n          \n          if (parse_as_content_model['$=='](\"verbatim\")) {\n            lines = reader.$read_lines_until($hash2([\"break_on_blank_lines\", \"break_on_list_continuation\"], {\"break_on_blank_lines\": true, \"break_on_list_continuation\": true}))\n          } else {\n            \n            if (content_model['$=='](\"compound\")) {\n              content_model = \"simple\"};\n            lines = self.$read_paragraph_lines(reader, false, $hash2([\"skip_line_comments\", \"skip_processing\"], {\"skip_line_comments\": true, \"skip_processing\": skip_processing}));\n          };\n          block_reader = nil;\n        } else if ($truthy(parse_as_content_model['$!='](\"compound\"))) {\n          \n          lines = reader.$read_lines_until($hash2([\"terminator\", \"skip_processing\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_processing\": skip_processing, \"context\": block_context, \"cursor\": \"at_mark\"}));\n          block_reader = nil;\n        } else if (terminator['$=='](false)) {\n          \n          lines = nil;\n          block_reader = reader;\n        } else {\n          \n          lines = nil;\n          block_cursor = reader.$cursor();\n          block_reader = $$($nesting, 'Reader').$new(reader.$read_lines_until($hash2([\"terminator\", \"skip_processing\", \"context\", \"cursor\"], {\"terminator\": terminator, \"skip_processing\": skip_processing, \"context\": block_context, \"cursor\": \"at_mark\"})), block_cursor);\n        };\n        if (content_model['$=='](\"verbatim\")) {\n          \n          tab_size = ($truthy($a = attributes['$[]'](\"tabsize\")) ? $a : parent.$document().$attributes()['$[]'](\"tabsize\")).$to_i();\n          if ($truthy((indent = attributes['$[]'](\"indent\")))) {\n            self['$adjust_indentation!'](lines, indent.$to_i(), tab_size)\n          } else if ($truthy($rb_gt(tab_size, 0))) {\n            self['$adjust_indentation!'](lines, -1, tab_size)};\n        } else if (content_model['$=='](\"skip\")) {\n          return nil};\n        if ($truthy((extension = options['$[]'](\"extension\")))) {\n          \n          attributes.$delete(\"style\");\n          if ($truthy((block = extension.$process_method()['$[]'](parent, ($truthy($a = block_reader) ? $a : $$($nesting, 'Reader').$new(lines)), attributes.$merge())))) {\n            \n            attributes.$replace(block.$attributes());\n            if ($truthy((($a = block.$content_model()['$=='](\"compound\")) ? (lines = block.$lines())['$empty?']()['$!']() : block.$content_model()['$=='](\"compound\")))) {\n              \n              content_model = \"compound\";\n              block_reader = $$($nesting, 'Reader').$new(lines);};\n          } else {\n            return nil\n          };\n        } else {\n          block = $$($nesting, 'Block').$new(parent, block_context, $hash2([\"content_model\", \"source\", \"attributes\"], {\"content_model\": content_model, \"source\": lines, \"attributes\": attributes}))\n        };\n        if (content_model['$=='](\"compound\")) {\n          self.$parse_blocks(block_reader, block)};\n        return block;\n      }, $Parser_build_block$16.$$arity = -7);\n      Opal.defs(self, '$parse_blocks', $Parser_parse_blocks$17 = function $$parse_blocks(reader, parent, attributes) {\n        var $a, $b, $c, self = this, block = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = nil;\n        };\n        if ($truthy(attributes)) {\n          while ($truthy(($truthy($b = ($truthy($c = (block = self.$next_block(reader, parent, attributes.$merge()))) ? parent.$blocks()['$<<'](block) : $c)) ? $b : reader['$has_more_lines?']()))) {\n            \n          }\n        } else {\n          while ($truthy(($truthy($b = ($truthy($c = (block = self.$next_block(reader, parent))) ? parent.$blocks()['$<<'](block) : $c)) ? $b : reader['$has_more_lines?']()))) {\n            \n          }\n        };\n        return nil;\n      }, $Parser_parse_blocks$17.$$arity = -3);\n      Opal.defs(self, '$parse_list', $Parser_parse_list$18 = function $$parse_list(reader, list_type, parent, style) {\n        var $a, $b, self = this, list_block = nil, list_rx = nil, list_item = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        list_block = $$($nesting, 'List').$new(parent, list_type);\n        list_rx = $$($nesting, 'ListRxMap')['$[]'](list_type);\n        while ($truthy(($truthy($b = reader['$has_more_lines?']()) ? list_rx['$=~'](reader.$peek_line()) : $b))) {\n          \n          if ($truthy((list_item = self.$parse_list_item(reader, list_block, $gvars[\"~\"], (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)), style)))) {\n            list_block.$items()['$<<'](list_item)};\n          if ($truthy($b = reader.$skip_blank_lines())) {\n            $b\n          } else {\n            break;\n          };\n        };\n        return list_block;\n      }, $Parser_parse_list$18.$$arity = 4);\n      Opal.defs(self, '$catalog_callouts', $Parser_catalog_callouts$19 = function $$catalog_callouts(text, document) {\n        var $$20, self = this, found = nil, autonum = nil;\n\n        \n        found = false;\n        autonum = 0;\n        if ($truthy(text['$include?'](\"<\"))) {\n          $send(text, 'scan', [$$($nesting, 'CalloutScanRx')], ($$20 = function(){var self = $$20.$$s || this, $a;\n\n          \n            if ($truthy((($a = $gvars['~']) === nil ? nil : $a['$[]'](0))['$start_with?'](\"\\\\\"))) {\n            } else {\n              document.$callouts().$register((function() {if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](2))['$=='](\".\")) {\n                return (autonum = $rb_plus(autonum, 1)).$to_s()\n              } else {\n                return (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))\n              }; return nil; })())\n            };\n            return (found = true);}, $$20.$$s = self, $$20.$$arity = 0, $$20))};\n        return found;\n      }, $Parser_catalog_callouts$19.$$arity = 2);\n      Opal.defs(self, '$catalog_inline_anchor', $Parser_catalog_inline_anchor$21 = function $$catalog_inline_anchor(id, reftext, node, location, doc) {\n        var $a, self = this;\n\n        \n        \n        if (doc == null) {\n          doc = node.$document();\n        };\n        if ($truthy(($truthy($a = reftext) ? reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {\n          reftext = doc.$sub_attributes(reftext)};\n        if ($truthy(doc.$register(\"refs\", [id, $$($nesting, 'Inline').$new(node, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))]))) {\n        } else {\n          \n          if ($truthy($$($nesting, 'Reader')['$==='](location))) {\n            location = location.$cursor()};\n          self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": location})));\n        };\n        return nil;\n      }, $Parser_catalog_inline_anchor$21.$$arity = -5);\n      Opal.defs(self, '$catalog_inline_anchors', $Parser_catalog_inline_anchors$22 = function $$catalog_inline_anchors(text, block, document, reader) {\n        var $a, $$23, self = this;\n\n        \n        if ($truthy(($truthy($a = text['$include?'](\"[[\")) ? $a : text['$include?'](\"or:\")))) {\n          $send(text, 'scan', [$$($nesting, 'InlineAnchorScanRx')], ($$23 = function(){var self = $$23.$$s || this, $b, $c, $d, id = nil, reftext = nil, location = nil, offset = nil;\n\n          \n            if ($truthy((id = (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))))) {\n              if ($truthy(($truthy($b = ($truthy($c = (reftext = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2)))) ? reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $c)) ? (reftext = document.$sub_attributes(reftext))['$empty?']() : $b))) {\n                return nil;}\n            } else {\n              \n              id = (($b = $gvars['~']) === nil ? nil : $b['$[]'](3));\n              if ($truthy((reftext = (($b = $gvars['~']) === nil ? nil : $b['$[]'](4))))) {\n                if ($truthy(reftext['$include?'](\"]\"))) {\n                  \n                  reftext = reftext.$gsub(\"\\\\]\", \"]\");\n                  if ($truthy(reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                    reftext = document.$sub_attributes(reftext)};\n                } else if ($truthy(($truthy($b = reftext['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (reftext = document.$sub_attributes(reftext))['$empty?']() : $b))) {\n                  return nil;}};\n            };\n            if ($truthy(document.$register(\"refs\", [id, $$($nesting, 'Inline').$new(block, \"anchor\", reftext, $hash2([\"type\", \"id\"], {\"type\": \"ref\", \"id\": id}))]))) {\n              return nil\n            } else {\n              \n              location = reader.$cursor_at_mark();\n              if ($truthy($rb_gt((offset = $rb_plus((($b = $gvars['~']) === nil ? nil : $b.$pre_match()).$count($$($nesting, 'LF')), (function() {if ($truthy((($b = $gvars['~']) === nil ? nil : $b['$[]'](0))['$start_with?']($$($nesting, 'LF')))) {\n                return 1\n              } else {\n                return 0\n              }; return nil; })())), 0))) {\n                (location = location.$dup()).$advance(offset)};\n              return self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": location})));\n            };}, $$23.$$s = self, $$23.$$arity = 0, $$23))};\n        return nil;\n      }, $Parser_catalog_inline_anchors$22.$$arity = 4);\n      Opal.defs(self, '$catalog_inline_biblio_anchor', $Parser_catalog_inline_biblio_anchor$24 = function $$catalog_inline_biblio_anchor(id, reftext, node, reader) {\n        var $a, self = this;\n\n        \n        if ($truthy(node.$document().$register(\"refs\", [id, $$($nesting, 'Inline').$new(node, \"anchor\", ($truthy($a = reftext) ? \"\" + \"[\" + (reftext) + \"]\" : $a), $hash2([\"type\", \"id\"], {\"type\": \"bibref\", \"id\": id}))]))) {\n        } else {\n          self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to bibliography anchor already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))\n        };\n        return nil;\n      }, $Parser_catalog_inline_biblio_anchor$24.$$arity = 4);\n      Opal.defs(self, '$parse_description_list', $Parser_parse_description_list$25 = function $$parse_description_list(reader, match, parent) {\n        var $a, $b, self = this, list_block = nil, sibling_pattern = nil, current_pair = nil, next_pair = nil, $writer = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        list_block = $$($nesting, 'List').$new(parent, \"dlist\");\n        sibling_pattern = $$($nesting, 'DescriptionListSiblingRx')['$[]'](match['$[]'](2));\n        list_block.$items()['$<<']((current_pair = self.$parse_list_item(reader, list_block, match, sibling_pattern)));\n        while ($truthy(($truthy($b = reader['$has_more_lines?']()) ? sibling_pattern['$=~'](reader.$peek_line()) : $b))) {\n          \n          next_pair = self.$parse_list_item(reader, list_block, $gvars[\"~\"], sibling_pattern);\n          if ($truthy(current_pair['$[]'](1))) {\n            list_block.$items()['$<<']((current_pair = next_pair))\n          } else {\n            \n            current_pair['$[]'](0)['$<<'](next_pair['$[]'](0)['$[]'](0));\n            \n            $writer = [1, next_pair['$[]'](1)];\n            $send(current_pair, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          };\n        };\n        return list_block;\n      }, $Parser_parse_description_list$25.$$arity = 3);\n      Opal.defs(self, '$parse_callout_list', $Parser_parse_callout_list$26 = function $$parse_callout_list(reader, match, parent, callouts) {\n        var $a, $b, $c, self = this, list_block = nil, next_index = nil, autonum = nil, num = nil, list_item = nil, coids = nil, $writer = nil;\n\n        \n        list_block = $$($nesting, 'List').$new(parent, \"colist\");\n        next_index = 1;\n        autonum = 0;\n        while ($truthy(($truthy($b = match) ? $b : ($truthy($c = (match = $$($nesting, 'CalloutListRx').$match(reader.$peek_line()))) ? reader.$mark() : $c)))) {\n          \n          if ((num = match['$[]'](1))['$=='](\".\")) {\n            num = (autonum = $rb_plus(autonum, 1)).$to_s()};\n          if (num['$=='](next_index.$to_s())) {\n          } else {\n            self.$logger().$warn(self.$message_with_context(\"\" + \"callout list item index: expected \" + (next_index) + \", got \" + (num), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n          };\n          if ($truthy((list_item = self.$parse_list_item(reader, list_block, match, \"<1>\")))) {\n            \n            list_block.$items()['$<<'](list_item);\n            if ($truthy((coids = callouts.$callout_ids(list_block.$items().$size()))['$empty?']())) {\n              self.$logger().$warn(self.$message_with_context(\"\" + \"no callout found for <\" + (list_block.$items().$size()) + \">\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_mark()})))\n            } else {\n              \n              $writer = [\"coids\", coids];\n              $send(list_item.$attributes(), '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };};\n          next_index = $rb_plus(next_index, 1);\n          match = nil;\n        };\n        callouts.$next_list();\n        return list_block;\n      }, $Parser_parse_callout_list$26.$$arity = 4);\n      Opal.defs(self, '$parse_list_item', $Parser_parse_list_item$27 = function $$parse_list_item(reader, list_block, match, sibling_trait, style) {\n        var $a, $b, self = this, list_type = nil, dlist = nil, list_term = nil, term_text = nil, item_text = nil, has_text = nil, list_item = nil, $writer = nil, sourcemap_assignment_deferred = nil, ordinal = nil, implicit_style = nil, block_cursor = nil, list_item_reader = nil, comment_lines = nil, subsequent_line = nil, content_adjacent = nil, block = nil, first_block = nil;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        if ((list_type = list_block.$context())['$=='](\"dlist\")) {\n          \n          dlist = true;\n          list_term = $$($nesting, 'ListItem').$new(list_block, (term_text = match['$[]'](1)));\n          if ($truthy(($truthy($a = term_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](term_text) : $a))) {\n            self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), ($truthy($a = (($b = $gvars['~']) === nil ? nil : $b['$[]'](2))) ? $a : (($b = $gvars['~']) === nil ? nil : $b.$post_match()).$lstrip()), list_term, reader)};\n          if ($truthy((item_text = match['$[]'](3)))) {\n            has_text = true};\n          list_item = $$($nesting, 'ListItem').$new(list_block, item_text);\n          if ($truthy(list_block.$document().$sourcemap())) {\n            \n            \n            $writer = [reader.$cursor()];\n            $send(list_term, 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(has_text)) {\n              \n              $writer = [list_term.$source_location()];\n              $send(list_item, 'source_location=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              sourcemap_assignment_deferred = true\n            };};\n        } else {\n          \n          has_text = true;\n          list_item = $$($nesting, 'ListItem').$new(list_block, (item_text = match['$[]'](2)));\n          if ($truthy(list_block.$document().$sourcemap())) {\n            \n            $writer = [reader.$cursor()];\n            $send(list_item, 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if (list_type['$=='](\"ulist\")) {\n            \n            \n            $writer = [sibling_trait];\n            $send(list_item, 'marker=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(item_text['$start_with?'](\"[\"))) {\n              if ($truthy(($truthy($a = style) ? style['$=='](\"bibliography\") : $a))) {\n                if ($truthy($$($nesting, 'InlineBiblioAnchorRx')['$=~'](item_text))) {\n                  self.$catalog_inline_biblio_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)}\n              } else if ($truthy(item_text['$start_with?'](\"[[\"))) {\n                if ($truthy($$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text))) {\n                  self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)}\n              } else if ($truthy(item_text['$start_with?'](\"[ ] \", \"[x] \", \"[*] \"))) {\n                \n                list_block.$set_option(\"checklist\");\n                \n                $writer = [\"checkbox\", \"\"];\n                $send(list_item.$attributes(), '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if ($truthy(item_text['$start_with?'](\"[ \"))) {\n                } else {\n                  \n                  $writer = [\"checked\", \"\"];\n                  $send(list_item.$attributes(), '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];\n                };\n                \n                $writer = [item_text.$slice(4, item_text.$length())];\n                $send(list_item, 'text=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;}};\n          } else if (list_type['$=='](\"olist\")) {\n            \n            $b = self.$resolve_ordered_list_marker(sibling_trait, (ordinal = list_block.$items().$size()), true, reader), $a = Opal.to_ary($b), (sibling_trait = ($a[0] == null ? nil : $a[0])), (implicit_style = ($a[1] == null ? nil : $a[1])), $b;\n            \n            $writer = [sibling_trait];\n            $send(list_item, 'marker=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy((($a = ordinal['$=='](0)) ? style['$!']() : ordinal['$=='](0)))) {\n              \n              $writer = [($truthy($a = implicit_style) ? $a : ($truthy($b = $$($nesting, 'ORDERED_LIST_STYLES')['$[]']($rb_minus(sibling_trait.$length(), 1))) ? $b : \"arabic\").$to_s())];\n              $send(list_block, 'style=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(($truthy($a = item_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text) : $a))) {\n              self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)};\n          } else {\n            \n            \n            $writer = [sibling_trait];\n            $send(list_item, 'marker=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(($truthy($a = item_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](item_text) : $a))) {\n              self.$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), list_item, reader)};\n          };\n        };\n        reader.$shift();\n        block_cursor = reader.$cursor();\n        list_item_reader = $$($nesting, 'Reader').$new(self.$read_lines_for_list_item(reader, list_type, sibling_trait, has_text), block_cursor);\n        if ($truthy(list_item_reader['$has_more_lines?']())) {\n          \n          if ($truthy(sourcemap_assignment_deferred)) {\n            \n            $writer = [block_cursor];\n            $send(list_item, 'source_location=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          comment_lines = list_item_reader.$skip_line_comments();\n          if ($truthy((subsequent_line = list_item_reader.$peek_line()))) {\n            \n            if ($truthy(comment_lines['$empty?']())) {\n            } else {\n              list_item_reader.$unshift_lines(comment_lines)\n            };\n            if ($truthy(subsequent_line['$empty?']())) {\n            } else {\n              \n              content_adjacent = true;\n              if ($truthy(dlist)) {\n              } else {\n                has_text = nil\n              };\n            };};\n          if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2([\"text_only\", \"list_type\"], {\"text_only\": (function() {if ($truthy(has_text)) {\n            return nil\n          } else {\n            return true\n          }; return nil; })(), \"list_type\": list_type}))))) {\n            list_item.$blocks()['$<<'](block)};\n          while ($truthy(list_item_reader['$has_more_lines?']())) {\n            if ($truthy((block = self.$next_block(list_item_reader, list_item, $hash2([], {}), $hash2([\"list_type\"], {\"list_type\": list_type}))))) {\n              list_item.$blocks()['$<<'](block)}\n          };\n          if ($truthy(($truthy($a = ($truthy($b = content_adjacent) ? (first_block = list_item.$blocks()['$[]'](0)) : $b)) ? first_block.$context()['$=='](\"paragraph\") : $a))) {\n            list_item.$fold_first()};};\n        if ($truthy(dlist)) {\n          return [[list_term], (function() {if ($truthy(($truthy($a = list_item['$text?']()) ? $a : list_item['$blocks?']()))) {\n            return list_item\n          } else {\n            return nil\n          }; return nil; })()]\n        } else {\n          return list_item\n        };\n      }, $Parser_parse_list_item$27.$$arity = -5);\n      Opal.defs(self, '$read_lines_for_list_item', $Parser_read_lines_for_list_item$28 = function $$read_lines_for_list_item(reader, list_type, sibling_trait, has_text) {\n        var $a, $b, $c, $$29, $$30, $$31, $$32, $$33, self = this, buffer = nil, continuation = nil, within_nested_list = nil, detached_continuation = nil, dlist = nil, this_line = nil, prev_line = nil, $writer = nil, match = nil, nested_list_type = nil, last_line = nil;\n\n        \n        \n        if (sibling_trait == null) {\n          sibling_trait = nil;\n        };\n        \n        if (has_text == null) {\n          has_text = true;\n        };\n        buffer = [];\n        continuation = \"inactive\";\n        within_nested_list = false;\n        detached_continuation = nil;\n        dlist = list_type['$=='](\"dlist\");\n        while ($truthy(reader['$has_more_lines?']())) {\n          \n          this_line = reader.$read_line();\n          if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n            break;};\n          prev_line = (function() {if ($truthy(buffer['$empty?']())) {\n            return nil\n          } else {\n            return buffer['$[]'](-1)\n          }; return nil; })();\n          if (prev_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n            \n            if (continuation['$=='](\"inactive\")) {\n              \n              continuation = \"active\";\n              has_text = true;\n              if ($truthy(within_nested_list)) {\n              } else {\n                \n                $writer = [-1, \"\"];\n                $send(buffer, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };};\n            if (this_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n              \n              if ($truthy(continuation['$!='](\"frozen\"))) {\n                \n                continuation = \"frozen\";\n                buffer['$<<'](this_line);};\n              this_line = nil;\n              continue;;};};\n          if ($truthy((match = self['$is_delimited_block?'](this_line, true)))) {\n            if (continuation['$=='](\"active\")) {\n              \n              buffer['$<<'](this_line);\n              buffer.$concat(reader.$read_lines_until($hash2([\"terminator\", \"read_last_line\", \"context\"], {\"terminator\": match.$terminator(), \"read_last_line\": true, \"context\": nil})));\n              continuation = \"inactive\";\n            } else {\n              break;\n            }\n          } else if ($truthy(($truthy($b = ($truthy($c = dlist) ? continuation['$!='](\"active\") : $c)) ? $$($nesting, 'BlockAttributeLineRx')['$match?'](this_line) : $b))) {\n            break;\n          } else if ($truthy((($b = continuation['$=='](\"active\")) ? this_line['$empty?']()['$!']() : continuation['$=='](\"active\")))) {\n            if ($truthy($$($nesting, 'LiteralParagraphRx')['$match?'](this_line))) {\n              \n              reader.$unshift_line(this_line);\n              if ($truthy(dlist)) {\n                buffer.$concat($send(reader, 'read_lines_until', [$hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})], ($$29 = function(line){var self = $$29.$$s || this;\n\n                \n                  \n                  if (line == null) {\n                    line = nil;\n                  };\n                  return self['$is_sibling_list_item?'](line, list_type, sibling_trait);}, $$29.$$s = self, $$29.$$arity = 1, $$29)))\n              } else {\n                buffer.$concat(reader.$read_lines_until($hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})))\n              };\n              continuation = \"inactive\";\n            } else if ($truthy(($truthy($b = ($truthy($c = $$($nesting, 'BlockTitleRx')['$match?'](this_line)) ? $c : $$($nesting, 'BlockAttributeLineRx')['$match?'](this_line))) ? $b : $$($nesting, 'AttributeEntryRx')['$match?'](this_line)))) {\n              buffer['$<<'](this_line)\n            } else {\n              \n              if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {\n                return [\"dlist\"]\n              } else {\n                return $$($nesting, 'NESTABLE_LIST_CONTEXTS')\n              }; return nil; })(), 'find', [], ($$30 = function(ctx){var self = $$30.$$s || this;\n\n              \n                \n                if (ctx == null) {\n                  ctx = nil;\n                };\n                return $$($nesting, 'ListRxMap')['$[]'](ctx)['$match?'](this_line);}, $$30.$$s = self, $$30.$$arity = 1, $$30))))) {\n                \n                within_nested_list = true;\n                if ($truthy((($b = nested_list_type['$=='](\"dlist\")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$=='](\"dlist\")))) {\n                  has_text = false};};\n              buffer['$<<'](this_line);\n              continuation = \"inactive\";\n            }\n          } else if ($truthy(($truthy($b = prev_line) ? prev_line['$empty?']() : $b))) {\n            \n            if ($truthy(this_line['$empty?']())) {\n              \n              if ($truthy((this_line = ($truthy($b = reader.$skip_blank_lines()) ? reader.$read_line() : $b)))) {\n              } else {\n                break;\n              };\n              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n                break;};};\n            if (this_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n              \n              detached_continuation = buffer.$size();\n              buffer['$<<'](this_line);\n            } else if ($truthy(has_text)) {\n              if ($truthy(self['$is_sibling_list_item?'](this_line, list_type, sibling_trait))) {\n                break;\n              } else if ($truthy((nested_list_type = $send($$($nesting, 'NESTABLE_LIST_CONTEXTS'), 'find', [], ($$31 = function(ctx){var self = $$31.$$s || this;\n\n              \n                \n                if (ctx == null) {\n                  ctx = nil;\n                };\n                return $$($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line);}, $$31.$$s = self, $$31.$$arity = 1, $$31))))) {\n                \n                buffer['$<<'](this_line);\n                within_nested_list = true;\n                if ($truthy((($b = nested_list_type['$=='](\"dlist\")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$=='](\"dlist\")))) {\n                  has_text = false};\n              } else if ($truthy($$($nesting, 'LiteralParagraphRx')['$match?'](this_line))) {\n                \n                reader.$unshift_line(this_line);\n                if ($truthy(dlist)) {\n                  buffer.$concat($send(reader, 'read_lines_until', [$hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})], ($$32 = function(line){var self = $$32.$$s || this;\n\n                  \n                    \n                    if (line == null) {\n                      line = nil;\n                    };\n                    return self['$is_sibling_list_item?'](line, list_type, sibling_trait);}, $$32.$$s = self, $$32.$$arity = 1, $$32)))\n                } else {\n                  buffer.$concat(reader.$read_lines_until($hash2([\"preserve_last_line\", \"break_on_blank_lines\", \"break_on_list_continuation\"], {\"preserve_last_line\": true, \"break_on_blank_lines\": true, \"break_on_list_continuation\": true})))\n                };\n              } else {\n                break;\n              }\n            } else {\n              \n              if ($truthy(within_nested_list)) {\n              } else {\n                buffer.$pop()\n              };\n              buffer['$<<'](this_line);\n              has_text = true;\n            };\n          } else {\n            \n            if ($truthy(this_line['$empty?']())) {\n            } else {\n              has_text = true\n            };\n            if ($truthy((nested_list_type = $send((function() {if ($truthy(within_nested_list)) {\n              return [\"dlist\"]\n            } else {\n              return $$($nesting, 'NESTABLE_LIST_CONTEXTS')\n            }; return nil; })(), 'find', [], ($$33 = function(ctx){var self = $$33.$$s || this;\n\n            \n              \n              if (ctx == null) {\n                ctx = nil;\n              };\n              return $$($nesting, 'ListRxMap')['$[]'](ctx)['$=~'](this_line);}, $$33.$$s = self, $$33.$$arity = 1, $$33))))) {\n              \n              within_nested_list = true;\n              if ($truthy((($b = nested_list_type['$=='](\"dlist\")) ? (($c = $gvars['~']) === nil ? nil : $c['$[]'](3))['$nil_or_empty?']() : nested_list_type['$=='](\"dlist\")))) {\n                has_text = false};};\n            buffer['$<<'](this_line);\n          };\n          this_line = nil;\n        };\n        if ($truthy(this_line)) {\n          reader.$unshift_line(this_line)};\n        if ($truthy(detached_continuation)) {\n          \n          $writer = [detached_continuation, \"\"];\n          $send(buffer, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        while (!($truthy(buffer['$empty?']()))) {\n          if ($truthy((last_line = buffer['$[]'](-1))['$empty?']())) {\n            buffer.$pop()\n          } else {\n            \n            if (last_line['$==']($$($nesting, 'LIST_CONTINUATION'))) {\n              buffer.$pop()};\n            break;;\n          }\n        };\n        return buffer;\n      }, $Parser_read_lines_for_list_item$28.$$arity = -3);\n      Opal.defs(self, '$initialize_section', $Parser_initialize_section$34 = function $$initialize_section(reader, parent, attributes) {\n        var $a, $b, self = this, document = nil, book = nil, doctype = nil, source_location = nil, sect_style = nil, sect_id = nil, sect_reftext = nil, sect_title = nil, sect_level = nil, sect_atx = nil, $writer = nil, sect_name = nil, sect_special = nil, sect_numbered = nil, section = nil, id = nil, generated_id = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        document = parent.$document();\n        book = (doctype = document.$doctype())['$=='](\"book\");\n        if ($truthy(document.$sourcemap())) {\n          source_location = reader.$cursor()};\n        sect_style = attributes['$[]'](1);\n        $b = self.$parse_section_title(reader, document, attributes['$[]'](\"id\")), $a = Opal.to_ary($b), (sect_id = ($a[0] == null ? nil : $a[0])), (sect_reftext = ($a[1] == null ? nil : $a[1])), (sect_title = ($a[2] == null ? nil : $a[2])), (sect_level = ($a[3] == null ? nil : $a[3])), (sect_atx = ($a[4] == null ? nil : $a[4])), $b;\n        if ($truthy(sect_reftext)) {\n          \n          $writer = [\"reftext\", sect_reftext];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else {\n          sect_reftext = attributes['$[]'](\"reftext\")\n        };\n        if ($truthy(sect_style)) {\n          if ($truthy(($truthy($a = book) ? sect_style['$=='](\"abstract\") : $a))) {\n            $a = [\"chapter\", 1], (sect_name = $a[0]), (sect_level = $a[1]), $a\n          } else if ($truthy(($truthy($a = sect_style['$start_with?'](\"sect\")) ? $$($nesting, 'SectionLevelStyleRx')['$match?'](sect_style) : $a))) {\n            sect_name = \"section\"\n          } else {\n            \n            $a = [sect_style, true], (sect_name = $a[0]), (sect_special = $a[1]), $a;\n            if (sect_level['$=='](0)) {\n              sect_level = 1};\n            sect_numbered = sect_name['$=='](\"appendix\");\n          }\n        } else if ($truthy(book)) {\n          sect_name = (function() {if (sect_level['$=='](0)) {\n            return \"part\"\n          } else {\n            \n            if ($truthy($rb_gt(sect_level, 1))) {\n              return \"section\"\n            } else {\n              return \"chapter\"\n            };\n          }; return nil; })()\n        } else if ($truthy((($a = doctype['$=='](\"manpage\")) ? sect_title.$casecmp(\"synopsis\")['$=='](0) : doctype['$=='](\"manpage\")))) {\n          $a = [\"synopsis\", true], (sect_name = $a[0]), (sect_special = $a[1]), $a\n        } else {\n          sect_name = \"section\"\n        };\n        section = $$($nesting, 'Section').$new(parent, sect_level);\n        $a = [sect_id, sect_title, sect_name, source_location], section['$id=']($a[0]), section['$title=']($a[1]), section['$sectname=']($a[2]), section['$source_location=']($a[3]), $a;\n        if ($truthy(sect_special)) {\n          \n          \n          $writer = [true];\n          $send(section, 'special=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(sect_numbered)) {\n            \n            $writer = [true];\n            $send(section, 'numbered=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else if (document.$attributes()['$[]'](\"sectnums\")['$=='](\"all\")) {\n            \n            $writer = [(function() {if ($truthy(($truthy($a = book) ? sect_level['$=='](1) : $a))) {\n              return \"chapter\"\n            } else {\n              return true\n            }; return nil; })()];\n            $send(section, 'numbered=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n        } else if ($truthy(($truthy($a = document.$attributes()['$[]'](\"sectnums\")) ? $rb_gt(sect_level, 0) : $a))) {\n          \n          $writer = [(function() {if ($truthy(section.$special())) {\n            return ($truthy($a = parent.$numbered()) ? true : $a)\n          } else {\n            return true\n          }; return nil; })()];\n          $send(section, 'numbered=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(($truthy($a = ($truthy($b = book) ? sect_level['$=='](0) : $b)) ? document.$attributes()['$[]'](\"partnums\") : $a))) {\n          \n          $writer = [true];\n          $send(section, 'numbered=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy((id = ($truthy($a = section.$id()) ? $a : (($writer = [(function() {if ($truthy(document.$attributes()['$key?'](\"sectids\"))) {\n          \n          return (generated_id = $$($nesting, 'Section').$generate_id(section.$title(), document));\n        } else {\n          return nil\n        }; return nil; })()]), $send(section, 'id=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))))) {\n          \n          if ($truthy(generated_id)) {\n          } else if ($truthy(sect_title['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n            section.$title()};\n          if ($truthy(document.$register(\"refs\", [id, section]))) {\n          } else {\n            self.$logger().$warn(self.$message_with_context(\"\" + \"id assigned to section already in use: \" + (id), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_line($rb_minus(reader.$lineno(), (function() {if ($truthy(sect_atx)) {\n              return 1\n            } else {\n              return 2\n            }; return nil; })()))})))\n          };};\n        section.$update_attributes(attributes);\n        reader.$skip_blank_lines();\n        return section;\n      }, $Parser_initialize_section$34.$$arity = -3);\n      Opal.defs(self, '$is_next_line_section?', $Parser_is_next_line_section$ques$35 = function(reader, attributes) {\n        var $a, $b, self = this, style = nil, next_lines = nil;\n\n        if ($truthy(($truthy($a = (style = attributes['$[]'](1))) ? ($truthy($b = style['$=='](\"discrete\")) ? $b : style['$=='](\"float\")) : $a))) {\n          return nil\n        } else if ($truthy($$($nesting, 'Compliance').$underline_style_section_titles())) {\n          \n          next_lines = reader.$peek_lines(2, ($truthy($a = style) ? style['$=='](\"comment\") : $a));\n          return self['$is_section_title?'](($truthy($a = next_lines['$[]'](0)) ? $a : \"\"), next_lines['$[]'](1));\n        } else {\n          return self['$atx_section_title?'](($truthy($a = reader.$peek_line()) ? $a : \"\"))\n        }\n      }, $Parser_is_next_line_section$ques$35.$$arity = 2);\n      Opal.defs(self, '$is_next_line_doctitle?', $Parser_is_next_line_doctitle$ques$36 = function(reader, attributes, leveloffset) {\n        var $a, self = this, sect_level = nil;\n\n        if ($truthy(leveloffset)) {\n          return ($truthy($a = (sect_level = self['$is_next_line_section?'](reader, attributes))) ? $rb_plus(sect_level, leveloffset.$to_i())['$=='](0) : $a)\n        } else {\n          return self['$is_next_line_section?'](reader, attributes)['$=='](0)\n        }\n      }, $Parser_is_next_line_doctitle$ques$36.$$arity = 3);\n      Opal.defs(self, '$is_section_title?', $Parser_is_section_title$ques$37 = function(line1, line2) {\n        var $a, self = this;\n\n        \n        \n        if (line2 == null) {\n          line2 = nil;\n        };\n        return ($truthy($a = self['$atx_section_title?'](line1)) ? $a : (function() {if ($truthy(line2['$nil_or_empty?']())) {\n          return nil\n        } else {\n          return self['$setext_section_title?'](line1, line2)\n        }; return nil; })());\n      }, $Parser_is_section_title$ques$37.$$arity = -2);\n      Opal.defs(self, '$atx_section_title?', $Parser_atx_section_title$ques$38 = function(line) {\n        var $a, self = this;\n\n        if ($truthy((function() {if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {\n          \n          return ($truthy($a = line['$start_with?'](\"=\", \"#\")) ? $$($nesting, 'ExtAtxSectionTitleRx')['$=~'](line) : $a);\n        } else {\n          \n          return ($truthy($a = line['$start_with?'](\"=\")) ? $$($nesting, 'AtxSectionTitleRx')['$=~'](line) : $a);\n        }; return nil; })())) {\n          return $rb_minus((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)).$length(), 1)\n        } else {\n          return nil\n        }\n      }, $Parser_atx_section_title$ques$38.$$arity = 1);\n      Opal.defs(self, '$setext_section_title?', $Parser_setext_section_title$ques$39 = function(line1, line2) {\n        var $a, $b, $c, self = this, level = nil, line2_ch0 = nil, line2_len = nil;\n\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (level = $$($nesting, 'SETEXT_SECTION_LEVELS')['$[]']((line2_ch0 = line2.$chr())))) ? self['$uniform?'](line2, line2_ch0, (line2_len = line2.$length())) : $c)) ? $$($nesting, 'SetextSectionTitleRx')['$match?'](line1) : $b)) ? $rb_lt($rb_minus(line1.$length(), line2_len).$abs(), 2) : $a))) {\n          return level\n        } else {\n          return nil\n        }\n      }, $Parser_setext_section_title$ques$39.$$arity = 2);\n      Opal.defs(self, '$parse_section_title', $Parser_parse_section_title$40 = function $$parse_section_title(reader, document, sect_id) {\n        var $a, $b, $c, $d, $e, self = this, sect_reftext = nil, line1 = nil, sect_level = nil, sect_title = nil, atx = nil, line2 = nil, line2_ch0 = nil, line2_len = nil;\n\n        \n        \n        if (sect_id == null) {\n          sect_id = nil;\n        };\n        sect_reftext = nil;\n        line1 = reader.$read_line();\n        if ($truthy((function() {if ($truthy($$($nesting, 'Compliance').$markdown_syntax())) {\n          \n          return ($truthy($a = line1['$start_with?'](\"=\", \"#\")) ? $$($nesting, 'ExtAtxSectionTitleRx')['$=~'](line1) : $a);\n        } else {\n          \n          return ($truthy($a = line1['$start_with?'](\"=\")) ? $$($nesting, 'AtxSectionTitleRx')['$=~'](line1) : $a);\n        }; return nil; })())) {\n          \n          $a = [$rb_minus((($b = $gvars['~']) === nil ? nil : $b['$[]'](1)).$length(), 1), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), true], (sect_level = $a[0]), (sect_title = $a[1]), (atx = $a[2]), $a;\n          if ($truthy(sect_id)) {\n          } else if ($truthy(($truthy($a = ($truthy($b = sect_title['$end_with?'](\"]]\")) ? $$($nesting, 'InlineSectionAnchorRx')['$=~'](sect_title) : $b)) ? (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$!']() : $a))) {\n            $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a};\n        } else if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = $$($nesting, 'Compliance').$underline_style_section_titles()) ? (line2 = reader.$peek_line(true)) : $e)) ? (sect_level = $$($nesting, 'SETEXT_SECTION_LEVELS')['$[]']((line2_ch0 = line2.$chr()))) : $d)) ? self['$uniform?'](line2, line2_ch0, (line2_len = line2.$length())) : $c)) ? (sect_title = ($truthy($c = $$($nesting, 'SetextSectionTitleRx')['$=~'](line1)) ? (($d = $gvars['~']) === nil ? nil : $d['$[]'](1)) : $c)) : $b)) ? $rb_lt($rb_minus(line1.$length(), line2_len).$abs(), 2) : $a))) {\n          \n          atx = false;\n          if ($truthy(sect_id)) {\n          } else if ($truthy(($truthy($a = ($truthy($b = sect_title['$end_with?'](\"]]\")) ? $$($nesting, 'InlineSectionAnchorRx')['$=~'](sect_title) : $b)) ? (($b = $gvars['~']) === nil ? nil : $b['$[]'](1))['$!']() : $a))) {\n            $a = [sect_title.$slice(0, $rb_minus(sect_title.$length(), (($b = $gvars['~']) === nil ? nil : $b['$[]'](0)).$length())), (($b = $gvars['~']) === nil ? nil : $b['$[]'](2)), (($b = $gvars['~']) === nil ? nil : $b['$[]'](3))], (sect_title = $a[0]), (sect_id = $a[1]), (sect_reftext = $a[2]), $a};\n          reader.$shift();\n        } else {\n          self.$raise(\"\" + \"Unrecognized section at \" + (reader.$cursor_at_prev_line()))\n        };\n        if ($truthy(document['$attr?'](\"leveloffset\"))) {\n          \n          sect_level = $rb_plus(sect_level, document.$attr(\"leveloffset\").$to_i());\n          if ($truthy($rb_lt(sect_level, 0))) {\n            sect_level = 0};};\n        return [sect_id, sect_reftext, sect_title, sect_level, atx];\n      }, $Parser_parse_section_title$40.$$arity = -3);\n      Opal.defs(self, '$parse_header_metadata', $Parser_parse_header_metadata$41 = function $$parse_header_metadata(reader, document) {\n        var $a, $$42, $$43, $$44, self = this, doc_attrs = nil, implicit_authors = nil, metadata = nil, implicit_author = nil, implicit_authorinitials = nil, author_metadata = nil, rev_metadata = nil, rev_line = nil, match = nil, $writer = nil, component = nil, author_line = nil, authors = nil, author_idx = nil, author_key = nil, explicit = nil, sparse = nil, author_override = nil;\n\n        \n        \n        if (document == null) {\n          document = nil;\n        };\n        doc_attrs = ($truthy($a = document) ? document.$attributes() : $a);\n        self.$process_attribute_entries(reader, document);\n        $a = [(implicit_authors = $hash2([], {})), nil, nil], (metadata = $a[0]), (implicit_author = $a[1]), (implicit_authorinitials = $a[2]), $a;\n        if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {\n          \n          if ($truthy((author_metadata = self.$process_authors(reader.$read_line()))['$empty?']())) {\n          } else {\n            \n            if ($truthy(document)) {\n              \n              $send(author_metadata, 'each', [], ($$42 = function(key, val){var self = $$42.$$s || this, $writer = nil;\n\n              \n                \n                if (key == null) {\n                  key = nil;\n                };\n                \n                if (val == null) {\n                  val = nil;\n                };\n                if ($truthy(doc_attrs['$key?'](key))) {\n                  return nil\n                } else {\n                  \n                  $writer = [key, (function() {if ($truthy($$$('::', 'String')['$==='](val))) {\n                    \n                    return document.$apply_header_subs(val);\n                  } else {\n                    return val\n                  }; return nil; })()];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                };}, $$42.$$s = self, $$42.$$arity = 2, $$42));\n              implicit_author = doc_attrs['$[]'](\"author\");\n              implicit_authorinitials = doc_attrs['$[]'](\"authorinitials\");\n              implicit_authors = doc_attrs['$[]'](\"authors\");};\n            metadata = author_metadata;\n          };\n          self.$process_attribute_entries(reader, document);\n          rev_metadata = $hash2([], {});\n          if ($truthy(($truthy($a = reader['$has_more_lines?']()) ? reader['$next_line_empty?']()['$!']() : $a))) {\n            \n            rev_line = reader.$read_line();\n            if ($truthy((match = $$($nesting, 'RevisionInfoLineRx').$match(rev_line)))) {\n              \n              if ($truthy(match['$[]'](1))) {\n                \n                $writer = [\"revnumber\", match['$[]'](1).$rstrip()];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              if ($truthy((component = match['$[]'](2).$strip())['$empty?']())) {\n              } else if ($truthy(($truthy($a = match['$[]'](1)['$!']()) ? component['$start_with?'](\"v\") : $a))) {\n                \n                $writer = [\"revnumber\", component.$slice(1, component.$length())];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              } else {\n                \n                $writer = [\"revdate\", component];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n              if ($truthy(match['$[]'](3))) {\n                \n                $writer = [\"revremark\", match['$[]'](3).$rstrip()];\n                $send(rev_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n            } else {\n              reader.$unshift_line(rev_line)\n            };};\n          if ($truthy(rev_metadata['$empty?']())) {\n          } else {\n            \n            if ($truthy(document)) {\n              $send(rev_metadata, 'each', [], ($$43 = function(key, val){var self = $$43.$$s || this;\n\n              \n                \n                if (key == null) {\n                  key = nil;\n                };\n                \n                if (val == null) {\n                  val = nil;\n                };\n                if ($truthy(doc_attrs['$key?'](key))) {\n                  return nil\n                } else {\n                  \n                  $writer = [key, document.$apply_header_subs(val)];\n                  $send(doc_attrs, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                };}, $$43.$$s = self, $$43.$$arity = 2, $$43))};\n            metadata.$update(rev_metadata);\n          };\n          self.$process_attribute_entries(reader, document);\n          reader.$skip_blank_lines();\n        } else {\n          author_metadata = $hash2([], {})\n        };\n        if ($truthy(document)) {\n          \n          if ($truthy(($truthy($a = doc_attrs['$key?'](\"author\")) ? (author_line = doc_attrs['$[]'](\"author\"))['$!='](implicit_author) : $a))) {\n            \n            author_metadata = self.$process_authors(author_line, true, false);\n            if ($truthy(doc_attrs['$[]'](\"authorinitials\")['$!='](implicit_authorinitials))) {\n              author_metadata.$delete(\"authorinitials\")};\n          } else if ($truthy(($truthy($a = doc_attrs['$key?'](\"authors\")) ? (author_line = doc_attrs['$[]'](\"authors\"))['$!='](implicit_authors) : $a))) {\n            author_metadata = self.$process_authors(author_line, true)\n          } else {\n            \n            $a = [[], 1, \"author_1\", false, false], (authors = $a[0]), (author_idx = $a[1]), (author_key = $a[2]), (explicit = $a[3]), (sparse = $a[4]), $a;\n            while ($truthy(doc_attrs['$key?'](author_key))) {\n              \n              if ((author_override = doc_attrs['$[]'](author_key))['$=='](author_metadata['$[]'](author_key))) {\n                \n                authors['$<<'](nil);\n                sparse = true;\n              } else {\n                \n                authors['$<<'](author_override);\n                explicit = true;\n              };\n              author_key = \"\" + \"author_\" + ((author_idx = $rb_plus(author_idx, 1)));\n            };\n            if ($truthy(explicit)) {\n              \n              if ($truthy(sparse)) {\n                $send(authors, 'each_with_index', [], ($$44 = function(author, idx){var self = $$44.$$s || this, $$45, name_idx = nil;\n\n                \n                  \n                  if (author == null) {\n                    author = nil;\n                  };\n                  \n                  if (idx == null) {\n                    idx = nil;\n                  };\n                  if ($truthy(author)) {\n                    return nil\n                  } else {\n                    \n                    $writer = [idx, $send([author_metadata['$[]'](\"\" + \"firstname_\" + ((name_idx = $rb_plus(idx, 1)))), author_metadata['$[]'](\"\" + \"middlename_\" + (name_idx)), author_metadata['$[]'](\"\" + \"lastname_\" + (name_idx))].$compact(), 'map', [], ($$45 = function(it){var self = $$45.$$s || this;\n\n                    \n                      \n                      if (it == null) {\n                        it = nil;\n                      };\n                      return it.$tr(\" \", \"_\");}, $$45.$$s = self, $$45.$$arity = 1, $$45)).$join(\" \")];\n                    $send(authors, '[]=', Opal.to_a($writer));\n                    return $writer[$rb_minus($writer[\"length\"], 1)];\n                  };}, $$44.$$s = self, $$44.$$arity = 2, $$44))};\n              author_metadata = self.$process_authors(authors, true, false);\n            } else {\n              author_metadata = $hash2([], {})\n            };\n          };\n          if ($truthy(author_metadata['$empty?']())) {\n            ($truthy($a = metadata['$[]'](\"authorcount\")) ? $a : (($writer = [\"authorcount\", (($writer = [\"authorcount\", 0]), $send(doc_attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n          } else {\n            \n            doc_attrs.$update(author_metadata);\n            if ($truthy(($truthy($a = doc_attrs['$key?'](\"email\")['$!']()) ? doc_attrs['$key?'](\"email_1\") : $a))) {\n              \n              $writer = [\"email\", doc_attrs['$[]'](\"email_1\")];\n              $send(doc_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          };};\n        return metadata;\n      }, $Parser_parse_header_metadata$41.$$arity = -2);\n      Opal.defs(self, '$process_authors', $Parser_process_authors$46 = function $$process_authors(author_line, names_only, multiple) {\n        var $a, $$47, self = this, author_metadata = nil, author_idx = nil, $writer = nil;\n\n        \n        \n        if (names_only == null) {\n          names_only = false;\n        };\n        \n        if (multiple == null) {\n          multiple = true;\n        };\n        author_metadata = $hash2([], {});\n        author_idx = 0;\n        $send((function() {if ($truthy(($truthy($a = multiple) ? author_line['$include?'](\";\") : $a))) {\n          \n          return author_line.$split($$($nesting, 'AuthorDelimiterRx'));\n        } else {\n          return [].concat(Opal.to_a(author_line))\n        }; return nil; })(), 'each', [], ($$47 = function(author_entry){var self = $$47.$$s || this, $$48, $$49, $b, $$50, key_map = nil, $writer = nil, segments = nil, match = nil, author = nil, fname = nil, mname = nil, lname = nil;\n\n        \n          \n          if (author_entry == null) {\n            author_entry = nil;\n          };\n          if ($truthy(author_entry['$empty?']())) {\n            return nil;};\n          key_map = $hash2([], {});\n          if ((author_idx = $rb_plus(author_idx, 1))['$=='](1)) {\n            $send($$($nesting, 'AuthorKeys'), 'each', [], ($$48 = function(key){var self = $$48.$$s || this, $writer = nil;\n\n            \n              \n              if (key == null) {\n                key = nil;\n              };\n              $writer = [key.$to_sym(), key];\n              $send(key_map, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];}, $$48.$$s = self, $$48.$$arity = 1, $$48))\n          } else {\n            $send($$($nesting, 'AuthorKeys'), 'each', [], ($$49 = function(key){var self = $$49.$$s || this, $writer = nil;\n\n            \n              \n              if (key == null) {\n                key = nil;\n              };\n              $writer = [key.$to_sym(), \"\" + (key) + \"_\" + (author_idx)];\n              $send(key_map, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];}, $$49.$$s = self, $$49.$$arity = 1, $$49))\n          };\n          if ($truthy(names_only)) {\n            \n            if ($truthy(author_entry['$include?'](\"<\"))) {\n              \n              \n              $writer = [key_map['$[]'](\"author\"), author_entry.$tr(\"_\", \" \")];\n              $send(author_metadata, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              author_entry = author_entry.$gsub($$($nesting, 'XmlSanitizeRx'), \"\");};\n            if ((segments = author_entry.$split(nil, 3)).$size()['$=='](3)) {\n              segments['$<<'](segments.$pop().$squeeze(\" \"))};\n          } else if ($truthy((match = $$($nesting, 'AuthorInfoLineRx').$match(author_entry)))) {\n            (segments = match.$to_a()).$shift()};\n          if ($truthy(segments)) {\n            \n            author = (($writer = [key_map['$[]'](\"firstname\"), (fname = segments['$[]'](0).$tr(\"_\", \" \"))]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n            \n            $writer = [key_map['$[]'](\"authorinitials\"), fname.$chr()];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(segments['$[]'](1))) {\n              if ($truthy(segments['$[]'](2))) {\n                \n                \n                $writer = [key_map['$[]'](\"middlename\"), (mname = segments['$[]'](1).$tr(\"_\", \" \"))];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                \n                $writer = [key_map['$[]'](\"lastname\"), (lname = segments['$[]'](2).$tr(\"_\", \" \"))];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                author = $rb_plus($rb_plus($rb_plus($rb_plus(fname, \" \"), mname), \" \"), lname);\n                \n                $writer = [key_map['$[]'](\"authorinitials\"), \"\" + (fname.$chr()) + (mname.$chr()) + (lname.$chr())];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n              } else {\n                \n                \n                $writer = [key_map['$[]'](\"lastname\"), (lname = segments['$[]'](1).$tr(\"_\", \" \"))];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                author = $rb_plus($rb_plus(fname, \" \"), lname);\n                \n                $writer = [key_map['$[]'](\"authorinitials\"), \"\" + (fname.$chr()) + (lname.$chr())];\n                $send(author_metadata, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n              }};\n            ($truthy($b = author_metadata['$[]'](key_map['$[]'](\"author\"))) ? $b : (($writer = [key_map['$[]'](\"author\"), author]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n            if ($truthy(($truthy($b = names_only) ? $b : segments['$[]'](3)['$!']()))) {\n            } else {\n              \n              $writer = [key_map['$[]'](\"email\"), segments['$[]'](3)];\n              $send(author_metadata, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else {\n            \n            \n            $writer = [key_map['$[]'](\"author\"), (($writer = [key_map['$[]'](\"firstname\"), (fname = author_entry.$squeeze(\" \").$strip())]), $send(author_metadata, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [key_map['$[]'](\"authorinitials\"), fname.$chr()];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          };\n          if (author_idx['$=='](1)) {\n            \n            $writer = [\"authors\", author_metadata['$[]'](key_map['$[]'](\"author\"))];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            \n            if (author_idx['$=='](2)) {\n              $send($$($nesting, 'AuthorKeys'), 'each', [], ($$50 = function(key){var self = $$50.$$s || this;\n\n              \n                \n                if (key == null) {\n                  key = nil;\n                };\n                if ($truthy(author_metadata['$key?'](key))) {\n                  \n                  $writer = [\"\" + (key) + \"_1\", author_metadata['$[]'](key)];\n                  $send(author_metadata, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  return nil\n                };}, $$50.$$s = self, $$50.$$arity = 1, $$50))};\n            \n            $writer = [\"authors\", \"\" + (author_metadata['$[]'](\"authors\")) + \", \" + (author_metadata['$[]'](key_map['$[]'](\"author\")))];\n            $send(author_metadata, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          };}, $$47.$$s = self, $$47.$$arity = 1, $$47));\n        \n        $writer = [\"authorcount\", author_idx];\n        $send(author_metadata, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        return author_metadata;\n      }, $Parser_process_authors$46.$$arity = -2);\n      Opal.defs(self, '$parse_block_metadata_lines', $Parser_parse_block_metadata_lines$51 = function $$parse_block_metadata_lines(reader, document, attributes, options) {\n        var $a, $b, self = this;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        while ($truthy(self.$parse_block_metadata_line(reader, document, attributes, options))) {\n          \n          reader.$shift();\n          if ($truthy($b = reader.$skip_blank_lines())) {\n            $b\n          } else {\n            break;\n          };\n        };\n        return attributes;\n      }, $Parser_parse_block_metadata_lines$51.$$arity = -3);\n      Opal.defs(self, '$parse_block_metadata_line', $Parser_parse_block_metadata_line$52 = function $$parse_block_metadata_line(reader, document, attributes, options) {\n        var $a, $b, self = this, next_line = nil, normal = nil, $writer = nil, reftext = nil, current_style = nil, ll = nil;\n        if ($gvars[\"~\"] == null) $gvars[\"~\"] = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        if ($truthy(($truthy($a = (next_line = reader.$peek_line())) ? (function() {if ($truthy(options['$[]'](\"text_only\"))) {\n          \n          return next_line['$start_with?'](\"[\", \"/\");\n        } else {\n          \n          return (normal = next_line['$start_with?'](\"[\", \".\", \"/\", \":\"));\n        }; return nil; })() : $a))) {\n          if ($truthy(next_line['$start_with?'](\"[\"))) {\n            if ($truthy(next_line['$start_with?'](\"[[\"))) {\n              if ($truthy(($truthy($a = next_line['$end_with?'](\"]]\")) ? $$($nesting, 'BlockAnchorRx')['$=~'](next_line) : $a))) {\n                \n                \n                $writer = [\"id\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;\n                if ($truthy((reftext = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2))))) {\n                  \n                  $writer = [\"reftext\", (function() {if ($truthy(reftext['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n                    \n                    return document.$sub_attributes(reftext);\n                  } else {\n                    return reftext\n                  }; return nil; })()];\n                  $send(attributes, '[]=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                return true;\n              } else {\n                return nil\n              }\n            } else if ($truthy(($truthy($a = next_line['$end_with?'](\"]\")) ? $$($nesting, 'BlockAttributeListRx')['$=~'](next_line) : $a))) {\n              \n              current_style = attributes['$[]'](1);\n              if ($truthy(document.$parse_attributes((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), [], $hash2([\"sub_input\", \"sub_result\", \"into\"], {\"sub_input\": true, \"sub_result\": true, \"into\": attributes}))['$[]'](1))) {\n                \n                $writer = [1, ($truthy($a = self.$parse_style_attribute(attributes, reader)) ? $a : current_style)];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              return true;\n            } else {\n              return nil\n            }\n          } else if ($truthy(($truthy($a = normal) ? next_line['$start_with?'](\".\") : $a))) {\n            if ($truthy($$($nesting, 'BlockTitleRx')['$=~'](next_line))) {\n              \n              \n              $writer = [\"title\", (($a = $gvars['~']) === nil ? nil : $a['$[]'](1))];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              return true;\n            } else {\n              return nil\n            }\n          } else if ($truthy(($truthy($a = normal['$!']()) ? $a : next_line['$start_with?'](\"/\")))) {\n            if ($truthy(next_line['$start_with?'](\"//\"))) {\n              if (next_line['$=='](\"//\")) {\n                return true\n              } else if ($truthy(($truthy($a = normal) ? self['$uniform?'](next_line, \"/\", (ll = next_line.$length())) : $a))) {\n                if (ll['$=='](3)) {\n                  return nil\n                } else {\n                  \n                  reader.$read_lines_until($hash2([\"terminator\", \"skip_first_line\", \"preserve_last_line\", \"skip_processing\", \"context\"], {\"terminator\": next_line, \"skip_first_line\": true, \"preserve_last_line\": true, \"skip_processing\": true, \"context\": \"comment\"}));\n                  return true;\n                }\n              } else if ($truthy(next_line['$start_with?'](\"///\"))) {\n                return nil\n              } else {\n                return true\n              }\n            } else {\n              return nil\n            }\n          } else if ($truthy(($truthy($a = ($truthy($b = normal) ? next_line['$start_with?'](\":\") : $b)) ? $$($nesting, 'AttributeEntryRx')['$=~'](next_line) : $a))) {\n            \n            self.$process_attribute_entry(reader, document, attributes, $gvars[\"~\"]);\n            return true;\n          } else {\n            return nil\n          }\n        } else {\n          return nil\n        };\n      }, $Parser_parse_block_metadata_line$52.$$arity = -4);\n      Opal.defs(self, '$process_attribute_entries', $Parser_process_attribute_entries$53 = function $$process_attribute_entries(reader, document, attributes) {\n        var $a, self = this;\n\n        \n        \n        if (attributes == null) {\n          attributes = nil;\n        };\n        reader.$skip_comment_lines();\n        while ($truthy(self.$process_attribute_entry(reader, document, attributes))) {\n          \n          reader.$shift();\n          reader.$skip_comment_lines();\n        };\n      }, $Parser_process_attribute_entries$53.$$arity = -3);\n      Opal.defs(self, '$process_attribute_entry', $Parser_process_attribute_entry$54 = function $$process_attribute_entry(reader, document, attributes, match) {\n        var $a, $b, $c, self = this, value = nil, con = nil, next_line = nil, keep_open = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = nil;\n        };\n        \n        if (match == null) {\n          match = nil;\n        };\n        if ($truthy(($truthy($a = match) ? $a : (match = (function() {if ($truthy(reader['$has_more_lines?']())) {\n          \n          return $$($nesting, 'AttributeEntryRx').$match(reader.$peek_line());\n        } else {\n          return nil\n        }; return nil; })())))) {\n          \n          if ($truthy((value = match['$[]'](2))['$nil_or_empty?']())) {\n            value = \"\"\n          } else if ($truthy(value['$end_with?']($$($nesting, 'LINE_CONTINUATION'), $$($nesting, 'LINE_CONTINUATION_LEGACY')))) {\n            \n            $a = [value.$slice($rb_minus(value.$length(), 2), 2), value.$slice(0, $rb_minus(value.$length(), 2)).$rstrip()], (con = $a[0]), (value = $a[1]), $a;\n            while ($truthy(($truthy($b = reader.$advance()) ? (next_line = ($truthy($c = reader.$peek_line()) ? $c : \"\"))['$empty?']()['$!']() : $b))) {\n              \n              next_line = next_line.$lstrip();\n              if ($truthy((keep_open = next_line['$end_with?'](con)))) {\n                next_line = next_line.$slice(0, $rb_minus(next_line.$length(), 2)).$rstrip()};\n              value = \"\" + (value) + ((function() {if ($truthy(value['$end_with?']($$($nesting, 'HARD_LINE_BREAK')))) {\n                return $$($nesting, 'LF')\n              } else {\n                return \" \"\n              }; return nil; })()) + (next_line);\n              if ($truthy(keep_open)) {\n              } else {\n                break;\n              };\n            };};\n          self.$store_attribute(match['$[]'](1), value, document, attributes);\n          return true;\n        } else {\n          return nil\n        };\n      }, $Parser_process_attribute_entry$54.$$arity = -3);\n      Opal.defs(self, '$store_attribute', $Parser_store_attribute$55 = function $$store_attribute(name, value, doc, attrs) {\n        var $a, self = this, resolved_value = nil;\n\n        \n        \n        if (doc == null) {\n          doc = nil;\n        };\n        \n        if (attrs == null) {\n          attrs = nil;\n        };\n        if ($truthy(name['$end_with?'](\"!\"))) {\n          \n          name = name.$chop();\n          value = nil;\n        } else if ($truthy(name['$start_with?'](\"!\"))) {\n          \n          name = name.$slice(1, name.$length());\n          value = nil;};\n        if ((name = self.$sanitize_attribute_name(name))['$=='](\"numbered\")) {\n          name = \"sectnums\"\n        } else if (name['$=='](\"hardbreaks\")) {\n          name = \"hardbreaks-option\"\n        } else if (name['$=='](\"showtitle\")) {\n          self.$store_attribute(\"notitle\", (function() {if ($truthy(value)) {\n            return nil\n          } else {\n            return \"\"\n          }; return nil; })(), doc, attrs)};\n        if ($truthy(doc)) {\n          if ($truthy(value)) {\n            \n            if (name['$=='](\"leveloffset\")) {\n              if ($truthy(value['$start_with?'](\"+\"))) {\n                value = $rb_plus(doc.$attr(\"leveloffset\", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()\n              } else if ($truthy(value['$start_with?'](\"-\"))) {\n                value = $rb_minus(doc.$attr(\"leveloffset\", 0).$to_i(), value.$slice(1, value.$length()).$to_i()).$to_s()}};\n            if ($truthy((resolved_value = doc.$set_attribute(name, value)))) {\n              \n              value = resolved_value;\n              if ($truthy(attrs)) {\n                $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)};};\n          } else if ($truthy(($truthy($a = doc.$delete_attribute(name)) ? attrs : $a))) {\n            $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)}\n        } else if ($truthy(attrs)) {\n          $$$($$($nesting, 'Document'), 'AttributeEntry').$new(name, value).$save_to(attrs)};\n        return [name, value];\n      }, $Parser_store_attribute$55.$$arity = -3);\n      Opal.defs(self, '$resolve_list_marker', $Parser_resolve_list_marker$56 = function $$resolve_list_marker(list_type, marker, ordinal, validate, reader) {\n        var self = this;\n\n        \n        \n        if (ordinal == null) {\n          ordinal = 0;\n        };\n        \n        if (validate == null) {\n          validate = false;\n        };\n        \n        if (reader == null) {\n          reader = nil;\n        };\n        if (list_type['$=='](\"ulist\")) {\n          return marker\n        } else if (list_type['$=='](\"olist\")) {\n          return self.$resolve_ordered_list_marker(marker, ordinal, validate, reader)['$[]'](0)\n        } else {\n          return \"<1>\"\n        };\n      }, $Parser_resolve_list_marker$56.$$arity = -3);\n      Opal.defs(self, '$resolve_ordered_list_marker', $Parser_resolve_ordered_list_marker$57 = function $$resolve_ordered_list_marker(marker, ordinal, validate, reader) {\n        var $$58, $a, self = this, $case = nil, style = nil, expected = nil, actual = nil;\n\n        \n        \n        if (ordinal == null) {\n          ordinal = 0;\n        };\n        \n        if (validate == null) {\n          validate = false;\n        };\n        \n        if (reader == null) {\n          reader = nil;\n        };\n        if ($truthy(marker['$start_with?'](\".\"))) {\n          return [marker]};\n        $case = (style = $send($$($nesting, 'ORDERED_LIST_STYLES'), 'find', [], ($$58 = function(s){var self = $$58.$$s || this;\n\n        \n          \n          if (s == null) {\n            s = nil;\n          };\n          return $$($nesting, 'OrderedListMarkerRxMap')['$[]'](s)['$match?'](marker);}, $$58.$$s = self, $$58.$$arity = 1, $$58)));\n        if (\"arabic\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $rb_plus(ordinal, 1);\n          actual = marker.$to_i();};\n        marker = \"1.\";}\n        else if (\"loweralpha\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $rb_plus(\"a\"['$[]'](0).$ord(), ordinal).$chr();\n          actual = marker.$chop();};\n        marker = \"a.\";}\n        else if (\"upperalpha\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $rb_plus(\"A\"['$[]'](0).$ord(), ordinal).$chr();\n          actual = marker.$chop();};\n        marker = \"A.\";}\n        else if (\"lowerroman\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $$($nesting, 'Helpers').$int_to_roman($rb_plus(ordinal, 1)).$downcase();\n          actual = marker.$chop();};\n        marker = \"i)\";}\n        else if (\"upperroman\"['$===']($case)) {\n        if ($truthy(validate)) {\n          \n          expected = $$($nesting, 'Helpers').$int_to_roman($rb_plus(ordinal, 1));\n          actual = marker.$chop();};\n        marker = \"I)\";};\n        if ($truthy(($truthy($a = validate) ? expected['$!='](actual) : $a))) {\n          self.$logger().$warn(self.$message_with_context(\"\" + \"list item index: expected \" + (expected) + \", got \" + (actual), $hash2([\"source_location\"], {\"source_location\": reader.$cursor()})))};\n        return [marker, style];\n      }, $Parser_resolve_ordered_list_marker$57.$$arity = -2);\n      Opal.defs(self, '$is_sibling_list_item?', $Parser_is_sibling_list_item$ques$59 = function(line, list_type, sibling_trait) {\n        var $a, $b, self = this;\n\n        if ($truthy($$$('::', 'Regexp')['$==='](sibling_trait))) {\n          return sibling_trait['$match?'](line)\n        } else {\n          return ($truthy($a = $$($nesting, 'ListRxMap')['$[]'](list_type)['$=~'](line)) ? sibling_trait['$=='](self.$resolve_list_marker(list_type, (($b = $gvars['~']) === nil ? nil : $b['$[]'](1)))) : $a)\n        }\n      }, $Parser_is_sibling_list_item$ques$59.$$arity = 3);\n      Opal.defs(self, '$parse_table', $Parser_parse_table$60 = function $$parse_table(table_reader, parent, attributes) {\n        var $a, $b, $c, $d, self = this, table = nil, colspecs = nil, explicit_colspecs = nil, skipped = nil, $writer = nil, implicit_header = nil, parser_ctx = nil, format = nil, loop_idx = nil, implicit_header_boundary = nil, line = nil, beyond_first = nil, next_cellspec = nil, m = nil, pre_match = nil, post_match = nil, $case = nil, cell_text = nil, $logical_op_recvr_tmp_2 = nil;\n\n        \n        table = $$($nesting, 'Table').$new(parent, attributes);\n        if ($truthy(($truthy($a = attributes['$key?'](\"cols\")) ? (colspecs = self.$parse_colspecs(attributes['$[]'](\"cols\")))['$empty?']()['$!']() : $a))) {\n          \n          table.$create_columns(colspecs);\n          explicit_colspecs = true;};\n        skipped = ($truthy($a = table_reader.$skip_blank_lines()) ? $a : 0);\n        if ($truthy(attributes['$[]'](\"header-option\"))) {\n          \n          $writer = [true];\n          $send(table, 'has_header_option=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy((($a = skipped['$=='](0)) ? attributes['$[]'](\"noheader-option\")['$!']() : skipped['$=='](0)))) {\n          \n          \n          $writer = [\"implicit\"];\n          $send(table, 'has_header_option=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          implicit_header = true;};\n        parser_ctx = $$$($$($nesting, 'Table'), 'ParserContext').$new(table_reader, table, attributes);\n        $a = [parser_ctx.$format(), -1, nil], (format = $a[0]), (loop_idx = $a[1]), (implicit_header_boundary = $a[2]), $a;\n        $a = false; while ($a || $truthy((line = table_reader.$read_line()))) {$a = false;\n          \n          if ($truthy(($truthy($b = (beyond_first = $rb_gt((loop_idx = $rb_plus(loop_idx, 1)), 0))) ? line['$empty?']() : $b))) {\n            \n            line = nil;\n            if ($truthy(implicit_header_boundary)) {\n              implicit_header_boundary = $rb_plus(implicit_header_boundary, 1)};\n          } else if (format['$=='](\"psv\")) {\n            if ($truthy(parser_ctx['$starts_with_delimiter?'](line))) {\n              \n              line = line.$slice(1, line.$length());\n              parser_ctx.$close_open_cell();\n              if ($truthy(implicit_header_boundary)) {\n                implicit_header_boundary = nil};\n            } else {\n              \n              $c = self.$parse_cellspec(line, \"start\", parser_ctx.$delimiter()), $b = Opal.to_ary($c), (next_cellspec = ($b[0] == null ? nil : $b[0])), (line = ($b[1] == null ? nil : $b[1])), $c;\n              if ($truthy(next_cellspec)) {\n                \n                parser_ctx.$close_open_cell(next_cellspec);\n                if ($truthy(implicit_header_boundary)) {\n                  implicit_header_boundary = nil};\n              } else if ($truthy(($truthy($b = implicit_header_boundary) ? implicit_header_boundary['$=='](loop_idx) : $b))) {\n                \n                $writer = [(implicit_header = (implicit_header_boundary = nil))];\n                $send(table, 'has_header_option=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n            }};\n          if ($truthy(beyond_first)) {\n          } else {\n            \n            table_reader.$mark();\n            if ($truthy(implicit_header)) {\n              if ($truthy(($truthy($b = table_reader['$has_more_lines?']()) ? table_reader.$peek_line()['$empty?']() : $b))) {\n                implicit_header_boundary = 1\n              } else {\n                \n                $writer = [(implicit_header = nil)];\n                $send(table, 'has_header_option=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              }};\n          };\n          $b = false; while ($b || $truthy(true)) {$b = false;\n            if ($truthy(($truthy($c = line) ? (m = parser_ctx.$match_delimiter(line)) : $c))) {\n              \n              $c = [m.$pre_match(), m.$post_match()], (pre_match = $c[0]), (post_match = $c[1]), $c;\n              $case = format;\n              if (\"csv\"['$===']($case)) {\n              if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?'](pre_match))) {\n                \n                parser_ctx.$skip_past_delimiter(pre_match);\n                if ($truthy((line = post_match)['$empty?']())) {\n                  break;};\n                $b = true; continue;;};\n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (pre_match)];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;}\n              else if (\"dsv\"['$===']($case)) {\n              if ($truthy(pre_match['$end_with?'](\"\\\\\"))) {\n                \n                parser_ctx.$skip_past_escaped_delimiter(pre_match);\n                if ($truthy((line = post_match)['$empty?']())) {\n                  \n                  \n                  $writer = [\"\" + (parser_ctx.$buffer()) + ($$($nesting, 'LF'))];\n                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  parser_ctx.$keep_cell_open();\n                  break;;};\n                $b = true; continue;;};\n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (pre_match)];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;}\n              else {\n              if ($truthy(pre_match['$end_with?'](\"\\\\\"))) {\n                \n                parser_ctx.$skip_past_escaped_delimiter(pre_match);\n                if ($truthy((line = post_match)['$empty?']())) {\n                  \n                  \n                  $writer = [\"\" + (parser_ctx.$buffer()) + ($$($nesting, 'LF'))];\n                  $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                  parser_ctx.$keep_cell_open();\n                  break;;};\n                $b = true; continue;;};\n              $d = self.$parse_cellspec(pre_match), $c = Opal.to_ary($d), (next_cellspec = ($c[0] == null ? nil : $c[0])), (cell_text = ($c[1] == null ? nil : $c[1])), $d;\n              parser_ctx.$push_cellspec(next_cellspec);\n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (cell_text)];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n              if ($truthy((line = post_match)['$empty?']())) {\n                line = nil};\n              parser_ctx.$close_cell();\n            } else {\n              \n              \n              $writer = [\"\" + (parser_ctx.$buffer()) + (line) + ($$($nesting, 'LF'))];\n              $send(parser_ctx, 'buffer=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              $case = format;\n              if (\"csv\"['$===']($case)) {if ($truthy(parser_ctx['$buffer_has_unclosed_quotes?']())) {\n                \n                if ($truthy(($truthy($c = implicit_header_boundary) ? loop_idx['$=='](0) : $c))) {\n                  \n                  $writer = [(implicit_header = (implicit_header_boundary = nil))];\n                  $send(table, 'has_header_option=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];};\n                parser_ctx.$keep_cell_open();\n              } else {\n                parser_ctx.$close_cell(true)\n              }}\n              else if (\"dsv\"['$===']($case)) {parser_ctx.$close_cell(true)}\n              else {parser_ctx.$keep_cell_open()};\n              break;;\n            }\n          };\n          if ($truthy(parser_ctx['$cell_open?']())) {\n            if ($truthy(table_reader['$has_more_lines?']())) {\n            } else {\n              parser_ctx.$close_cell(true)\n            }\n          } else {\n            if ($truthy($b = table_reader.$skip_blank_lines())) {\n              $b\n            } else {\n              break;\n            }\n          };\n        };\n        if ($truthy(($truthy($a = (($logical_op_recvr_tmp_2 = table.$attributes()), ($truthy($b = $logical_op_recvr_tmp_2['$[]'](\"colcount\")) ? $b : (($writer = [\"colcount\", table.$columns().$size()]), $send($logical_op_recvr_tmp_2, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])))['$=='](0)) ? $a : explicit_colspecs))) {\n        } else {\n          table.$assign_column_widths()\n        };\n        if ($truthy(implicit_header)) {\n          \n          $writer = [true];\n          $send(table, 'has_header_option=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        table.$partition_header_footer(attributes);\n        return table;\n      }, $Parser_parse_table$60.$$arity = 3);\n      Opal.defs(self, '$parse_colspecs', $Parser_parse_colspecs$61 = function $$parse_colspecs(records) {\n        var $$62, $$63, self = this, specs = nil;\n\n        \n        if ($truthy(records['$include?'](\" \"))) {\n          records = records.$delete(\" \")};\n        if (records['$=='](records.$to_i().$to_s())) {\n          return $send($$$('::', 'Array'), 'new', [records.$to_i()], ($$62 = function(){var self = $$62.$$s || this;\n\n          return $hash2([\"width\"], {\"width\": 1})}, $$62.$$s = self, $$62.$$arity = 0, $$62))};\n        specs = [];\n        $send((function() {if ($truthy(records['$include?'](\",\"))) {\n          \n          return records.$split(\",\", -1);\n        } else {\n          \n          return records.$split(\";\", -1);\n        }; return nil; })(), 'each', [], ($$63 = function(record){var self = $$63.$$s || this, $a, $b, $$64, m = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil, width = nil;\n\n        \n          \n          if (record == null) {\n            record = nil;\n          };\n          if ($truthy(record['$empty?']())) {\n            return specs['$<<']($hash2([\"width\"], {\"width\": 1}))\n          } else if ($truthy((m = $$($nesting, 'ColumnSpecRx').$match(record)))) {\n            \n            spec = $hash2([], {});\n            if ($truthy(m['$[]'](2))) {\n              \n              $b = m['$[]'](2).$split(\".\"), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n              if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellHorzAlignments')['$key?'](colspec) : $a))) {\n                \n                $writer = [\"halign\", $$($nesting, 'TableCellHorzAlignments')['$[]'](colspec)];\n                $send(spec, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};\n              if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellVertAlignments')['$key?'](rowspec) : $a))) {\n                \n                $writer = [\"valign\", $$($nesting, 'TableCellVertAlignments')['$[]'](rowspec)];\n                $send(spec, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];};};\n            if ($truthy((width = m['$[]'](3)))) {\n              \n              $writer = [\"width\", (function() {if (width['$=='](\"~\")) {\n                return -1\n              } else {\n                return width.$to_i()\n              }; return nil; })()];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [\"width\", 1];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if ($truthy(($truthy($a = m['$[]'](4)) ? $$($nesting, 'TableCellStyles')['$key?'](m['$[]'](4)) : $a))) {\n              \n              $writer = [\"style\", $$($nesting, 'TableCellStyles')['$[]'](m['$[]'](4))];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(m['$[]'](1))) {\n              return $send((1), 'upto', [m['$[]'](1).$to_i()], ($$64 = function(){var self = $$64.$$s || this;\n\n              return specs['$<<'](spec.$merge())}, $$64.$$s = self, $$64.$$arity = 0, $$64))\n            } else {\n              return specs['$<<'](spec)\n            };\n          } else {\n            return nil\n          };}, $$63.$$s = self, $$63.$$arity = 1, $$63));\n        return specs;\n      }, $Parser_parse_colspecs$61.$$arity = 1);\n      Opal.defs(self, '$parse_cellspec', $Parser_parse_cellspec$65 = function $$parse_cellspec(line, pos, delimiter) {\n        var $a, $b, self = this, m = nil, rest = nil, spec_part = nil, spec = nil, colspec = nil, rowspec = nil, $writer = nil;\n\n        \n        \n        if (pos == null) {\n          pos = \"end\";\n        };\n        \n        if (delimiter == null) {\n          delimiter = nil;\n        };\n        $a = [nil, \"\"], (m = $a[0]), (rest = $a[1]), $a;\n        if (pos['$=='](\"start\")) {\n          if ($truthy(line['$include?'](delimiter))) {\n            \n            $b = line.$partition(delimiter), $a = Opal.to_ary($b), (spec_part = ($a[0] == null ? nil : $a[0])), (delimiter = ($a[1] == null ? nil : $a[1])), (rest = ($a[2] == null ? nil : $a[2])), $b;\n            if ($truthy((m = $$($nesting, 'CellSpecStartRx').$match(spec_part)))) {\n              if ($truthy(m['$[]'](0)['$empty?']())) {\n                return [$hash2([], {}), rest]}\n            } else {\n              return [nil, line]\n            };\n          } else {\n            return [nil, line]\n          }\n        } else if ($truthy((m = $$($nesting, 'CellSpecEndRx').$match(line)))) {\n          \n          if ($truthy(m['$[]'](0).$lstrip()['$empty?']())) {\n            return [$hash2([], {}), line.$rstrip()]};\n          rest = m.$pre_match();\n        } else {\n          return [$hash2([], {}), line]\n        };\n        spec = $hash2([], {});\n        if ($truthy(m['$[]'](1))) {\n          \n          $b = m['$[]'](1).$split(\".\"), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n          colspec = (function() {if ($truthy(colspec['$nil_or_empty?']())) {\n            return 1\n          } else {\n            return colspec.$to_i()\n          }; return nil; })();\n          rowspec = (function() {if ($truthy(rowspec['$nil_or_empty?']())) {\n            return 1\n          } else {\n            return rowspec.$to_i()\n          }; return nil; })();\n          if (m['$[]'](2)['$=='](\"+\")) {\n            \n            if (colspec['$=='](1)) {\n            } else {\n              \n              $writer = [\"colspan\", colspec];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n            if (rowspec['$=='](1)) {\n            } else {\n              \n              $writer = [\"rowspan\", rowspec];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            };\n          } else if (m['$[]'](2)['$=='](\"*\")) {\n            if (colspec['$=='](1)) {\n            } else {\n              \n              $writer = [\"repeatcol\", colspec];\n              $send(spec, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }};};\n        if ($truthy(m['$[]'](3))) {\n          \n          $b = m['$[]'](3).$split(\".\"), $a = Opal.to_ary($b), (colspec = ($a[0] == null ? nil : $a[0])), (rowspec = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy(($truthy($a = colspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellHorzAlignments')['$key?'](colspec) : $a))) {\n            \n            $writer = [\"halign\", $$($nesting, 'TableCellHorzAlignments')['$[]'](colspec)];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy(($truthy($a = rowspec['$nil_or_empty?']()['$!']()) ? $$($nesting, 'TableCellVertAlignments')['$key?'](rowspec) : $a))) {\n            \n            $writer = [\"valign\", $$($nesting, 'TableCellVertAlignments')['$[]'](rowspec)];\n            $send(spec, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};};\n        if ($truthy(($truthy($a = m['$[]'](4)) ? $$($nesting, 'TableCellStyles')['$key?'](m['$[]'](4)) : $a))) {\n          \n          $writer = [\"style\", $$($nesting, 'TableCellStyles')['$[]'](m['$[]'](4))];\n          $send(spec, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        return [spec, rest];\n      }, $Parser_parse_cellspec$65.$$arity = -2);\n      Opal.defs(self, '$parse_style_attribute', $Parser_parse_style_attribute$66 = function $$parse_style_attribute(attributes, reader) {\n        var $a, $b, $$67, $$68, self = this, raw_style = nil, name = nil, accum = nil, parsed_attrs = nil, parsed_style = nil, $writer = nil, existing_role = nil;\n\n        \n        \n        if (reader == null) {\n          reader = nil;\n        };\n        if ($truthy(($truthy($a = ($truthy($b = (raw_style = attributes['$[]'](1))) ? raw_style['$include?'](\" \")['$!']() : $b)) ? $$($nesting, 'Compliance').$shorthand_property_syntax() : $a))) {\n          \n          name = nil;\n          accum = \"\";\n          parsed_attrs = $hash2([], {});\n          $send(raw_style, 'each_char', [], ($$67 = function(c){var self = $$67.$$s || this, $case = nil;\n\n          \n            \n            if (c == null) {\n              c = nil;\n            };\n            return (function() {$case = c;\n            if (\".\"['$===']($case)) {\n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            accum = \"\";\n            return (name = \"role\");}\n            else if (\"#\"['$===']($case)) {\n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            accum = \"\";\n            return (name = \"id\");}\n            else if (\"%\"['$===']($case)) {\n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            accum = \"\";\n            return (name = \"option\");}\n            else {return (accum = $rb_plus(accum, c))}})();}, $$67.$$s = self, $$67.$$arity = 1, $$67));\n          if ($truthy(name)) {\n            \n            self.$yield_buffered_attribute(parsed_attrs, name, accum, reader);\n            if ($truthy((parsed_style = parsed_attrs['$[]'](\"style\")))) {\n              \n              $writer = [\"style\", parsed_style];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(parsed_attrs['$key?'](\"id\"))) {\n              \n              $writer = [\"id\", parsed_attrs['$[]'](\"id\")];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(parsed_attrs['$key?'](\"role\"))) {\n              \n              $writer = [\"role\", (function() {if ($truthy((existing_role = attributes['$[]'](\"role\"))['$nil_or_empty?']())) {\n                \n                return parsed_attrs['$[]'](\"role\").$join(\" \");\n              } else {\n                return \"\" + (existing_role) + \" \" + (parsed_attrs['$[]'](\"role\").$join(\" \"))\n              }; return nil; })()];\n              $send(attributes, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            if ($truthy(parsed_attrs['$key?'](\"option\"))) {\n              $send(parsed_attrs['$[]'](\"option\"), 'each', [], ($$68 = function(opt){var self = $$68.$$s || this;\n\n              \n                \n                if (opt == null) {\n                  opt = nil;\n                };\n                $writer = [\"\" + (opt) + \"-option\", \"\"];\n                $send(attributes, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];}, $$68.$$s = self, $$68.$$arity = 1, $$68))};\n            return parsed_style;\n          } else {\n            \n            $writer = [\"style\", raw_style];\n            $send(attributes, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n        } else {\n          \n          $writer = [\"style\", raw_style];\n          $send(attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n      }, $Parser_parse_style_attribute$66.$$arity = -2);\n      Opal.defs(self, '$yield_buffered_attribute', $Parser_yield_buffered_attribute$69 = function $$yield_buffered_attribute(attrs, name, value, reader) {\n        var $a, self = this, $writer = nil;\n\n        \n        if ($truthy(name)) {\n          if ($truthy(value['$empty?']())) {\n            if ($truthy(reader)) {\n              self.$logger().$warn(self.$message_with_context(\"\" + \"invalid empty \" + (name) + \" detected in style attribute\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})))\n            } else {\n              self.$logger().$warn(\"\" + \"invalid empty \" + (name) + \" detected in style attribute\")\n            }\n          } else if (name['$=='](\"id\")) {\n            \n            if ($truthy(attrs['$key?'](\"id\"))) {\n              if ($truthy(reader)) {\n                self.$logger().$warn(self.$message_with_context(\"multiple ids detected in style attribute\", $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})))\n              } else {\n                self.$logger().$warn(\"multiple ids detected in style attribute\")\n              }};\n            \n            $writer = [name, value];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            ($truthy($a = attrs['$[]'](name)) ? $a : (($writer = [name, []]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))['$<<'](value)\n          }\n        } else if ($truthy(value['$empty?']())) {\n        } else {\n          \n          $writer = [\"style\", value];\n          $send(attrs, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        };\n        return nil;\n      }, $Parser_yield_buffered_attribute$69.$$arity = 4);\n      Opal.defs(self, '$adjust_indentation!', $Parser_adjust_indentation$excl$70 = function(lines, indent_size, tab_size) {\n        var $a, $$71, $$72, $$75, $$76, $$77, $$78, self = this, full_tab_space = nil, block_indent = nil, new_block_indent = nil;\n\n        \n        \n        if (indent_size == null) {\n          indent_size = 0;\n        };\n        \n        if (tab_size == null) {\n          tab_size = 0;\n        };\n        if ($truthy(lines['$empty?']())) {\n          return nil};\n        if ($truthy(($truthy($a = $rb_gt(tab_size, 0)) ? $send(lines, 'any?', [], ($$71 = function(line){var self = $$71.$$s || this;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          return line['$include?']($$($nesting, 'TAB'));}, $$71.$$s = self, $$71.$$arity = 1, $$71)) : $a))) {\n          \n          full_tab_space = $rb_times(\" \", tab_size);\n          (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'map!', [], ($$72 = function(line){var self = $$72.$$s || this, $$73, $$74, tab_idx = nil, leading_tabs = nil, spaces_added = nil, idx = nil, result = nil;\n\n          \n            \n            if (line == null) {\n              line = nil;\n            };\n            if ($truthy(line['$empty?']())) {\n              return line\n            } else if ($truthy((tab_idx = line.$index($$($nesting, 'TAB'))))) {\n              \n              if (tab_idx['$=='](0)) {\n                \n                leading_tabs = 0;\n                (function(){var $brk = Opal.new_brk(); try {return $send(line, 'each_byte', [], ($$73 = function(b){var self = $$73.$$s || this;\n\n                \n                  \n                  if (b == null) {\n                    b = nil;\n                  };\n                  if (b['$=='](9)) {\n                  } else {\n                    \n                    Opal.brk(nil, $brk)\n                  };\n                  return (leading_tabs = $rb_plus(leading_tabs, 1));}, $$73.$$s = self, $$73.$$brk = $brk, $$73.$$arity = 1, $$73))\n                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n                line = \"\" + ($rb_times(full_tab_space, leading_tabs)) + (line.$slice(leading_tabs, line.$length()));\n                if ($truthy(line['$include?']($$($nesting, 'TAB')))) {\n                } else {\n                  return line;\n                };};\n              spaces_added = 0;\n              idx = 0;\n              result = \"\";\n              $send(line, 'each_char', [], ($$74 = function(c){var self = $$74.$$s || this, offset = nil, spaces = nil;\n\n              \n                \n                if (c == null) {\n                  c = nil;\n                };\n                if (c['$==']($$($nesting, 'TAB'))) {\n                  if ((offset = $rb_plus(idx, spaces_added))['$%'](tab_size)['$=='](0)) {\n                    \n                    spaces_added = $rb_plus(spaces_added, $rb_minus(tab_size, 1));\n                    result = $rb_plus(result, full_tab_space);\n                  } else {\n                    \n                    if ((spaces = $rb_minus(tab_size, offset['$%'](tab_size)))['$=='](1)) {\n                    } else {\n                      spaces_added = $rb_plus(spaces_added, $rb_minus(spaces, 1))\n                    };\n                    result = $rb_plus(result, $rb_times(\" \", spaces));\n                  }\n                } else {\n                  result = $rb_plus(result, c)\n                };\n                return (idx = $rb_plus(idx, 1));}, $$74.$$s = self, $$74.$$arity = 1, $$74));\n              return result;\n            } else {\n              return line\n            };}, $$72.$$s = self, $$72.$$brk = $brk, $$72.$$arity = 1, $$72))\n          } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();};\n        if ($truthy($rb_lt(indent_size, 0))) {\n          return nil};\n        block_indent = nil;\n        (function(){var $brk = Opal.new_brk(); try {return $send(lines, 'each', [], ($$75 = function(line){var self = $$75.$$s || this, $b, line_indent = nil;\n\n        \n          \n          if (line == null) {\n            line = nil;\n          };\n          if ($truthy(line['$empty?']())) {\n            return nil;};\n          if ((line_indent = $rb_minus(line.$length(), line.$lstrip().$length()))['$=='](0)) {\n            \n            block_indent = nil;\n            \n            Opal.brk(nil, $brk);};\n          if ($truthy(($truthy($b = block_indent) ? $rb_lt(block_indent, line_indent) : $b))) {\n            return nil\n          } else {\n            return (block_indent = line_indent)\n          };}, $$75.$$s = self, $$75.$$brk = $brk, $$75.$$arity = 1, $$75))\n        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n        if (indent_size['$=='](0)) {\n          if ($truthy(block_indent)) {\n            $send(lines, 'map!', [], ($$76 = function(line){var self = $$76.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                \n                return line.$slice(block_indent, line.$length());\n              };}, $$76.$$s = self, $$76.$$arity = 1, $$76))}\n        } else {\n          \n          new_block_indent = $rb_times(\" \", indent_size);\n          if ($truthy(block_indent)) {\n            $send(lines, 'map!', [], ($$77 = function(line){var self = $$77.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                return $rb_plus(new_block_indent, line.$slice(block_indent, line.$length()))\n              };}, $$77.$$s = self, $$77.$$arity = 1, $$77))\n          } else {\n            $send(lines, 'map!', [], ($$78 = function(line){var self = $$78.$$s || this;\n\n            \n              \n              if (line == null) {\n                line = nil;\n              };\n              if ($truthy(line['$empty?']())) {\n                return line\n              } else {\n                return $rb_plus(new_block_indent, line)\n              };}, $$78.$$s = self, $$78.$$arity = 1, $$78))\n          };\n        };\n        return nil;\n      }, $Parser_adjust_indentation$excl$70.$$arity = -2);\n      Opal.defs(self, '$uniform?', $Parser_uniform$ques$79 = function(str, chr, len) {\n        var self = this;\n\n        return str.$count(chr)['$=='](len)\n      }, $Parser_uniform$ques$79.$$arity = 3);\n      return (Opal.defs(self, '$sanitize_attribute_name', $Parser_sanitize_attribute_name$80 = function $$sanitize_attribute_name(name) {\n        var self = this;\n\n        return name.$gsub($$($nesting, 'InvalidAttributeNameCharsRx'), \"\").$downcase()\n      }, $Parser_sanitize_attribute_name$80.$$arity = 1), nil) && 'sanitize_attribute_name';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/path_resolver\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$include', '$attr_accessor', '$root?', '$posixify', '$expand_path', '$pwd', '$start_with?', '$==', '$match?', '$absolute_path?', '$+', '$length', '$descends_from?', '$slice', '$to_s', '$relative_path_from', '$new', '$include?', '$tr', '$partition_path', '$each', '$pop', '$<<', '$join_path', '$[]', '$web_root?', '$unc?', '$index', '$split', '$delete', '$[]=', '$-', '$join', '$raise', '$!', '$fetch', '$warn', '$logger', '$empty?', '$nil_or_empty?', '$chomp', '$!=', '$>', '$size', '$extract_uri_prefix', '$end_with?', '$gsub', '$private', '$=~']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PathResolver');\n\n      var $nesting = [self].concat($parent_nesting), $PathResolver_initialize$1, $PathResolver_absolute_path$ques$2, $a, $PathResolver_root$ques$3, $PathResolver_unc$ques$4, $PathResolver_web_root$ques$5, $PathResolver_descends_from$ques$6, $PathResolver_relative_path$7, $PathResolver_posixify$8, $PathResolver_expand_path$9, $PathResolver_partition_path$11, $PathResolver_join_path$12, $PathResolver_system_path$13, $PathResolver_web_path$16, $PathResolver_extract_uri_prefix$18;\n\n      self.$$prototype.file_separator = self.$$prototype._partition_path_web = self.$$prototype._partition_path_sys = self.$$prototype.working_dir = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      Opal.const_set($nesting[0], 'DOT', \".\");\n      Opal.const_set($nesting[0], 'DOT_DOT', \"..\");\n      Opal.const_set($nesting[0], 'DOT_SLASH', \"./\");\n      Opal.const_set($nesting[0], 'SLASH', \"/\");\n      Opal.const_set($nesting[0], 'BACKSLASH', \"\\\\\");\n      Opal.const_set($nesting[0], 'DOUBLE_SLASH', \"//\");\n      Opal.const_set($nesting[0], 'WindowsRootRx', /^(?:[a-zA-Z]:)?[\\\\\\/]/);\n      self.$attr_accessor(\"file_separator\");\n      self.$attr_accessor(\"working_dir\");\n      \n      Opal.def(self, '$initialize', $PathResolver_initialize$1 = function $$initialize(file_separator, working_dir) {\n        var $a, $b, self = this;\n\n        \n        \n        if (file_separator == null) {\n          file_separator = nil;\n        };\n        \n        if (working_dir == null) {\n          working_dir = nil;\n        };\n        self.file_separator = ($truthy($a = ($truthy($b = file_separator) ? $b : $$$($$$('::', 'File'), 'ALT_SEPARATOR'))) ? $a : $$$($$$('::', 'File'), 'SEPARATOR'));\n        self.working_dir = (function() {if ($truthy(working_dir)) {\n          \n          if ($truthy(self['$root?'](working_dir))) {\n            \n            return self.$posixify(working_dir);\n          } else {\n            \n            return $$$('::', 'File').$expand_path(working_dir);\n          };\n        } else {\n          return $$$('::', 'Dir').$pwd()\n        }; return nil; })();\n        self._partition_path_sys = $hash2([], {});\n        return (self._partition_path_web = $hash2([], {}));\n      }, $PathResolver_initialize$1.$$arity = -1);\n      \n      Opal.def(self, '$absolute_path?', $PathResolver_absolute_path$ques$2 = function(path) {\n        var $a, $b, self = this;\n\n        return ($truthy($a = path['$start_with?']($$($nesting, 'SLASH'))) ? $a : (($b = self.file_separator['$==']($$($nesting, 'BACKSLASH'))) ? $$($nesting, 'WindowsRootRx')['$match?'](path) : self.file_separator['$==']($$($nesting, 'BACKSLASH'))))\n      }, $PathResolver_absolute_path$ques$2.$$arity = 1);\n      if ($truthy((($a = $$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) ? $$$('::', 'JAVASCRIPT_IO_MODULE')['$=='](\"xmlhttprequest\") : $$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")))) {\n        \n        Opal.def(self, '$root?', $PathResolver_root$ques$3 = function(path) {\n          var $a, self = this;\n\n          return ($truthy($a = self['$absolute_path?'](path)) ? $a : path['$start_with?'](\"file://\", \"http://\", \"https://\"))\n        }, $PathResolver_root$ques$3.$$arity = 1)\n      } else {\n        Opal.alias(self, \"root?\", \"absolute_path?\")\n      };\n      \n      Opal.def(self, '$unc?', $PathResolver_unc$ques$4 = function(path) {\n        var self = this;\n\n        return path['$start_with?']($$($nesting, 'DOUBLE_SLASH'))\n      }, $PathResolver_unc$ques$4.$$arity = 1);\n      \n      Opal.def(self, '$web_root?', $PathResolver_web_root$ques$5 = function(path) {\n        var self = this;\n\n        return path['$start_with?']($$($nesting, 'SLASH'))\n      }, $PathResolver_web_root$ques$5.$$arity = 1);\n      \n      Opal.def(self, '$descends_from?', $PathResolver_descends_from$ques$6 = function(path, base) {\n        var $a, self = this;\n\n        if (base['$=='](path)) {\n          return 0\n        } else if (base['$==']($$($nesting, 'SLASH'))) {\n          return ($truthy($a = path['$start_with?']($$($nesting, 'SLASH'))) ? 1 : $a)\n        } else {\n          return ($truthy($a = path['$start_with?']($rb_plus(base, $$($nesting, 'SLASH')))) ? $rb_plus(base.$length(), 1) : $a)\n        }\n      }, $PathResolver_descends_from$ques$6.$$arity = 2);\n      \n      Opal.def(self, '$relative_path', $PathResolver_relative_path$7 = function $$relative_path(path, base) {\n        var self = this, offset = nil;\n\n        if ($truthy(self['$root?'](path))) {\n          if ($truthy((offset = self['$descends_from?'](path, base)))) {\n            return path.$slice(offset, path.$length())\n          } else {\n            \n            try {\n              return $$($nesting, 'Pathname').$new(path).$relative_path_from($$($nesting, 'Pathname').$new(base)).$to_s()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  return path\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n          }\n        } else {\n          return path\n        }\n      }, $PathResolver_relative_path$7.$$arity = 2);\n      \n      Opal.def(self, '$posixify', $PathResolver_posixify$8 = function $$posixify(path) {\n        var $a, self = this;\n\n        if ($truthy(path)) {\n          if ($truthy((($a = self.file_separator['$==']($$($nesting, 'BACKSLASH'))) ? path['$include?']($$($nesting, 'BACKSLASH')) : self.file_separator['$==']($$($nesting, 'BACKSLASH'))))) {\n            \n            return path.$tr($$($nesting, 'BACKSLASH'), $$($nesting, 'SLASH'));\n          } else {\n            return path\n          }\n        } else {\n          return \"\"\n        }\n      }, $PathResolver_posixify$8.$$arity = 1);\n      Opal.alias(self, \"posixfy\", \"posixify\");\n      \n      Opal.def(self, '$expand_path', $PathResolver_expand_path$9 = function $$expand_path(path) {\n        var $a, $b, $$10, self = this, path_segments = nil, path_root = nil, resolved_segments = nil;\n\n        \n        $b = self.$partition_path(path), $a = Opal.to_ary($b), (path_segments = ($a[0] == null ? nil : $a[0])), (path_root = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy(path['$include?']($$($nesting, 'DOT_DOT')))) {\n          \n          resolved_segments = [];\n          $send(path_segments, 'each', [], ($$10 = function(segment){var self = $$10.$$s || this;\n\n          \n            \n            if (segment == null) {\n              segment = nil;\n            };\n            if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n              return resolved_segments.$pop()\n            } else {\n              return resolved_segments['$<<'](segment)\n            };}, $$10.$$s = self, $$10.$$arity = 1, $$10));\n          return self.$join_path(resolved_segments, path_root);\n        } else {\n          return self.$join_path(path_segments, path_root)\n        };\n      }, $PathResolver_expand_path$9.$$arity = 1);\n      \n      Opal.def(self, '$partition_path', $PathResolver_partition_path$11 = function $$partition_path(path, web) {\n        var self = this, result = nil, cache = nil, posix_path = nil, root = nil, path_segments = nil, $writer = nil;\n\n        \n        \n        if (web == null) {\n          web = nil;\n        };\n        if ($truthy((result = (cache = (function() {if ($truthy(web)) {\n          return self._partition_path_web\n        } else {\n          return self._partition_path_sys\n        }; return nil; })())['$[]'](path)))) {\n          return result};\n        posix_path = self.$posixify(path);\n        if ($truthy(web)) {\n          if ($truthy(self['$web_root?'](posix_path))) {\n            root = $$($nesting, 'SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$($nesting, 'DOT_SLASH')))) {\n            root = $$($nesting, 'DOT_SLASH')}\n        } else if ($truthy(self['$root?'](posix_path))) {\n          if ($truthy(self['$unc?'](posix_path))) {\n            root = $$($nesting, 'DOUBLE_SLASH')\n          } else if ($truthy(posix_path['$start_with?']($$($nesting, 'SLASH')))) {\n            root = $$($nesting, 'SLASH')\n          } else {\n            root = posix_path.$slice(0, $rb_plus(posix_path.$index($$($nesting, 'SLASH')), 1))\n          }\n        } else if ($truthy(posix_path['$start_with?']($$($nesting, 'DOT_SLASH')))) {\n          root = $$($nesting, 'DOT_SLASH')};\n        path_segments = (function() {if ($truthy(root)) {\n          \n          return posix_path.$slice(root.$length(), posix_path.$length());\n        } else {\n          return posix_path\n        }; return nil; })().$split($$($nesting, 'SLASH'));\n        path_segments.$delete($$($nesting, 'DOT'));\n        \n        $writer = [path, [path_segments, root]];\n        $send(cache, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $PathResolver_partition_path$11.$$arity = -2);\n      \n      Opal.def(self, '$join_path', $PathResolver_join_path$12 = function $$join_path(segments, root) {\n        var self = this;\n\n        \n        \n        if (root == null) {\n          root = nil;\n        };\n        if ($truthy(root)) {\n          return \"\" + (root) + (segments.$join($$($nesting, 'SLASH')))\n        } else {\n          \n          return segments.$join($$($nesting, 'SLASH'));\n        };\n      }, $PathResolver_join_path$12.$$arity = -2);\n      \n      Opal.def(self, '$system_path', $PathResolver_system_path$13 = function $$system_path(target, start, jail, opts) {\n        var $a, $b, $$14, $$15, self = this, target_path = nil, target_segments = nil, jail_segments = nil, jail_root = nil, recheck = nil, start_segments = nil, start_root = nil, resolved_segments = nil, unresolved_segments = nil, warned = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        \n        if (jail == null) {\n          jail = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(jail)) {\n          \n          if ($truthy(self['$root?'](jail))) {\n          } else {\n            self.$raise($$$('::', 'SecurityError'), \"\" + \"Jail is not an absolute path: \" + (jail))\n          };\n          jail = self.$posixify(jail);};\n        if ($truthy(target)) {\n          if ($truthy(self['$root?'](target))) {\n            \n            target_path = self.$expand_path(target);\n            if ($truthy(($truthy($a = jail) ? self['$descends_from?'](target_path, jail)['$!']() : $a))) {\n              if ($truthy(opts.$fetch(\"recover\", true))) {\n                \n                self.$logger().$warn(\"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" is outside of jail; recovering automatically\");\n                $b = self.$partition_path(target_path), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b;\n                $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;\n                return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);\n              } else {\n                self.$raise($$$('::', 'SecurityError'), \"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" \" + (target) + \" is outside of jail: \" + (jail) + \" (disallowed in safe mode)\")\n              }};\n            return target_path;\n          } else {\n            $b = self.$partition_path(target), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b\n          }\n        } else {\n          target_segments = []\n        };\n        if ($truthy(target_segments['$empty?']())) {\n          if ($truthy(start['$nil_or_empty?']())) {\n            return ($truthy($a = jail) ? $a : self.working_dir)\n          } else if ($truthy(self['$root?'](start))) {\n            if ($truthy(jail)) {\n              start = self.$posixify(start)\n            } else {\n              return self.$expand_path(start)\n            }\n          } else {\n            \n            $b = self.$partition_path(start), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), $b;\n            start = ($truthy($a = jail) ? $a : self.working_dir);\n          }\n        } else if ($truthy(start['$nil_or_empty?']())) {\n          start = ($truthy($a = jail) ? $a : self.working_dir)\n        } else if ($truthy(self['$root?'](start))) {\n          if ($truthy(jail)) {\n            start = self.$posixify(start)}\n        } else {\n          start = \"\" + (($truthy($a = jail) ? $a : self.working_dir).$chomp(\"/\")) + \"/\" + (start)\n        };\n        if ($truthy(($truthy($a = ($truthy($b = jail) ? (recheck = self['$descends_from?'](start, jail)['$!']()) : $b)) ? self.file_separator['$==']($$($nesting, 'BACKSLASH')) : $a))) {\n          \n          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (start_root = ($a[1] == null ? nil : $a[1])), $b;\n          $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy(start_root['$!='](jail_root))) {\n            if ($truthy(opts.$fetch(\"recover\", true))) {\n              \n              self.$logger().$warn(\"\" + \"start path for \" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" is outside of jail root; recovering automatically\");\n              start_segments = jail_segments;\n              recheck = false;\n            } else {\n              self.$raise($$$('::', 'SecurityError'), \"\" + \"start path for \" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" \" + (start) + \" refers to location outside jail root: \" + (jail) + \" (disallowed in safe mode)\")\n            }};\n        } else {\n          $b = self.$partition_path(start), $a = Opal.to_ary($b), (start_segments = ($a[0] == null ? nil : $a[0])), (jail_root = ($a[1] == null ? nil : $a[1])), $b\n        };\n        if ($truthy((resolved_segments = $rb_plus(start_segments, target_segments))['$include?']($$($nesting, 'DOT_DOT')))) {\n          \n          $a = [resolved_segments, []], (unresolved_segments = $a[0]), (resolved_segments = $a[1]), $a;\n          if ($truthy(jail)) {\n            \n            if ($truthy(jail_segments)) {\n            } else {\n              $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), $b\n            };\n            warned = false;\n            $send(unresolved_segments, 'each', [], ($$14 = function(segment){var self = $$14.$$s || this, $c;\n\n            \n              \n              if (segment == null) {\n                segment = nil;\n              };\n              if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n                if ($truthy($rb_gt(resolved_segments.$size(), jail_segments.$size()))) {\n                  return resolved_segments.$pop()\n                } else if ($truthy(opts.$fetch(\"recover\", true))) {\n                  if ($truthy(warned)) {\n                    return nil\n                  } else {\n                    \n                    self.$logger().$warn(\"\" + (($truthy($c = opts['$[]'](\"target_name\")) ? $c : \"path\")) + \" has illegal reference to ancestor of jail; recovering automatically\");\n                    return (warned = true);\n                  }\n                } else {\n                  return self.$raise($$$('::', 'SecurityError'), \"\" + (($truthy($c = opts['$[]'](\"target_name\")) ? $c : \"path\")) + \" \" + (target) + \" refers to location outside jail: \" + (jail) + \" (disallowed in safe mode)\")\n                }\n              } else {\n                return resolved_segments['$<<'](segment)\n              };}, $$14.$$s = self, $$14.$$arity = 1, $$14));\n          } else {\n            $send(unresolved_segments, 'each', [], ($$15 = function(segment){var self = $$15.$$s || this;\n\n            \n              \n              if (segment == null) {\n                segment = nil;\n              };\n              if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n                return resolved_segments.$pop()\n              } else {\n                return resolved_segments['$<<'](segment)\n              };}, $$15.$$s = self, $$15.$$arity = 1, $$15))\n          };};\n        if ($truthy(recheck)) {\n          \n          target_path = self.$join_path(resolved_segments, jail_root);\n          if ($truthy(self['$descends_from?'](target_path, jail))) {\n            return target_path\n          } else if ($truthy(opts.$fetch(\"recover\", true))) {\n            \n            self.$logger().$warn(\"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" is outside of jail; recovering automatically\");\n            if ($truthy(jail_segments)) {\n            } else {\n              $b = self.$partition_path(jail), $a = Opal.to_ary($b), (jail_segments = ($a[0] == null ? nil : $a[0])), $b\n            };\n            return self.$join_path($rb_plus(jail_segments, target_segments), jail_root);\n          } else {\n            return self.$raise($$$('::', 'SecurityError'), \"\" + (($truthy($a = opts['$[]'](\"target_name\")) ? $a : \"path\")) + \" \" + (target) + \" is outside of jail: \" + (jail) + \" (disallowed in safe mode)\")\n          };\n        } else {\n          return self.$join_path(resolved_segments, jail_root)\n        };\n      }, $PathResolver_system_path$13.$$arity = -2);\n      \n      Opal.def(self, '$web_path', $PathResolver_web_path$16 = function $$web_path(target, start) {\n        var $a, $b, $$17, self = this, uri_prefix = nil, target_segments = nil, target_root = nil, resolved_segments = nil, resolved_path = nil;\n\n        \n        \n        if (start == null) {\n          start = nil;\n        };\n        target = self.$posixify(target);\n        start = self.$posixify(start);\n        if ($truthy(($truthy($a = start['$nil_or_empty?']()) ? $a : self['$web_root?'](target)))) {\n        } else {\n          $b = self.$extract_uri_prefix(\"\" + (start) + ((function() {if ($truthy(start['$end_with?']($$($nesting, 'SLASH')))) {\n            return \"\"\n          } else {\n            return $$($nesting, 'SLASH')\n          }; return nil; })()) + (target)), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (uri_prefix = ($a[1] == null ? nil : $a[1])), $b\n        };\n        $b = self.$partition_path(target, true), $a = Opal.to_ary($b), (target_segments = ($a[0] == null ? nil : $a[0])), (target_root = ($a[1] == null ? nil : $a[1])), $b;\n        resolved_segments = [];\n        $send(target_segments, 'each', [], ($$17 = function(segment){var self = $$17.$$s || this, $c;\n\n        \n          \n          if (segment == null) {\n            segment = nil;\n          };\n          if (segment['$==']($$($nesting, 'DOT_DOT'))) {\n            if ($truthy(resolved_segments['$empty?']())) {\n              if ($truthy(($truthy($c = target_root) ? target_root['$!=']($$($nesting, 'DOT_SLASH')) : $c))) {\n                return nil\n              } else {\n                return resolved_segments['$<<'](segment)\n              }\n            } else if (resolved_segments['$[]'](-1)['$==']($$($nesting, 'DOT_DOT'))) {\n              return resolved_segments['$<<'](segment)\n            } else {\n              return resolved_segments.$pop()\n            }\n          } else {\n            return resolved_segments['$<<'](segment)\n          };}, $$17.$$s = self, $$17.$$arity = 1, $$17));\n        if ($truthy((resolved_path = self.$join_path(resolved_segments, target_root))['$include?'](\" \"))) {\n          resolved_path = resolved_path.$gsub(\" \", \"%20\")};\n        if ($truthy(uri_prefix)) {\n          return \"\" + (uri_prefix) + (resolved_path)\n        } else {\n          return resolved_path\n        };\n      }, $PathResolver_web_path$16.$$arity = -2);\n      self.$private();\n      return (Opal.def(self, '$extract_uri_prefix', $PathResolver_extract_uri_prefix$18 = function $$extract_uri_prefix(str) {\n        var $a, self = this;\n\n        if ($truthy(($truthy($a = str['$include?'](\":\")) ? $$($nesting, 'UriSniffRx')['$=~'](str) : $a))) {\n          return [str.$slice((($a = $gvars['~']) === nil ? nil : $a['$[]'](0)).$length(), str.$length()), (($a = $gvars['~']) === nil ? nil : $a['$[]'](0))]\n        } else {\n          return str\n        }\n      }, $PathResolver_extract_uri_prefix$18.$$arity = 1), nil) && 'extract_uri_prefix';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/reader\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars, $hash = Opal.hash;\n\n  Opal.add_stubs(['$include', '$attr_reader', '$+', '$attr_accessor', '$!', '$===', '$split', '$file', '$dir', '$dirname', '$path', '$basename', '$lineno', '$prepare_lines', '$drop', '$empty?', '$nil_or_empty?', '$peek_line', '$>', '$slice', '$[]', '$length', '$process_line', '$times', '$shift', '$read_line', '$<<', '$-', '$unshift_all', '$has_more_lines?', '$join', '$read_lines', '$unshift', '$start_with?', '$==', '$*', '$read_lines_until', '$size', '$clear', '$cursor', '$[]=', '$!=', '$fetch', '$cursor_at_mark', '$warn', '$logger', '$message_with_context', '$new', '$tap', '$each', '$instance_variables', '$instance_variable_get', '$instance_variable_set', '$class', '$object_id', '$inspect', '$private', '$prepare_source_array', '$prepare_source_string', '$chomp', '$valid_encoding?', '$to_s', '$raise', '$to_i', '$attributes', '$catalog', '$pop_include', '$parse', '$path=', '$dup', '$end_with?', '$keys', '$rindex', '$rootname', '$key?', '$attr', '$>=', '$nil?', '$extensions?', '$include_processors?', '$extensions', '$include_processors', '$map', '$skip_front_matter!', '$pop', '$adjust_indentation!', '$include?', '$=~', '$preprocess_conditional_directive', '$preprocess_include_directive', '$downcase', '$error', '$none?', '$any?', '$all?', '$strip', '$send', '$resolve_expr_val', '$replace_next_line', '$rstrip', '$sub_attributes', '$attribute_missing', '$info', '$parse_attributes', '$find', '$handles?', '$instance', '$process_method', '$safe', '$resolve_include_path', '$method', '$split_delimited_value', '$partition', '$<', '$/', '$to_a', '$uniq', '$sort', '$call', '$each_line', '$infinite?', '$push_include', '$delete', '$value?', '$create_include_cursor', '$delete_at', '$read', '$uriish?', '$attr?', '$require_library', '$normalize_system_path', '$file?', '$relative_path', '$path_resolver', '$base_dir', '$to_f']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Reader');\n\n      var $nesting = [self].concat($parent_nesting), $Reader_initialize$4, $Reader_has_more_lines$ques$5, $Reader_empty$ques$6, $Reader_next_line_empty$ques$7, $Reader_peek_line$8, $Reader_peek_lines$9, $Reader_read_line$11, $Reader_read_lines$12, $Reader_read$13, $Reader_advance$14, $Reader_unshift_line$15, $Reader_unshift_lines$16, $Reader_replace_next_line$17, $Reader_skip_blank_lines$18, $Reader_skip_comment_lines$19, $Reader_skip_line_comments$20, $Reader_terminate$21, $Reader_read_lines_until$22, $Reader_shift$23, $Reader_unshift$24, $Reader_unshift_all$25, $Reader_cursor$26, $Reader_cursor_at_line$27, $Reader_cursor_at_mark$28, $Reader_cursor_before_mark$29, $Reader_cursor_at_prev_line$30, $Reader_mark$31, $Reader_line_info$32, $Reader_lines$33, $Reader_string$34, $Reader_source$35, $Reader_save$36, $Reader_restore_save$39, $Reader_discard_save$41, $Reader_to_s$42, $Reader_prepare_lines$43, $Reader_process_line$44;\n\n      self.$$prototype.file = self.$$prototype.lines = self.$$prototype.look_ahead = self.$$prototype.unescape_next_line = self.$$prototype.lineno = self.$$prototype.process_lines = self.$$prototype.dir = self.$$prototype.path = self.$$prototype.mark = self.$$prototype.source_lines = self.$$prototype.saved = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Cursor');\n\n        var $nesting = [self].concat($parent_nesting), $Cursor_initialize$1, $Cursor_advance$2, $Cursor_line_info$3;\n\n        self.$$prototype.lineno = self.$$prototype.path = nil;\n        \n        self.$attr_reader(\"file\", \"dir\", \"path\", \"lineno\");\n        \n        Opal.def(self, '$initialize', $Cursor_initialize$1 = function $$initialize(file, dir, path, lineno) {\n          var $a, self = this;\n\n          \n          \n          if (dir == null) {\n            dir = nil;\n          };\n          \n          if (path == null) {\n            path = nil;\n          };\n          \n          if (lineno == null) {\n            lineno = 1;\n          };\n          return $a = [file, dir, path, lineno], (self.file = $a[0]), (self.dir = $a[1]), (self.path = $a[2]), (self.lineno = $a[3]), $a;\n        }, $Cursor_initialize$1.$$arity = -2);\n        \n        Opal.def(self, '$advance', $Cursor_advance$2 = function $$advance(num) {\n          var self = this;\n\n          return (self.lineno = $rb_plus(self.lineno, num))\n        }, $Cursor_advance$2.$$arity = 1);\n        \n        Opal.def(self, '$line_info', $Cursor_line_info$3 = function $$line_info() {\n          var self = this;\n\n          return \"\" + (self.path) + \": line \" + (self.lineno)\n        }, $Cursor_line_info$3.$$arity = 0);\n        return Opal.alias(self, \"to_s\", \"line_info\");\n      })($nesting[0], null, $nesting);\n      self.$attr_reader(\"file\");\n      self.$attr_reader(\"dir\");\n      self.$attr_reader(\"path\");\n      self.$attr_reader(\"lineno\");\n      self.$attr_reader(\"source_lines\");\n      self.$attr_accessor(\"process_lines\");\n      self.$attr_accessor(\"unterminated\");\n      \n      Opal.def(self, '$initialize', $Reader_initialize$4 = function $$initialize(data, cursor, opts) {\n        var $a, $b, self = this;\n\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        \n        if (cursor == null) {\n          cursor = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(cursor['$!']())) {\n          \n          self.file = nil;\n          self.dir = \".\";\n          self.path = \"<stdin>\";\n          self.lineno = 1;\n        } else if ($truthy($$$('::', 'String')['$==='](cursor))) {\n          \n          self.file = cursor;\n          $b = $$$('::', 'File').$split(self.file), $a = Opal.to_ary($b), (self.dir = ($a[0] == null ? nil : $a[0])), (self.path = ($a[1] == null ? nil : $a[1])), $b;\n          self.lineno = 1;\n        } else {\n          \n          if ($truthy((self.file = cursor.$file()))) {\n            \n            self.dir = ($truthy($a = cursor.$dir()) ? $a : $$$('::', 'File').$dirname(self.file));\n            self.path = ($truthy($a = cursor.$path()) ? $a : $$$('::', 'File').$basename(self.file));\n          } else {\n            \n            self.dir = ($truthy($a = cursor.$dir()) ? $a : \".\");\n            self.path = ($truthy($a = cursor.$path()) ? $a : \"<stdin>\");\n          };\n          self.lineno = ($truthy($a = cursor.$lineno()) ? $a : 1);\n        };\n        self.lines = self.$prepare_lines(data, opts);\n        self.source_lines = self.lines.$drop(0);\n        self.mark = nil;\n        self.look_ahead = 0;\n        self.process_lines = true;\n        self.unescape_next_line = false;\n        self.unterminated = nil;\n        return (self.saved = nil);\n      }, $Reader_initialize$4.$$arity = -1);\n      \n      Opal.def(self, '$has_more_lines?', $Reader_has_more_lines$ques$5 = function() {\n        var self = this;\n\n        if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return false;\n        } else {\n          return true\n        }\n      }, $Reader_has_more_lines$ques$5.$$arity = 0);\n      \n      Opal.def(self, '$empty?', $Reader_empty$ques$6 = function() {\n        var self = this;\n\n        if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return true;\n        } else {\n          return false\n        }\n      }, $Reader_empty$ques$6.$$arity = 0);\n      Opal.alias(self, \"eof?\", \"empty?\");\n      \n      Opal.def(self, '$next_line_empty?', $Reader_next_line_empty$ques$7 = function() {\n        var self = this;\n\n        return self.$peek_line()['$nil_or_empty?']()\n      }, $Reader_next_line_empty$ques$7.$$arity = 0);\n      \n      Opal.def(self, '$peek_line', $Reader_peek_line$8 = function $$peek_line(direct) {\n        var $a, self = this, line = nil;\n\n        \n        \n        if (direct == null) {\n          direct = false;\n        };\n        if ($truthy(($truthy($a = direct) ? $a : $rb_gt(self.look_ahead, 0)))) {\n          if ($truthy(self.unescape_next_line)) {\n            \n            return (line = self.lines['$[]'](0)).$slice(1, line.$length());\n          } else {\n            return self.lines['$[]'](0)\n          }\n        } else if ($truthy(self.lines['$empty?']())) {\n          \n          self.look_ahead = 0;\n          return nil;\n        } else if ($truthy((line = self.$process_line(self.lines['$[]'](0))))) {\n          return line\n        } else {\n          return self.$peek_line()\n        };\n      }, $Reader_peek_line$8.$$arity = -1);\n      \n      Opal.def(self, '$peek_lines', $Reader_peek_lines$9 = function $$peek_lines(num, direct) {\n        var $a, $$10, self = this, old_look_ahead = nil, result = nil;\n\n        \n        \n        if (num == null) {\n          num = nil;\n        };\n        \n        if (direct == null) {\n          direct = false;\n        };\n        old_look_ahead = self.look_ahead;\n        result = [];\n        (function(){var $brk = Opal.new_brk(); try {return $send(($truthy($a = num) ? $a : $$($nesting, 'MAX_INT')), 'times', [], ($$10 = function(){var self = $$10.$$s || this, line = nil;\n          if (self.lineno == null) self.lineno = nil;\n\n        if ($truthy((line = (function() {if ($truthy(direct)) {\n            return self.$shift()\n          } else {\n            return self.$read_line()\n          }; return nil; })()))) {\n            return result['$<<'](line)\n          } else {\n            \n            if ($truthy(direct)) {\n              self.lineno = $rb_minus(self.lineno, 1)};\n            \n            Opal.brk(nil, $brk);\n          }}, $$10.$$s = self, $$10.$$brk = $brk, $$10.$$arity = 0, $$10))\n        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();\n        if ($truthy(result['$empty?']())) {\n        } else {\n          \n          self.$unshift_all(result);\n          if ($truthy(direct)) {\n            self.look_ahead = old_look_ahead};\n        };\n        return result;\n      }, $Reader_peek_lines$9.$$arity = -1);\n      \n      Opal.def(self, '$read_line', $Reader_read_line$11 = function $$read_line() {\n        var $a, self = this;\n\n        if ($truthy(($truthy($a = $rb_gt(self.look_ahead, 0)) ? $a : self['$has_more_lines?']()))) {\n          return self.$shift()\n        } else {\n          return nil\n        }\n      }, $Reader_read_line$11.$$arity = 0);\n      \n      Opal.def(self, '$read_lines', $Reader_read_lines$12 = function $$read_lines() {\n        var $a, self = this, lines = nil;\n\n        \n        lines = [];\n        while ($truthy(self['$has_more_lines?']())) {\n          lines['$<<'](self.$shift())\n        };\n        return lines;\n      }, $Reader_read_lines$12.$$arity = 0);\n      Opal.alias(self, \"readlines\", \"read_lines\");\n      \n      Opal.def(self, '$read', $Reader_read$13 = function $$read() {\n        var self = this;\n\n        return self.$read_lines().$join($$($nesting, 'LF'))\n      }, $Reader_read$13.$$arity = 0);\n      \n      Opal.def(self, '$advance', $Reader_advance$14 = function $$advance() {\n        var self = this;\n\n        if ($truthy(self.$shift())) {\n          return true\n        } else {\n          return false\n        }\n      }, $Reader_advance$14.$$arity = 0);\n      \n      Opal.def(self, '$unshift_line', $Reader_unshift_line$15 = function $$unshift_line(line_to_restore) {\n        var self = this;\n\n        \n        self.$unshift(line_to_restore);\n        return nil;\n      }, $Reader_unshift_line$15.$$arity = 1);\n      Opal.alias(self, \"restore_line\", \"unshift_line\");\n      \n      Opal.def(self, '$unshift_lines', $Reader_unshift_lines$16 = function $$unshift_lines(lines_to_restore) {\n        var self = this;\n\n        \n        self.$unshift_all(lines_to_restore);\n        return nil;\n      }, $Reader_unshift_lines$16.$$arity = 1);\n      Opal.alias(self, \"restore_lines\", \"unshift_lines\");\n      \n      Opal.def(self, '$replace_next_line', $Reader_replace_next_line$17 = function $$replace_next_line(replacement) {\n        var self = this;\n\n        \n        self.$shift();\n        self.$unshift(replacement);\n        return true;\n      }, $Reader_replace_next_line$17.$$arity = 1);\n      Opal.alias(self, \"replace_line\", \"replace_next_line\");\n      \n      Opal.def(self, '$skip_blank_lines', $Reader_skip_blank_lines$18 = function $$skip_blank_lines() {\n        var $a, self = this, num_skipped = nil, next_line = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return nil};\n        num_skipped = 0;\n        while ($truthy((next_line = self.$peek_line()))) {\n          if ($truthy(next_line['$empty?']())) {\n            \n            self.$shift();\n            num_skipped = $rb_plus(num_skipped, 1);\n          } else {\n            return num_skipped\n          }\n        };\n      }, $Reader_skip_blank_lines$18.$$arity = 0);\n      \n      Opal.def(self, '$skip_comment_lines', $Reader_skip_comment_lines$19 = function $$skip_comment_lines() {\n        var $a, $b, self = this, next_line = nil, ll = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return nil};\n        while ($truthy(($truthy($b = (next_line = self.$peek_line())) ? next_line['$empty?']()['$!']() : $b))) {\n          if ($truthy(next_line['$start_with?'](\"//\"))) {\n            if ($truthy(next_line['$start_with?'](\"///\"))) {\n              if ($truthy(($truthy($b = $rb_gt((ll = next_line.$length()), 3)) ? next_line['$==']($rb_times(\"/\", ll)) : $b))) {\n                self.$read_lines_until($hash2([\"terminator\", \"skip_first_line\", \"read_last_line\", \"skip_processing\", \"context\"], {\"terminator\": next_line, \"skip_first_line\": true, \"read_last_line\": true, \"skip_processing\": true, \"context\": \"comment\"}))\n              } else {\n                break;\n              }\n            } else {\n              self.$shift()\n            }\n          } else {\n            break;\n          }\n        };\n        return nil;\n      }, $Reader_skip_comment_lines$19.$$arity = 0);\n      \n      Opal.def(self, '$skip_line_comments', $Reader_skip_line_comments$20 = function $$skip_line_comments() {\n        var $a, $b, self = this, comment_lines = nil, next_line = nil;\n\n        \n        if ($truthy(self['$empty?']())) {\n          return []};\n        comment_lines = [];\n        while ($truthy(($truthy($b = (next_line = self.$peek_line())) ? next_line['$empty?']()['$!']() : $b))) {\n          if ($truthy(next_line['$start_with?'](\"//\"))) {\n            comment_lines['$<<'](self.$shift())\n          } else {\n            break;\n          }\n        };\n        return comment_lines;\n      }, $Reader_skip_line_comments$20.$$arity = 0);\n      \n      Opal.def(self, '$terminate', $Reader_terminate$21 = function $$terminate() {\n        var self = this;\n\n        \n        self.lineno = $rb_plus(self.lineno, self.lines.$size());\n        self.lines.$clear();\n        self.look_ahead = 0;\n        return nil;\n      }, $Reader_terminate$21.$$arity = 0);\n      \n      Opal.def(self, '$read_lines_until', $Reader_read_lines_until$22 = function $$read_lines_until(options) {\n        var $a, $b, $c, $d, $iter = $Reader_read_lines_until$22.$$p, $yield = $iter || nil, self = this, result = nil, restore_process_lines = nil, terminator = nil, start_cursor = nil, break_on_blank_lines = nil, break_on_list_continuation = nil, skip_comments = nil, complete = nil, line_read = nil, line_restored = nil, line = nil, $writer = nil, context = nil;\n\n        if ($iter) $Reader_read_lines_until$22.$$p = null;\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        result = [];\n        if ($truthy(($truthy($a = self.process_lines) ? options['$[]'](\"skip_processing\") : $a))) {\n          \n          self.process_lines = false;\n          restore_process_lines = true;};\n        if ($truthy((terminator = options['$[]'](\"terminator\")))) {\n          \n          start_cursor = ($truthy($a = options['$[]'](\"cursor\")) ? $a : self.$cursor());\n          break_on_blank_lines = false;\n          break_on_list_continuation = false;\n        } else {\n          \n          break_on_blank_lines = options['$[]'](\"break_on_blank_lines\");\n          break_on_list_continuation = options['$[]'](\"break_on_list_continuation\");\n        };\n        skip_comments = options['$[]'](\"skip_line_comments\");\n        complete = (line_read = (line_restored = nil));\n        if ($truthy(options['$[]'](\"skip_first_line\"))) {\n          self.$shift()};\n        while ($truthy(($truthy($b = complete['$!']()) ? (line = self.$read_line()) : $b))) {\n          \n          complete = (function() {while ($truthy(true)) {\n            \n            if ($truthy(($truthy($c = terminator) ? line['$=='](terminator) : $c))) {\n              return true};\n            if ($truthy(($truthy($c = break_on_blank_lines) ? line['$empty?']() : $c))) {\n              return true};\n            if ($truthy(($truthy($c = ($truthy($d = break_on_list_continuation) ? line_read : $d)) ? line['$==']($$($nesting, 'LIST_CONTINUATION')) : $c))) {\n              \n              \n              $writer = [\"preserve_last_line\", true];\n              $send(options, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              return true;};\n            if ($truthy((($c = ($yield !== nil)) ? Opal.yield1($yield, line) : ($yield !== nil)))) {\n              return true};\n            return false;\n          }; return nil; })();\n          if ($truthy(complete)) {\n            \n            if ($truthy(options['$[]'](\"read_last_line\"))) {\n              \n              result['$<<'](line);\n              line_read = true;};\n            if ($truthy(options['$[]'](\"preserve_last_line\"))) {\n              \n              self.$unshift(line);\n              line_restored = true;};\n          } else if ($truthy(($truthy($b = ($truthy($c = skip_comments) ? line['$start_with?'](\"//\") : $c)) ? line['$start_with?'](\"///\")['$!']() : $b))) {\n          } else {\n            \n            result['$<<'](line);\n            line_read = true;\n          };\n        };\n        if ($truthy(restore_process_lines)) {\n          \n          self.process_lines = true;\n          if ($truthy(($truthy($a = line_restored) ? terminator['$!']() : $a))) {\n            self.look_ahead = $rb_minus(self.look_ahead, 1)};};\n        if ($truthy(($truthy($a = ($truthy($b = terminator) ? terminator['$!='](line) : $b)) ? (context = options.$fetch(\"context\", terminator)) : $a))) {\n          \n          if (start_cursor['$=='](\"at_mark\")) {\n            start_cursor = self.$cursor_at_mark()};\n          self.$logger().$warn(self.$message_with_context(\"\" + \"unterminated \" + (context) + \" block\", $hash2([\"source_location\"], {\"source_location\": start_cursor})));\n          self.unterminated = true;};\n        return result;\n      }, $Reader_read_lines_until$22.$$arity = -1);\n      \n      Opal.def(self, '$shift', $Reader_shift$23 = function $$shift() {\n        var self = this;\n\n        \n        self.lineno = $rb_plus(self.lineno, 1);\n        if (self.look_ahead['$=='](0)) {\n        } else {\n          self.look_ahead = $rb_minus(self.look_ahead, 1)\n        };\n        return self.lines.$shift();\n      }, $Reader_shift$23.$$arity = 0);\n      \n      Opal.def(self, '$unshift', $Reader_unshift$24 = function $$unshift(line) {\n        var self = this;\n\n        \n        self.lineno = $rb_minus(self.lineno, 1);\n        self.look_ahead = $rb_plus(self.look_ahead, 1);\n        return self.lines.$unshift(line);\n      }, $Reader_unshift$24.$$arity = 1);\n      \n      Opal.def(self, '$unshift_all', $Reader_unshift_all$25 = function $$unshift_all(lines) {\n        var self = this;\n\n        \n        self.lineno = $rb_minus(self.lineno, lines.$size());\n        self.look_ahead = $rb_plus(self.look_ahead, lines.$size());\n        return $send(self.lines, 'unshift', Opal.to_a(lines));\n      }, $Reader_unshift_all$25.$$arity = 1);\n      \n      Opal.def(self, '$cursor', $Reader_cursor$26 = function $$cursor() {\n        var self = this;\n\n        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, self.lineno)\n      }, $Reader_cursor$26.$$arity = 0);\n      \n      Opal.def(self, '$cursor_at_line', $Reader_cursor_at_line$27 = function $$cursor_at_line(lineno) {\n        var self = this;\n\n        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, lineno)\n      }, $Reader_cursor_at_line$27.$$arity = 1);\n      \n      Opal.def(self, '$cursor_at_mark', $Reader_cursor_at_mark$28 = function $$cursor_at_mark() {\n        var self = this;\n\n        if ($truthy(self.mark)) {\n          return $send($$($nesting, 'Cursor'), 'new', Opal.to_a(self.mark))\n        } else {\n          return self.$cursor()\n        }\n      }, $Reader_cursor_at_mark$28.$$arity = 0);\n      \n      Opal.def(self, '$cursor_before_mark', $Reader_cursor_before_mark$29 = function $$cursor_before_mark() {\n        var $a, $b, self = this, m_file = nil, m_dir = nil, m_path = nil, m_lineno = nil;\n\n        if ($truthy(self.mark)) {\n          \n          $b = self.mark, $a = Opal.to_ary($b), (m_file = ($a[0] == null ? nil : $a[0])), (m_dir = ($a[1] == null ? nil : $a[1])), (m_path = ($a[2] == null ? nil : $a[2])), (m_lineno = ($a[3] == null ? nil : $a[3])), $b;\n          return $$($nesting, 'Cursor').$new(m_file, m_dir, m_path, $rb_minus(m_lineno, 1));\n        } else {\n          return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))\n        }\n      }, $Reader_cursor_before_mark$29.$$arity = 0);\n      \n      Opal.def(self, '$cursor_at_prev_line', $Reader_cursor_at_prev_line$30 = function $$cursor_at_prev_line() {\n        var self = this;\n\n        return $$($nesting, 'Cursor').$new(self.file, self.dir, self.path, $rb_minus(self.lineno, 1))\n      }, $Reader_cursor_at_prev_line$30.$$arity = 0);\n      \n      Opal.def(self, '$mark', $Reader_mark$31 = function $$mark() {\n        var self = this;\n\n        return (self.mark = [self.file, self.dir, self.path, self.lineno])\n      }, $Reader_mark$31.$$arity = 0);\n      \n      Opal.def(self, '$line_info', $Reader_line_info$32 = function $$line_info() {\n        var self = this;\n\n        return \"\" + (self.path) + \": line \" + (self.lineno)\n      }, $Reader_line_info$32.$$arity = 0);\n      \n      Opal.def(self, '$lines', $Reader_lines$33 = function $$lines() {\n        var self = this;\n\n        return self.lines.$drop(0)\n      }, $Reader_lines$33.$$arity = 0);\n      \n      Opal.def(self, '$string', $Reader_string$34 = function $$string() {\n        var self = this;\n\n        return self.lines.$join($$($nesting, 'LF'))\n      }, $Reader_string$34.$$arity = 0);\n      \n      Opal.def(self, '$source', $Reader_source$35 = function $$source() {\n        var self = this;\n\n        return self.source_lines.$join($$($nesting, 'LF'))\n      }, $Reader_source$35.$$arity = 0);\n      \n      Opal.def(self, '$save', $Reader_save$36 = function $$save() {\n        var $$37, self = this;\n\n        \n        self.saved = $send($hash2([], {}), 'tap', [], ($$37 = function(accum){var self = $$37.$$s || this, $$38;\n\n        \n          \n          if (accum == null) {\n            accum = nil;\n          };\n          return $send(self.$instance_variables(), 'each', [], ($$38 = function(name){var self = $$38.$$s || this, $a, $writer = nil, val = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            if ($truthy(($truthy($a = name['$=='](\"@saved\")) ? $a : name['$=='](\"@source_lines\")))) {\n              return nil\n            } else {\n              \n              $writer = [name, (function() {if ($truthy($$$('::', 'Array')['$===']((val = self.$instance_variable_get(name))))) {\n                \n                return val.$drop(0);\n              } else {\n                return val\n              }; return nil; })()];\n              $send(accum, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];\n            };}, $$38.$$s = self, $$38.$$arity = 1, $$38));}, $$37.$$s = self, $$37.$$arity = 1, $$37));\n        return nil;\n      }, $Reader_save$36.$$arity = 0);\n      \n      Opal.def(self, '$restore_save', $Reader_restore_save$39 = function $$restore_save() {\n        var $$40, self = this;\n\n        if ($truthy(self.saved)) {\n          \n          $send(self.saved, 'each', [], ($$40 = function(name, val){var self = $$40.$$s || this;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            \n            if (val == null) {\n              val = nil;\n            };\n            return self.$instance_variable_set(name, val);}, $$40.$$s = self, $$40.$$arity = 2, $$40));\n          return (self.saved = nil);\n        } else {\n          return nil\n        }\n      }, $Reader_restore_save$39.$$arity = 0);\n      \n      Opal.def(self, '$discard_save', $Reader_discard_save$41 = function $$discard_save() {\n        var self = this;\n\n        return (self.saved = nil)\n      }, $Reader_discard_save$41.$$arity = 0);\n      \n      Opal.def(self, '$to_s', $Reader_to_s$42 = function $$to_s() {\n        var self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {path: \" + (self.path.$inspect()) + \", line: \" + (self.lineno) + \"}>\"\n      }, $Reader_to_s$42.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$prepare_lines', $Reader_prepare_lines$43 = function $$prepare_lines(data, opts) {\n        var self = this, normalize = nil, trim_end = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        try {\n          if ($truthy((normalize = opts['$[]'](\"normalize\")))) {\n            \n            trim_end = (function() {if (normalize['$=='](\"chomp\")) {\n              return false\n            } else {\n              return true\n            }; return nil; })();\n            if ($truthy($$$('::', 'Array')['$==='](data))) {\n              \n              return $$($nesting, 'Helpers').$prepare_source_array(data, trim_end);\n            } else {\n              \n              return $$($nesting, 'Helpers').$prepare_source_string(data, trim_end);\n            };\n          } else if ($truthy($$$('::', 'Array')['$==='](data))) {\n            return data.$drop(0)\n          } else if ($truthy(data)) {\n            return data.$chomp().$split($$($nesting, 'LF'), -1)\n          } else {\n            return []\n          }\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n            try {\n              if ($truthy((function() {if ($truthy($$$('::', 'Array')['$==='](data))) {\n                return data.$join()\n              } else {\n                return data.$to_s()\n              }; return nil; })()['$valid_encoding?']())) {\n                return self.$raise()\n              } else {\n                return self.$raise($$$('::', 'ArgumentError'), \"source is either binary or contains invalid Unicode data\")\n              }\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $Reader_prepare_lines$43.$$arity = -2);\n      return (Opal.def(self, '$process_line', $Reader_process_line$44 = function $$process_line(line) {\n        var self = this;\n\n        \n        if ($truthy(self.process_lines)) {\n          self.look_ahead = $rb_plus(self.look_ahead, 1)};\n        return line;\n      }, $Reader_process_line$44.$$arity = 1), nil) && 'process_line';\n    })($nesting[0], null, $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'PreprocessorReader');\n\n      var $nesting = [self].concat($parent_nesting), $PreprocessorReader_initialize$45, $PreprocessorReader_has_more_lines$ques$46, $PreprocessorReader_empty$ques$47, $PreprocessorReader_peek_line$48, $PreprocessorReader_push_include$49, $PreprocessorReader_include_depth$50, $PreprocessorReader_exceeds_max_depth$ques$51, $PreprocessorReader_shift$52, $PreprocessorReader_include_processors$ques$53, $PreprocessorReader_create_include_cursor$54, $PreprocessorReader_to_s$55, $PreprocessorReader_prepare_lines$57, $PreprocessorReader_process_line$58, $PreprocessorReader_preprocess_conditional_directive$59, $PreprocessorReader_preprocess_include_directive$64, $PreprocessorReader_resolve_include_path$77, $PreprocessorReader_pop_include$79, $PreprocessorReader_split_delimited_value$80, $PreprocessorReader_skip_front_matter$excl$81, $PreprocessorReader_resolve_expr_val$82;\n\n      self.$$prototype.include_stack = self.$$prototype.lines = self.$$prototype.file = self.$$prototype.dir = self.$$prototype.path = self.$$prototype.lineno = self.$$prototype.maxdepth = self.$$prototype.process_lines = self.$$prototype.includes = self.$$prototype.document = self.$$prototype.unescape_next_line = self.$$prototype.include_processor_extensions = self.$$prototype.look_ahead = self.$$prototype.skipping = self.$$prototype.conditional_stack = nil;\n      \n      self.$attr_reader(\"include_stack\");\n      \n      Opal.def(self, '$initialize', $PreprocessorReader_initialize$45 = function $$initialize(document, data, cursor, opts) {\n        var $a, $iter = $PreprocessorReader_initialize$45.$$p, $yield = $iter || nil, self = this, default_include_depth = nil;\n\n        if ($iter) $PreprocessorReader_initialize$45.$$p = null;\n        \n        \n        if (data == null) {\n          data = nil;\n        };\n        \n        if (cursor == null) {\n          cursor = nil;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        self.document = document;\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $PreprocessorReader_initialize$45, false), [data, cursor, opts], null);\n        if ($truthy($rb_gt((default_include_depth = ($truthy($a = document.$attributes()['$[]'](\"max-include-depth\")) ? $a : 64).$to_i()), 0))) {\n          self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": default_include_depth, \"curr\": default_include_depth, \"rel\": default_include_depth})\n        } else {\n          self.maxdepth = nil\n        };\n        self.include_stack = [];\n        self.includes = document.$catalog()['$[]'](\"includes\");\n        self.skipping = false;\n        self.conditional_stack = [];\n        return (self.include_processor_extensions = nil);\n      }, $PreprocessorReader_initialize$45.$$arity = -2);\n      \n      Opal.def(self, '$has_more_lines?', $PreprocessorReader_has_more_lines$ques$46 = function() {\n        var self = this;\n\n        if ($truthy(self.$peek_line())) {\n          return true\n        } else {\n          return false\n        }\n      }, $PreprocessorReader_has_more_lines$ques$46.$$arity = 0);\n      \n      Opal.def(self, '$empty?', $PreprocessorReader_empty$ques$47 = function() {\n        var self = this;\n\n        if ($truthy(self.$peek_line())) {\n          return false\n        } else {\n          return true\n        }\n      }, $PreprocessorReader_empty$ques$47.$$arity = 0);\n      Opal.alias(self, \"eof?\", \"empty?\");\n      \n      Opal.def(self, '$peek_line', $PreprocessorReader_peek_line$48 = function $$peek_line(direct) {\n        var $iter = $PreprocessorReader_peek_line$48.$$p, $yield = $iter || nil, self = this, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $PreprocessorReader_peek_line$48.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (direct == null) {\n          direct = false;\n        };\n        if ($truthy((line = $send(self, Opal.find_super_dispatcher(self, 'peek_line', $PreprocessorReader_peek_line$48, false), $zuper, $iter)))) {\n          return line\n        } else if ($truthy(self.include_stack['$empty?']())) {\n          return nil\n        } else {\n          \n          self.$pop_include();\n          return self.$peek_line(direct);\n        };\n      }, $PreprocessorReader_peek_line$48.$$arity = -1);\n      \n      Opal.def(self, '$push_include', $PreprocessorReader_push_include$49 = function $$push_include(data, file, path, lineno, attributes) {\n        var $a, self = this, $writer = nil, dir = nil, rel_maxdepth = nil, curr_maxdepth = nil, abs_maxdepth = nil, old_leveloffset = nil;\n\n        \n        \n        if (file == null) {\n          file = nil;\n        };\n        \n        if (path == null) {\n          path = nil;\n        };\n        \n        if (lineno == null) {\n          lineno = 1;\n        };\n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        self.include_stack['$<<']([self.lines, self.file, self.dir, self.path, self.lineno, self.maxdepth, self.process_lines]);\n        if ($truthy((self.file = file))) {\n          \n          if ($truthy($$$('::', 'String')['$==='](file))) {\n            self.dir = $$$('::', 'File').$dirname(file)\n          } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n            self.dir = $$$('::', 'URI').$parse($$$('::', 'File').$dirname((file = file.$to_s())))\n          } else {\n            \n            \n            $writer = [(function() {if ((dir = $$$('::', 'File').$dirname(file.$path()))['$=='](\"/\")) {\n              return \"\"\n            } else {\n              return dir\n            }; return nil; })()];\n            $send((self.dir = file.$dup()), 'path=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            file = file.$to_s();\n          };\n          self.path = (path = ($truthy($a = path) ? $a : $$$('::', 'File').$basename(file)));\n          if ($truthy((self.process_lines = $send(file, 'end_with?', Opal.to_a($$($nesting, 'ASCIIDOC_EXTENSIONS').$keys()))))) {\n            \n            $writer = [path.$slice(0, path.$rindex(\".\")), (function() {if ($truthy(attributes['$[]'](\"partial-option\"))) {\n              return nil\n            } else {\n              return true\n            }; return nil; })()];\n            $send(self.includes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n        } else {\n          \n          self.dir = \".\";\n          self.process_lines = true;\n          if ($truthy((self.path = path))) {\n            \n            $writer = [$$($nesting, 'Helpers').$rootname(path), (function() {if ($truthy(attributes['$[]'](\"partial-option\"))) {\n              return nil\n            } else {\n              return true\n            }; return nil; })()];\n            $send(self.includes, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            self.path = \"<stdin>\"\n          };\n        };\n        self.lineno = lineno;\n        if ($truthy(($truthy($a = self.maxdepth) ? attributes['$key?'](\"depth\") : $a))) {\n          if ($truthy($rb_gt((rel_maxdepth = attributes['$[]'](\"depth\").$to_i()), 0))) {\n            \n            if ($truthy($rb_gt((curr_maxdepth = $rb_plus(self.include_stack.$size(), rel_maxdepth)), (abs_maxdepth = self.maxdepth['$[]'](\"abs\"))))) {\n              curr_maxdepth = (rel_maxdepth = abs_maxdepth)};\n            self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": abs_maxdepth, \"curr\": curr_maxdepth, \"rel\": rel_maxdepth});\n          } else {\n            self.maxdepth = $hash2([\"abs\", \"curr\", \"rel\"], {\"abs\": self.maxdepth['$[]'](\"abs\"), \"curr\": self.include_stack.$size(), \"rel\": 0})\n          }};\n        if ($truthy((self.lines = self.$prepare_lines(data, $hash2([\"normalize\", \"condense\", \"indent\"], {\"normalize\": ($truthy($a = self.process_lines) ? $a : \"chomp\"), \"condense\": self.process_lines, \"indent\": attributes['$[]'](\"indent\")})))['$empty?']())) {\n          self.$pop_include()\n        } else {\n          \n          if ($truthy(attributes['$key?'](\"leveloffset\"))) {\n            \n            self.lines.$unshift(\"\");\n            self.lines.$unshift(\"\" + \":leveloffset: \" + (attributes['$[]'](\"leveloffset\")));\n            self.lines['$<<'](\"\");\n            if ($truthy((old_leveloffset = self.document.$attr(\"leveloffset\")))) {\n              self.lines['$<<'](\"\" + \":leveloffset: \" + (old_leveloffset))\n            } else {\n              self.lines['$<<'](\":leveloffset!:\")\n            };\n            self.lineno = $rb_minus(self.lineno, 2);};\n          self.look_ahead = 0;\n        };\n        return self;\n      }, $PreprocessorReader_push_include$49.$$arity = -2);\n      \n      Opal.def(self, '$include_depth', $PreprocessorReader_include_depth$50 = function $$include_depth() {\n        var self = this;\n\n        return self.include_stack.$size()\n      }, $PreprocessorReader_include_depth$50.$$arity = 0);\n      \n      Opal.def(self, '$exceeds_max_depth?', $PreprocessorReader_exceeds_max_depth$ques$51 = function() {\n        var $a, $b, self = this;\n\n        return ($truthy($a = ($truthy($b = self.maxdepth) ? $rb_ge(self.include_stack.$size(), self.maxdepth['$[]'](\"curr\")) : $b)) ? self.maxdepth['$[]'](\"rel\") : $a)\n      }, $PreprocessorReader_exceeds_max_depth$ques$51.$$arity = 0);\n      Opal.alias(self, \"exceeded_max_depth?\", \"exceeds_max_depth?\");\n      \n      Opal.def(self, '$shift', $PreprocessorReader_shift$52 = function $$shift() {\n        var $iter = $PreprocessorReader_shift$52.$$p, $yield = $iter || nil, self = this, line = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $PreprocessorReader_shift$52.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        if ($truthy(self.unescape_next_line)) {\n          \n          self.unescape_next_line = false;\n          return (line = $send(self, Opal.find_super_dispatcher(self, 'shift', $PreprocessorReader_shift$52, false), $zuper, $iter)).$slice(1, line.$length());\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'shift', $PreprocessorReader_shift$52, false), $zuper, $iter)\n        }\n      }, $PreprocessorReader_shift$52.$$arity = 0);\n      \n      Opal.def(self, '$include_processors?', $PreprocessorReader_include_processors$ques$53 = function() {\n        var $a, self = this;\n\n        if ($truthy(self.include_processor_extensions['$nil?']())) {\n          if ($truthy(($truthy($a = self.document['$extensions?']()) ? self.document.$extensions()['$include_processors?']() : $a))) {\n            return (self.include_processor_extensions = self.document.$extensions().$include_processors())['$!']()['$!']()\n          } else {\n            return (self.include_processor_extensions = false)\n          }\n        } else {\n          return self.include_processor_extensions['$!='](false)\n        }\n      }, $PreprocessorReader_include_processors$ques$53.$$arity = 0);\n      \n      Opal.def(self, '$create_include_cursor', $PreprocessorReader_create_include_cursor$54 = function $$create_include_cursor(file, path, lineno) {\n        var self = this, dir = nil;\n\n        \n        if ($truthy($$$('::', 'String')['$==='](file))) {\n          dir = $$$('::', 'File').$dirname(file)\n        } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n          dir = $$$('::', 'File').$dirname((file = file.$to_s()))\n        } else {\n          \n          dir = (function() {if ((dir = $$$('::', 'File').$dirname(file.$path()))['$=='](\"\")) {\n            return \"/\"\n          } else {\n            return dir\n          }; return nil; })();\n          file = file.$to_s();\n        };\n        return $$($nesting, 'Cursor').$new(file, dir, path, lineno);\n      }, $PreprocessorReader_create_include_cursor$54.$$arity = 3);\n      \n      Opal.def(self, '$to_s', $PreprocessorReader_to_s$55 = function $$to_s() {\n        var $$56, self = this;\n\n        return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {path: \" + (self.path.$inspect()) + \", line: \" + (self.lineno) + \", include depth: \" + (self.include_stack.$size()) + \", include stack: [\" + ($send(self.include_stack, 'map', [], ($$56 = function(inc){var self = $$56.$$s || this;\n\n        \n          \n          if (inc == null) {\n            inc = nil;\n          };\n          return inc.$to_s();}, $$56.$$s = self, $$56.$$arity = 1, $$56)).$join(\", \")) + \"]}>\"\n      }, $PreprocessorReader_to_s$55.$$arity = 0);\n      self.$private();\n      \n      Opal.def(self, '$prepare_lines', $PreprocessorReader_prepare_lines$57 = function $$prepare_lines(data, opts) {\n        var $a, $b, $iter = $PreprocessorReader_prepare_lines$57.$$p, $yield = $iter || nil, self = this, result = nil, front_matter = nil, $writer = nil, first = nil, last = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $PreprocessorReader_prepare_lines$57.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        result = $send(self, Opal.find_super_dispatcher(self, 'prepare_lines', $PreprocessorReader_prepare_lines$57, false), $zuper, $iter);\n        if ($truthy(($truthy($a = self.document) ? self.document.$attributes()['$[]'](\"skip-front-matter\") : $a))) {\n          if ($truthy((front_matter = self['$skip_front_matter!'](result)))) {\n            \n            $writer = [\"front-matter\", front_matter.$join($$($nesting, 'LF'))];\n            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}};\n        if ($truthy(opts.$fetch(\"condense\", true))) {\n          \n          while ($truthy(($truthy($b = (first = result['$[]'](0))) ? first['$empty?']() : $b))) {\n            ($truthy($b = result.$shift()) ? (self.lineno = $rb_plus(self.lineno, 1)) : $b)\n          };\n          while ($truthy(($truthy($b = (last = result['$[]'](-1))) ? last['$empty?']() : $b))) {\n            result.$pop()\n          };};\n        if ($truthy(opts['$[]'](\"indent\"))) {\n          $$($nesting, 'Parser')['$adjust_indentation!'](result, opts['$[]'](\"indent\").$to_i(), self.document.$attr(\"tabsize\").$to_i())};\n        return result;\n      }, $PreprocessorReader_prepare_lines$57.$$arity = -2);\n      \n      Opal.def(self, '$process_line', $PreprocessorReader_process_line$58 = function $$process_line(line) {\n        var $a, $b, self = this;\n\n        \n        if ($truthy(self.process_lines)) {\n        } else {\n          return line\n        };\n        if ($truthy(line['$empty?']())) {\n          \n          self.look_ahead = $rb_plus(self.look_ahead, 1);\n          return line;};\n        if ($truthy(($truthy($a = ($truthy($b = line['$end_with?'](\"]\")) ? line['$start_with?'](\"[\")['$!']() : $b)) ? line['$include?'](\"::\") : $a))) {\n          if ($truthy(($truthy($a = line['$include?'](\"if\")) ? $$($nesting, 'ConditionalDirectiveRx')['$=~'](line) : $a))) {\n            if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$=='](\"\\\\\")) {\n              \n              self.unescape_next_line = true;\n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line.$slice(1, line.$length());\n            } else if ($truthy(self.$preprocess_conditional_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](4)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](5))))) {\n              \n              self.$shift();\n              return nil;\n            } else {\n              \n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line;\n            }\n          } else if ($truthy(self.skipping)) {\n            \n            self.$shift();\n            return nil;\n          } else if ($truthy(($truthy($a = line['$start_with?'](\"inc\", \"\\\\inc\")) ? $$($nesting, 'IncludeDirectiveRx')['$=~'](line) : $a))) {\n            if ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1))['$=='](\"\\\\\")) {\n              \n              self.unescape_next_line = true;\n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line.$slice(1, line.$length());\n            } else if ($truthy(self.$preprocess_include_directive((($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](3))))) {\n              return nil\n            } else {\n              \n              self.look_ahead = $rb_plus(self.look_ahead, 1);\n              return line;\n            }\n          } else {\n            \n            self.look_ahead = $rb_plus(self.look_ahead, 1);\n            return line;\n          }\n        } else if ($truthy(self.skipping)) {\n          \n          self.$shift();\n          return nil;\n        } else {\n          \n          self.look_ahead = $rb_plus(self.look_ahead, 1);\n          return line;\n        };\n      }, $PreprocessorReader_process_line$58.$$arity = 1);\n      \n      Opal.def(self, '$preprocess_conditional_directive', $PreprocessorReader_preprocess_conditional_directive$59 = function $$preprocess_conditional_directive(keyword, target, delimiter, text) {\n        var $a, $$60, $$61, $$62, $$63, self = this, no_target = nil, pair = nil, skip = nil, $case = nil, lhs = nil, op = nil, rhs = nil;\n\n        \n        if ($truthy((no_target = target['$empty?']()))) {\n        } else {\n          target = target.$downcase()\n        };\n        if (keyword['$=='](\"endif\")) {\n          \n          if ($truthy(text)) {\n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - text not permitted: endif::\" + (target) + \"[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          } else if ($truthy(self.conditional_stack['$empty?']())) {\n            self.$logger().$error(self.$message_with_context(\"\" + \"unmatched preprocessor directive: endif::\" + (target) + \"[]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          } else if ($truthy(($truthy($a = no_target) ? $a : target['$==']((pair = self.conditional_stack['$[]'](-1))['$[]'](\"target\"))))) {\n            \n            self.conditional_stack.$pop();\n            self.skipping = (function() {if ($truthy(self.conditional_stack['$empty?']())) {\n              return false\n            } else {\n              return self.conditional_stack['$[]'](-1)['$[]'](\"skipping\")\n            }; return nil; })();\n          } else {\n            self.$logger().$error(self.$message_with_context(\"\" + \"mismatched preprocessor directive: endif::\" + (target) + \"[], expected endif::\" + (pair['$[]'](\"target\")) + \"[]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n          };\n          return true;\n        } else if ($truthy(self.skipping)) {\n          skip = false\n        } else {\n          $case = keyword;\n          if (\"ifdef\"['$===']($case)) {\n          if ($truthy(no_target)) {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - missing target: ifdef::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return true;};\n          $case = delimiter;\n          if (\",\"['$===']($case)) {skip = $send(target.$split(\",\", -1), 'none?', [], ($$60 = function(name){var self = $$60.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name);}, $$60.$$s = self, $$60.$$arity = 1, $$60))}\n          else if (\"+\"['$===']($case)) {skip = $send(target.$split(\"+\", -1), 'any?', [], ($$61 = function(name){var self = $$61.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name)['$!']();}, $$61.$$s = self, $$61.$$arity = 1, $$61))}\n          else {skip = self.document.$attributes()['$key?'](target)['$!']()};}\n          else if (\"ifndef\"['$===']($case)) {\n          if ($truthy(no_target)) {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - missing target: ifndef::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return true;};\n          $case = delimiter;\n          if (\",\"['$===']($case)) {skip = $send(target.$split(\",\", -1), 'any?', [], ($$62 = function(name){var self = $$62.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name);}, $$62.$$s = self, $$62.$$arity = 1, $$62))}\n          else if (\"+\"['$===']($case)) {skip = $send(target.$split(\"+\", -1), 'all?', [], ($$63 = function(name){var self = $$63.$$s || this;\n            if (self.document == null) self.document = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return self.document.$attributes()['$key?'](name);}, $$63.$$s = self, $$63.$$arity = 1, $$63))}\n          else {skip = self.document.$attributes()['$key?'](target)};}\n          else if (\"ifeval\"['$===']($case)) {if ($truthy(no_target)) {\n            if ($truthy(($truthy($a = text) ? $$($nesting, 'EvalExpressionRx')['$=~'](text.$strip()) : $a))) {\n              \n              lhs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](1));\n              op = (($a = $gvars['~']) === nil ? nil : $a['$[]'](2));\n              rhs = (($a = $gvars['~']) === nil ? nil : $a['$[]'](3));\n              skip = (function() {if ($truthy(self.$resolve_expr_val(lhs).$send(op, self.$resolve_expr_val(rhs)))) {\n                return false\n              } else {\n                return true\n              }; return nil; })();\n            } else {\n              \n              self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - \" + ((function() {if ($truthy(text)) {\n                return \"invalid expression\"\n              } else {\n                return \"missing expression\"\n              }; return nil; })()) + \": ifeval::[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n              return true;\n            }\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"malformed preprocessor directive - target not permitted: ifeval::\" + (target) + \"[\" + (text) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return true;\n          }}\n        };\n        if ($truthy(($truthy($a = keyword['$=='](\"ifeval\")) ? $a : text['$!']()))) {\n          \n          if ($truthy(skip)) {\n            self.skipping = true};\n          self.conditional_stack['$<<']($hash2([\"target\", \"skip\", \"skipping\"], {\"target\": target, \"skip\": skip, \"skipping\": self.skipping}));\n        } else if ($truthy(($truthy($a = self.skipping) ? $a : skip))) {\n        } else {\n          \n          self.$replace_next_line(text.$rstrip());\n          self.$unshift(\"\");\n          if ($truthy(text['$start_with?'](\"include::\"))) {\n            self.look_ahead = $rb_minus(self.look_ahead, 1)};\n        };\n        return true;\n      }, $PreprocessorReader_preprocess_conditional_directive$59.$$arity = 4);\n      \n      Opal.def(self, '$preprocess_include_directive', $PreprocessorReader_preprocess_include_directive$64 = function $$preprocess_include_directive(target, attrlist) {\n        var $a, $b, $$65, $$66, $$67, $$68, $$69, $$70, $$72, $$75, $$76, self = this, doc = nil, expanded_target = nil, attr_missing = nil, ext = nil, parsed_attrs = nil, inc_path = nil, target_type = nil, relpath = nil, reader = nil, read_mode = nil, enc = nil, $writer = nil, read_mode_params = nil, inc_linenos = nil, inc_tags = nil, tag = nil, inc_lines = nil, inc_offset = nil, inc_lineno = nil, tag_stack = nil, tags_used = nil, active_tag = nil, select = nil, base_select = nil, wildcard = nil, missing_tags = nil, inc_content = nil;\n\n        \n        doc = self.document;\n        if ($truthy(($truthy($a = (expanded_target = target)['$include?']($$($nesting, 'ATTR_REF_HEAD'))) ? (expanded_target = doc.$sub_attributes(target, $hash2([\"attribute_missing\"], {\"attribute_missing\": (function() {if ((attr_missing = ($truthy($b = doc.$attributes()['$[]'](\"attribute-missing\")) ? $b : $$($nesting, 'Compliance').$attribute_missing()))['$=='](\"warn\")) {\n          return \"drop-line\"\n        } else {\n          return attr_missing\n        }; return nil; })()})))['$empty?']() : $a))) {\n          if ($truthy((($a = attr_missing['$=='](\"drop-line\")) ? doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : attr_missing['$=='](\"drop-line\")))) {\n            \n            $send(self.$logger(), 'info', [], ($$65 = function(){var self = $$65.$$s || this;\n\n            return self.$message_with_context(\"\" + \"include dropped due to missing attribute: include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, $$65.$$s = self, $$65.$$arity = 0, $$65));\n            self.$shift();\n            return true;\n          } else if ($truthy(doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true}))['$[]'](\"optional-option\"))) {\n            \n            $send(self.$logger(), 'info', [], ($$66 = function(){var self = $$66.$$s || this, $c;\n\n            return self.$message_with_context(\"\" + \"optional include dropped \" + ((function() {if ($truthy((($c = attr_missing['$=='](\"warn\")) ? doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : attr_missing['$=='](\"warn\")))) {\n                return \"due to missing attribute\"\n              } else {\n                return \"because resolved target is blank\"\n              }; return nil; })()) + \": include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, $$66.$$s = self, $$66.$$arity = 0, $$66));\n            self.$shift();\n            return true;\n          } else {\n            \n            self.$logger().$warn(self.$message_with_context(\"\" + \"include dropped \" + ((function() {if ($truthy((($a = attr_missing['$=='](\"warn\")) ? doc.$sub_attributes($rb_plus(target, \" \"), $hash2([\"attribute_missing\", \"drop_line_severity\"], {\"attribute_missing\": \"drop-line\", \"drop_line_severity\": \"ignore\"}))['$empty?']() : attr_missing['$=='](\"warn\")))) {\n              return \"due to missing attribute\"\n            } else {\n              return \"because resolved target is blank\"\n            }; return nil; })()) + \": include::\" + (target) + \"[\" + (attrlist) + \"]\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (target) + \"[\" + (attrlist) + \"]\");\n          }\n        } else if ($truthy(($truthy($a = self['$include_processors?']()) ? (ext = $send(self.include_processor_extensions, 'find', [], ($$67 = function(candidate){var self = $$67.$$s || this;\n\n        \n          \n          if (candidate == null) {\n            candidate = nil;\n          };\n          return candidate.$instance()['$handles?'](expanded_target);}, $$67.$$s = self, $$67.$$arity = 1, $$67))) : $a))) {\n          \n          self.$shift();\n          ext.$process_method()['$[]'](doc, self, expanded_target, doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true})));\n          return true;\n        } else if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')))) {\n          return self.$replace_next_line(\"\" + \"link:\" + (expanded_target) + \"[]\")\n        } else if ($truthy(self.maxdepth)) {\n          \n          if ($truthy($rb_ge(self.include_stack.$size(), self.maxdepth['$[]'](\"curr\")))) {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"maximum include depth of \" + (self.maxdepth['$[]'](\"rel\")) + \" exceeded\", $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return nil;};\n          parsed_attrs = doc.$parse_attributes(attrlist, [], $hash2([\"sub_input\"], {\"sub_input\": true}));\n          $b = self.$resolve_include_path(expanded_target, attrlist, parsed_attrs), $a = Opal.to_ary($b), (inc_path = ($a[0] == null ? nil : $a[0])), (target_type = ($a[1] == null ? nil : $a[1])), (relpath = ($a[2] == null ? nil : $a[2])), $b;\n          if (target_type['$=='](\"file\")) {\n            \n            reader = $$$('::', 'File').$method(\"open\");\n            read_mode = $$($nesting, 'FILE_READ_MODE');\n          } else if (target_type['$=='](\"uri\")) {\n            \n            reader = $$$('::', 'OpenURI').$method(\"open_uri\");\n            read_mode = $$($nesting, 'URI_READ_MODE');\n          } else {\n            return inc_path\n          };\n          if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n          } else if ($truthy(($truthy($a = (enc = parsed_attrs['$[]'](\"encoding\"))) ? (function() { try {\n            return $$$('::', 'Encoding').$find(enc)\n          } catch ($err) {\n            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n              try {\n                return nil\n              } finally { Opal.pop_exception() }\n            } else { throw $err; }\n          }})() : $a))) {\n            \n            \n            $writer = [1, enc];\n            $send((read_mode_params = read_mode.$split(\":\")), '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            read_mode = read_mode_params.$join(\":\");};\n          inc_linenos = (inc_tags = nil);\n          if ($truthy(attrlist)) {\n            if ($truthy(parsed_attrs['$key?'](\"lines\"))) {\n              \n              inc_linenos = [];\n              $send(self.$split_delimited_value(parsed_attrs['$[]'](\"lines\")), 'each', [], ($$68 = function(linedef){var self = $$68.$$s || this, $c, $d, from = nil, _ = nil, to = nil;\n\n              \n                \n                if (linedef == null) {\n                  linedef = nil;\n                };\n                if ($truthy(linedef['$include?'](\"..\"))) {\n                  \n                  $d = linedef.$partition(\"..\"), $c = Opal.to_ary($d), (from = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (to = ($c[2] == null ? nil : $c[2])), $d;\n                  return (inc_linenos = $rb_plus(inc_linenos, (function() {if ($truthy(($truthy($c = to['$empty?']()) ? $c : $rb_lt((to = to.$to_i()), 0)))) {\n                    return [from.$to_i(), $rb_divide(1, 0)]\n                  } else {\n                    return Opal.Range.$new(from.$to_i(), to, false).$to_a()\n                  }; return nil; })()));\n                } else {\n                  return inc_linenos['$<<'](linedef.$to_i())\n                };}, $$68.$$s = self, $$68.$$arity = 1, $$68));\n              inc_linenos = (function() {if ($truthy(inc_linenos['$empty?']())) {\n                return nil\n              } else {\n                return inc_linenos.$sort().$uniq()\n              }; return nil; })();\n            } else if ($truthy(parsed_attrs['$key?'](\"tag\"))) {\n              if ($truthy(($truthy($a = (tag = parsed_attrs['$[]'](\"tag\"))['$empty?']()) ? $a : tag['$=='](\"!\")))) {\n              } else {\n                inc_tags = (function() {if ($truthy(tag['$start_with?'](\"!\"))) {\n                  return $hash(tag.$slice(1, tag.$length()), false)\n                } else {\n                  return $hash(tag, true)\n                }; return nil; })()\n              }\n            } else if ($truthy(parsed_attrs['$key?'](\"tags\"))) {\n              \n              inc_tags = $hash2([], {});\n              $send(self.$split_delimited_value(parsed_attrs['$[]'](\"tags\")), 'each', [], ($$69 = function(tagdef){var self = $$69.$$s || this, $c;\n\n              \n                \n                if (tagdef == null) {\n                  tagdef = nil;\n                };\n                if ($truthy(($truthy($c = tagdef['$empty?']()) ? $c : tagdef['$=='](\"!\")))) {\n                  return nil\n                } else if ($truthy(tagdef['$start_with?'](\"!\"))) {\n                  \n                  $writer = [tagdef.$slice(1, tagdef.$length()), false];\n                  $send(inc_tags, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                } else {\n                  \n                  $writer = [tagdef, true];\n                  $send(inc_tags, '[]=', Opal.to_a($writer));\n                  return $writer[$rb_minus($writer[\"length\"], 1)];\n                };}, $$69.$$s = self, $$69.$$arity = 1, $$69));\n              if ($truthy(inc_tags['$empty?']())) {\n                inc_tags = nil};}};\n          if ($truthy(inc_linenos)) {\n            \n            $a = [[], nil, 0], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), $a;\n            \n            try {\n              (function(){var $brk = Opal.new_brk(); try {return $send(reader, 'call', [inc_path, read_mode], ($$70 = function(f){var self = $$70.$$s || this, $$71, select_remaining = nil;\n\n              \n                \n                if (f == null) {\n                  f = nil;\n                };\n                select_remaining = nil;\n                return (function(){var $brk = Opal.new_brk(); try {return $send(f, 'each_line', [], ($$71 = function(l){var self = $$71.$$s || this, $c, $d, select = nil;\n\n                \n                  \n                  if (l == null) {\n                    l = nil;\n                  };\n                  inc_lineno = $rb_plus(inc_lineno, 1);\n                  if ($truthy(($truthy($c = select_remaining) ? $c : ($truthy($d = $$$('::', 'Float')['$===']((select = inc_linenos['$[]'](0)))) ? (select_remaining = select['$infinite?']()) : $d)))) {\n                    \n                    inc_offset = ($truthy($c = inc_offset) ? $c : inc_lineno);\n                    return inc_lines['$<<'](l);\n                  } else {\n                    \n                    if (select['$=='](inc_lineno)) {\n                      \n                      inc_offset = ($truthy($c = inc_offset) ? $c : inc_lineno);\n                      inc_lines['$<<'](l);\n                      inc_linenos.$shift();};\n                    if ($truthy(inc_linenos['$empty?']())) {\n                      \n                      Opal.brk(nil, $brk)\n                    } else {\n                      return nil\n                    };\n                  };}, $$71.$$s = self, $$71.$$brk = $brk, $$71.$$arity = 1, $$71))\n                } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();}, $$70.$$s = self, $$70.$$brk = $brk, $$70.$$arity = 1, $$70))\n              } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"\" + \"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };;\n            self.$shift();\n            if ($truthy(inc_offset)) {\n              \n              \n              $writer = [\"partial-option\", \"\"];\n              $send(parsed_attrs, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;\n              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);};\n          } else if ($truthy(inc_tags)) {\n            \n            $a = [[], nil, 0, [], $$$('::', 'Set').$new(), nil], (inc_lines = $a[0]), (inc_offset = $a[1]), (inc_lineno = $a[2]), (tag_stack = $a[3]), (tags_used = $a[4]), (active_tag = $a[5]), $a;\n            if ($truthy(inc_tags['$key?'](\"**\"))) {\n              if ($truthy(inc_tags['$key?'](\"*\"))) {\n                \n                select = (base_select = inc_tags.$delete(\"**\"));\n                wildcard = inc_tags.$delete(\"*\");\n              } else {\n                select = (base_select = (wildcard = inc_tags.$delete(\"**\")))\n              }\n            } else {\n              \n              select = (base_select = inc_tags['$value?'](true)['$!']());\n              wildcard = inc_tags.$delete(\"*\");\n            };\n            \n            try {\n              $send(reader, 'call', [inc_path, read_mode], ($$72 = function(f){var self = $$72.$$s || this, $c, $$73, dbl_co = nil, dbl_sb = nil;\n\n              \n                \n                if (f == null) {\n                  f = nil;\n                };\n                $c = [\"::\", \"[]\"], (dbl_co = $c[0]), (dbl_sb = $c[1]), $c;\n                return $send(f, 'each_line', [], ($$73 = function(l){var self = $$73.$$s || this, $d, $e, $$74, this_tag = nil, include_cursor = nil, idx = nil;\n\n                \n                  \n                  if (l == null) {\n                    l = nil;\n                  };\n                  inc_lineno = $rb_plus(inc_lineno, 1);\n                  if ($truthy(($truthy($d = ($truthy($e = l['$include?'](dbl_co)) ? l['$include?'](dbl_sb) : $e)) ? $$($nesting, 'TagDirectiveRx')['$=~'](l) : $d))) {\n                    \n                    this_tag = (($d = $gvars['~']) === nil ? nil : $d['$[]'](2));\n                    if ($truthy((($d = $gvars['~']) === nil ? nil : $d['$[]'](1)))) {\n                      if (this_tag['$=='](active_tag)) {\n                        \n                        tag_stack.$pop();\n                        return $e = (function() {if ($truthy(tag_stack['$empty?']())) {\n                          return [nil, base_select]\n                        } else {\n                          return tag_stack['$[]'](-1)\n                        }; return nil; })(), $d = Opal.to_ary($e), (active_tag = ($d[0] == null ? nil : $d[0])), (select = ($d[1] == null ? nil : $d[1])), $e;\n                      } else if ($truthy(inc_tags['$key?'](this_tag))) {\n                        \n                        include_cursor = self.$create_include_cursor(inc_path, expanded_target, inc_lineno);\n                        if ($truthy((idx = $send(tag_stack, 'rindex', [], ($$74 = function(key){var self = $$74.$$s || this;\n\n                        \n                          \n                          if (key == null) {\n                            key = nil;\n                          };\n                          return key['$=='](this_tag);}, $$74.$$s = self, $$74.$$arity = 1, $$74.$$has_trailing_comma_in_args = true, $$74))))) {\n                          \n                          if (idx['$=='](0)) {\n                            tag_stack.$shift()\n                          } else {\n                            \n                            tag_stack.$delete_at(idx);\n                          };\n                          return self.$logger().$warn(self.$message_with_context(\"\" + \"mismatched end tag (expected '\" + (active_tag) + \"' but found '\" + (this_tag) + \"') at line \" + (inc_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": include_cursor})));\n                        } else {\n                          return self.$logger().$warn(self.$message_with_context(\"\" + \"unexpected end tag '\" + (this_tag) + \"' at line \" + (inc_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": include_cursor})))\n                        };\n                      } else {\n                        return nil\n                      }\n                    } else if ($truthy(inc_tags['$key?'](this_tag))) {\n                      \n                      tags_used['$<<'](this_tag);\n                      return tag_stack['$<<']([(active_tag = this_tag), (select = inc_tags['$[]'](this_tag)), inc_lineno]);\n                    } else if ($truthy(wildcard['$nil?']()['$!']())) {\n                      \n                      select = (function() {if ($truthy(($truthy($d = active_tag) ? select['$!']() : $d))) {\n                        return false\n                      } else {\n                        return wildcard\n                      }; return nil; })();\n                      return tag_stack['$<<']([(active_tag = this_tag), select, inc_lineno]);\n                    } else {\n                      return nil\n                    };\n                  } else if ($truthy(select)) {\n                    \n                    inc_offset = ($truthy($d = inc_offset) ? $d : inc_lineno);\n                    return inc_lines['$<<'](l);\n                  } else {\n                    return nil\n                  };}, $$73.$$s = self, $$73.$$arity = 1, $$73));}, $$72.$$s = self, $$72.$$arity = 1, $$72))\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"\" + \"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };;\n            if ($truthy(tag_stack['$empty?']())) {\n            } else {\n              $send(tag_stack, 'each', [], ($$75 = function(tag_name, _, tag_lineno){var self = $$75.$$s || this;\n\n              \n                \n                if (tag_name == null) {\n                  tag_name = nil;\n                };\n                \n                if (_ == null) {\n                  _ = nil;\n                };\n                \n                if (tag_lineno == null) {\n                  tag_lineno = nil;\n                };\n                return self.$logger().$warn(self.$message_with_context(\"\" + \"detected unclosed tag '\" + (tag_name) + \"' starting at line \" + (tag_lineno) + \" of include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\", \"include_location\"], {\"source_location\": self.$cursor(), \"include_location\": self.$create_include_cursor(inc_path, expanded_target, tag_lineno)})));}, $$75.$$s = self, $$75.$$arity = 3, $$75))\n            };\n            if ($truthy((missing_tags = $rb_minus(inc_tags.$keys(), tags_used.$to_a()))['$empty?']())) {\n            } else {\n              self.$logger().$warn(self.$message_with_context(\"\" + \"tag\" + ((function() {if ($truthy($rb_gt(missing_tags.$size(), 1))) {\n                return \"s\"\n              } else {\n                return \"\"\n              }; return nil; })()) + \" '\" + (missing_tags.$join(\", \")) + \"' not found in include \" + (target_type) + \": \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})))\n            };\n            self.$shift();\n            if ($truthy(inc_offset)) {\n              \n              if ($truthy(($truthy($a = ($truthy($b = base_select) ? wildcard : $b)) ? inc_tags['$empty?']() : $a))) {\n              } else {\n                \n                $writer = [\"partial-option\", \"\"];\n                $send(parsed_attrs, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];\n              };\n              self.$push_include(inc_lines, inc_path, relpath, inc_offset, parsed_attrs);};\n          } else {\n            \n            try {\n              \n              inc_content = $send(reader, 'call', [inc_path, read_mode], ($$76 = function(f){var self = $$76.$$s || this;\n\n              \n                \n                if (f == null) {\n                  f = nil;\n                };\n                return f.$read();}, $$76.$$s = self, $$76.$$arity = 1, $$76));\n              self.$shift();\n              self.$push_include(inc_content, inc_path, relpath, 1, parsed_attrs);\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  \n                  self.$logger().$error(self.$message_with_context(\"\" + \"include \" + (target_type) + \" not readable: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n                  return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (expanded_target) + \"[\" + (attrlist) + \"]\");\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n          };\n          return true;\n        } else {\n          return nil\n        };\n      }, $PreprocessorReader_preprocess_include_directive$64.$$arity = 2);\n      \n      Opal.def(self, '$resolve_include_path', $PreprocessorReader_resolve_include_path$77 = function $$resolve_include_path(target, attrlist, attributes) {\n        var $a, $b, $$78, self = this, doc = nil, inc_path = nil, relpath = nil;\n\n        \n        doc = self.document;\n        if ($truthy(($truthy($a = $$($nesting, 'Helpers')['$uriish?'](target)) ? $a : (function() {if ($truthy($$$('::', 'String')['$==='](self.dir))) {\n          return nil\n        } else {\n          \n          return (target = \"\" + (self.dir) + \"/\" + (target));\n        }; return nil; })()))) {\n          \n          if ($truthy(doc['$attr?'](\"allow-uri-read\"))) {\n          } else {\n            return self.$replace_next_line(\"\" + \"link:\" + (target) + \"[\" + (attrlist) + \"]\")\n          };\n          if ($truthy(doc['$attr?'](\"cache-uri\"))) {\n            if ($truthy((($b = $$$('::', 'OpenURI', 'skip_raise')) && ($a = $$$($b, 'Cache', 'skip_raise')) ? 'constant' : nil))) {\n            } else {\n              $$($nesting, 'Helpers').$require_library(\"open-uri/cached\", \"open-uri-cached\")\n            }\n          } else if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL')['$!']())) {\n            $$$('::', 'OpenURI')};\n          return [$$$('::', 'URI').$parse(target), \"uri\", target];\n        } else {\n          \n          inc_path = doc.$normalize_system_path(target, self.dir, nil, $hash2([\"target_name\"], {\"target_name\": \"include file\"}));\n          if ($truthy($$$('::', 'File')['$file?'](inc_path))) {\n          } else if ($truthy(attributes['$[]'](\"optional-option\"))) {\n            \n            $send(self.$logger(), 'info', [], ($$78 = function(){var self = $$78.$$s || this;\n\n            return self.$message_with_context(\"\" + \"optional include dropped because include file not found: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()}))}, $$78.$$s = self, $$78.$$arity = 0, $$78));\n            self.$shift();\n            return true;\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"include file not found: \" + (inc_path), $hash2([\"source_location\"], {\"source_location\": self.$cursor()})));\n            return self.$replace_next_line(\"\" + \"Unresolved directive in \" + (self.path) + \" - include::\" + (target) + \"[\" + (attrlist) + \"]\");\n          };\n          relpath = doc.$path_resolver().$relative_path(inc_path, doc.$base_dir());\n          return [inc_path, \"file\", relpath];\n        };\n      }, $PreprocessorReader_resolve_include_path$77.$$arity = 3);\n      \n      Opal.def(self, '$pop_include', $PreprocessorReader_pop_include$79 = function $$pop_include() {\n        var $a, $b, self = this;\n\n        if ($truthy($rb_gt(self.include_stack.$size(), 0))) {\n          \n          $b = self.include_stack.$pop(), $a = Opal.to_ary($b), (self.lines = ($a[0] == null ? nil : $a[0])), (self.file = ($a[1] == null ? nil : $a[1])), (self.dir = ($a[2] == null ? nil : $a[2])), (self.path = ($a[3] == null ? nil : $a[3])), (self.lineno = ($a[4] == null ? nil : $a[4])), (self.maxdepth = ($a[5] == null ? nil : $a[5])), (self.process_lines = ($a[6] == null ? nil : $a[6])), $b;\n          self.look_ahead = 0;\n          return nil;\n        } else {\n          return nil\n        }\n      }, $PreprocessorReader_pop_include$79.$$arity = 0);\n      \n      Opal.def(self, '$split_delimited_value', $PreprocessorReader_split_delimited_value$80 = function $$split_delimited_value(val) {\n        var self = this;\n\n        if ($truthy(val['$include?'](\",\"))) {\n          \n          return val.$split(\",\");\n        } else {\n          \n          return val.$split(\";\");\n        }\n      }, $PreprocessorReader_split_delimited_value$80.$$arity = 1);\n      \n      Opal.def(self, '$skip_front_matter!', $PreprocessorReader_skip_front_matter$excl$81 = function(data, increment_linenos) {\n        var $a, $b, self = this, front_matter = nil, original_data = nil;\n\n        \n        \n        if (increment_linenos == null) {\n          increment_linenos = true;\n        };\n        front_matter = nil;\n        if (data['$[]'](0)['$=='](\"---\")) {\n          \n          original_data = data.$drop(0);\n          data.$shift();\n          front_matter = [];\n          if ($truthy(increment_linenos)) {\n            self.lineno = $rb_plus(self.lineno, 1)};\n          while ($truthy(($truthy($b = data['$empty?']()['$!']()) ? data['$[]'](0)['$!='](\"---\") : $b))) {\n            \n            front_matter['$<<'](data.$shift());\n            if ($truthy(increment_linenos)) {\n              self.lineno = $rb_plus(self.lineno, 1)};\n          };\n          if ($truthy(data['$empty?']())) {\n            \n            $send(data, 'unshift', Opal.to_a(original_data));\n            if ($truthy(increment_linenos)) {\n              self.lineno = 0};\n            front_matter = nil;\n          } else {\n            \n            data.$shift();\n            if ($truthy(increment_linenos)) {\n              self.lineno = $rb_plus(self.lineno, 1)};\n          };};\n        return front_matter;\n      }, $PreprocessorReader_skip_front_matter$excl$81.$$arity = -2);\n      return (Opal.def(self, '$resolve_expr_val', $PreprocessorReader_resolve_expr_val$82 = function $$resolve_expr_val(val) {\n        var $a, $b, self = this, quoted = nil;\n\n        \n        if ($truthy(($truthy($a = ($truthy($b = val['$start_with?'](\"\\\"\")) ? val['$end_with?'](\"\\\"\") : $b)) ? $a : ($truthy($b = val['$start_with?'](\"'\")) ? val['$end_with?'](\"'\") : $b)))) {\n          \n          quoted = true;\n          val = val.$slice(1, $rb_minus(val.$length(), 1));\n        } else {\n          quoted = false\n        };\n        if ($truthy(val['$include?']($$($nesting, 'ATTR_REF_HEAD')))) {\n          val = self.document.$sub_attributes(val, $hash2([\"attribute_missing\"], {\"attribute_missing\": \"drop\"}))};\n        if ($truthy(quoted)) {\n          return val\n        } else if ($truthy(val['$empty?']())) {\n          return nil\n        } else if (val['$=='](\"true\")) {\n          return true\n        } else if (val['$=='](\"false\")) {\n          return false\n        } else if ($truthy(val.$rstrip()['$empty?']())) {\n          return \" \"\n        } else if ($truthy(val['$include?'](\".\"))) {\n          return val.$to_f()\n        } else {\n          return val.$to_i()\n        };\n      }, $PreprocessorReader_resolve_expr_val$82.$$arity = 1), nil) && 'resolve_expr_val';\n    })($nesting[0], $$($nesting, 'Reader'), $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/section\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$===', '$+', '$level', '$special', '$generate_id', '$title', '$==', '$>', '$sectnum', '$reftext', '$!', '$empty?', '$sub_placeholder', '$sub_quotes', '$compat_mode', '$[]', '$attributes', '$context', '$assign_numeral', '$class', '$object_id', '$inspect', '$size', '$length', '$chr', '$[]=', '$-', '$gsub', '$downcase', '$delete', '$tr_s', '$end_with?', '$chop', '$start_with?', '$slice', '$key?', '$catalog', '$unique_id_start_index']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Section');\n\n      var $nesting = [self].concat($parent_nesting), $Section_initialize$1, $Section_generate_id$2, $Section_sectnum$3, $Section_xreftext$4, $Section_$lt$lt$5, $Section_to_s$6, $Section_generate_id$7;\n\n      self.$$prototype.document = self.$$prototype.level = self.$$prototype.parent = self.$$prototype.numeral = self.$$prototype.numbered = self.$$prototype.sectname = self.$$prototype.title = self.$$prototype.blocks = nil;\n      \n      self.$attr_accessor(\"index\");\n      self.$attr_accessor(\"sectname\");\n      self.$attr_accessor(\"special\");\n      self.$attr_accessor(\"numbered\");\n      self.$attr_reader(\"caption\");\n      \n      Opal.def(self, '$initialize', $Section_initialize$1 = function $$initialize(parent, level, numbered, opts) {\n        var $a, $b, $iter = $Section_initialize$1.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $Section_initialize$1.$$p = null;\n        \n        \n        if (parent == null) {\n          parent = nil;\n        };\n        \n        if (level == null) {\n          level = nil;\n        };\n        \n        if (numbered == null) {\n          numbered = false;\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Section_initialize$1, false), [parent, \"section\", opts], null);\n        if ($truthy($$($nesting, 'Section')['$==='](parent))) {\n          $a = [($truthy($b = level) ? $b : $rb_plus(parent.$level(), 1)), parent.$special()], (self.level = $a[0]), (self.special = $a[1]), $a\n        } else {\n          $a = [($truthy($b = level) ? $b : 1), false], (self.level = $a[0]), (self.special = $a[1]), $a\n        };\n        self.numbered = numbered;\n        return (self.index = 0);\n      }, $Section_initialize$1.$$arity = -1);\n      Opal.alias(self, \"name\", \"title\");\n      \n      Opal.def(self, '$generate_id', $Section_generate_id$2 = function $$generate_id() {\n        var self = this;\n\n        return $$($nesting, 'Section').$generate_id(self.$title(), self.document)\n      }, $Section_generate_id$2.$$arity = 0);\n      \n      Opal.def(self, '$sectnum', $Section_sectnum$3 = function $$sectnum(delimiter, append) {\n        var $a, self = this;\n\n        \n        \n        if (delimiter == null) {\n          delimiter = \".\";\n        };\n        \n        if (append == null) {\n          append = nil;\n        };\n        append = ($truthy($a = append) ? $a : (function() {if (append['$=='](false)) {\n          return \"\"\n        } else {\n          return delimiter\n        }; return nil; })());\n        if ($truthy(($truthy($a = $rb_gt(self.level, 1)) ? $$($nesting, 'Section')['$==='](self.parent) : $a))) {\n          return \"\" + (self.parent.$sectnum(delimiter, delimiter)) + (self.numeral) + (append)\n        } else {\n          return \"\" + (self.numeral) + (append)\n        };\n      }, $Section_sectnum$3.$$arity = -1);\n      \n      Opal.def(self, '$xreftext', $Section_xreftext$4 = function $$xreftext(xrefstyle) {\n        var $a, self = this, val = nil, $case = nil, type = nil, quoted_title = nil, signifier = nil;\n\n        \n        \n        if (xrefstyle == null) {\n          xrefstyle = nil;\n        };\n        if ($truthy(($truthy($a = (val = self.$reftext())) ? val['$empty?']()['$!']() : $a))) {\n          return val\n        } else if ($truthy(xrefstyle)) {\n          if ($truthy(self.numbered)) {\n            return (function() {$case = xrefstyle;\n            if (\"full\"['$===']($case)) {\n            if ($truthy(($truthy($a = (type = self.sectname)['$=='](\"chapter\")) ? $a : type['$=='](\"appendix\")))) {\n              quoted_title = self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title())\n            } else {\n              quoted_title = self.$sub_placeholder(self.$sub_quotes((function() {if ($truthy(self.document.$compat_mode())) {\n                return \"``%s''\"\n              } else {\n                return \"\\\"`%s`\\\"\"\n              }; return nil; })()), self.$title())\n            };\n            if ($truthy((signifier = self.document.$attributes()['$[]'](\"\" + (type) + \"-refsig\")))) {\n              return \"\" + (signifier) + \" \" + (self.$sectnum(\".\", \",\")) + \" \" + (quoted_title)\n            } else {\n              return \"\" + (self.$sectnum(\".\", \",\")) + \" \" + (quoted_title)\n            };}\n            else if (\"short\"['$===']($case)) {if ($truthy((signifier = self.document.$attributes()['$[]'](\"\" + (self.sectname) + \"-refsig\")))) {\n              return \"\" + (signifier) + \" \" + (self.$sectnum(\".\", \"\"))\n            } else {\n              return self.$sectnum(\".\", \"\")\n            }}\n            else {if ($truthy(($truthy($a = (type = self.sectname)['$=='](\"chapter\")) ? $a : type['$=='](\"appendix\")))) {\n              \n              return self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title());\n            } else {\n              return self.$title()\n            }}})()\n          } else if ($truthy(($truthy($a = (type = self.sectname)['$=='](\"chapter\")) ? $a : type['$=='](\"appendix\")))) {\n            \n            return self.$sub_placeholder(self.$sub_quotes(\"_%s_\"), self.$title());\n          } else {\n            return self.$title()\n          }\n        } else {\n          return self.$title()\n        };\n      }, $Section_xreftext$4.$$arity = -1);\n      \n      Opal.def(self, '$<<', $Section_$lt$lt$5 = function(block) {\n        var $iter = $Section_$lt$lt$5.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Section_$lt$lt$5.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        if (block.$context()['$=='](\"section\")) {\n          self.$assign_numeral(block)};\n        return $send(self, Opal.find_super_dispatcher(self, '<<', $Section_$lt$lt$5, false), $zuper, $iter);\n      }, $Section_$lt$lt$5.$$arity = 1);\n      \n      Opal.def(self, '$to_s', $Section_to_s$6 = function $$to_s() {\n        var $iter = $Section_to_s$6.$$p, $yield = $iter || nil, self = this, formal_title = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Section_to_s$6.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        if ($truthy(self.title)) {\n          \n          formal_title = (function() {if ($truthy(self.numbered)) {\n            return \"\" + (self.$sectnum()) + \" \" + (self.title)\n          } else {\n            return self.title\n          }; return nil; })();\n          return \"\" + \"#<\" + (self.$class()) + \"@\" + (self.$object_id()) + \" {level: \" + (self.level) + \", title: \" + (formal_title.$inspect()) + \", blocks: \" + (self.blocks.$size()) + \"}>\";\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'to_s', $Section_to_s$6, false), $zuper, $iter)\n        }\n      }, $Section_to_s$6.$$arity = 0);\n      return (Opal.defs(self, '$generate_id', $Section_generate_id$7 = function $$generate_id(title, document) {\n        var $a, $b, self = this, attrs = nil, pre = nil, sep = nil, no_sep = nil, $writer = nil, sep_sub = nil, gen_id = nil, ids = nil, cnt = nil, candidate_id = nil;\n\n        \n        attrs = document.$attributes();\n        pre = ($truthy($a = attrs['$[]'](\"idprefix\")) ? $a : \"_\");\n        if ($truthy((sep = attrs['$[]'](\"idseparator\")))) {\n          if ($truthy(($truthy($a = sep.$length()['$=='](1)) ? $a : ($truthy($b = (no_sep = sep['$empty?']())['$!']()) ? (sep = (($writer = [\"idseparator\", sep.$chr()]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])) : $b)))) {\n            sep_sub = (function() {if ($truthy(($truthy($a = sep['$=='](\"-\")) ? $a : sep['$=='](\".\")))) {\n              return \" .-\"\n            } else {\n              return \"\" + \" \" + (sep) + \".-\"\n            }; return nil; })()}\n        } else {\n          $a = [\"_\", \" _.-\"], (sep = $a[0]), (sep_sub = $a[1]), $a\n        };\n        gen_id = \"\" + (pre) + (title.$downcase().$gsub($$($nesting, 'InvalidSectionIdCharsRx'), \"\"));\n        if ($truthy(no_sep)) {\n          gen_id = gen_id.$delete(\" \")\n        } else {\n          \n          gen_id = gen_id.$tr_s(sep_sub, sep);\n          if ($truthy(gen_id['$end_with?'](sep))) {\n            gen_id = gen_id.$chop()};\n          if ($truthy(($truthy($a = pre['$empty?']()) ? gen_id['$start_with?'](sep) : $a))) {\n            gen_id = gen_id.$slice(1, gen_id.$length())};\n        };\n        if ($truthy(document.$catalog()['$[]'](\"refs\")['$key?'](gen_id))) {\n          \n          ids = document.$catalog()['$[]'](\"refs\");\n          cnt = $$($nesting, 'Compliance').$unique_id_start_index();\n          while ($truthy(ids['$[]']((candidate_id = \"\" + (gen_id) + (sep) + (cnt))))) {\n            cnt = $rb_plus(cnt, 1)\n          };\n          return candidate_id;\n        } else {\n          return gen_id\n        };\n      }, $Section_generate_id$7.$$arity = 2), nil) && 'generate_id';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/stylesheets\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$join', '$new', '$rstrip', '$read', '$primary_stylesheet_data', '$write', '$primary_stylesheet_name', '$stylesheet_basename', '$for', '$read_stylesheet', '$coderay_stylesheet_data', '$coderay_stylesheet_name', '$pygments_stylesheet_data', '$pygments_stylesheet_name']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Stylesheets');\n\n      var $nesting = [self].concat($parent_nesting), $Stylesheets_instance$1, $Stylesheets_primary_stylesheet_name$2, $Stylesheets_primary_stylesheet_data$3, $Stylesheets_embed_primary_stylesheet$4, $Stylesheets_write_primary_stylesheet$5, $Stylesheets_coderay_stylesheet_name$6, $Stylesheets_coderay_stylesheet_data$7, $Stylesheets_embed_coderay_stylesheet$8, $Stylesheets_write_coderay_stylesheet$9, $Stylesheets_pygments_stylesheet_name$10, $Stylesheets_pygments_stylesheet_data$11, $Stylesheets_embed_pygments_stylesheet$12, $Stylesheets_write_pygments_stylesheet$13;\n\n      self.$$prototype.primary_stylesheet_data = nil;\n      \n      Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', \"asciidoctor.css\");\n      Opal.const_set($nesting[0], 'STYLESHEETS_DIR', $$$('::', 'File').$join($$($nesting, 'DATA_DIR'), \"stylesheets\"));\n      self.__instance__ = self.$new();\n      Opal.defs(self, '$instance', $Stylesheets_instance$1 = function $$instance() {\n        var self = this;\n        if (self.__instance__ == null) self.__instance__ = nil;\n\n        return self.__instance__\n      }, $Stylesheets_instance$1.$$arity = 0);\n      \n      Opal.def(self, '$primary_stylesheet_name', $Stylesheets_primary_stylesheet_name$2 = function $$primary_stylesheet_name() {\n        var self = this;\n\n        return $$($nesting, 'DEFAULT_STYLESHEET_NAME')\n      }, $Stylesheets_primary_stylesheet_name$2.$$arity = 0);\n      \n      Opal.def(self, '$primary_stylesheet_data', $Stylesheets_primary_stylesheet_data$3 = function $$primary_stylesheet_data() {\n        var $a, self = this;\n\n        return (self.primary_stylesheet_data = ($truthy($a = self.primary_stylesheet_data) ? $a : $$$('::', 'File').$read($$$('::', 'File').$join($$($nesting, 'STYLESHEETS_DIR'), \"asciidoctor-default.css\"), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_READ_MODE')})).$rstrip()))\n      }, $Stylesheets_primary_stylesheet_data$3.$$arity = 0);\n      \n      Opal.def(self, '$embed_primary_stylesheet', $Stylesheets_embed_primary_stylesheet$4 = function $$embed_primary_stylesheet() {\n        var self = this;\n\n        return \"\" + \"<style>\\n\" + (self.$primary_stylesheet_data()) + \"\\n\" + \"</style>\"\n      }, $Stylesheets_embed_primary_stylesheet$4.$$arity = 0);\n      \n      Opal.def(self, '$write_primary_stylesheet', $Stylesheets_write_primary_stylesheet$5 = function $$write_primary_stylesheet(target_dir) {\n        var self = this;\n\n        \n        \n        if (target_dir == null) {\n          target_dir = \".\";\n        };\n        return $$$('::', 'File').$write($$$('::', 'File').$join(target_dir, self.$primary_stylesheet_name()), self.$primary_stylesheet_data(), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));\n      }, $Stylesheets_write_primary_stylesheet$5.$$arity = -1);\n      \n      Opal.def(self, '$coderay_stylesheet_name', $Stylesheets_coderay_stylesheet_name$6 = function $$coderay_stylesheet_name() {\n        var self = this;\n\n        return $$($nesting, 'SyntaxHighlighter').$for(\"coderay\").$stylesheet_basename()\n      }, $Stylesheets_coderay_stylesheet_name$6.$$arity = 0);\n      \n      Opal.def(self, '$coderay_stylesheet_data', $Stylesheets_coderay_stylesheet_data$7 = function $$coderay_stylesheet_data() {\n        var self = this;\n\n        return $$($nesting, 'SyntaxHighlighter').$for(\"coderay\").$read_stylesheet()\n      }, $Stylesheets_coderay_stylesheet_data$7.$$arity = 0);\n      \n      Opal.def(self, '$embed_coderay_stylesheet', $Stylesheets_embed_coderay_stylesheet$8 = function $$embed_coderay_stylesheet() {\n        var self = this;\n\n        return \"\" + \"<style>\\n\" + (self.$coderay_stylesheet_data()) + \"\\n\" + \"</style>\"\n      }, $Stylesheets_embed_coderay_stylesheet$8.$$arity = 0);\n      \n      Opal.def(self, '$write_coderay_stylesheet', $Stylesheets_write_coderay_stylesheet$9 = function $$write_coderay_stylesheet(target_dir) {\n        var self = this;\n\n        \n        \n        if (target_dir == null) {\n          target_dir = \".\";\n        };\n        return $$$('::', 'File').$write($$$('::', 'File').$join(target_dir, self.$coderay_stylesheet_name()), self.$coderay_stylesheet_data(), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));\n      }, $Stylesheets_write_coderay_stylesheet$9.$$arity = -1);\n      \n      Opal.def(self, '$pygments_stylesheet_name', $Stylesheets_pygments_stylesheet_name$10 = function $$pygments_stylesheet_name(style) {\n        var self = this;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        return $$($nesting, 'SyntaxHighlighter').$for(\"pygments\").$stylesheet_basename(style);\n      }, $Stylesheets_pygments_stylesheet_name$10.$$arity = -1);\n      \n      Opal.def(self, '$pygments_stylesheet_data', $Stylesheets_pygments_stylesheet_data$11 = function $$pygments_stylesheet_data(style) {\n        var self = this;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        return $$($nesting, 'SyntaxHighlighter').$for(\"pygments\").$read_stylesheet(style);\n      }, $Stylesheets_pygments_stylesheet_data$11.$$arity = -1);\n      \n      Opal.def(self, '$embed_pygments_stylesheet', $Stylesheets_embed_pygments_stylesheet$12 = function $$embed_pygments_stylesheet(style) {\n        var self = this;\n\n        \n        \n        if (style == null) {\n          style = nil;\n        };\n        return \"\" + \"<style>\\n\" + (self.$pygments_stylesheet_data(style)) + \"\\n\" + \"</style>\";\n      }, $Stylesheets_embed_pygments_stylesheet$12.$$arity = -1);\n      return (Opal.def(self, '$write_pygments_stylesheet', $Stylesheets_write_pygments_stylesheet$13 = function $$write_pygments_stylesheet(target_dir, style) {\n        var self = this;\n\n        \n        \n        if (target_dir == null) {\n          target_dir = \".\";\n        };\n        \n        if (style == null) {\n          style = nil;\n        };\n        return $$$('::', 'File').$write($$$('::', 'File').$join(target_dir, self.$pygments_stylesheet_name(style)), self.$pygments_stylesheet_data(style), $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));\n      }, $Stylesheets_write_pygments_stylesheet$13.$$arity = -1), nil) && 'write_pygments_stylesheet';\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/table\"] = function(Opal) {\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  function $rb_divide(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$new', '$[]', '$>', '$to_i', '$<', '$==', '$[]=', '$-', '$attributes', '$truncate', '$*', '$/', '$to_f', '$empty?', '$body', '$each', '$<<', '$size', '$+', '$assign_column_widths', '$warn', '$logger', '$update_attributes', '$assign_width', '$round', '$map', '$shift', '$reinitialize', '$head=', '$nil?', '$unshift', '$pop', '$foot=', '$parent', '$sourcemap', '$dup', '$header_row?', '$table', '$style', '$merge', '$delete', '$start_with?', '$rstrip', '$slice', '$length', '$advance', '$lstrip', '$strip', '$split', '$include?', '$readlines', '$catalog_inline_anchor', '$=~', '$apply_subs', '$convert', '$text', '$!=', '$file', '$lineno', '$to_s', '$include', '$to_set', '$mark', '$key?', '$nested?', '$document', '$error', '$message_with_context', '$cursor_at_prev_line', '$nil_or_empty?', '$escape', '$columns', '$match', '$chop', '$end_with?', '$gsub', '$!', '$push_cellspec', '$cell_open?', '$close_cell', '$take_cellspec', '$squeeze', '$upto', '$times', '$cursor_before_mark', '$rowspan', '$activate_rowspan', '$colspan', '$end_of_row?', '$close_row', '$private', '$rows', '$effective_column_visits']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Table');\n\n      var $nesting = [self].concat($parent_nesting), $Table_initialize$4, $Table_header_row$ques$5, $Table_create_columns$6, $Table_assign_column_widths$8, $Table_partition_header_footer$12;\n\n      self.$$prototype.attributes = self.$$prototype.document = self.$$prototype.has_header_option = self.$$prototype.rows = self.$$prototype.columns = nil;\n      \n      Opal.const_set($nesting[0], 'DEFAULT_PRECISION', 4);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Rows');\n\n        var $nesting = [self].concat($parent_nesting), $Rows_initialize$1, $Rows_by_section$2, $Rows_to_h$3;\n\n        self.$$prototype.head = self.$$prototype.body = self.$$prototype.foot = nil;\n        \n        self.$attr_accessor(\"head\", \"foot\", \"body\");\n        \n        Opal.def(self, '$initialize', $Rows_initialize$1 = function $$initialize(head, foot, body) {\n          var self = this;\n\n          \n          \n          if (head == null) {\n            head = [];\n          };\n          \n          if (foot == null) {\n            foot = [];\n          };\n          \n          if (body == null) {\n            body = [];\n          };\n          self.head = head;\n          self.foot = foot;\n          return (self.body = body);\n        }, $Rows_initialize$1.$$arity = -1);\n        Opal.alias(self, \"[]\", \"send\");\n        \n        Opal.def(self, '$by_section', $Rows_by_section$2 = function $$by_section() {\n          var self = this;\n\n          return [[\"head\", self.head], [\"body\", self.body], [\"foot\", self.foot]]\n        }, $Rows_by_section$2.$$arity = 0);\n        return (Opal.def(self, '$to_h', $Rows_to_h$3 = function $$to_h() {\n          var self = this;\n\n          return $hash2([\"head\", \"body\", \"foot\"], {\"head\": self.head, \"body\": self.body, \"foot\": self.foot})\n        }, $Rows_to_h$3.$$arity = 0), nil) && 'to_h';\n      })($nesting[0], null, $nesting);\n      self.$attr_accessor(\"columns\");\n      self.$attr_accessor(\"rows\");\n      self.$attr_accessor(\"has_header_option\");\n      self.$attr_reader(\"caption\");\n      \n      Opal.def(self, '$initialize', $Table_initialize$4 = function $$initialize(parent, attributes) {\n        var $a, $b, $iter = $Table_initialize$4.$$p, $yield = $iter || nil, self = this, pcwidth = nil, pcwidth_intval = nil, $writer = nil, abswidth_val = nil;\n\n        if ($iter) $Table_initialize$4.$$p = null;\n        \n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Table_initialize$4, false), [parent, \"table\"], null);\n        self.rows = $$($nesting, 'Rows').$new();\n        self.columns = [];\n        self.has_header_option = false;\n        if ($truthy((pcwidth = attributes['$[]'](\"width\")))) {\n          if ($truthy(($truthy($a = $rb_gt((pcwidth_intval = pcwidth.$to_i()), 100)) ? $a : $rb_lt(pcwidth_intval, 1)))) {\n            if ($truthy((($a = pcwidth_intval['$=='](0)) ? ($truthy($b = pcwidth['$=='](\"0\")) ? $b : pcwidth['$=='](\"0%\")) : pcwidth_intval['$=='](0)))) {\n            } else {\n              pcwidth_intval = 100\n            }}\n        } else {\n          pcwidth_intval = 100\n        };\n        \n        $writer = [\"tablepcwidth\", pcwidth_intval];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        if ($truthy(self.document.$attributes()['$[]'](\"pagewidth\"))) {\n          \n          $writer = [\"tableabswidth\", (function() {if ((abswidth_val = $rb_times($rb_divide(pcwidth_intval, 100), self.document.$attributes()['$[]'](\"pagewidth\").$to_f()).$truncate($$($nesting, 'DEFAULT_PRECISION')))['$=='](abswidth_val.$to_i())) {\n            return abswidth_val.$to_i()\n          } else {\n            return abswidth_val\n          }; return nil; })()];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(attributes['$[]'](\"rotate-option\"))) {\n          \n          $writer = [\"orientation\", \"landscape\"];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        } else {\n          return nil\n        };\n      }, $Table_initialize$4.$$arity = 2);\n      \n      Opal.def(self, '$header_row?', $Table_header_row$ques$5 = function() {\n        var $a, self = this, val = nil;\n\n        if ($truthy(($truthy($a = (val = self.has_header_option)) ? self.rows.$body()['$empty?']() : $a))) {\n          return val\n        } else {\n          return nil\n        }\n      }, $Table_header_row$ques$5.$$arity = 0);\n      \n      Opal.def(self, '$create_columns', $Table_create_columns$6 = function $$create_columns(colspecs) {\n        var $$7, $a, self = this, cols = nil, autowidth_cols = nil, width_base = nil, num_cols = nil, $writer = nil;\n\n        \n        cols = [];\n        autowidth_cols = nil;\n        width_base = 0;\n        $send(colspecs, 'each', [], ($$7 = function(colspec){var self = $$7.$$s || this, $a, colwidth = nil;\n\n        \n          \n          if (colspec == null) {\n            colspec = nil;\n          };\n          colwidth = colspec['$[]'](\"width\");\n          cols['$<<']($$($nesting, 'Column').$new(self, cols.$size(), colspec));\n          if ($truthy($rb_lt(colwidth, 0))) {\n            return (autowidth_cols = ($truthy($a = autowidth_cols) ? $a : []))['$<<'](cols['$[]'](-1))\n          } else {\n            return (width_base = $rb_plus(width_base, colwidth))\n          };}, $$7.$$s = self, $$7.$$arity = 1, $$7));\n        if ($truthy($rb_gt((num_cols = (self.columns = cols).$size()), 0))) {\n          \n          \n          $writer = [\"colcount\", num_cols];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          if ($truthy(($truthy($a = $rb_gt(width_base, 0)) ? $a : autowidth_cols))) {\n          } else {\n            width_base = nil\n          };\n          self.$assign_column_widths(width_base, autowidth_cols);};\n        return nil;\n      }, $Table_create_columns$6.$$arity = 1);\n      \n      Opal.def(self, '$assign_column_widths', $Table_assign_column_widths$8 = function $$assign_column_widths(width_base, autowidth_cols) {\n        var $$9, $$10, $$11, self = this, precision = nil, total_width = nil, col_pcwidth = nil, autowidth = nil, autowidth_attrs = nil;\n\n        \n        \n        if (width_base == null) {\n          width_base = nil;\n        };\n        \n        if (autowidth_cols == null) {\n          autowidth_cols = nil;\n        };\n        precision = $$($nesting, 'DEFAULT_PRECISION');\n        total_width = (col_pcwidth = 0);\n        if ($truthy(width_base)) {\n          \n          if ($truthy(autowidth_cols)) {\n            \n            if ($truthy($rb_gt(width_base, 100))) {\n              \n              autowidth = 0;\n              self.$logger().$warn(\"\" + \"total column width must not exceed 100% when using autowidth columns; got \" + (width_base) + \"%\");\n            } else {\n              \n              autowidth = $rb_divide($rb_minus(100, width_base), autowidth_cols.$size()).$truncate(precision);\n              if (autowidth.$to_i()['$=='](autowidth)) {\n                autowidth = autowidth.$to_i()};\n              width_base = 100;\n            };\n            autowidth_attrs = $hash2([\"width\", \"autowidth-option\"], {\"width\": autowidth, \"autowidth-option\": \"\"});\n            $send(autowidth_cols, 'each', [], ($$9 = function(col){var self = $$9.$$s || this;\n\n            \n              \n              if (col == null) {\n                col = nil;\n              };\n              return col.$update_attributes(autowidth_attrs);}, $$9.$$s = self, $$9.$$arity = 1, $$9));};\n          $send(self.columns, 'each', [], ($$10 = function(col){var self = $$10.$$s || this;\n\n          \n            \n            if (col == null) {\n              col = nil;\n            };\n            return (total_width = $rb_plus(total_width, (col_pcwidth = col.$assign_width(nil, width_base, precision))));}, $$10.$$s = self, $$10.$$arity = 1, $$10));\n        } else {\n          \n          col_pcwidth = $rb_divide(100, self.columns.$size()).$truncate(precision);\n          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {\n            col_pcwidth = col_pcwidth.$to_i()};\n          $send(self.columns, 'each', [], ($$11 = function(col){var self = $$11.$$s || this;\n\n          \n            \n            if (col == null) {\n              col = nil;\n            };\n            return (total_width = $rb_plus(total_width, col.$assign_width(col_pcwidth, nil, precision)));}, $$11.$$s = self, $$11.$$arity = 1, $$11));\n        };\n        if (total_width['$=='](100)) {\n        } else {\n          self.columns['$[]'](-1).$assign_width($rb_plus($rb_minus(100, total_width), col_pcwidth).$round(precision), nil, precision)\n        };\n        return nil;\n      }, $Table_assign_column_widths$8.$$arity = -1);\n      return (Opal.def(self, '$partition_header_footer', $Table_partition_header_footer$12 = function $$partition_header_footer(attrs) {\n        var $$13, $$14, $a, self = this, num_body_rows = nil, $writer = nil, body = nil;\n\n        \n        num_body_rows = (($writer = [\"rowcount\", (body = self.rows.$body()).$size()]), $send(self.attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]);\n        if ($truthy($rb_gt(num_body_rows, 0))) {\n          if ($truthy(self.has_header_option)) {\n            \n            \n            $writer = [[$send(body.$shift(), 'map', [], ($$13 = function(cell){var self = $$13.$$s || this;\n\n            \n              \n              if (cell == null) {\n                cell = nil;\n              };\n              return cell.$reinitialize(true);}, $$13.$$s = self, $$13.$$arity = 1, $$13))]];\n            $send(self.rows, 'head=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            num_body_rows = $rb_minus(num_body_rows, 1);\n          } else if ($truthy(self.has_header_option['$nil?']())) {\n            \n            self.has_header_option = false;\n            body.$unshift($send(body.$shift(), 'map', [], ($$14 = function(cell){var self = $$14.$$s || this;\n\n            \n              \n              if (cell == null) {\n                cell = nil;\n              };\n              return cell.$reinitialize(false);}, $$14.$$s = self, $$14.$$arity = 1, $$14)));}};\n        if ($truthy(($truthy($a = $rb_gt(num_body_rows, 0)) ? attrs['$[]'](\"footer-option\") : $a))) {\n          \n          $writer = [[body.$pop()]];\n          $send(self.rows, 'foot=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        return nil;\n      }, $Table_partition_header_footer$12.$$arity = 1), nil) && 'partition_header_footer';\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Column');\n\n      var $nesting = [self].concat($parent_nesting), $Column_initialize$15, $Column_assign_width$16, $Column_block$ques$17, $Column_inline$ques$18;\n\n      self.$$prototype.attributes = nil;\n      \n      self.$attr_accessor(\"style\");\n      \n      Opal.def(self, '$initialize', $Column_initialize$15 = function $$initialize(table, index, attributes) {\n        var $a, $iter = $Column_initialize$15.$$p, $yield = $iter || nil, self = this, $writer = nil;\n\n        if ($iter) $Column_initialize$15.$$p = null;\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Column_initialize$15, false), [table, \"table_column\"], null);\n        self.style = attributes['$[]'](\"style\");\n        \n        $writer = [\"colnumber\", $rb_plus(index, 1)];\n        $send(attributes, '[]=', Opal.to_a($writer));\n        $writer[$rb_minus($writer[\"length\"], 1)];;\n        ($truthy($a = attributes['$[]'](\"width\")) ? $a : (($writer = [\"width\", 1]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attributes['$[]'](\"halign\")) ? $a : (($writer = [\"halign\", \"left\"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        ($truthy($a = attributes['$[]'](\"valign\")) ? $a : (($writer = [\"valign\", \"top\"]), $send(attributes, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        return self.$update_attributes(attributes);\n      }, $Column_initialize$15.$$arity = -3);\n      Opal.alias(self, \"table\", \"parent\");\n      \n      Opal.def(self, '$assign_width', $Column_assign_width$16 = function $$assign_width(col_pcwidth, width_base, precision) {\n        var self = this, $writer = nil, col_abswidth = nil;\n\n        \n        if ($truthy(width_base)) {\n          \n          col_pcwidth = $rb_divide($rb_times(self.attributes['$[]'](\"width\").$to_f(), 100), width_base).$truncate(precision);\n          if (col_pcwidth.$to_i()['$=='](col_pcwidth)) {\n            col_pcwidth = col_pcwidth.$to_i()};};\n        if ($truthy(self.$parent().$attributes()['$[]'](\"tableabswidth\"))) {\n          \n          $writer = [\"colabswidth\", (function() {if ((col_abswidth = $rb_times($rb_divide(col_pcwidth, 100), self.$parent().$attributes()['$[]'](\"tableabswidth\")).$truncate(precision))['$=='](col_abswidth.$to_i())) {\n            return col_abswidth.$to_i()\n          } else {\n            return col_abswidth\n          }; return nil; })()];\n          $send(self.attributes, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        \n        $writer = [\"colpcwidth\", col_pcwidth];\n        $send(self.attributes, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];;\n      }, $Column_assign_width$16.$$arity = 3);\n      \n      Opal.def(self, '$block?', $Column_block$ques$17 = function() {\n        var self = this;\n\n        return false\n      }, $Column_block$ques$17.$$arity = 0);\n      return (Opal.def(self, '$inline?', $Column_inline$ques$18 = function() {\n        var self = this;\n\n        return false\n      }, $Column_inline$ques$18.$$arity = 0), nil) && 'inline?';\n    })($$($nesting, 'Table'), $$($nesting, 'AbstractNode'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Cell');\n\n      var $nesting = [self].concat($parent_nesting), $Cell_initialize$19, $Cell_reinitialize$20, $Cell_catalog_inline_anchor$21, $Cell_text$22, $Cell_text$eq$23, $Cell_content$24, $Cell_lines$26, $Cell_source$27, $Cell_file$28, $Cell_lineno$29, $Cell_to_s$30;\n\n      self.$$prototype.document = self.$$prototype.reinitialize_args = self.$$prototype.attributes = self.$$prototype.cursor = self.$$prototype.text = self.$$prototype.subs = self.$$prototype.style = self.$$prototype.inner_document = self.$$prototype.source_location = self.$$prototype.colspan = self.$$prototype.rowspan = nil;\n      \n      Opal.const_set($nesting[0], 'DOUBLE_LF', $rb_times($$($nesting, 'LF'), 2));\n      self.$attr_accessor(\"colspan\");\n      self.$attr_accessor(\"rowspan\");\n      Opal.alias(self, \"column\", \"parent\");\n      self.$attr_reader(\"inner_document\");\n      \n      Opal.def(self, '$initialize', $Cell_initialize$19 = function $$initialize(column, cell_text, attributes, opts) {\n        var $a, $b, $c, $iter = $Cell_initialize$19.$$p, $yield = $iter || nil, self = this, in_header_row = nil, cell_style = nil, asciidoc = nil, inner_document_cursor = nil, lines_advanced = nil, literal = nil, normal_psv = nil, parent_doctitle = nil, inner_document_lines = nil, unprocessed_line1 = nil, preprocessed_lines = nil, $writer = nil;\n\n        if ($iter) $Cell_initialize$19.$$p = null;\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $Cell_initialize$19, false), [column, \"table_cell\"], null);\n        self.cursor = (self.reinitialize_args = nil);\n        if ($truthy(self.document.$sourcemap())) {\n          self.source_location = opts['$[]'](\"cursor\").$dup()};\n        if ($truthy(column)) {\n          \n          if ($truthy((in_header_row = column.$table()['$header_row?']()))) {\n            if ($truthy((($a = in_header_row['$=='](\"implicit\")) ? (cell_style = ($truthy($b = column.$style()) ? $b : ($truthy($c = attributes) ? attributes['$[]'](\"style\") : $c))) : in_header_row['$=='](\"implicit\")))) {\n              \n              if ($truthy(($truthy($a = cell_style['$=='](\"asciidoc\")) ? $a : cell_style['$=='](\"literal\")))) {\n                self.reinitialize_args = [column, cell_text, ($truthy($a = attributes) ? attributes.$merge() : $a), opts]};\n              cell_style = nil;}\n          } else {\n            cell_style = column.$style()\n          };\n          self.$update_attributes(column.$attributes());};\n        if ($truthy(attributes)) {\n          \n          if ($truthy(attributes['$empty?']())) {\n            self.colspan = (self.rowspan = nil)\n          } else {\n            \n            $a = [attributes.$delete(\"colspan\"), attributes.$delete(\"rowspan\")], (self.colspan = $a[0]), (self.rowspan = $a[1]), $a;\n            if ($truthy(in_header_row)) {\n            } else {\n              cell_style = ($truthy($a = attributes['$[]'](\"style\")) ? $a : cell_style)\n            };\n            self.$update_attributes(attributes);\n          };\n          if (cell_style['$=='](\"asciidoc\")) {\n            \n            asciidoc = true;\n            inner_document_cursor = opts['$[]'](\"cursor\");\n            if ($truthy((cell_text = cell_text.$rstrip())['$start_with?']($$($nesting, 'LF')))) {\n              \n              lines_advanced = 1;\n              while ($truthy((cell_text = cell_text.$slice(1, cell_text.$length()))['$start_with?']($$($nesting, 'LF')))) {\n                lines_advanced = $rb_plus(lines_advanced, 1)\n              };\n              inner_document_cursor.$advance(lines_advanced);\n            } else {\n              cell_text = cell_text.$lstrip()\n            };\n          } else if (cell_style['$=='](\"literal\")) {\n            \n            literal = true;\n            cell_text = cell_text.$rstrip();\n            while ($truthy(cell_text['$start_with?']($$($nesting, 'LF')))) {\n              cell_text = cell_text.$slice(1, cell_text.$length())\n            };\n          } else {\n            \n            normal_psv = true;\n            cell_text = (function() {if ($truthy(cell_text)) {\n              return cell_text.$strip()\n            } else {\n              return \"\"\n            }; return nil; })();\n          };\n        } else {\n          \n          self.colspan = (self.rowspan = nil);\n          if (cell_style['$=='](\"asciidoc\")) {\n            \n            asciidoc = true;\n            inner_document_cursor = opts['$[]'](\"cursor\");};\n        };\n        if ($truthy(asciidoc)) {\n          \n          parent_doctitle = self.document.$attributes().$delete(\"doctitle\");\n          inner_document_lines = cell_text.$split($$($nesting, 'LF'), -1);\n          if ($truthy(inner_document_lines['$empty?']())) {\n          } else if ($truthy((unprocessed_line1 = inner_document_lines['$[]'](0))['$include?'](\"::\"))) {\n            \n            preprocessed_lines = $$($nesting, 'PreprocessorReader').$new(self.document, [unprocessed_line1]).$readlines();\n            if ($truthy((($a = unprocessed_line1['$=='](preprocessed_lines['$[]'](0))) ? $rb_lt(preprocessed_lines.$size(), 2) : unprocessed_line1['$=='](preprocessed_lines['$[]'](0))))) {\n            } else {\n              \n              inner_document_lines.$shift();\n              if ($truthy(preprocessed_lines['$empty?']())) {\n              } else {\n                $send(inner_document_lines, 'unshift', Opal.to_a(preprocessed_lines))\n              };\n            };};\n          self.inner_document = $$($nesting, 'Document').$new(inner_document_lines, $hash2([\"standalone\", \"parent\", \"cursor\"], {\"standalone\": false, \"parent\": self.document, \"cursor\": inner_document_cursor}));\n          if ($truthy(parent_doctitle['$nil?']())) {\n          } else {\n            \n            $writer = [\"doctitle\", parent_doctitle];\n            $send(self.document.$attributes(), '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          self.subs = nil;\n        } else if ($truthy(literal)) {\n          \n          self.content_model = \"verbatim\";\n          self.subs = $$($nesting, 'BASIC_SUBS');\n        } else {\n          \n          if ($truthy(normal_psv)) {\n            if ($truthy(in_header_row)) {\n              self.cursor = opts['$[]'](\"cursor\")\n            } else {\n              self.$catalog_inline_anchor(cell_text, opts['$[]'](\"cursor\"))\n            }};\n          self.content_model = \"simple\";\n          self.subs = $$($nesting, 'NORMAL_SUBS');\n        };\n        self.text = cell_text;\n        return (self.style = cell_style);\n      }, $Cell_initialize$19.$$arity = -3);\n      \n      Opal.def(self, '$reinitialize', $Cell_reinitialize$20 = function $$reinitialize(has_header) {\n        var self = this;\n\n        \n        if ($truthy(has_header)) {\n          self.reinitialize_args = nil\n        } else if ($truthy(self.reinitialize_args)) {\n          return $send($$$($$($nesting, 'Table'), 'Cell'), 'new', Opal.to_a(self.reinitialize_args))\n        } else {\n          self.style = self.attributes['$[]'](\"style\")\n        };\n        if ($truthy(self.cursor)) {\n          self.$catalog_inline_anchor()};\n        return self;\n      }, $Cell_reinitialize$20.$$arity = 1);\n      \n      Opal.def(self, '$catalog_inline_anchor', $Cell_catalog_inline_anchor$21 = function $$catalog_inline_anchor(cell_text, cursor) {\n        var $a, self = this;\n\n        \n        \n        if (cell_text == null) {\n          cell_text = self.text;\n        };\n        \n        if (cursor == null) {\n          cursor = nil;\n        };\n        if ($truthy(cursor)) {\n        } else {\n          $a = [self.cursor, nil], (cursor = $a[0]), (self.cursor = $a[1]), $a\n        };\n        if ($truthy(($truthy($a = cell_text['$start_with?'](\"[[\")) ? $$($nesting, 'LeadingInlineAnchorRx')['$=~'](cell_text) : $a))) {\n          return $$($nesting, 'Parser').$catalog_inline_anchor((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)), (($a = $gvars['~']) === nil ? nil : $a['$[]'](2)), self, cursor, self.document)\n        } else {\n          return nil\n        };\n      }, $Cell_catalog_inline_anchor$21.$$arity = -1);\n      \n      Opal.def(self, '$text', $Cell_text$22 = function $$text() {\n        var self = this;\n\n        return self.$apply_subs(self.text, self.subs)\n      }, $Cell_text$22.$$arity = 0);\n      \n      Opal.def(self, '$text=', $Cell_text$eq$23 = function(val) {\n        var self = this;\n\n        return (self.text = val)\n      }, $Cell_text$eq$23.$$arity = 1);\n      \n      Opal.def(self, '$content', $Cell_content$24 = function $$content() {\n        var $$25, $a, self = this, cell_style = nil, subbed_text = nil;\n\n        if ((cell_style = self.style)['$=='](\"asciidoc\")) {\n          return self.inner_document.$convert()\n        } else if ($truthy(self.text['$include?']($$($nesting, 'DOUBLE_LF')))) {\n          return $send(self.$text().$split($$($nesting, 'BlankLineRx')), 'map', [], ($$25 = function(para){var self = $$25.$$s || this, $a;\n\n          \n            \n            if (para == null) {\n              para = nil;\n            };\n            if ($truthy(($truthy($a = cell_style) ? cell_style['$!='](\"header\") : $a))) {\n              return $$($nesting, 'Inline').$new(self.$parent(), \"quoted\", para, $hash2([\"type\"], {\"type\": cell_style})).$convert()\n            } else {\n              return para\n            };}, $$25.$$s = self, $$25.$$arity = 1, $$25))\n        } else if ($truthy((subbed_text = self.$text())['$empty?']())) {\n          return []\n        } else if ($truthy(($truthy($a = cell_style) ? cell_style['$!='](\"header\") : $a))) {\n          return [$$($nesting, 'Inline').$new(self.$parent(), \"quoted\", subbed_text, $hash2([\"type\"], {\"type\": cell_style})).$convert()]\n        } else {\n          return [subbed_text]\n        }\n      }, $Cell_content$24.$$arity = 0);\n      \n      Opal.def(self, '$lines', $Cell_lines$26 = function $$lines() {\n        var self = this;\n\n        return self.text.$split($$($nesting, 'LF'))\n      }, $Cell_lines$26.$$arity = 0);\n      \n      Opal.def(self, '$source', $Cell_source$27 = function $$source() {\n        var self = this;\n\n        return self.text\n      }, $Cell_source$27.$$arity = 0);\n      \n      Opal.def(self, '$file', $Cell_file$28 = function $$file() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$file() : $a)\n      }, $Cell_file$28.$$arity = 0);\n      \n      Opal.def(self, '$lineno', $Cell_lineno$29 = function $$lineno() {\n        var $a, self = this;\n\n        return ($truthy($a = self.source_location) ? self.source_location.$lineno() : $a)\n      }, $Cell_lineno$29.$$arity = 0);\n      return (Opal.def(self, '$to_s', $Cell_to_s$30 = function $$to_s() {\n        var $a, $iter = $Cell_to_s$30.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Cell_to_s$30.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        return \"\" + ($send(self, Opal.find_super_dispatcher(self, 'to_s', $Cell_to_s$30, false), $zuper, $iter).$to_s()) + \" - [text: \" + (self.text) + \", colspan: \" + (($truthy($a = self.colspan) ? $a : 1)) + \", rowspan: \" + (($truthy($a = self.rowspan) ? $a : 1)) + \", attributes: \" + (self.attributes) + \"]\"\n      }, $Cell_to_s$30.$$arity = 0), nil) && 'to_s';\n    })($$($nesting, 'Table'), $$($nesting, 'AbstractBlock'), $nesting);\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'ParserContext');\n\n      var $nesting = [self].concat($parent_nesting), $ParserContext_initialize$31, $ParserContext_starts_with_delimiter$ques$32, $ParserContext_match_delimiter$33, $ParserContext_skip_past_delimiter$34, $ParserContext_skip_past_escaped_delimiter$35, $ParserContext_buffer_has_unclosed_quotes$ques$36, $ParserContext_take_cellspec$37, $ParserContext_push_cellspec$38, $ParserContext_keep_cell_open$39, $ParserContext_mark_cell_closed$40, $ParserContext_cell_open$ques$41, $ParserContext_cell_closed$ques$42, $ParserContext_close_open_cell$43, $ParserContext_close_cell$44, $ParserContext_close_row$47, $ParserContext_activate_rowspan$48, $ParserContext_end_of_row$ques$50, $ParserContext_effective_column_visits$51, $ParserContext_advance$52;\n\n      self.$$prototype.delimiter = self.$$prototype.delimiter_rx = self.$$prototype.buffer = self.$$prototype.cellspecs = self.$$prototype.cell_open = self.$$prototype.format = self.$$prototype.start_cursor_data = self.$$prototype.reader = self.$$prototype.table = self.$$prototype.current_row = self.$$prototype.colcount = self.$$prototype.column_visits = self.$$prototype.active_rowspans = self.$$prototype.linenum = nil;\n      \n      self.$include($$($nesting, 'Logging'));\n      Opal.const_set($nesting[0], 'FORMATS', [\"psv\", \"csv\", \"dsv\", \"tsv\"].$to_set());\n      Opal.const_set($nesting[0], 'DELIMITERS', $hash2([\"psv\", \"csv\", \"dsv\", \"tsv\", \"!sv\"], {\"psv\": [\"|\", /\\|/], \"csv\": [\",\", /,/], \"dsv\": [\":\", /:/], \"tsv\": [\"\\t\", /\\t/], \"!sv\": [\"!\", /!/]}));\n      self.$attr_accessor(\"table\");\n      self.$attr_accessor(\"format\");\n      self.$attr_reader(\"colcount\");\n      self.$attr_accessor(\"buffer\");\n      self.$attr_reader(\"delimiter\");\n      self.$attr_reader(\"delimiter_re\");\n      \n      Opal.def(self, '$initialize', $ParserContext_initialize$31 = function $$initialize(reader, table, attributes) {\n        var $a, $b, self = this, xsv = nil, sep = nil;\n\n        \n        \n        if (attributes == null) {\n          attributes = $hash2([], {});\n        };\n        self.start_cursor_data = (self.reader = reader).$mark();\n        self.table = table;\n        if ($truthy(attributes['$key?'](\"format\"))) {\n          if ($truthy($$($nesting, 'FORMATS')['$include?']((xsv = attributes['$[]'](\"format\"))))) {\n            if (xsv['$=='](\"tsv\")) {\n              self.format = \"csv\"\n            } else if ($truthy((($a = (self.format = xsv)['$=='](\"psv\")) ? table.$document()['$nested?']() : (self.format = xsv)['$=='](\"psv\")))) {\n              xsv = \"!sv\"}\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"\" + \"illegal table format: \" + (xsv), $hash2([\"source_location\"], {\"source_location\": reader.$cursor_at_prev_line()})));\n            $a = [\"psv\", (function() {if ($truthy(table.$document()['$nested?']())) {\n              return \"!sv\"\n            } else {\n              return \"psv\"\n            }; return nil; })()], (self.format = $a[0]), (xsv = $a[1]), $a;\n          }\n        } else {\n          $a = [\"psv\", (function() {if ($truthy(table.$document()['$nested?']())) {\n            return \"!sv\"\n          } else {\n            return \"psv\"\n          }; return nil; })()], (self.format = $a[0]), (xsv = $a[1]), $a\n        };\n        if ($truthy(attributes['$key?'](\"separator\"))) {\n          if ($truthy((sep = attributes['$[]'](\"separator\"))['$nil_or_empty?']())) {\n            $b = $$($nesting, 'DELIMITERS')['$[]'](xsv), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n          } else if (sep['$=='](\"\\\\t\")) {\n            $b = $$($nesting, 'DELIMITERS')['$[]'](\"tsv\"), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n          } else {\n            $a = [sep, new RegExp($$$('::', 'Regexp').$escape(sep))], (self.delimiter = $a[0]), (self.delimiter_rx = $a[1]), $a\n          }\n        } else {\n          $b = $$($nesting, 'DELIMITERS')['$[]'](xsv), $a = Opal.to_ary($b), (self.delimiter = ($a[0] == null ? nil : $a[0])), (self.delimiter_rx = ($a[1] == null ? nil : $a[1])), $b\n        };\n        self.colcount = (function() {if ($truthy(table.$columns()['$empty?']())) {\n          return -1\n        } else {\n          return table.$columns().$size()\n        }; return nil; })();\n        self.buffer = \"\";\n        self.cellspecs = [];\n        self.cell_open = false;\n        self.active_rowspans = [0];\n        self.column_visits = 0;\n        self.current_row = [];\n        return (self.linenum = -1);\n      }, $ParserContext_initialize$31.$$arity = -3);\n      \n      Opal.def(self, '$starts_with_delimiter?', $ParserContext_starts_with_delimiter$ques$32 = function(line) {\n        var self = this;\n\n        return line['$start_with?'](self.delimiter)\n      }, $ParserContext_starts_with_delimiter$ques$32.$$arity = 1);\n      \n      Opal.def(self, '$match_delimiter', $ParserContext_match_delimiter$33 = function $$match_delimiter(line) {\n        var self = this;\n\n        return self.delimiter_rx.$match(line)\n      }, $ParserContext_match_delimiter$33.$$arity = 1);\n      \n      Opal.def(self, '$skip_past_delimiter', $ParserContext_skip_past_delimiter$34 = function $$skip_past_delimiter(pre) {\n        var self = this;\n\n        \n        self.buffer = \"\" + (self.buffer) + (pre) + (self.delimiter);\n        return nil;\n      }, $ParserContext_skip_past_delimiter$34.$$arity = 1);\n      \n      Opal.def(self, '$skip_past_escaped_delimiter', $ParserContext_skip_past_escaped_delimiter$35 = function $$skip_past_escaped_delimiter(pre) {\n        var self = this;\n\n        \n        self.buffer = \"\" + (self.buffer) + (pre.$chop()) + (self.delimiter);\n        return nil;\n      }, $ParserContext_skip_past_escaped_delimiter$35.$$arity = 1);\n      \n      Opal.def(self, '$buffer_has_unclosed_quotes?', $ParserContext_buffer_has_unclosed_quotes$ques$36 = function(append) {\n        var $a, $b, self = this, record = nil, trailing_quote = nil;\n\n        \n        \n        if (append == null) {\n          append = nil;\n        };\n        if ((record = (function() {if ($truthy(append)) {\n          return $rb_plus(self.buffer, append).$strip()\n        } else {\n          return self.buffer.$strip()\n        }; return nil; })())['$=='](\"\\\"\")) {\n          return true\n        } else if ($truthy(record['$start_with?'](\"\\\"\"))) {\n          if ($truthy(($truthy($a = ($truthy($b = (trailing_quote = record['$end_with?'](\"\\\"\"))) ? record['$end_with?'](\"\\\"\\\"\") : $b)) ? $a : record['$start_with?'](\"\\\"\\\"\")))) {\n            return ($truthy($a = (record = record.$gsub(\"\\\"\\\"\", \"\"))['$start_with?'](\"\\\"\")) ? record['$end_with?'](\"\\\"\")['$!']() : $a)\n          } else {\n            return trailing_quote['$!']()\n          }\n        } else {\n          return false\n        };\n      }, $ParserContext_buffer_has_unclosed_quotes$ques$36.$$arity = -1);\n      \n      Opal.def(self, '$take_cellspec', $ParserContext_take_cellspec$37 = function $$take_cellspec() {\n        var self = this;\n\n        return self.cellspecs.$shift()\n      }, $ParserContext_take_cellspec$37.$$arity = 0);\n      \n      Opal.def(self, '$push_cellspec', $ParserContext_push_cellspec$38 = function $$push_cellspec(cellspec) {\n        var $a, self = this;\n\n        \n        \n        if (cellspec == null) {\n          cellspec = $hash2([], {});\n        };\n        self.cellspecs['$<<'](($truthy($a = cellspec) ? $a : $hash2([], {})));\n        return nil;\n      }, $ParserContext_push_cellspec$38.$$arity = -1);\n      \n      Opal.def(self, '$keep_cell_open', $ParserContext_keep_cell_open$39 = function $$keep_cell_open() {\n        var self = this;\n\n        \n        self.cell_open = true;\n        return nil;\n      }, $ParserContext_keep_cell_open$39.$$arity = 0);\n      \n      Opal.def(self, '$mark_cell_closed', $ParserContext_mark_cell_closed$40 = function $$mark_cell_closed() {\n        var self = this;\n\n        \n        self.cell_open = false;\n        return nil;\n      }, $ParserContext_mark_cell_closed$40.$$arity = 0);\n      \n      Opal.def(self, '$cell_open?', $ParserContext_cell_open$ques$41 = function() {\n        var self = this;\n\n        return self.cell_open\n      }, $ParserContext_cell_open$ques$41.$$arity = 0);\n      \n      Opal.def(self, '$cell_closed?', $ParserContext_cell_closed$ques$42 = function() {\n        var self = this;\n\n        return self.cell_open['$!']()\n      }, $ParserContext_cell_closed$ques$42.$$arity = 0);\n      \n      Opal.def(self, '$close_open_cell', $ParserContext_close_open_cell$43 = function $$close_open_cell(next_cellspec) {\n        var self = this;\n\n        \n        \n        if (next_cellspec == null) {\n          next_cellspec = $hash2([], {});\n        };\n        self.$push_cellspec(next_cellspec);\n        if ($truthy(self['$cell_open?']())) {\n          self.$close_cell(true)};\n        self.$advance();\n        return nil;\n      }, $ParserContext_close_open_cell$43.$$arity = -1);\n      \n      Opal.def(self, '$close_cell', $ParserContext_close_cell$44 = function $$close_cell(eol) {try {\n\n        var $a, $b, $$45, self = this, cell_text = nil, cellspec = nil, repeat = nil;\n\n        \n        \n        if (eol == null) {\n          eol = false;\n        };\n        if (self.format['$=='](\"psv\")) {\n          \n          cell_text = self.buffer;\n          self.buffer = \"\";\n          if ($truthy((cellspec = self.$take_cellspec()))) {\n            repeat = ($truthy($a = cellspec.$delete(\"repeatcol\")) ? $a : 1)\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"table missing leading separator; recovering automatically\", $hash2([\"source_location\"], {\"source_location\": $send($$$($$($nesting, 'Reader'), 'Cursor'), 'new', Opal.to_a(self.start_cursor_data))})));\n            cellspec = $hash2([], {});\n            repeat = 1;\n          };\n        } else {\n          \n          cell_text = self.buffer.$strip();\n          self.buffer = \"\";\n          cellspec = nil;\n          repeat = 1;\n          if ($truthy(($truthy($a = (($b = self.format['$=='](\"csv\")) ? cell_text['$empty?']()['$!']() : self.format['$=='](\"csv\"))) ? cell_text['$include?'](\"\\\"\") : $a))) {\n            if ($truthy(($truthy($a = cell_text['$start_with?'](\"\\\"\")) ? cell_text['$end_with?'](\"\\\"\") : $a))) {\n              if ($truthy((cell_text = cell_text.$slice(1, $rb_minus(cell_text.$length(), 2))))) {\n                cell_text = cell_text.$strip().$squeeze(\"\\\"\")\n              } else {\n                \n                self.$logger().$error(self.$message_with_context(\"unclosed quote in CSV data; setting cell to empty\", $hash2([\"source_location\"], {\"source_location\": self.reader.$cursor_at_prev_line()})));\n                cell_text = \"\";\n              }\n            } else {\n              cell_text = cell_text.$squeeze(\"\\\"\")\n            }};\n        };\n        $send((1), 'upto', [repeat], ($$45 = function(i){var self = $$45.$$s || this, $c, $d, $$46, $e, column = nil, extra_cols = nil, offset = nil, cell = nil;\n          if (self.colcount == null) self.colcount = nil;\n          if (self.table == null) self.table = nil;\n          if (self.current_row == null) self.current_row = nil;\n          if (self.reader == null) self.reader = nil;\n          if (self.column_visits == null) self.column_visits = nil;\n          if (self.linenum == null) self.linenum = nil;\n\n        \n          \n          if (i == null) {\n            i = nil;\n          };\n          if (self.colcount['$=='](-1)) {\n            \n            self.table.$columns()['$<<']((column = $$$($$($nesting, 'Table'), 'Column').$new(self.table, $rb_minus($rb_plus(self.table.$columns().$size(), i), 1))));\n            if ($truthy(($truthy($c = ($truthy($d = cellspec) ? cellspec['$key?'](\"colspan\") : $d)) ? $rb_gt((extra_cols = $rb_minus(cellspec['$[]'](\"colspan\").$to_i(), 1)), 0) : $c))) {\n              \n              offset = self.table.$columns().$size();\n              $send(extra_cols, 'times', [], ($$46 = function(j){var self = $$46.$$s || this;\n                if (self.table == null) self.table = nil;\n\n              \n                \n                if (j == null) {\n                  j = nil;\n                };\n                return self.table.$columns()['$<<']($$$($$($nesting, 'Table'), 'Column').$new(self.table, $rb_plus(offset, j)));}, $$46.$$s = self, $$46.$$arity = 1, $$46));};\n          } else if ($truthy((column = self.table.$columns()['$[]'](self.current_row.$size())))) {\n          } else {\n            \n            self.$logger().$error(self.$message_with_context(\"dropping cell because it exceeds specified number of columns\", $hash2([\"source_location\"], {\"source_location\": self.reader.$cursor_before_mark()})));\n            Opal.ret(nil);\n          };\n          cell = $$$($$($nesting, 'Table'), 'Cell').$new(column, cell_text, cellspec, $hash2([\"cursor\"], {\"cursor\": self.reader.$cursor_before_mark()}));\n          self.reader.$mark();\n          if ($truthy(($truthy($c = cell.$rowspan()['$!']()) ? $c : cell.$rowspan()['$=='](1)))) {\n          } else {\n            self.$activate_rowspan(cell.$rowspan(), ($truthy($c = cell.$colspan()) ? $c : 1))\n          };\n          self.column_visits = $rb_plus(self.column_visits, ($truthy($c = cell.$colspan()) ? $c : 1));\n          self.current_row['$<<'](cell);\n          if ($truthy(($truthy($c = self['$end_of_row?']()) ? ($truthy($d = ($truthy($e = self.colcount['$!='](-1)) ? $e : $rb_gt(self.linenum, 0))) ? $d : ($truthy($e = eol) ? i['$=='](repeat) : $e)) : $c))) {\n            return self.$close_row()\n          } else {\n            return nil\n          };}, $$45.$$s = self, $$45.$$arity = 1, $$45));\n        self.cell_open = false;\n        return nil;\n        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n      }, $ParserContext_close_cell$44.$$arity = -1);\n      self.$private();\n      \n      Opal.def(self, '$close_row', $ParserContext_close_row$47 = function $$close_row() {\n        var $a, self = this, $writer = nil;\n\n        \n        self.table.$rows().$body()['$<<'](self.current_row);\n        if (self.colcount['$=='](-1)) {\n          self.colcount = self.column_visits};\n        self.column_visits = 0;\n        self.current_row = [];\n        self.active_rowspans.$shift();\n        ($truthy($a = self.active_rowspans['$[]'](0)) ? $a : (($writer = [0, 0]), $send(self.active_rowspans, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        return nil;\n      }, $ParserContext_close_row$47.$$arity = 0);\n      \n      Opal.def(self, '$activate_rowspan', $ParserContext_activate_rowspan$48 = function $$activate_rowspan(rowspan, colspan) {\n        var $$49, self = this;\n\n        \n        $send((1), 'upto', [$rb_minus(rowspan, 1)], ($$49 = function(i){var self = $$49.$$s || this, $a, $writer = nil;\n          if (self.active_rowspans == null) self.active_rowspans = nil;\n\n        \n          \n          if (i == null) {\n            i = nil;\n          };\n          $writer = [i, $rb_plus(($truthy($a = self.active_rowspans['$[]'](i)) ? $a : 0), colspan)];\n          $send(self.active_rowspans, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$49.$$s = self, $$49.$$arity = 1, $$49));\n        return nil;\n      }, $ParserContext_activate_rowspan$48.$$arity = 2);\n      \n      Opal.def(self, '$end_of_row?', $ParserContext_end_of_row$ques$50 = function() {\n        var $a, self = this;\n\n        return ($truthy($a = self.colcount['$=='](-1)) ? $a : self.$effective_column_visits()['$=='](self.colcount))\n      }, $ParserContext_end_of_row$ques$50.$$arity = 0);\n      \n      Opal.def(self, '$effective_column_visits', $ParserContext_effective_column_visits$51 = function $$effective_column_visits() {\n        var self = this;\n\n        return $rb_plus(self.column_visits, self.active_rowspans['$[]'](0))\n      }, $ParserContext_effective_column_visits$51.$$arity = 0);\n      return (Opal.def(self, '$advance', $ParserContext_advance$52 = function $$advance() {\n        var self = this;\n\n        return (self.linenum = $rb_plus(self.linenum, 1))\n      }, $ParserContext_advance$52.$$arity = 0), nil) && 'advance';\n    })($$($nesting, 'Table'), null, $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/writer\"] = function(Opal) {\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $hash2 = Opal.hash2;\n\n  Opal.add_stubs(['$respond_to?', '$write', '$+', '$chomp', '$include']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    \n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Writer');\n\n      var $nesting = [self].concat($parent_nesting), $Writer_write$1;\n\n      \n      Opal.def(self, '$write', $Writer_write$1 = function $$write(output, target) {\n        var self = this;\n\n        \n        if ($truthy(target['$respond_to?'](\"write\"))) {\n          target.$write($rb_plus(output.$chomp(), $$($nesting, 'LF')))\n        } else {\n          $$$('::', 'File').$write(target, output, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}))\n        };\n        return nil;\n      }, $Writer_write$1.$$arity = 2)\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'VoidWriter');\n\n      var $nesting = [self].concat($parent_nesting), $VoidWriter_write$2;\n\n      \n      self.$include($$($nesting, 'Writer'));\n      \n      Opal.def(self, '$write', $VoidWriter_write$2 = function $$write(output, target) {\n        var self = this;\n\n        return nil\n      }, $VoidWriter_write$2.$$arity = 2);\n    })($nesting[0], $nesting);\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/load\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$merge', '$[]', '$start', '$!=', '$logger', '$logger=', '$-', '$!', '$===', '$dup', '$tap', '$each', '$partition', '$[]=', '$split', '$gsub', '$+', '$respond_to?', '$keys', '$raise', '$join', '$ancestors', '$class', '$mtime', '$absolute_path', '$path', '$dirname', '$basename', '$extname', '$read', '$rewind', '$drop', '$record', '$==', '$new', '$parse', '$exception', '$message', '$set_backtrace', '$backtrace', '$stack_trace', '$stack_trace=', '$open', '$load']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $load$1, $load_file$8;\n\n      \n      \n      Opal.def(self, '$load', $load$1 = function $$load(input, options) {\n        var $a, $b, $c, $d, $$2, $$4, $$6, self = this, timings = nil, logger = nil, $writer = nil, attrs = nil, input_path = nil, source = nil, doc = nil, ex = nil, context = nil, wrapped_ex = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        try {\n          \n          options = options.$merge();\n          if ($truthy((timings = options['$[]'](\"timings\")))) {\n            timings.$start(\"read\")};\n          if ($truthy(($truthy($a = (logger = options['$[]'](\"logger\"))) ? logger['$!=']($$($nesting, 'LoggerManager').$logger()) : $a))) {\n            \n            $writer = [logger];\n            $send($$($nesting, 'LoggerManager'), 'logger=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ($truthy((attrs = options['$[]'](\"attributes\"))['$!']())) {\n            attrs = $hash2([], {})\n          } else if ($truthy($$$('::', 'Hash')['$==='](attrs))) {\n            attrs = attrs.$merge()\n          } else if ($truthy(($truthy($a = (($d = $$$('::', 'Java', 'skip_raise')) && ($c = $$$($d, 'JavaUtil', 'skip_raise')) && ($b = $$$($c, 'Map', 'skip_raise')) ? 'constant' : nil)) ? $$$($$$($$$('::', 'Java'), 'JavaUtil'), 'Map')['$==='](attrs) : $a))) {\n            attrs = attrs.$dup()\n          } else if ($truthy($$$('::', 'Array')['$==='](attrs))) {\n            attrs = $send($hash2([], {}), 'tap', [], ($$2 = function(accum){var self = $$2.$$s || this, $$3;\n\n            \n              \n              if (accum == null) {\n                accum = nil;\n              };\n              return $send(attrs, 'each', [], ($$3 = function(entry){var self = $$3.$$s || this, $e, $f, k = nil, _ = nil, v = nil;\n\n              \n                \n                if (entry == null) {\n                  entry = nil;\n                };\n                $f = entry.$partition(\"=\"), $e = Opal.to_ary($f), (k = ($e[0] == null ? nil : $e[0])), (_ = ($e[1] == null ? nil : $e[1])), (v = ($e[2] == null ? nil : $e[2])), $f;\n                \n                $writer = [k, v];\n                $send(accum, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2))\n          } else if ($truthy($$$('::', 'String')['$==='](attrs))) {\n            attrs = $send($hash2([], {}), 'tap', [], ($$4 = function(accum){var self = $$4.$$s || this, $$5;\n\n            \n              \n              if (accum == null) {\n                accum = nil;\n              };\n              return $send(attrs.$gsub($$($nesting, 'SpaceDelimiterRx'), $rb_plus(\"\\\\1\", $$($nesting, 'NULL'))).$gsub($$($nesting, 'EscapedSpaceRx'), \"\\\\1\").$split($$($nesting, 'NULL')), 'each', [], ($$5 = function(entry){var self = $$5.$$s || this, $e, $f, k = nil, _ = nil, v = nil;\n\n              \n                \n                if (entry == null) {\n                  entry = nil;\n                };\n                $f = entry.$partition(\"=\"), $e = Opal.to_ary($f), (k = ($e[0] == null ? nil : $e[0])), (_ = ($e[1] == null ? nil : $e[1])), (v = ($e[2] == null ? nil : $e[2])), $f;\n                \n                $writer = [k, v];\n                $send(accum, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];;}, $$5.$$s = self, $$5.$$arity = 1, $$5));}, $$4.$$s = self, $$4.$$arity = 1, $$4))\n          } else if ($truthy(($truthy($a = attrs['$respond_to?'](\"keys\")) ? attrs['$respond_to?'](\"[]\") : $a))) {\n            attrs = $send($hash2([], {}), 'tap', [], ($$6 = function(accum){var self = $$6.$$s || this, $$7;\n\n            \n              \n              if (accum == null) {\n                accum = nil;\n              };\n              return $send(attrs.$keys(), 'each', [], ($$7 = function(k){var self = $$7.$$s || this;\n\n              \n                \n                if (k == null) {\n                  k = nil;\n                };\n                $writer = [k, attrs['$[]'](k)];\n                $send(accum, '[]=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];}, $$7.$$s = self, $$7.$$arity = 1, $$7));}, $$6.$$s = self, $$6.$$arity = 1, $$6))\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"illegal type for attributes option: \" + (attrs.$class().$ancestors().$join(\" < \")))\n          };\n          if ($truthy($$$('::', 'File')['$==='](input))) {\n            \n            \n            $writer = [\"input_mtime\", input.$mtime()];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"docfile\", (input_path = $$$('::', 'File').$absolute_path(input.$path()))];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"docdir\", $$$('::', 'File').$dirname(input_path)];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            \n            $writer = [\"docname\", $$($nesting, 'Helpers').$basename(input_path, (($writer = [\"docfilesuffix\", $$($nesting, 'Helpers').$extname(input_path)]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))];\n            $send(attrs, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            source = input.$read();\n          } else if ($truthy(input['$respond_to?'](\"read\"))) {\n            \n            try {\n              input.$rewind()\n            } catch ($err) {\n              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                try {\n                  nil\n                } finally { Opal.pop_exception() }\n              } else { throw $err; }\n            };\n            source = input.$read();\n          } else if ($truthy($$$('::', 'String')['$==='](input))) {\n            source = input\n          } else if ($truthy($$$('::', 'Array')['$==='](input))) {\n            source = input.$drop(0)\n          } else if ($truthy(input)) {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"unsupported input type: \" + (input.$class()))};\n          if ($truthy(timings)) {\n            \n            timings.$record(\"read\");\n            timings.$start(\"parse\");};\n          \n          $writer = [\"attributes\", attrs];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];;\n          doc = (function() {if (options['$[]'](\"parse\")['$=='](false)) {\n            \n            return $$($nesting, 'Document').$new(source, options);\n          } else {\n            return $$($nesting, 'Document').$new(source, options).$parse()\n          }; return nil; })();\n          if ($truthy(timings)) {\n            timings.$record(\"parse\")};\n          return doc;\n        } catch ($err) {\n          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {ex = $err;\n            try {\n              \n              \n              try {\n                \n                context = \"\" + \"asciidoctor: FAILED: \" + (($truthy($a = attrs['$[]'](\"docfile\")) ? $a : \"<stdin>\")) + \": Failed to load AsciiDoc document\";\n                if ($truthy(ex['$respond_to?'](\"exception\"))) {\n                  \n                  wrapped_ex = ex.$exception(\"\" + (context) + \" - \" + (ex.$message()));\n                  wrapped_ex.$set_backtrace(ex.$backtrace());\n                  wrapped_ex.stack = ex.stack;\n                } else {\n                  \n                  wrapped_ex = ex.$class().$new(context, ex);\n                  \n                  $writer = [ex.$stack_trace()];\n                  $send(wrapped_ex, 'stack_trace=', Opal.to_a($writer));\n                  $writer[$rb_minus($writer[\"length\"], 1)];;\n                };\n              } catch ($err) {\n                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n                  try {\n                    wrapped_ex = ex\n                  } finally { Opal.pop_exception() }\n                } else { throw $err; }\n              };;\n              return self.$raise(wrapped_ex);\n            } finally { Opal.pop_exception() }\n          } else { throw $err; }\n        };\n      }, $load$1.$$arity = -2);\n      return (Opal.def(self, '$load_file', $load_file$8 = function $$load_file(filename, options) {\n        var $$9, self = this;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        return $send($$$('::', 'File'), 'open', [filename, $$($nesting, 'FILE_READ_MODE')], ($$9 = function(file){var self = $$9.$$s || this;\n\n        \n          \n          if (file == null) {\n            file = nil;\n          };\n          return self.$load(file, options);}, $$9.$$s = self, $$9.$$arity = 1, $$9));\n      }, $load_file$8.$$arity = -2), nil) && 'load_file';\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/convert\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_ge(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;\n\n  Opal.add_stubs(['$delete', '$merge', '$===', '$absolute_path', '$path', '$load', '$respond_to?', '$[]=', '$-', '$key?', '$fetch', '$[]', '$dirname', '$expand_path', '$join', '$attributes', '$outfilesuffix', '$==', '$raise', '$pwd', '$>=', '$safe', '$normalize_system_path', '$mkdir_p', '$directory?', '$!', '$convert', '$write', '$<', '$attr?', '$basebackend?', '$attr', '$uriish?', '$include?', '$syntax_highlighter', '$write_stylesheet?', '$write_primary_stylesheet', '$instance', '$to_s', '$!=', '$read_asset', '$file?', '$write_stylesheet', '$open']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function(self, $parent_nesting) {\n      var $nesting = [self].concat($parent_nesting), $convert$1, $convert_file$2;\n\n      \n      \n      Opal.def(self, '$convert', $convert$1 = function $$convert(input, options) {\n        var $a, $b, $c, $d, $e, self = this, to_dir = nil, mkdirs = nil, $case = nil, to_file = nil, write_to_target = nil, sibling_path = nil, stream_output = nil, $writer = nil, outdir = nil, doc = nil, outfile = nil, working_dir = nil, jail = nil, output = nil, stylesdir = nil, stylesheet = nil, copy_asciidoctor_stylesheet = nil, copy_user_stylesheet = nil, copy_syntax_hl_stylesheet = nil, syntax_hl = nil, stylesoutdir = nil, stylesheet_src = nil, stylesheet_dest = nil, stylesheet_data = nil, stylesheet_outdir = nil;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        (options = options.$merge()).$delete(\"parse\");\n        to_dir = options.$delete(\"to_dir\");\n        mkdirs = options.$delete(\"mkdirs\");\n        $case = (to_file = options.$delete(\"to_file\"));\n        if (true['$===']($case) || nil['$===']($case)) {\n        if ($truthy((write_to_target = to_dir))) {\n        } else if ($truthy($$$('::', 'File')['$==='](input))) {\n          sibling_path = $$$('::', 'File').$absolute_path(input.$path())};\n        to_file = nil;}\n        else if (false['$===']($case)) {to_file = nil}\n        else if (\"/dev/null\"['$===']($case)) {return self.$load(input, options)}\n        else {if ($truthy((stream_output = to_file['$respond_to?'](\"write\")))) {\n        } else {\n          \n          $writer = [\"to_file\", (write_to_target = to_file)];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        }};\n        if ($truthy(options['$key?'](\"standalone\"))) {\n        } else if ($truthy(($truthy($a = sibling_path) ? $a : write_to_target))) {\n          \n          $writer = [\"standalone\", options.$fetch(\"header_footer\", true)];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(options['$key?'](\"header_footer\"))) {\n          \n          $writer = [\"standalone\", options['$[]'](\"header_footer\")];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n        if ($truthy(sibling_path)) {\n          \n          $writer = [\"to_dir\", (outdir = $$$('::', 'File').$dirname(sibling_path))];\n          $send(options, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];\n        } else if ($truthy(write_to_target)) {\n          if ($truthy(to_dir)) {\n            if ($truthy(to_file)) {\n              \n              $writer = [\"to_dir\", $$$('::', 'File').$dirname($$$('::', 'File').$expand_path(to_file, to_dir))];\n              $send(options, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              \n              $writer = [\"to_dir\", $$$('::', 'File').$expand_path(to_dir)];\n              $send(options, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            }\n          } else if ($truthy(to_file)) {\n            \n            $writer = [\"to_dir\", $$$('::', 'File').$dirname($$$('::', 'File').$expand_path(to_file))];\n            $send(options, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];}};\n        doc = self.$load(input, options);\n        if ($truthy(sibling_path)) {\n          \n          outfile = $$$('::', 'File').$join(outdir, \"\" + (doc.$attributes()['$[]'](\"docname\")) + (doc.$outfilesuffix()));\n          if (outfile['$=='](sibling_path)) {\n            self.$raise($$$('::', 'IOError'), \"\" + \"input file and output file cannot be the same: \" + (outfile))};\n        } else if ($truthy(write_to_target)) {\n          \n          working_dir = (function() {if ($truthy(options['$key?'](\"base_dir\"))) {\n            \n            return $$$('::', 'File').$expand_path(options['$[]'](\"base_dir\"));\n          } else {\n            return $$$('::', 'Dir').$pwd()\n          }; return nil; })();\n          jail = (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n            return working_dir\n          } else {\n            return nil\n          }; return nil; })();\n          if ($truthy(to_dir)) {\n            \n            outdir = doc.$normalize_system_path(to_dir, working_dir, jail, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n            if ($truthy(to_file)) {\n              \n              outfile = doc.$normalize_system_path(to_file, outdir, nil, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n              outdir = $$$('::', 'File').$dirname(outfile);\n            } else {\n              outfile = $$$('::', 'File').$join(outdir, \"\" + (doc.$attributes()['$[]'](\"docname\")) + (doc.$outfilesuffix()))\n            };\n          } else if ($truthy(to_file)) {\n            \n            outfile = doc.$normalize_system_path(to_file, working_dir, jail, $hash2([\"target_name\", \"recover\"], {\"target_name\": \"to_dir\", \"recover\": false}));\n            outdir = $$$('::', 'File').$dirname(outfile);};\n          if ($truthy(($truthy($a = $$$('::', 'File')['$==='](input)) ? outfile['$==']($$$('::', 'File').$absolute_path(input.$path())) : $a))) {\n            self.$raise($$$('::', 'IOError'), \"\" + \"input file and output file cannot be the same: \" + (outfile))};\n          if ($truthy(mkdirs)) {\n            $$($nesting, 'Helpers').$mkdir_p(outdir)\n          } else if ($truthy($$$('::', 'File')['$directory?'](outdir))) {\n          } else {\n            self.$raise($$$('::', 'IOError'), \"\" + \"target directory does not exist: \" + (to_dir) + \" (hint: set :mkdirs option)\")\n          };\n        } else {\n          \n          outfile = to_file;\n          outdir = nil;\n        };\n        if ($truthy(($truthy($a = outfile) ? stream_output['$!']() : $a))) {\n          output = doc.$convert($hash2([\"outfile\", \"outdir\"], {\"outfile\": outfile, \"outdir\": outdir}))\n        } else {\n          output = doc.$convert()\n        };\n        if ($truthy(outfile)) {\n          \n          doc.$write(output, outfile);\n          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = ($truthy($e = stream_output['$!']()) ? $rb_lt(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $e)) ? doc['$attr?'](\"linkcss\") : $d)) ? doc['$attr?'](\"copycss\") : $c)) ? doc['$basebackend?'](\"html\") : $b)) ? ($truthy($b = (stylesdir = doc.$attr(\"stylesdir\"))) ? $$($nesting, 'Helpers')['$uriish?'](stylesdir) : $b)['$!']() : $a))) {\n            \n            if ($truthy((stylesheet = doc.$attr(\"stylesheet\")))) {\n              if ($truthy($$($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](stylesheet))) {\n                copy_asciidoctor_stylesheet = true\n              } else if ($truthy($$($nesting, 'Helpers')['$uriish?'](stylesheet)['$!']())) {\n                copy_user_stylesheet = true}};\n            copy_syntax_hl_stylesheet = ($truthy($a = (syntax_hl = doc.$syntax_highlighter())) ? syntax_hl['$write_stylesheet?'](doc) : $a);\n            if ($truthy(($truthy($a = ($truthy($b = copy_asciidoctor_stylesheet) ? $b : copy_user_stylesheet)) ? $a : copy_syntax_hl_stylesheet))) {\n              \n              stylesoutdir = doc.$normalize_system_path(stylesdir, outdir, (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n                return outdir\n              } else {\n                return nil\n              }; return nil; })());\n              if ($truthy(mkdirs)) {\n                $$($nesting, 'Helpers').$mkdir_p(stylesoutdir)\n              } else if ($truthy($$$('::', 'File')['$directory?'](stylesoutdir))) {\n              } else {\n                self.$raise($$$('::', 'IOError'), \"\" + \"target stylesheet directory does not exist: \" + (stylesoutdir) + \" (hint: set :mkdirs option)\")\n              };\n              if ($truthy(copy_asciidoctor_stylesheet)) {\n                $$($nesting, 'Stylesheets').$instance().$write_primary_stylesheet(stylesoutdir)\n              } else if ($truthy(copy_user_stylesheet)) {\n                \n                if ($truthy(($truthy($a = (stylesheet_src = doc.$attr(\"copycss\"))['$=='](\"\")) ? $a : stylesheet_src['$=='](true)))) {\n                  stylesheet_src = doc.$normalize_system_path(stylesheet)\n                } else {\n                  stylesheet_src = doc.$normalize_system_path(stylesheet_src.$to_s())\n                };\n                stylesheet_dest = doc.$normalize_system_path(stylesheet, stylesoutdir, (function() {if ($truthy($rb_ge(doc.$safe(), $$$($$($nesting, 'SafeMode'), 'SAFE')))) {\n                  return outdir\n                } else {\n                  return nil\n                }; return nil; })());\n                if ($truthy(($truthy($a = stylesheet_src['$!='](stylesheet_dest)) ? (stylesheet_data = doc.$read_asset(stylesheet_src, $hash2([\"warn_on_failure\", \"label\"], {\"warn_on_failure\": $$$('::', 'File')['$file?'](stylesheet_dest)['$!'](), \"label\": \"stylesheet\"}))) : $a))) {\n                  \n                  if ($truthy(($truthy($a = (stylesheet_outdir = $$$('::', 'File').$dirname(stylesheet_dest))['$!='](stylesoutdir)) ? $$$('::', 'File')['$directory?'](stylesheet_outdir)['$!']() : $a))) {\n                    if ($truthy(mkdirs)) {\n                      $$($nesting, 'Helpers').$mkdir_p(stylesheet_outdir)\n                    } else {\n                      self.$raise($$$('::', 'IOError'), \"\" + \"target stylesheet directory does not exist: \" + (stylesheet_outdir) + \" (hint: set :mkdirs option)\")\n                    }};\n                  $$$('::', 'File').$write(stylesheet_dest, stylesheet_data, $hash2([\"mode\"], {\"mode\": $$($nesting, 'FILE_WRITE_MODE')}));};};\n              if ($truthy(copy_syntax_hl_stylesheet)) {\n                syntax_hl.$write_stylesheet(doc, stylesoutdir)};};};\n          return doc;\n        } else {\n          return output\n        };\n      }, $convert$1.$$arity = -2);\n      \n      Opal.def(self, '$convert_file', $convert_file$2 = function $$convert_file(filename, options) {\n        var $$3, self = this;\n\n        \n        \n        if (options == null) {\n          options = $hash2([], {});\n        };\n        return $send($$$('::', 'File'), 'open', [filename, $$($nesting, 'FILE_READ_MODE')], ($$3 = function(file){var self = $$3.$$s || this;\n\n        \n          \n          if (file == null) {\n            file = nil;\n          };\n          return self.$convert(file, options);}, $$3.$$s = self, $$3.$$arity = 1, $$3));\n      }, $convert_file$2.$$arity = -2);\n      Opal.alias(self, \"render\", \"convert\");\n      return Opal.alias(self, \"render_file\", \"convert_file\");\n    })(Opal.get_singleton_class(self), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/syntax_highlighter/highlightjs\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$register_for', '$merge', '$proc', '$[]=', '$-', '$attr', '$[]', '$==', '$attr?', '$join', '$map', '$split', '$lstrip']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'HighlightJsAdapter');\n\n      var $nesting = [self].concat($parent_nesting), $HighlightJsAdapter_initialize$1, $HighlightJsAdapter_format$2, $HighlightJsAdapter_docinfo$ques$4, $HighlightJsAdapter_docinfo$5;\n\n      \n      self.$register_for(\"highlightjs\", \"highlight.js\");\n      \n      Opal.def(self, '$initialize', $HighlightJsAdapter_initialize$1 = function $$initialize($a) {\n        var $post_args, args, $iter = $HighlightJsAdapter_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $HighlightJsAdapter_initialize$1.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        args = $post_args;;\n        $send(self, Opal.find_super_dispatcher(self, 'initialize', $HighlightJsAdapter_initialize$1, false), $zuper, $iter);\n        return (self.name = (self.pre_class = \"highlightjs\"));\n      }, $HighlightJsAdapter_initialize$1.$$arity = -1);\n      \n      Opal.def(self, '$format', $HighlightJsAdapter_format$2 = function $$format(node, lang, opts) {\n        var $$3, $iter = $HighlightJsAdapter_format$2.$$p, $yield = $iter || nil, self = this;\n\n        if ($iter) $HighlightJsAdapter_format$2.$$p = null;\n        return $send(self, Opal.find_super_dispatcher(self, 'format', $HighlightJsAdapter_format$2, false), [node, lang, opts.$merge($hash2([\"transform\"], {\"transform\": $send(self, 'proc', [], ($$3 = function(_, code){var self = $$3.$$s || this, $a, $writer = nil;\n\n        \n          \n          if (_ == null) {\n            _ = nil;\n          };\n          \n          if (code == null) {\n            code = nil;\n          };\n          $writer = [\"class\", \"\" + \"language-\" + (($truthy($a = lang) ? $a : \"none\")) + \" hljs\"];\n          $send(code, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3))}))], null)\n      }, $HighlightJsAdapter_format$2.$$arity = 3);\n      \n      Opal.def(self, '$docinfo?', $HighlightJsAdapter_docinfo$ques$4 = function(location) {\n        var self = this;\n\n        return true\n      }, $HighlightJsAdapter_docinfo$ques$4.$$arity = 1);\n      return (Opal.def(self, '$docinfo', $HighlightJsAdapter_docinfo$5 = function $$docinfo(location, doc, opts) {\n        var $$6, self = this, base_url = nil;\n\n        \n        base_url = doc.$attr(\"highlightjsdir\", \"\" + (opts['$[]'](\"cdn_base_url\")) + \"/highlight.js/\" + ($$($nesting, 'HIGHLIGHT_JS_VERSION')));\n        if (location['$=='](\"head\")) {\n          return \"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (base_url) + \"/styles/\" + (doc.$attr(\"highlightjs-theme\", \"github\")) + \".min.css\\\"\" + (opts['$[]'](\"self_closing_tag_slash\")) + \">\"\n        } else {\n          return \"\" + \"<script src=\\\"\" + (base_url) + \"/highlight.min.js\\\"></script>\\n\" + ((function() {if ($truthy(doc['$attr?'](\"highlightjs-languages\"))) {\n            return $send(doc.$attr(\"highlightjs-languages\").$split(\",\"), 'map', [], ($$6 = function(lang){var self = $$6.$$s || this;\n\n            \n              \n              if (lang == null) {\n                lang = nil;\n              };\n              return \"\" + \"<script src=\\\"\" + (base_url) + \"/languages/\" + (lang.$lstrip()) + \".min.js\\\"></script>\\n\";}, $$6.$$s = self, $$6.$$arity = 1, $$6)).$join()\n          } else {\n            return \"\"\n          }; return nil; })()) + \"<script>\\n\" + \"if (!hljs.initHighlighting.called) {\\n\" + \"  hljs.initHighlighting.called = true\\n\" + \"  ;[].slice.call(document.querySelectorAll('pre.highlight > code')).forEach(function (el) { hljs.highlightBlock(el) })\\n\" + \"}\\n\" + \"</script>\"\n        };\n      }, $HighlightJsAdapter_docinfo$5.$$arity = 3), nil) && 'docinfo';\n    })($$($nesting, 'SyntaxHighlighter'), $$$($$($nesting, 'SyntaxHighlighter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/syntax_highlighter\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $klass = Opal.klass;\n\n  Opal.add_stubs(['$attr_reader', '$raise', '$class', '$private_class_method', '$extend', '$register', '$map', '$to_s', '$each', '$[]=', '$registry', '$-', '$[]', '$for', '$===', '$new', '$name', '$private', '$include', '$==', '$delete', '$join', '$content']);\n  \n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SyntaxHighlighter');\n\n      var $nesting = [self].concat($parent_nesting), $SyntaxHighlighter_initialize$1, $SyntaxHighlighter_docinfo$ques$2, $SyntaxHighlighter_docinfo$3, $SyntaxHighlighter_highlight$ques$4, $SyntaxHighlighter_highlight$5, $SyntaxHighlighter_format$6, $SyntaxHighlighter_write_stylesheet$ques$7, $SyntaxHighlighter_write_stylesheet$8, $a, $SyntaxHighlighter_included$9;\n\n      \n      self.$attr_reader(\"name\");\n      \n      Opal.def(self, '$initialize', $SyntaxHighlighter_initialize$1 = function $$initialize(name, backend, opts) {\n        var self = this;\n\n        \n        \n        if (backend == null) {\n          backend = \"html5\";\n        };\n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        return (self.name = (self.pre_class = name));\n      }, $SyntaxHighlighter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$docinfo?', $SyntaxHighlighter_docinfo$ques$2 = function(location) {\n        var self = this;\n\n        return nil\n      }, $SyntaxHighlighter_docinfo$ques$2.$$arity = 1);\n      \n      Opal.def(self, '$docinfo', $SyntaxHighlighter_docinfo$3 = function $$docinfo(location, doc, opts) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"docinfo\") + \" method since #docinfo? returns true\")\n      }, $SyntaxHighlighter_docinfo$3.$$arity = 3);\n      \n      Opal.def(self, '$highlight?', $SyntaxHighlighter_highlight$ques$4 = function() {\n        var self = this;\n\n        return nil\n      }, $SyntaxHighlighter_highlight$ques$4.$$arity = 0);\n      \n      Opal.def(self, '$highlight', $SyntaxHighlighter_highlight$5 = function $$highlight(node, source, lang, opts) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"highlight\") + \" method since #highlight? returns true\")\n      }, $SyntaxHighlighter_highlight$5.$$arity = 4);\n      \n      Opal.def(self, '$format', $SyntaxHighlighter_format$6 = function $$format(node, lang, opts) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"format\") + \" method\")\n      }, $SyntaxHighlighter_format$6.$$arity = 3);\n      \n      Opal.def(self, '$write_stylesheet?', $SyntaxHighlighter_write_stylesheet$ques$7 = function(doc) {\n        var self = this;\n\n        return nil\n      }, $SyntaxHighlighter_write_stylesheet$ques$7.$$arity = 1);\n      \n      Opal.def(self, '$write_stylesheet', $SyntaxHighlighter_write_stylesheet$8 = function $$write_stylesheet(doc, to_dir) {\n        var self = this;\n\n        return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'SyntaxHighlighter')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"write_stylesheet\") + \" method since #write_stylesheet? returns true\")\n      }, $SyntaxHighlighter_write_stylesheet$8.$$arity = 2);\n      self.$private_class_method(($truthy($a = (Opal.defs(self, '$included', $SyntaxHighlighter_included$9 = function $$included(into) {\n        var self = this;\n\n        return into.$extend($$($nesting, 'Config'))\n      }, $SyntaxHighlighter_included$9.$$arity = 1), nil) && 'included') ? $a : \"included\"));\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Config');\n\n        var $nesting = [self].concat($parent_nesting), $Config_register_for$10;\n\n        \n        Opal.def(self, '$register_for', $Config_register_for$10 = function $$register_for($a) {\n          var $post_args, names, $$11, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          names = $post_args;;\n          return $send($$($nesting, 'SyntaxHighlighter'), 'register', [self].concat(Opal.to_a($send(names, 'map', [], ($$11 = function(name){var self = $$11.$$s || this;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            return name.$to_s();}, $$11.$$s = self, $$11.$$arity = 1, $$11)))));\n        }, $Config_register_for$10.$$arity = -1)\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $Factory_register$12, $Factory_for$14, $Factory_create$15, $Factory_registry$16;\n\n        \n        \n        Opal.def(self, '$register', $Factory_register$12 = function $$register(syntax_highlighter, $a) {\n          var $post_args, names, $$13, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 1, arguments.length);\n          \n          names = $post_args;;\n          return $send(names, 'each', [], ($$13 = function(name){var self = $$13.$$s || this, $writer = nil;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            $writer = [name, syntax_highlighter];\n            $send(self.$registry(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];}, $$13.$$s = self, $$13.$$arity = 1, $$13));\n        }, $Factory_register$12.$$arity = -2);\n        \n        Opal.def(self, '$for', $Factory_for$14 = function(name) {\n          var self = this;\n\n          return self.$registry()['$[]'](name)\n        }, $Factory_for$14.$$arity = 1);\n        \n        Opal.def(self, '$create', $Factory_create$15 = function $$create(name, backend, opts) {\n          var self = this, syntax_hl = nil;\n\n          \n          \n          if (backend == null) {\n            backend = \"html5\";\n          };\n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((syntax_hl = self.$for(name)))) {\n            \n            if ($truthy($$$('::', 'Class')['$==='](syntax_hl))) {\n              syntax_hl = syntax_hl.$new(name, backend, opts)};\n            if ($truthy(syntax_hl.$name())) {\n            } else {\n              self.$raise($$$('::', 'NameError'), \"\" + (syntax_hl.$class()) + \" must specify a value for `name'\")\n            };\n            return syntax_hl;\n          } else {\n            return nil\n          };\n        }, $Factory_create$15.$$arity = -2);\n        self.$private();\n        \n        Opal.def(self, '$registry', $Factory_registry$16 = function $$registry() {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Factory')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"registry\") + \" method\")\n        }, $Factory_registry$16.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'CustomFactory');\n\n        var $nesting = [self].concat($parent_nesting), $CustomFactory_initialize$17, $CustomFactory_registry$18;\n\n        self.$$prototype.registry = nil;\n        \n        self.$include($$($nesting, 'Factory'));\n        \n        Opal.def(self, '$initialize', $CustomFactory_initialize$17 = function $$initialize(seed_registry) {\n          var $a, self = this;\n\n          \n          \n          if (seed_registry == null) {\n            seed_registry = nil;\n          };\n          return (self.registry = ($truthy($a = seed_registry) ? $a : $hash2([], {})));\n        }, $CustomFactory_initialize$17.$$arity = -1);\n        self.$private();\n        return (Opal.def(self, '$registry', $CustomFactory_registry$18 = function $$registry() {\n          var self = this;\n\n          return self.registry\n        }, $CustomFactory_registry$18.$$arity = 0), nil) && 'registry';\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DefaultFactory');\n\n        var $nesting = [self].concat($parent_nesting), $DefaultFactory_registry$19;\n\n        \n        self.$include($$($nesting, 'Factory'));\n        self.$private();\n        (Opal.class_variable_set($nesting[0], '@@registry', $hash2([], {})));\n        \n        Opal.def(self, '$registry', $DefaultFactory_registry$19 = function $$registry() {\n          var $a, self = this;\n\n          return (($a = $nesting[0].$$cvars['@@registry']) == null ? nil : $a)\n        }, $DefaultFactory_registry$19.$$arity = 0);\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        } else {\n          nil\n        };\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DefaultFactoryProxy');\n\n        var $nesting = [self].concat($parent_nesting);\n\n        \n        self.$include($$($nesting, 'DefaultFactory'));\n        if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n          return nil\n        } else {\n          return nil\n        };\n      })($nesting[0], $$($nesting, 'CustomFactory'), $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Base');\n\n        var $nesting = [self].concat($parent_nesting), $Base_format$20;\n\n        self.$$prototype.pre_class = nil;\n        \n        self.$include($$($nesting, 'SyntaxHighlighter'));\n        return (Opal.def(self, '$format', $Base_format$20 = function $$format(node, lang, opts) {\n          var $$21, $$22, self = this, class_attr_val = nil, transform = nil, pre = nil, code = nil, $writer = nil;\n\n          \n          class_attr_val = (function() {if ($truthy(opts['$[]'](\"nowrap\"))) {\n            return \"\" + (self.pre_class) + \" highlight nowrap\"\n          } else {\n            return \"\" + (self.pre_class) + \" highlight\"\n          }; return nil; })();\n          if ($truthy((transform = opts['$[]'](\"transform\")))) {\n            \n            transform['$[]']((pre = $hash2([\"class\"], {\"class\": class_attr_val})), (code = (function() {if ($truthy(lang)) {\n              return $hash2([\"data-lang\"], {\"data-lang\": lang})\n            } else {\n              return $hash2([], {})\n            }; return nil; })()));\n            if ($truthy((lang = code.$delete(\"data-lang\")))) {\n              \n              $writer = [\"data-lang\", lang];\n              $send(code, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n            return \"\" + \"<pre\" + ($send(pre, 'map', [], ($$21 = function(k, v){var self = $$21.$$s || this;\n\n            \n              \n              if (k == null) {\n                k = nil;\n              };\n              \n              if (v == null) {\n                v = nil;\n              };\n              return \"\" + \" \" + (k) + \"=\\\"\" + (v) + \"\\\"\";}, $$21.$$s = self, $$21.$$arity = 2, $$21)).$join()) + \"><code\" + ($send(code, 'map', [], ($$22 = function(k, v){var self = $$22.$$s || this;\n\n            \n              \n              if (k == null) {\n                k = nil;\n              };\n              \n              if (v == null) {\n                v = nil;\n              };\n              return \"\" + \" \" + (k) + \"=\\\"\" + (v) + \"\\\"\";}, $$22.$$s = self, $$22.$$arity = 2, $$22)).$join()) + \">\" + (node.$content()) + \"</code></pre>\";\n          } else {\n            return \"\" + \"<pre class=\\\"\" + (class_attr_val) + \"\\\"><code\" + ((function() {if ($truthy(lang)) {\n              return \"\" + \" data-lang=\\\"\" + (lang) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\" + (node.$content()) + \"</code></pre>\"\n          };\n        }, $Base_format$20.$$arity = 3), nil) && 'format';\n      })($nesting[0], null, $nesting);\n      self.$extend($$($nesting, 'DefaultFactory'));\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n  self.$require(\"asciidoctor/syntax_highlighter.rb\"+ '/../' + \"syntax_highlighter/highlightjs\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    return nil\n  } else {\n    return nil\n  };\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/timings\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$now', '$[]=', '$-', '$delete', '$reduce', '$+', '$[]', '$>', '$time', '$puts', '$%', '$to_f', '$read_parse', '$convert', '$read_parse_convert', '$private', '$const_defined?', '$==', '$clock_gettime']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Timings');\n\n      var $nesting = [self].concat($parent_nesting), $Timings_initialize$1, $Timings_start$2, $Timings_record$3, $Timings_time$4, $Timings_read$6, $Timings_parse$7, $Timings_read_parse$8, $Timings_convert$9, $Timings_read_parse_convert$10, $Timings_write$11, $Timings_total$12, $Timings_print_report$13, $a, $b, $c, $d, $e, $Timings_now$14, $Timings_now$15;\n\n      self.$$prototype.timers = self.$$prototype.log = nil;\n      \n      \n      Opal.def(self, '$initialize', $Timings_initialize$1 = function $$initialize() {\n        var self = this;\n\n        \n        self.log = $hash2([], {});\n        return (self.timers = $hash2([], {}));\n      }, $Timings_initialize$1.$$arity = 0);\n      \n      Opal.def(self, '$start', $Timings_start$2 = function $$start(key) {\n        var self = this, $writer = nil;\n\n        \n        $writer = [key, self.$now()];\n        $send(self.timers, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $Timings_start$2.$$arity = 1);\n      \n      Opal.def(self, '$record', $Timings_record$3 = function $$record(key) {\n        var self = this, $writer = nil;\n\n        \n        $writer = [key, $rb_minus(self.$now(), self.timers.$delete(key))];\n        $send(self.log, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];\n      }, $Timings_record$3.$$arity = 1);\n      \n      Opal.def(self, '$time', $Timings_time$4 = function $$time($a) {\n        var $post_args, keys, $$5, self = this, time = nil;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 0, arguments.length);\n        \n        keys = $post_args;;\n        time = $send(keys, 'reduce', [0], ($$5 = function(sum, key){var self = $$5.$$s || this, $b;\n          if (self.log == null) self.log = nil;\n\n        \n          \n          if (sum == null) {\n            sum = nil;\n          };\n          \n          if (key == null) {\n            key = nil;\n          };\n          return $rb_plus(sum, ($truthy($b = self.log['$[]'](key)) ? $b : 0));}, $$5.$$s = self, $$5.$$arity = 2, $$5));\n        if ($truthy($rb_gt(time, 0))) {\n          return time\n        } else {\n          return nil\n        };\n      }, $Timings_time$4.$$arity = -1);\n      \n      Opal.def(self, '$read', $Timings_read$6 = function $$read() {\n        var self = this;\n\n        return self.$time(\"read\")\n      }, $Timings_read$6.$$arity = 0);\n      \n      Opal.def(self, '$parse', $Timings_parse$7 = function $$parse() {\n        var self = this;\n\n        return self.$time(\"parse\")\n      }, $Timings_parse$7.$$arity = 0);\n      \n      Opal.def(self, '$read_parse', $Timings_read_parse$8 = function $$read_parse() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\")\n      }, $Timings_read_parse$8.$$arity = 0);\n      \n      Opal.def(self, '$convert', $Timings_convert$9 = function $$convert() {\n        var self = this;\n\n        return self.$time(\"convert\")\n      }, $Timings_convert$9.$$arity = 0);\n      \n      Opal.def(self, '$read_parse_convert', $Timings_read_parse_convert$10 = function $$read_parse_convert() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\", \"convert\")\n      }, $Timings_read_parse_convert$10.$$arity = 0);\n      \n      Opal.def(self, '$write', $Timings_write$11 = function $$write() {\n        var self = this;\n\n        return self.$time(\"write\")\n      }, $Timings_write$11.$$arity = 0);\n      \n      Opal.def(self, '$total', $Timings_total$12 = function $$total() {\n        var self = this;\n\n        return self.$time(\"read\", \"parse\", \"convert\", \"write\")\n      }, $Timings_total$12.$$arity = 0);\n      \n      Opal.def(self, '$print_report', $Timings_print_report$13 = function $$print_report(to, subject) {\n        var self = this;\n        if ($gvars.stdout == null) $gvars.stdout = nil;\n\n        \n        \n        if (to == null) {\n          to = $gvars.stdout;\n        };\n        \n        if (subject == null) {\n          subject = nil;\n        };\n        if ($truthy(subject)) {\n          to.$puts(\"\" + \"Input file: \" + (subject))};\n        to.$puts(\"\" + \"  Time to read and parse source: \" + (\"%05.5f\"['$%'](self.$read_parse().$to_f())));\n        to.$puts(\"\" + \"  Time to convert document: \" + (\"%05.5f\"['$%'](self.$convert().$to_f())));\n        return to.$puts(\"\" + \"  Total time (read, parse and convert): \" + (\"%05.5f\"['$%'](self.$read_parse_convert().$to_f())));\n      }, $Timings_print_report$13.$$arity = -1);\n      self.$private();\n      if ($truthy(($truthy($a = $$$('::', 'Process')['$const_defined?'](\"CLOCK_MONOTONIC\", false)) ? ((($b = $$$('::', 'Process', 'skip_raise')) && ($c = $b, $c) && ($d = $c) && ((($e = $d.$clock_gettime) && !$e.$$stub) || $d['$respond_to_missing?']('clock_gettime'))) ? 'method' : nil)['$=='](\"method\") : $a))) {\n        \n        Opal.const_set($nesting[0], 'CLOCK_ID', $$$($$$('::', 'Process'), 'CLOCK_MONOTONIC'));\n        return (Opal.def(self, '$now', $Timings_now$14 = function $$now() {\n          var self = this;\n\n          return $$$('::', 'Process').$clock_gettime($$($nesting, 'CLOCK_ID'))\n        }, $Timings_now$14.$$arity = 0), nil) && 'now';\n      } else {\n        return (Opal.def(self, '$now', $Timings_now$15 = function $$now() {\n          var self = this;\n\n          return $$$('::', 'Time').$now()\n        }, $Timings_now$15.$$arity = 0), nil) && 'now'\n      };\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/converter/composite\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$attr_reader', '$each', '$respond_to?', '$composed', '$init_backend_traits', '$backend_traits', '$new', '$find_converter', '$[]=', '$-', '$convert', '$converter_for', '$node_name', '$[]', '$handles?', '$raise']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'CompositeConverter');\n\n      var $nesting = [self].concat($parent_nesting), $CompositeConverter_initialize$1, $CompositeConverter_convert$4, $CompositeConverter_converter_for$5, $CompositeConverter_find_converter$6;\n\n      self.$$prototype.converter_cache = self.$$prototype.converters = nil;\n      \n      self.$attr_reader(\"converters\");\n      \n      Opal.def(self, '$initialize', $CompositeConverter_initialize$1 = function $$initialize(backend, $a, $b) {\n        var $post_args, $kwargs, converters, backend_traits_source, $$2, $$3, self = this;\n\n        \n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        $kwargs = Opal.extract_kwargs($post_args);\n        \n        if ($kwargs == null) {\n          $kwargs = $hash2([], {});\n        } else if (!$kwargs.$$is_hash) {\n          throw Opal.ArgumentError.$new('expected kwargs');\n        };\n        \n        converters = $post_args;;\n        \n        backend_traits_source = $kwargs.$$smap[\"backend_traits_source\"];\n        if (backend_traits_source == null) {\n          backend_traits_source = nil\n        };\n        self.backend = backend;\n        $send((self.converters = converters), 'each', [], ($$2 = function(converter){var self = $$2.$$s || this;\n\n        \n          \n          if (converter == null) {\n            converter = nil;\n          };\n          if ($truthy(converter['$respond_to?'](\"composed\"))) {\n            return converter.$composed(self)\n          } else {\n            return nil\n          };}, $$2.$$s = self, $$2.$$arity = 1, $$2));\n        if ($truthy(backend_traits_source)) {\n          self.$init_backend_traits(backend_traits_source.$backend_traits())};\n        return (self.converter_cache = $send($$$('::', 'Hash'), 'new', [], ($$3 = function(hash, key){var self = $$3.$$s || this, $writer = nil;\n\n        \n          \n          if (hash == null) {\n            hash = nil;\n          };\n          \n          if (key == null) {\n            key = nil;\n          };\n          $writer = [key, self.$find_converter(key)];\n          $send(hash, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$3.$$s = self, $$3.$$arity = 2, $$3)));\n      }, $CompositeConverter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$convert', $CompositeConverter_convert$4 = function $$convert(node, transform, opts) {\n        var $a, self = this;\n\n        \n        \n        if (transform == null) {\n          transform = nil;\n        };\n        \n        if (opts == null) {\n          opts = nil;\n        };\n        return self.$converter_for((transform = ($truthy($a = transform) ? $a : node.$node_name()))).$convert(node, transform, opts);\n      }, $CompositeConverter_convert$4.$$arity = -2);\n      \n      Opal.def(self, '$converter_for', $CompositeConverter_converter_for$5 = function $$converter_for(transform) {\n        var self = this;\n\n        return self.converter_cache['$[]'](transform)\n      }, $CompositeConverter_converter_for$5.$$arity = 1);\n      return (Opal.def(self, '$find_converter', $CompositeConverter_find_converter$6 = function $$find_converter(transform) {try {\n\n        var $$7, self = this;\n\n        \n        $send(self.converters, 'each', [], ($$7 = function(candidate){var self = $$7.$$s || this;\n\n        \n          \n          if (candidate == null) {\n            candidate = nil;\n          };\n          if ($truthy(candidate['$handles?'](transform))) {\n            Opal.ret(candidate)\n          } else {\n            return nil\n          };}, $$7.$$s = self, $$7.$$arity = 1, $$7));\n        return self.$raise(\"\" + \"Could not find a converter to handle transform: \" + (transform));\n        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }\n      }, $CompositeConverter_find_converter$6.$$arity = 1), nil) && 'find_converter';\n    })($$($nesting, 'Converter'), $$$($$($nesting, 'Converter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/converter/html5\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_le(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  function $rb_times(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy, $gvars = Opal.gvars;\n\n  Opal.add_stubs(['$register_for', '$default=', '$-', '$==', '$[]', '$init_backend_traits', '$node_name', '$convert_inline_quoted', '$convert_paragraph', '$convert_inline_anchor', '$convert_section', '$convert_listing', '$convert_literal', '$convert_ulist', '$convert_olist', '$convert_dlist', '$convert_admonition', '$convert_colist', '$convert_embedded', '$convert_example', '$convert_floating_title', '$convert_image', '$convert_inline_break', '$convert_inline_button', '$convert_inline_callout', '$convert_inline_footnote', '$convert_inline_image', '$convert_inline_indexterm', '$convert_inline_kbd', '$convert_inline_menu', '$convert_open', '$convert_page_break', '$convert_preamble', '$convert_quote', '$convert_sidebar', '$convert_stem', '$convert_table', '$convert_thematic_break', '$convert_verse', '$convert_video', '$convert_document', '$convert_toc', '$convert_pass', '$convert_audio', '$empty?', '$attr', '$attr?', '$<<', '$include?', '$sub_replacements', '$gsub', '$extname', '$slice', '$length', '$doctitle', '$normalize_web_path', '$primary_stylesheet_data', '$instance', '$read_contents', '$syntax_highlighter', '$size', '$docinfo', '$id', '$sections?', '$doctype', '$role?', '$role', '$join', '$noheader', '$convert', '$converter', '$generate_manname_section', '$header?', '$notitle', '$title', '$header', '$each', '$authors', '$>', '$name', '$email', '$sub_macros', '$+', '$downcase', '$concat', '$content', '$footnotes?', '$!', '$footnotes', '$index', '$text', '$nofooter', '$docinfo?', '$[]=', '$delete_at', '$inspect', '$!=', '$to_i', '$attributes', '$document', '$sections', '$level', '$caption', '$captioned_title', '$numbered', '$<=', '$<', '$sectname', '$sectnum', '$convert_outline', '$title?', '$icon_uri', '$compact', '$media_uri', '$option?', '$append_boolean_attribute', '$style', '$items', '$blocks?', '$===', '$text?', '$chomp', '$safe', '$read_svg_contents', '$alt', '$image_uri', '$encode_attribute_value', '$append_link_constraint_attrs', '$highlight?', '$to_sym', '$format', '$*', '$count', '$start_with?', '$end_with?', '$list_marker_keyword', '$parent', '$warn', '$logger', '$context', '$error', '$new', '$columns', '$to_h', '$rows', '$colspan', '$rowspan', '$unshift', '$shift', '$pop', '$split', '$nil_or_empty?', '$type', '$catalog', '$xreftext', '$target', '$reftext', '$map', '$chop', '$sub', '$match', '$private', '$upcase', '$to_s', '$handles?', '$send']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Html5Converter');\n\n      var $nesting = [self].concat($parent_nesting), $Html5Converter_initialize$1, $Html5Converter_convert$2, $Html5Converter_convert_document$3, $Html5Converter_convert_embedded$6, $Html5Converter_convert_outline$8, $Html5Converter_convert_section$10, $Html5Converter_convert_admonition$11, $Html5Converter_convert_audio$12, $Html5Converter_convert_colist$13, $Html5Converter_convert_dlist$16, $Html5Converter_convert_example$23, $Html5Converter_convert_floating_title$24, $Html5Converter_convert_image$25, $Html5Converter_convert_listing$26, $Html5Converter_convert_literal$27, $Html5Converter_convert_stem$28, $Html5Converter_convert_olist$30, $Html5Converter_convert_open$32, $Html5Converter_convert_page_break$33, $Html5Converter_convert_paragraph$34, $Html5Converter_convert_preamble$35, $Html5Converter_convert_quote$36, $Html5Converter_convert_thematic_break$37, $Html5Converter_convert_sidebar$38, $Html5Converter_convert_table$39, $Html5Converter_convert_toc$44, $Html5Converter_convert_ulist$45, $Html5Converter_convert_verse$47, $Html5Converter_convert_video$48, $Html5Converter_convert_inline_anchor$49, $Html5Converter_convert_inline_break$50, $Html5Converter_convert_inline_button$51, $Html5Converter_convert_inline_callout$52, $Html5Converter_convert_inline_footnote$53, $Html5Converter_convert_inline_image$54, $Html5Converter_convert_inline_indexterm$57, $Html5Converter_convert_inline_kbd$58, $Html5Converter_convert_inline_menu$59, $Html5Converter_convert_inline_quoted$60, $Html5Converter_read_svg_contents$61, $Html5Converter_append_boolean_attribute$63, $Html5Converter_append_link_constraint_attrs$64, $Html5Converter_encode_attribute_value$65, $Html5Converter_generate_manname_section$66, $Html5Converter_method_missing$67, $writer = nil;\n\n      self.$$prototype.void_element_slash = self.$$prototype.xml_mode = self.$$prototype.refs = self.$$prototype.resolving_xref = nil;\n      \n      self.$register_for(\"html5\");\n      \n      $writer = [[\"\", \"\"]];\n      $send(Opal.const_set($nesting[0], 'QUOTE_TAGS', $hash2([\"monospaced\", \"emphasis\", \"strong\", \"double\", \"single\", \"mark\", \"superscript\", \"subscript\", \"asciimath\", \"latexmath\"], {\"monospaced\": [\"<code>\", \"</code>\", true], \"emphasis\": [\"<em>\", \"</em>\", true], \"strong\": [\"<strong>\", \"</strong>\", true], \"double\": [\"&#8220;\", \"&#8221;\"], \"single\": [\"&#8216;\", \"&#8217;\"], \"mark\": [\"<mark>\", \"</mark>\", true], \"superscript\": [\"<sup>\", \"</sup>\", true], \"subscript\": [\"<sub>\", \"</sub>\", true], \"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\(\", \"\\\\)\"]})), 'default=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      Opal.const_set($nesting[0], 'DropAnchorRx', /<(?:a\\b[^>]*|\\/a)>/);\n      Opal.const_set($nesting[0], 'StemBreakRx', / *\\\\\\n(?:\\\\?\\n)*|\\n\\n+/);\n      if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n        \n        Opal.const_set($nesting[0], 'SvgPreambleRx', new RegExp(\"\" + \"^\" + ($$($nesting, 'CC_ALL')) + \"*?(?=<svg[\\\\s>])\"));\n        Opal.const_set($nesting[0], 'SvgStartTagRx', /^<svg(?:\\s[^>]*)?>/);\n      } else {\n        nil\n      };\n      Opal.const_set($nesting[0], 'DimensionAttributeRx', new RegExp(\"\" + \"\\\\s(?:width|height|style)=([\\\"'])\" + ($$($nesting, 'CC_ANY')) + \"*?\\\\1\"));\n      \n      Opal.def(self, '$initialize', $Html5Converter_initialize$1 = function $$initialize(backend, opts) {\n        var self = this, syntax = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        self.backend = backend;\n        if (opts['$[]'](\"htmlsyntax\")['$=='](\"xml\")) {\n          \n          syntax = \"xml\";\n          self.xml_mode = true;\n          self.void_element_slash = \"/\";\n        } else {\n          \n          syntax = \"html\";\n          self.xml_mode = nil;\n          self.void_element_slash = \"\";\n        };\n        return self.$init_backend_traits($hash2([\"basebackend\", \"filetype\", \"htmlsyntax\", \"outfilesuffix\", \"supports_templates\"], {\"basebackend\": \"html\", \"filetype\": \"html\", \"htmlsyntax\": syntax, \"outfilesuffix\": \".html\", \"supports_templates\": true}));\n      }, $Html5Converter_initialize$1.$$arity = -2);\n      \n      Opal.def(self, '$convert', $Html5Converter_convert$2 = function $$convert(node, transform, opts) {\n        var $iter = $Html5Converter_convert$2.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Html5Converter_convert$2.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        if (transform == null) {\n          transform = node.$node_name();\n        };\n        \n        if (opts == null) {\n          opts = nil;\n        };\n        if (transform['$=='](\"inline_quoted\")) {\n          return self.$convert_inline_quoted(node)\n        } else if (transform['$=='](\"paragraph\")) {\n          return self.$convert_paragraph(node)\n        } else if (transform['$=='](\"inline_anchor\")) {\n          return self.$convert_inline_anchor(node)\n        } else if (transform['$=='](\"section\")) {\n          return self.$convert_section(node)\n        } else if (transform['$=='](\"listing\")) {\n          return self.$convert_listing(node)\n        } else if (transform['$=='](\"literal\")) {\n          return self.$convert_literal(node)\n        } else if (transform['$=='](\"ulist\")) {\n          return self.$convert_ulist(node)\n        } else if (transform['$=='](\"olist\")) {\n          return self.$convert_olist(node)\n        } else if (transform['$=='](\"dlist\")) {\n          return self.$convert_dlist(node)\n        } else if (transform['$=='](\"admonition\")) {\n          return self.$convert_admonition(node)\n        } else if (transform['$=='](\"colist\")) {\n          return self.$convert_colist(node)\n        } else if (transform['$=='](\"embedded\")) {\n          return self.$convert_embedded(node)\n        } else if (transform['$=='](\"example\")) {\n          return self.$convert_example(node)\n        } else if (transform['$=='](\"floating_title\")) {\n          return self.$convert_floating_title(node)\n        } else if (transform['$=='](\"image\")) {\n          return self.$convert_image(node)\n        } else if (transform['$=='](\"inline_break\")) {\n          return self.$convert_inline_break(node)\n        } else if (transform['$=='](\"inline_button\")) {\n          return self.$convert_inline_button(node)\n        } else if (transform['$=='](\"inline_callout\")) {\n          return self.$convert_inline_callout(node)\n        } else if (transform['$=='](\"inline_footnote\")) {\n          return self.$convert_inline_footnote(node)\n        } else if (transform['$=='](\"inline_image\")) {\n          return self.$convert_inline_image(node)\n        } else if (transform['$=='](\"inline_indexterm\")) {\n          return self.$convert_inline_indexterm(node)\n        } else if (transform['$=='](\"inline_kbd\")) {\n          return self.$convert_inline_kbd(node)\n        } else if (transform['$=='](\"inline_menu\")) {\n          return self.$convert_inline_menu(node)\n        } else if (transform['$=='](\"open\")) {\n          return self.$convert_open(node)\n        } else if (transform['$=='](\"page_break\")) {\n          return self.$convert_page_break(node)\n        } else if (transform['$=='](\"preamble\")) {\n          return self.$convert_preamble(node)\n        } else if (transform['$=='](\"quote\")) {\n          return self.$convert_quote(node)\n        } else if (transform['$=='](\"sidebar\")) {\n          return self.$convert_sidebar(node)\n        } else if (transform['$=='](\"stem\")) {\n          return self.$convert_stem(node)\n        } else if (transform['$=='](\"table\")) {\n          return self.$convert_table(node)\n        } else if (transform['$=='](\"thematic_break\")) {\n          return self.$convert_thematic_break(node)\n        } else if (transform['$=='](\"verse\")) {\n          return self.$convert_verse(node)\n        } else if (transform['$=='](\"video\")) {\n          return self.$convert_video(node)\n        } else if (transform['$=='](\"document\")) {\n          return self.$convert_document(node)\n        } else if (transform['$=='](\"toc\")) {\n          return self.$convert_toc(node)\n        } else if (transform['$=='](\"pass\")) {\n          return self.$convert_pass(node)\n        } else if (transform['$=='](\"audio\")) {\n          return self.$convert_audio(node)\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'convert', $Html5Converter_convert$2, false), $zuper, $iter)\n        };\n      }, $Html5Converter_convert$2.$$arity = -2);\n      \n      Opal.def(self, '$convert_document', $Html5Converter_convert_document$3 = function $$convert_document(node) {\n        var $a, $b, $c, $$4, $$5, self = this, br = nil, slash = nil, asset_uri_scheme = nil, cdn_base_url = nil, linkcss = nil, max_width_attr = nil, result = nil, lang_attribute = nil, authors = nil, icon_href = nil, icon_type = nil, icon_ext = nil, webfonts = nil, iconfont_stylesheet = nil, syntax_hl = nil, syntax_hl_docinfo_head_idx = nil, docinfo_content = nil, id_attr = nil, sectioned = nil, classes = nil, details = nil, idx = nil, $writer = nil, eqnums_val = nil, eqnums_opt = nil;\n\n        \n        br = \"\" + \"<br\" + ((slash = self.void_element_slash)) + \">\";\n        if ($truthy((asset_uri_scheme = node.$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n        } else {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        cdn_base_url = \"\" + (asset_uri_scheme) + \"//cdnjs.cloudflare.com/ajax/libs\";\n        linkcss = node['$attr?'](\"linkcss\");\n        max_width_attr = (function() {if ($truthy(node['$attr?'](\"max-width\"))) {\n          return \"\" + \" style=\\\"max-width: \" + (node.$attr(\"max-width\")) + \";\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        result = [\"<!DOCTYPE html>\"];\n        lang_attribute = (function() {if ($truthy(node['$attr?'](\"nolang\"))) {\n          return \"\"\n        } else {\n          return \"\" + \" lang=\\\"\" + (node.$attr(\"lang\", \"en\")) + \"\\\"\"\n        }; return nil; })();\n        result['$<<'](\"\" + \"<html\" + ((function() {if ($truthy(self.xml_mode)) {\n          return \" xmlns=\\\"http://www.w3.org/1999/xhtml\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })()) + (lang_attribute) + \">\");\n        result['$<<'](\"\" + \"<head>\\n\" + \"<meta charset=\\\"\" + (node.$attr(\"encoding\", \"UTF-8\")) + \"\\\"\" + (slash) + \">\\n\" + \"<meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"\" + (slash) + \">\\n\" + \"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"\" + (slash) + \">\\n\" + \"<meta name=\\\"generator\\\" content=\\\"Asciidoctor \" + (node.$attr(\"asciidoctor-version\")) + \"\\\"\" + (slash) + \">\");\n        if ($truthy(node['$attr?'](\"app-name\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"application-name\\\" content=\\\"\" + (node.$attr(\"app-name\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"description\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"description\\\" content=\\\"\" + (node.$attr(\"description\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"keywords\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"keywords\\\" content=\\\"\" + (node.$attr(\"keywords\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"authors\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"author\\\" content=\\\"\" + ((function() {if ($truthy((authors = node.$sub_replacements(node.$attr(\"authors\")))['$include?'](\"<\"))) {\n            \n            return authors.$gsub($$($nesting, 'XmlSanitizeRx'), \"\");\n          } else {\n            return authors\n          }; return nil; })()) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"copyright\"))) {\n          result['$<<'](\"\" + \"<meta name=\\\"copyright\\\" content=\\\"\" + (node.$attr(\"copyright\")) + \"\\\"\" + (slash) + \">\")};\n        if ($truthy(node['$attr?'](\"favicon\"))) {\n          \n          if ($truthy((icon_href = node.$attr(\"favicon\"))['$empty?']())) {\n            \n            icon_href = \"favicon.ico\";\n            icon_type = \"image/x-icon\";\n          } else if ($truthy((icon_ext = $$($nesting, 'Helpers').$extname(icon_href, nil)))) {\n            icon_type = (function() {if (icon_ext['$=='](\".ico\")) {\n              return \"image/x-icon\"\n            } else {\n              return \"\" + \"image/\" + (icon_ext.$slice(1, icon_ext.$length()))\n            }; return nil; })()\n          } else {\n            icon_type = \"image/x-icon\"\n          };\n          result['$<<'](\"\" + \"<link rel=\\\"icon\\\" type=\\\"\" + (icon_type) + \"\\\" href=\\\"\" + (icon_href) + \"\\\"\" + (slash) + \">\");};\n        result['$<<'](\"\" + \"<title>\" + (node.$doctitle($hash2([\"sanitize\", \"use_fallback\"], {\"sanitize\": true, \"use_fallback\": true}))) + \"</title>\");\n        if ($truthy($$($nesting, 'DEFAULT_STYLESHEET_KEYS')['$include?'](node.$attr(\"stylesheet\")))) {\n          \n          if ($truthy((webfonts = node.$attr(\"webfonts\")))) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (asset_uri_scheme) + \"//fonts.googleapis.com/css?family=\" + ((function() {if ($truthy(webfonts['$empty?']())) {\n              return \"Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\"\n            } else {\n              return webfonts\n            }; return nil; })()) + \"\\\"\" + (slash) + \">\")};\n          if ($truthy(linkcss)) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path($$($nesting, 'DEFAULT_STYLESHEET_NAME'), node.$attr(\"stylesdir\", \"\"), false)) + \"\\\"\" + (slash) + \">\")\n          } else {\n            result['$<<'](\"\" + \"<style>\\n\" + ($$($nesting, 'Stylesheets').$instance().$primary_stylesheet_data()) + \"\\n\" + \"</style>\")\n          };\n        } else if ($truthy(node['$attr?'](\"stylesheet\"))) {\n          if ($truthy(linkcss)) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path(node.$attr(\"stylesheet\"), node.$attr(\"stylesdir\", \"\"))) + \"\\\"\" + (slash) + \">\")\n          } else {\n            result['$<<'](\"\" + \"<style>\\n\" + (node.$read_contents(node.$attr(\"stylesheet\"), $hash2([\"start\", \"warn_on_failure\", \"label\"], {\"start\": node.$attr(\"stylesdir\"), \"warn_on_failure\": true, \"label\": \"stylesheet\"}))) + \"\\n\" + \"</style>\")\n          }};\n        if ($truthy(node['$attr?'](\"icons\", \"font\"))) {\n          if ($truthy(node['$attr?'](\"iconfont-remote\"))) {\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$attr(\"iconfont-cdn\", \"\" + (cdn_base_url) + \"/font-awesome/\" + ($$($nesting, 'FONT_AWESOME_VERSION')) + \"/css/font-awesome.min.css\")) + \"\\\"\" + (slash) + \">\")\n          } else {\n            \n            iconfont_stylesheet = \"\" + (node.$attr(\"iconfont-name\", \"font-awesome\")) + \".css\";\n            result['$<<'](\"\" + \"<link rel=\\\"stylesheet\\\" href=\\\"\" + (node.$normalize_web_path(iconfont_stylesheet, node.$attr(\"stylesdir\", \"\"), false)) + \"\\\"\" + (slash) + \">\");\n          }};\n        if ($truthy((syntax_hl = node.$syntax_highlighter()))) {\n          result['$<<']((syntax_hl_docinfo_head_idx = result.$size()))};\n        if ($truthy((docinfo_content = node.$docinfo())['$empty?']())) {\n        } else {\n          result['$<<'](docinfo_content)\n        };\n        result['$<<'](\"</head>\");\n        id_attr = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = (sectioned = node['$sections?']())) ? node['$attr?'](\"toc-class\") : $c)) ? node['$attr?'](\"toc\") : $b)) ? node['$attr?'](\"toc-placement\", \"auto\") : $a))) {\n          classes = [node.$doctype(), node.$attr(\"toc-class\"), \"\" + \"toc-\" + (node.$attr(\"toc-position\", \"header\"))]\n        } else {\n          classes = [node.$doctype()]\n        };\n        if ($truthy(node['$role?']())) {\n          classes['$<<'](node.$role())};\n        result['$<<'](\"\" + \"<body\" + (id_attr) + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\">\");\n        if ($truthy((docinfo_content = node.$docinfo(\"header\"))['$empty?']())) {\n        } else {\n          result['$<<'](docinfo_content)\n        };\n        if ($truthy(node.$noheader())) {\n        } else {\n          \n          result['$<<'](\"\" + \"<div id=\\\"header\\\"\" + (max_width_attr) + \">\");\n          if (node.$doctype()['$=='](\"manpage\")) {\n            \n            result['$<<'](\"\" + \"<h1>\" + (node.$doctitle()) + \" Manual Page</h1>\");\n            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?'](\"toc\") : $b)) ? node['$attr?'](\"toc-placement\", \"auto\") : $a))) {\n              result['$<<'](\"\" + \"<div id=\\\"toc\\\" class=\\\"\" + (node.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")};\n            if ($truthy(node['$attr?'](\"manpurpose\"))) {\n              result['$<<'](self.$generate_manname_section(node))};\n          } else {\n            \n            if ($truthy(node['$header?']())) {\n              \n              if ($truthy(node.$notitle())) {\n              } else {\n                result['$<<'](\"\" + \"<h1>\" + (node.$header().$title()) + \"</h1>\")\n              };\n              details = [];\n              idx = 1;\n              $send(node.$authors(), 'each', [], ($$4 = function(author){var self = $$4.$$s || this;\n\n              \n                \n                if (author == null) {\n                  author = nil;\n                };\n                details['$<<'](\"\" + \"<span id=\\\"author\" + ((function() {if ($truthy($rb_gt(idx, 1))) {\n                  return idx\n                } else {\n                  return \"\"\n                }; return nil; })()) + \"\\\" class=\\\"author\\\">\" + (node.$sub_replacements(author.$name())) + \"</span>\" + (br));\n                if ($truthy(author.$email())) {\n                  details['$<<'](\"\" + \"<span id=\\\"email\" + ((function() {if ($truthy($rb_gt(idx, 1))) {\n                    return idx\n                  } else {\n                    return \"\"\n                  }; return nil; })()) + \"\\\" class=\\\"email\\\">\" + (node.$sub_macros(author.$email())) + \"</span>\" + (br))};\n                return (idx = $rb_plus(idx, 1));}, $$4.$$s = self, $$4.$$arity = 1, $$4));\n              if ($truthy(node['$attr?'](\"revnumber\"))) {\n                details['$<<'](\"\" + \"<span id=\\\"revnumber\\\">\" + (($truthy($a = node.$attr(\"version-label\")) ? $a : \"\").$downcase()) + \" \" + (node.$attr(\"revnumber\")) + ((function() {if ($truthy(node['$attr?'](\"revdate\"))) {\n                  return \",\"\n                } else {\n                  return \"\"\n                }; return nil; })()) + \"</span>\")};\n              if ($truthy(node['$attr?'](\"revdate\"))) {\n                details['$<<'](\"\" + \"<span id=\\\"revdate\\\">\" + (node.$attr(\"revdate\")) + \"</span>\")};\n              if ($truthy(node['$attr?'](\"revremark\"))) {\n                details['$<<'](\"\" + (br) + \"<span id=\\\"revremark\\\">\" + (node.$attr(\"revremark\")) + \"</span>\")};\n              if ($truthy(details['$empty?']())) {\n              } else {\n                \n                result['$<<'](\"<div class=\\\"details\\\">\");\n                result.$concat(details);\n                result['$<<'](\"</div>\");\n              };};\n            if ($truthy(($truthy($a = ($truthy($b = sectioned) ? node['$attr?'](\"toc\") : $b)) ? node['$attr?'](\"toc-placement\", \"auto\") : $a))) {\n              result['$<<'](\"\" + \"<div id=\\\"toc\\\" class=\\\"\" + (node.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")};\n          };\n          result['$<<'](\"</div>\");\n        };\n        result['$<<'](\"\" + \"<div id=\\\"content\\\"\" + (max_width_attr) + \">\\n\" + (node.$content()) + \"\\n\" + \"</div>\");\n        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?'](\"nofootnotes\")['$!']() : $a))) {\n          \n          result['$<<'](\"\" + \"<div id=\\\"footnotes\\\"\" + (max_width_attr) + \">\\n\" + \"<hr\" + (slash) + \">\");\n          $send(node.$footnotes(), 'each', [], ($$5 = function(footnote){var self = $$5.$$s || this;\n\n          \n            \n            if (footnote == null) {\n              footnote = nil;\n            };\n            return result['$<<'](\"\" + \"<div class=\\\"footnote\\\" id=\\\"_footnotedef_\" + (footnote.$index()) + \"\\\">\\n\" + \"<a href=\\\"#_footnoteref_\" + (footnote.$index()) + \"\\\">\" + (footnote.$index()) + \"</a>. \" + (footnote.$text()) + \"\\n\" + \"</div>\");}, $$5.$$s = self, $$5.$$arity = 1, $$5));\n          result['$<<'](\"</div>\");};\n        if ($truthy(node.$nofooter())) {\n        } else {\n          \n          result['$<<'](\"\" + \"<div id=\\\"footer\\\"\" + (max_width_attr) + \">\");\n          result['$<<'](\"<div id=\\\"footer-text\\\">\");\n          if ($truthy(node['$attr?'](\"revnumber\"))) {\n            result['$<<'](\"\" + (node.$attr(\"version-label\")) + \" \" + (node.$attr(\"revnumber\")) + (br))};\n          if ($truthy(($truthy($a = node['$attr?'](\"last-update-label\")) ? node['$attr?'](\"reproducible\")['$!']() : $a))) {\n            result['$<<'](\"\" + (node.$attr(\"last-update-label\")) + \" \" + (node.$attr(\"docdatetime\")))};\n          result['$<<'](\"</div>\");\n          result['$<<'](\"</div>\");\n        };\n        if ($truthy(syntax_hl)) {\n          \n          if ($truthy(syntax_hl['$docinfo?'](\"head\"))) {\n            \n            $writer = [syntax_hl_docinfo_head_idx, syntax_hl.$docinfo(\"head\", node, $hash2([\"cdn_base_url\", \"linkcss\", \"self_closing_tag_slash\"], {\"cdn_base_url\": cdn_base_url, \"linkcss\": linkcss, \"self_closing_tag_slash\": slash}))];\n            $send(result, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          } else {\n            result.$delete_at(syntax_hl_docinfo_head_idx)\n          };\n          if ($truthy(syntax_hl['$docinfo?'](\"footer\"))) {\n            result['$<<'](syntax_hl.$docinfo(\"footer\", node, $hash2([\"cdn_base_url\", \"linkcss\", \"self_closing_tag_slash\"], {\"cdn_base_url\": cdn_base_url, \"linkcss\": linkcss, \"self_closing_tag_slash\": slash})))};};\n        if ($truthy(node['$attr?'](\"stem\"))) {\n          \n          eqnums_val = node.$attr(\"eqnums\", \"none\");\n          if ($truthy(eqnums_val['$empty?']())) {\n            eqnums_val = \"AMS\"};\n          eqnums_opt = \"\" + \" equationNumbers: { autoNumber: \\\"\" + (eqnums_val) + \"\\\" } \";\n          result['$<<'](\"\" + \"<script type=\\\"text/x-mathjax-config\\\">\\n\" + \"MathJax.Hub.Config({\\n\" + \"  messageStyle: \\\"none\\\",\\n\" + \"  tex2jax: {\\n\" + \"    inlineMath: [\" + ($$($nesting, 'INLINE_MATH_DELIMITERS')['$[]'](\"latexmath\").$inspect()) + \"],\\n\" + \"    displayMath: [\" + ($$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]'](\"latexmath\").$inspect()) + \"],\\n\" + \"    ignoreClass: \\\"nostem|nolatexmath\\\"\\n\" + \"  },\\n\" + \"  asciimath2jax: {\\n\" + \"    delimiters: [\" + ($$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]'](\"asciimath\").$inspect()) + \"],\\n\" + \"    ignoreClass: \\\"nostem|noasciimath\\\"\\n\" + \"  },\\n\" + \"  TeX: {\" + (eqnums_opt) + \"}\\n\" + \"})\\n\" + \"MathJax.Hub.Register.StartupHook(\\\"AsciiMath Jax Ready\\\", function () {\\n\" + \"  MathJax.InputJax.AsciiMath.postfilterHooks.Add(function (data, node) {\\n\" + \"    if ((node = data.script.parentNode) && (node = node.parentNode) && node.classList.contains(\\\"stemblock\\\")) {\\n\" + \"      data.math.root.display = \\\"block\\\"\\n\" + \"    }\\n\" + \"    return data\\n\" + \"  })\\n\" + \"})\\n\" + \"</script>\\n\" + \"<script src=\\\"\" + (cdn_base_url) + \"/mathjax/\" + ($$($nesting, 'MATHJAX_VERSION')) + \"/MathJax.js?config=TeX-MML-AM_HTMLorMML\\\"></script>\");};\n        if ($truthy((docinfo_content = node.$docinfo(\"footer\"))['$empty?']())) {\n        } else {\n          result['$<<'](docinfo_content)\n        };\n        result['$<<'](\"</body>\");\n        result['$<<'](\"</html>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_document$3.$$arity = 1);\n      \n      Opal.def(self, '$convert_embedded', $Html5Converter_convert_embedded$6 = function $$convert_embedded(node) {\n        var $a, $b, $c, $$7, self = this, result = nil, id_attr = nil, toc_p = nil;\n\n        \n        result = [];\n        if (node.$doctype()['$=='](\"manpage\")) {\n          \n          if ($truthy(node.$notitle())) {\n          } else {\n            \n            id_attr = (function() {if ($truthy(node.$id())) {\n              return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            result['$<<'](\"\" + \"<h1\" + (id_attr) + \">\" + (node.$doctitle()) + \" Manual Page</h1>\");\n          };\n          if ($truthy(node['$attr?'](\"manpurpose\"))) {\n            result['$<<'](self.$generate_manname_section(node))};\n        } else if ($truthy(($truthy($a = node['$header?']()) ? node.$notitle()['$!']() : $a))) {\n          \n          id_attr = (function() {if ($truthy(node.$id())) {\n            return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          result['$<<'](\"\" + \"<h1\" + (id_attr) + \">\" + (node.$header().$title()) + \"</h1>\");};\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$sections?']()) ? node['$attr?'](\"toc\") : $c)) ? (toc_p = node.$attr(\"toc-placement\"))['$!='](\"macro\") : $b)) ? toc_p['$!='](\"preamble\") : $a))) {\n          result['$<<'](\"\" + \"<div id=\\\"toc\\\" class=\\\"toc\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (node.$attr(\"toc-title\")) + \"</div>\\n\" + (node.$converter().$convert(node, \"outline\")) + \"\\n\" + \"</div>\")};\n        result['$<<'](node.$content());\n        if ($truthy(($truthy($a = node['$footnotes?']()) ? node['$attr?'](\"nofootnotes\")['$!']() : $a))) {\n          \n          result['$<<'](\"\" + \"<div id=\\\"footnotes\\\">\\n\" + \"<hr\" + (self.void_element_slash) + \">\");\n          $send(node.$footnotes(), 'each', [], ($$7 = function(footnote){var self = $$7.$$s || this;\n\n          \n            \n            if (footnote == null) {\n              footnote = nil;\n            };\n            return result['$<<'](\"\" + \"<div class=\\\"footnote\\\" id=\\\"_footnotedef_\" + (footnote.$index()) + \"\\\">\\n\" + \"<a href=\\\"#_footnoteref_\" + (footnote.$index()) + \"\\\">\" + (footnote.$index()) + \"</a>. \" + (footnote.$text()) + \"\\n\" + \"</div>\");}, $$7.$$s = self, $$7.$$arity = 1, $$7));\n          result['$<<'](\"</div>\");};\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_embedded$6.$$arity = 1);\n      \n      Opal.def(self, '$convert_outline', $Html5Converter_convert_outline$8 = function $$convert_outline(node, opts) {\n        var $a, $b, $$9, self = this, sectnumlevels = nil, toclevels = nil, sections = nil, result = nil;\n\n        \n        \n        if (opts == null) {\n          opts = $hash2([], {});\n        };\n        if ($truthy(node['$sections?']())) {\n        } else {\n          return nil\n        };\n        sectnumlevels = ($truthy($a = opts['$[]'](\"sectnumlevels\")) ? $a : ($truthy($b = node.$document().$attributes()['$[]'](\"sectnumlevels\")) ? $b : 3).$to_i());\n        toclevels = ($truthy($a = opts['$[]'](\"toclevels\")) ? $a : ($truthy($b = node.$document().$attributes()['$[]'](\"toclevels\")) ? $b : 2).$to_i());\n        sections = node.$sections();\n        result = [\"\" + \"<ul class=\\\"sectlevel\" + (sections['$[]'](0).$level()) + \"\\\">\"];\n        $send(sections, 'each', [], ($$9 = function(section){var self = $$9.$$s || this, $c, slevel = nil, stitle = nil, signifier = nil, child_toc_level = nil;\n\n        \n          \n          if (section == null) {\n            section = nil;\n          };\n          slevel = section.$level();\n          if ($truthy(section.$caption())) {\n            stitle = section.$captioned_title()\n          } else if ($truthy(($truthy($c = section.$numbered()) ? $rb_le(slevel, sectnumlevels) : $c))) {\n            if ($truthy(($truthy($c = $rb_lt(slevel, 2)) ? node.$document().$doctype()['$=='](\"book\") : $c))) {\n              if (section.$sectname()['$=='](\"chapter\")) {\n                stitle = \"\" + ((function() {if ($truthy((signifier = node.$document().$attributes()['$[]'](\"chapter-signifier\")))) {\n                  return \"\" + (signifier) + \" \"\n                } else {\n                  return \"\"\n                }; return nil; })()) + (section.$sectnum()) + \" \" + (section.$title())\n              } else if (section.$sectname()['$=='](\"part\")) {\n                stitle = \"\" + ((function() {if ($truthy((signifier = node.$document().$attributes()['$[]'](\"part-signifier\")))) {\n                  return \"\" + (signifier) + \" \"\n                } else {\n                  return \"\"\n                }; return nil; })()) + (section.$sectnum(nil, \":\")) + \" \" + (section.$title())\n              } else {\n                stitle = \"\" + (section.$sectnum()) + \" \" + (section.$title())\n              }\n            } else {\n              stitle = \"\" + (section.$sectnum()) + \" \" + (section.$title())\n            }\n          } else {\n            stitle = section.$title()\n          };\n          if ($truthy(stitle['$include?'](\"<a\"))) {\n            stitle = stitle.$gsub($$($nesting, 'DropAnchorRx'), \"\")};\n          if ($truthy(($truthy($c = $rb_lt(slevel, toclevels)) ? (child_toc_level = self.$convert_outline(section, $hash2([\"toclevels\", \"sectnumlevels\"], {\"toclevels\": toclevels, \"sectnumlevels\": sectnumlevels}))) : $c))) {\n            \n            result['$<<'](\"\" + \"<li><a href=\\\"#\" + (section.$id()) + \"\\\">\" + (stitle) + \"</a>\");\n            result['$<<'](child_toc_level);\n            return result['$<<'](\"</li>\");\n          } else {\n            return result['$<<'](\"\" + \"<li><a href=\\\"#\" + (section.$id()) + \"\\\">\" + (stitle) + \"</a></li>\")\n          };}, $$9.$$s = self, $$9.$$arity = 1, $$9));\n        result['$<<'](\"</ul>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_outline$8.$$arity = -2);\n      \n      Opal.def(self, '$convert_section', $Html5Converter_convert_section$10 = function $$convert_section(node) {\n        var $a, $b, self = this, doc_attrs = nil, level = nil, title = nil, signifier = nil, id_attr = nil, id = nil, role = nil;\n\n        \n        doc_attrs = node.$document().$attributes();\n        level = node.$level();\n        if ($truthy(node.$caption())) {\n          title = node.$captioned_title()\n        } else if ($truthy(($truthy($a = node.$numbered()) ? $rb_le(level, ($truthy($b = doc_attrs['$[]'](\"sectnumlevels\")) ? $b : 3).$to_i()) : $a))) {\n          if ($truthy(($truthy($a = $rb_lt(level, 2)) ? node.$document().$doctype()['$=='](\"book\") : $a))) {\n            if (node.$sectname()['$=='](\"chapter\")) {\n              title = \"\" + ((function() {if ($truthy((signifier = doc_attrs['$[]'](\"chapter-signifier\")))) {\n                return \"\" + (signifier) + \" \"\n              } else {\n                return \"\"\n              }; return nil; })()) + (node.$sectnum()) + \" \" + (node.$title())\n            } else if (node.$sectname()['$=='](\"part\")) {\n              title = \"\" + ((function() {if ($truthy((signifier = doc_attrs['$[]'](\"part-signifier\")))) {\n                return \"\" + (signifier) + \" \"\n              } else {\n                return \"\"\n              }; return nil; })()) + (node.$sectnum(nil, \":\")) + \" \" + (node.$title())\n            } else {\n              title = \"\" + (node.$sectnum()) + \" \" + (node.$title())\n            }\n          } else {\n            title = \"\" + (node.$sectnum()) + \" \" + (node.$title())\n          }\n        } else {\n          title = node.$title()\n        };\n        if ($truthy(node.$id())) {\n          \n          id_attr = \"\" + \" id=\\\"\" + ((id = node.$id())) + \"\\\"\";\n          if ($truthy(doc_attrs['$[]'](\"sectlinks\"))) {\n            title = \"\" + \"<a class=\\\"link\\\" href=\\\"#\" + (id) + \"\\\">\" + (title) + \"</a>\"};\n          if ($truthy(doc_attrs['$[]'](\"sectanchors\"))) {\n            if (doc_attrs['$[]'](\"sectanchors\")['$=='](\"after\")) {\n              title = \"\" + (title) + \"<a class=\\\"anchor\\\" href=\\\"#\" + (id) + \"\\\"></a>\"\n            } else {\n              title = \"\" + \"<a class=\\\"anchor\\\" href=\\\"#\" + (id) + \"\\\"></a>\" + (title)\n            }};\n        } else {\n          id_attr = \"\"\n        };\n        if (level['$=='](0)) {\n          return \"\" + \"<h1\" + (id_attr) + \" class=\\\"sect0\" + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\" + (title) + \"</h1>\\n\" + (node.$content())\n        } else {\n          return \"\" + \"<div class=\\\"sect\" + (level) + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\\n\" + \"<h\" + ($rb_plus(level, 1)) + (id_attr) + \">\" + (title) + \"</h\" + ($rb_plus(level, 1)) + \">\\n\" + ((function() {if (level['$=='](1)) {\n            return \"\" + \"<div class=\\\"sectionbody\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\"\n          } else {\n            return node.$content()\n          }; return nil; })()) + \"\\n\" + \"</div>\"\n        };\n      }, $Html5Converter_convert_section$10.$$arity = 1);\n      \n      Opal.def(self, '$convert_admonition', $Html5Converter_convert_admonition$11 = function $$convert_admonition(node) {\n        var $a, self = this, id_attr = nil, name = nil, title_element = nil, label = nil, role = nil;\n\n        \n        id_attr = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        name = node.$attr(\"name\");\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          if ($truthy(($truthy($a = node.$document()['$attr?'](\"icons\", \"font\")) ? node['$attr?'](\"icon\")['$!']() : $a))) {\n            label = \"\" + \"<i class=\\\"fa icon-\" + (name) + \"\\\" title=\\\"\" + (node.$attr(\"textlabel\")) + \"\\\"></i>\"\n          } else {\n            label = \"\" + \"<img src=\\\"\" + (node.$icon_uri(name)) + \"\\\" alt=\\\"\" + (node.$attr(\"textlabel\")) + \"\\\"\" + (self.void_element_slash) + \">\"\n          }\n        } else {\n          label = \"\" + \"<div class=\\\"title\\\">\" + (node.$attr(\"textlabel\")) + \"</div>\"\n        };\n        return \"\" + \"<div\" + (id_attr) + \" class=\\\"admonitionblock \" + (name) + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + \"<table>\\n\" + \"<tr>\\n\" + \"<td class=\\\"icon\\\">\\n\" + (label) + \"\\n\" + \"</td>\\n\" + \"<td class=\\\"content\\\">\\n\" + (title_element) + (node.$content()) + \"\\n\" + \"</td>\\n\" + \"</tr>\\n\" + \"</table>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_admonition$11.$$arity = 1);\n      \n      Opal.def(self, '$convert_audio', $Html5Converter_convert_audio$12 = function $$convert_audio(node) {\n        var $a, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, start_t = nil, end_t = nil, time_anchor = nil;\n\n        \n        xml = self.xml_mode;\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"audioblock\", node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        start_t = node.$attr(\"start\");\n        end_t = node.$attr(\"end\");\n        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {\n          return \"\" + \"#t=\" + (($truthy($a = start_t) ? $a : \"\")) + ((function() {if ($truthy(end_t)) {\n            return \"\" + \",\" + (end_t)\n          } else {\n            return \"\"\n          }; return nil; })())\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + \"<audio src=\\\"\" + (node.$media_uri(node.$attr(\"target\"))) + (time_anchor) + \"\\\"\" + ((function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          \n          return self.$append_boolean_attribute(\"autoplay\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"nocontrols\"))) {\n          return \"\"\n        } else {\n          \n          return self.$append_boolean_attribute(\"controls\", xml);\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"loop\"))) {\n          \n          return self.$append_boolean_attribute(\"loop\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + \">\\n\" + \"Your browser does not support the audio tag.\\n\" + \"</audio>\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_audio$12.$$arity = 1);\n      \n      Opal.def(self, '$convert_colist', $Html5Converter_convert_colist$13 = function $$convert_colist(node) {\n        var $a, $$14, $$15, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, font_icons = nil, num = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"colist\", node.$style(), node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          \n          result['$<<'](\"<table>\");\n          $a = [node.$document()['$attr?'](\"icons\", \"font\"), 0], (font_icons = $a[0]), (num = $a[1]), $a;\n          $send(node.$items(), 'each', [], ($$14 = function(item){var self = $$14.$$s || this, num_label = nil;\n            if (self.void_element_slash == null) self.void_element_slash = nil;\n\n          \n            \n            if (item == null) {\n              item = nil;\n            };\n            num = $rb_plus(num, 1);\n            if ($truthy(font_icons)) {\n              num_label = \"\" + \"<i class=\\\"conum\\\" data-value=\\\"\" + (num) + \"\\\"></i><b>\" + (num) + \"</b>\"\n            } else {\n              num_label = \"\" + \"<img src=\\\"\" + (node.$icon_uri(\"\" + \"callouts/\" + (num))) + \"\\\" alt=\\\"\" + (num) + \"\\\"\" + (self.void_element_slash) + \">\"\n            };\n            return result['$<<'](\"\" + \"<tr>\\n\" + \"<td>\" + (num_label) + \"</td>\\n\" + \"<td>\" + (item.$text()) + ((function() {if ($truthy(item['$blocks?']())) {\n              return $rb_plus($$($nesting, 'LF'), item.$content())\n            } else {\n              return \"\"\n            }; return nil; })()) + \"</td>\\n\" + \"</tr>\");}, $$14.$$s = self, $$14.$$arity = 1, $$14));\n          result['$<<'](\"</table>\");\n        } else {\n          \n          result['$<<'](\"<ol>\");\n          $send(node.$items(), 'each', [], ($$15 = function(item){var self = $$15.$$s || this;\n\n          \n            \n            if (item == null) {\n              item = nil;\n            };\n            return result['$<<'](\"\" + \"<li>\\n\" + \"<p>\" + (item.$text()) + \"</p>\" + ((function() {if ($truthy(item['$blocks?']())) {\n              return $rb_plus($$($nesting, 'LF'), item.$content())\n            } else {\n              return \"\"\n            }; return nil; })()) + \"\\n\" + \"</li>\");}, $$15.$$s = self, $$15.$$arity = 1, $$15));\n          result['$<<'](\"</ol>\");\n        };\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_colist$13.$$arity = 1);\n      \n      Opal.def(self, '$convert_dlist', $Html5Converter_convert_dlist$16 = function $$convert_dlist(node) {\n        var $$17, $a, $$19, $$21, self = this, result = nil, id_attribute = nil, classes = nil, $case = nil, class_attribute = nil, slash = nil, col_style_attribute = nil, dt_style_attribute = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = (function() {$case = node.$style();\n        if (\"qanda\"['$===']($case)) {return [\"qlist\", \"qanda\", node.$role()]}\n        else if (\"horizontal\"['$===']($case)) {return [\"hdlist\", node.$role()]}\n        else {return [\"dlist\", node.$style(), node.$role()]}})().$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        $case = node.$style();\n        if (\"qanda\"['$===']($case)) {\n        result['$<<'](\"<ol>\");\n        $send(node.$items(), 'each', [], ($$17 = function(terms, dd){var self = $$17.$$s || this, $$18;\n\n        \n          \n          if (terms == null) {\n            terms = nil;\n          };\n          \n          if (dd == null) {\n            dd = nil;\n          };\n          result['$<<'](\"<li>\");\n          $send(terms, 'each', [], ($$18 = function(dt){var self = $$18.$$s || this;\n\n          \n            \n            if (dt == null) {\n              dt = nil;\n            };\n            return result['$<<'](\"\" + \"<p><em>\" + (dt.$text()) + \"</em></p>\");}, $$18.$$s = self, $$18.$$arity = 1, $$18));\n          if ($truthy(dd)) {\n            \n            if ($truthy(dd['$text?']())) {\n              result['$<<'](\"\" + \"<p>\" + (dd.$text()) + \"</p>\")};\n            if ($truthy(dd['$blocks?']())) {\n              result['$<<'](dd.$content())};};\n          return result['$<<'](\"</li>\");}, $$17.$$s = self, $$17.$$arity = 2, $$17));\n        result['$<<'](\"</ol>\");}\n        else if (\"horizontal\"['$===']($case)) {\n        slash = self.void_element_slash;\n        result['$<<'](\"<table>\");\n        if ($truthy(($truthy($a = node['$attr?'](\"labelwidth\")) ? $a : node['$attr?'](\"itemwidth\")))) {\n          \n          result['$<<'](\"<colgroup>\");\n          col_style_attribute = (function() {if ($truthy(node['$attr?'](\"labelwidth\"))) {\n            return \"\" + \" style=\\\"width: \" + (node.$attr(\"labelwidth\").$chomp(\"%\")) + \"%;\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          result['$<<'](\"\" + \"<col\" + (col_style_attribute) + (slash) + \">\");\n          col_style_attribute = (function() {if ($truthy(node['$attr?'](\"itemwidth\"))) {\n            return \"\" + \" style=\\\"width: \" + (node.$attr(\"itemwidth\").$chomp(\"%\")) + \"%;\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          result['$<<'](\"\" + \"<col\" + (col_style_attribute) + (slash) + \">\");\n          result['$<<'](\"</colgroup>\");};\n        $send(node.$items(), 'each', [], ($$19 = function(terms, dd){var self = $$19.$$s || this, $$20, first_term = nil;\n\n        \n          \n          if (terms == null) {\n            terms = nil;\n          };\n          \n          if (dd == null) {\n            dd = nil;\n          };\n          result['$<<'](\"<tr>\");\n          result['$<<'](\"\" + \"<td class=\\\"hdlist1\" + ((function() {if ($truthy(node['$option?'](\"strong\"))) {\n            return \" strong\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\");\n          first_term = true;\n          $send(terms, 'each', [], ($$20 = function(dt){var self = $$20.$$s || this;\n\n          \n            \n            if (dt == null) {\n              dt = nil;\n            };\n            if ($truthy(first_term)) {\n            } else {\n              result['$<<'](\"\" + \"<br\" + (slash) + \">\")\n            };\n            result['$<<'](dt.$text());\n            return (first_term = nil);}, $$20.$$s = self, $$20.$$arity = 1, $$20));\n          result['$<<'](\"</td>\");\n          result['$<<'](\"<td class=\\\"hdlist2\\\">\");\n          if ($truthy(dd)) {\n            \n            if ($truthy(dd['$text?']())) {\n              result['$<<'](\"\" + \"<p>\" + (dd.$text()) + \"</p>\")};\n            if ($truthy(dd['$blocks?']())) {\n              result['$<<'](dd.$content())};};\n          result['$<<'](\"</td>\");\n          return result['$<<'](\"</tr>\");}, $$19.$$s = self, $$19.$$arity = 2, $$19));\n        result['$<<'](\"</table>\");}\n        else {\n        result['$<<'](\"<dl>\");\n        dt_style_attribute = (function() {if ($truthy(node.$style())) {\n          return \"\"\n        } else {\n          return \" class=\\\"hdlist1\\\"\"\n        }; return nil; })();\n        $send(node.$items(), 'each', [], ($$21 = function(terms, dd){var self = $$21.$$s || this, $$22;\n\n        \n          \n          if (terms == null) {\n            terms = nil;\n          };\n          \n          if (dd == null) {\n            dd = nil;\n          };\n          $send(terms, 'each', [], ($$22 = function(dt){var self = $$22.$$s || this;\n\n          \n            \n            if (dt == null) {\n              dt = nil;\n            };\n            return result['$<<'](\"\" + \"<dt\" + (dt_style_attribute) + \">\" + (dt.$text()) + \"</dt>\");}, $$22.$$s = self, $$22.$$arity = 1, $$22));\n          if ($truthy(dd)) {\n            \n            result['$<<'](\"<dd>\");\n            if ($truthy(dd['$text?']())) {\n              result['$<<'](\"\" + \"<p>\" + (dd.$text()) + \"</p>\")};\n            if ($truthy(dd['$blocks?']())) {\n              result['$<<'](dd.$content())};\n            return result['$<<'](\"</dd>\");\n          } else {\n            return nil\n          };}, $$21.$$s = self, $$21.$$arity = 2, $$21));\n        result['$<<'](\"</dl>\");};\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_dlist$16.$$arity = 1);\n      \n      Opal.def(self, '$convert_example', $Html5Converter_convert_example$23 = function $$convert_example(node) {\n        var self = this, id_attribute = nil, class_attribute = nil, summary_element = nil, title_element = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(node['$option?'](\"collapsible\"))) {\n          \n          class_attribute = (function() {if ($truthy(node.$role())) {\n            return \"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          summary_element = (function() {if ($truthy(node['$title?']())) {\n            return \"\" + \"<summary class=\\\"title\\\">\" + (node.$title()) + \"</summary>\"\n          } else {\n            return \"<summary class=\\\"title\\\">Details</summary>\"\n          }; return nil; })();\n          return \"\" + \"<details\" + (id_attribute) + (class_attribute) + ((function() {if ($truthy(node['$option?'](\"open\"))) {\n            return \" open\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \">\\n\" + (summary_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</details>\";\n        } else {\n          \n          title_element = (function() {if ($truthy(node['$title?']())) {\n            return \"\" + \"<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\\n\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          return \"\" + \"<div\" + (id_attribute) + \" class=\\\"exampleblock\" + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n        };\n      }, $Html5Converter_convert_example$23.$$arity = 1);\n      \n      Opal.def(self, '$convert_floating_title', $Html5Converter_convert_floating_title$24 = function $$convert_floating_title(node) {\n        var self = this, tag_name = nil, id_attribute = nil, classes = nil;\n\n        \n        tag_name = \"\" + \"h\" + ($rb_plus(node.$level(), 1));\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [node.$style(), node.$role()].$compact();\n        return \"\" + \"<\" + (tag_name) + (id_attribute) + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\">\" + (node.$title()) + \"</\" + (tag_name) + \">\";\n      }, $Html5Converter_convert_floating_title$24.$$arity = 1);\n      \n      Opal.def(self, '$convert_image', $Html5Converter_convert_image$25 = function $$convert_image(node) {\n        var $a, $b, $c, self = this, target = nil, width_attr = nil, height_attr = nil, svg = nil, obj = nil, img = nil, fallback = nil, id_attr = nil, classes = nil, class_attr = nil, title_el = nil;\n\n        \n        target = node.$attr(\"target\");\n        width_attr = (function() {if ($truthy(node['$attr?'](\"width\"))) {\n          return \"\" + \" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        height_attr = (function() {if ($truthy(node['$attr?'](\"height\"))) {\n          return \"\" + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = node['$attr?'](\"format\", \"svg\")) ? $c : target['$include?'](\".svg\"))) ? $rb_lt(node.$document().$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $b)) ? ($truthy($b = (svg = node['$option?'](\"inline\"))) ? $b : (obj = node['$option?'](\"interactive\"))) : $a))) {\n          if ($truthy(svg)) {\n            img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\")\n          } else if ($truthy(obj)) {\n            \n            fallback = (function() {if ($truthy(node['$attr?'](\"fallback\"))) {\n              return \"\" + \"<img src=\\\"\" + (node.$image_uri(node.$attr(\"fallback\"))) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\"\n            } else {\n              return \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"\n            }; return nil; })();\n            img = \"\" + \"<object type=\\\"image/svg+xml\\\" data=\\\"\" + (node.$image_uri(target)) + \"\\\"\" + (width_attr) + (height_attr) + \">\" + (fallback) + \"</object>\";}};\n        img = ($truthy($a = img) ? $a : \"\" + \"<img src=\\\"\" + (node.$image_uri(target)) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (width_attr) + (height_attr) + (self.void_element_slash) + \">\");\n        if ($truthy(node['$attr?'](\"link\"))) {\n          img = \"\" + \"<a class=\\\"image\\\" href=\\\"\" + (node.$attr(\"link\")) + \"\\\"\" + (self.$append_link_constraint_attrs(node).$join()) + \">\" + (img) + \"</a>\"};\n        id_attr = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"imageblock\"];\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))};\n        if ($truthy(node['$attr?'](\"align\"))) {\n          classes['$<<'](\"\" + \"text-\" + (node.$attr(\"align\")))};\n        if ($truthy(node.$role())) {\n          classes['$<<'](node.$role())};\n        class_attr = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_el = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attr) + (class_attr) + \">\\n\" + \"<div class=\\\"content\\\">\\n\" + (img) + \"\\n\" + \"</div>\" + (title_el) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_image$25.$$arity = 1);\n      \n      Opal.def(self, '$convert_listing', $Html5Converter_convert_listing$26 = function $$convert_listing(node) {\n        var $a, self = this, nowrap = nil, lang = nil, syntax_hl = nil, opts = nil, doc_attrs = nil, $writer = nil, pre_open = nil, pre_close = nil, id_attribute = nil, title_element = nil, role = nil;\n\n        \n        nowrap = ($truthy($a = node['$option?'](\"nowrap\")) ? $a : node.$document()['$attr?'](\"prewrap\")['$!']());\n        if (node.$style()['$=='](\"source\")) {\n          \n          lang = node.$attr(\"language\");\n          if ($truthy((syntax_hl = node.$document().$syntax_highlighter()))) {\n            \n            opts = (function() {if ($truthy(syntax_hl['$highlight?']())) {\n              return $hash2([\"css_mode\", \"style\"], {\"css_mode\": ($truthy($a = (doc_attrs = node.$document().$attributes())['$[]'](\"\" + (syntax_hl.$name()) + \"-css\")) ? $a : \"class\").$to_sym(), \"style\": doc_attrs['$[]'](\"\" + (syntax_hl.$name()) + \"-style\")})\n            } else {\n              return $hash2([], {})\n            }; return nil; })();\n            \n            $writer = [\"nowrap\", nowrap];\n            $send(opts, '[]=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            \n            pre_open = \"\" + \"<pre class=\\\"highlight\" + ((function() {if ($truthy(nowrap)) {\n              return \" nowrap\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \"\\\"><code\" + ((function() {if ($truthy(lang)) {\n              return \"\" + \" class=\\\"language-\" + (lang) + \"\\\" data-lang=\\\"\" + (lang) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\";\n            pre_close = \"</code></pre>\";\n          };\n        } else {\n          \n          pre_open = \"\" + \"<pre\" + ((function() {if ($truthy(nowrap)) {\n            return \" class=\\\"nowrap\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \">\";\n          pre_close = \"</pre>\";\n        };\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$captioned_title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"listingblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + ((function() {if ($truthy(syntax_hl)) {\n          \n          return syntax_hl.$format(node, lang, opts);\n        } else {\n          return $rb_plus($rb_plus(pre_open, ($truthy($a = node.$content()) ? $a : \"\")), pre_close)\n        }; return nil; })()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_listing$26.$$arity = 1);\n      \n      Opal.def(self, '$convert_literal', $Html5Converter_convert_literal$27 = function $$convert_literal(node) {\n        var $a, self = this, id_attribute = nil, title_element = nil, nowrap = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        nowrap = ($truthy($a = node.$document()['$attr?'](\"prewrap\")['$!']()) ? $a : node['$option?'](\"nowrap\"));\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"literalblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + \"<pre\" + ((function() {if ($truthy(nowrap)) {\n          return \" class=\\\"nowrap\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })()) + \">\" + (node.$content()) + \"</pre>\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_literal$27.$$arity = 1);\n      \n      Opal.def(self, '$convert_stem', $Html5Converter_convert_stem$28 = function $$convert_stem(node) {\n        var $a, $b, $$29, self = this, id_attribute = nil, title_element = nil, style = nil, open = nil, close = nil, equation = nil, br = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        $b = $$($nesting, 'BLOCK_MATH_DELIMITERS')['$[]']((style = node.$style().$to_sym())), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy((equation = node.$content()))) {\n          \n          if ($truthy((($a = style['$=='](\"asciimath\")) ? equation['$include?']($$($nesting, 'LF')) : style['$=='](\"asciimath\")))) {\n            \n            br = \"\" + ($$($nesting, 'LF')) + \"<br\" + (self.void_element_slash) + \">\";\n            equation = $send(equation, 'gsub', [$$($nesting, 'StemBreakRx')], ($$29 = function(){var self = $$29.$$s || this, $c;\n\n            return \"\" + (close) + ($rb_times(br, $rb_minus((($c = $gvars['~']) === nil ? nil : $c['$[]'](0)).$count($$($nesting, 'LF')), 1))) + ($$($nesting, 'LF')) + (open)}, $$29.$$s = self, $$29.$$arity = 0, $$29));};\n          if ($truthy(($truthy($a = equation['$start_with?'](open)) ? equation['$end_with?'](close) : $a))) {\n          } else {\n            equation = \"\" + (open) + (equation) + (close)\n          };\n        } else {\n          equation = \"\"\n        };\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"stemblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + (title_element) + \"<div class=\\\"content\\\">\\n\" + (equation) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_stem$28.$$arity = 1);\n      \n      Opal.def(self, '$convert_olist', $Html5Converter_convert_olist$30 = function $$convert_olist(node) {\n        var $$31, self = this, result = nil, id_attribute = nil, classes = nil, class_attribute = nil, type_attribute = nil, keyword = nil, start_attribute = nil, reversed_attribute = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"olist\", node.$style(), node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        type_attribute = (function() {if ($truthy((keyword = node.$list_marker_keyword()))) {\n          return \"\" + \" type=\\\"\" + (keyword) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        start_attribute = (function() {if ($truthy(node['$attr?'](\"start\"))) {\n          return \"\" + \" start=\\\"\" + (node.$attr(\"start\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        reversed_attribute = (function() {if ($truthy(node['$option?'](\"reversed\"))) {\n          \n          return self.$append_boolean_attribute(\"reversed\", self.xml_mode);\n        } else {\n          return \"\"\n        }; return nil; })();\n        result['$<<'](\"\" + \"<ol class=\\\"\" + (node.$style()) + \"\\\"\" + (type_attribute) + (start_attribute) + (reversed_attribute) + \">\");\n        $send(node.$items(), 'each', [], ($$31 = function(item){var self = $$31.$$s || this;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          if ($truthy(item.$id())) {\n            result['$<<'](\"\" + \"<li id=\\\"\" + (item.$id()) + \"\\\"\" + ((function() {if ($truthy(item.$role())) {\n              return \"\" + \" class=\\\"\" + (item.$role()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\")\n          } else if ($truthy(item.$role())) {\n            result['$<<'](\"\" + \"<li class=\\\"\" + (item.$role()) + \"\\\">\")\n          } else {\n            result['$<<'](\"<li>\")\n          };\n          result['$<<'](\"\" + \"<p>\" + (item.$text()) + \"</p>\");\n          if ($truthy(item['$blocks?']())) {\n            result['$<<'](item.$content())};\n          return result['$<<'](\"</li>\");}, $$31.$$s = self, $$31.$$arity = 1, $$31));\n        result['$<<'](\"</ol>\");\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_olist$30.$$arity = 1);\n      \n      Opal.def(self, '$convert_open', $Html5Converter_convert_open$32 = function $$convert_open(node) {\n        var $a, $b, $c, self = this, style = nil, id_attr = nil, title_el = nil, role = nil;\n\n        if ((style = node.$style())['$=='](\"abstract\")) {\n          if ($truthy((($a = node.$parent()['$=='](node.$document())) ? node.$document().$doctype()['$=='](\"book\") : node.$parent()['$=='](node.$document())))) {\n            \n            self.$logger().$warn(\"abstract block cannot be used in a document without a title when doctype is book. Excluding block content.\");\n            return \"\";\n          } else {\n            \n            id_attr = (function() {if ($truthy(node.$id())) {\n              return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            title_el = (function() {if ($truthy(node['$title?']())) {\n              return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            return \"\" + \"<div\" + (id_attr) + \" class=\\\"quoteblock abstract\" + ((function() {if ($truthy((role = node.$role()))) {\n              return \"\" + \" \" + (role)\n            } else {\n              return \"\"\n            }; return nil; })()) + \"\\\">\\n\" + (title_el) + \"<blockquote>\\n\" + (node.$content()) + \"\\n\" + \"</blockquote>\\n\" + \"</div>\";\n          }\n        } else if ($truthy((($a = style['$=='](\"partintro\")) ? ($truthy($b = ($truthy($c = $rb_gt(node.$level(), 0)) ? $c : node.$parent().$context()['$!='](\"section\"))) ? $b : node.$document().$doctype()['$!='](\"book\")) : style['$=='](\"partintro\")))) {\n          \n          self.$logger().$error(\"partintro block can only be used when doctype is book and must be a child of a book part. Excluding block content.\");\n          return \"\";\n        } else {\n          \n          id_attr = (function() {if ($truthy(node.$id())) {\n            return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          title_el = (function() {if ($truthy(node['$title?']())) {\n            return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          return \"\" + \"<div\" + (id_attr) + \" class=\\\"openblock\" + ((function() {if ($truthy(($truthy($a = style) ? style['$!='](\"open\") : $a))) {\n            return \"\" + \" \" + (style)\n          } else {\n            return \"\"\n          }; return nil; })()) + ((function() {if ($truthy((role = node.$role()))) {\n            return \"\" + \" \" + (role)\n          } else {\n            return \"\"\n          }; return nil; })()) + \"\\\">\\n\" + (title_el) + \"<div class=\\\"content\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n        }\n      }, $Html5Converter_convert_open$32.$$arity = 1);\n      \n      Opal.def(self, '$convert_page_break', $Html5Converter_convert_page_break$33 = function $$convert_page_break(node) {\n        var self = this;\n\n        return \"<div style=\\\"page-break-after: always;\\\"></div>\"\n      }, $Html5Converter_convert_page_break$33.$$arity = 1);\n      \n      Opal.def(self, '$convert_paragraph', $Html5Converter_convert_paragraph$34 = function $$convert_paragraph(node) {\n        var self = this, attributes = nil;\n\n        \n        if ($truthy(node.$role())) {\n          attributes = \"\" + ((function() {if ($truthy(node.$id())) {\n            return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })()) + \" class=\\\"paragraph \" + (node.$role()) + \"\\\"\"\n        } else if ($truthy(node.$id())) {\n          attributes = \"\" + \" id=\\\"\" + (node.$id()) + \"\\\" class=\\\"paragraph\\\"\"\n        } else {\n          attributes = \" class=\\\"paragraph\\\"\"\n        };\n        if ($truthy(node['$title?']())) {\n          return \"\" + \"<div\" + (attributes) + \">\\n\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\" + \"<p>\" + (node.$content()) + \"</p>\\n\" + \"</div>\"\n        } else {\n          return \"\" + \"<div\" + (attributes) + \">\\n\" + \"<p>\" + (node.$content()) + \"</p>\\n\" + \"</div>\"\n        };\n      }, $Html5Converter_convert_paragraph$34.$$arity = 1);\n      Opal.alias(self, \"convert_pass\", \"content_only\");\n      \n      Opal.def(self, '$convert_preamble', $Html5Converter_convert_preamble$35 = function $$convert_preamble(node) {\n        var $a, $b, self = this, doc = nil, toc = nil;\n\n        \n        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?'](\"toc-placement\", \"preamble\")) ? doc['$sections?']() : $b)) ? doc['$attr?'](\"toc\") : $a))) {\n          toc = \"\" + \"\\n\" + \"<div id=\\\"toc\\\" class=\\\"\" + (doc.$attr(\"toc-class\", \"toc\")) + \"\\\">\\n\" + \"<div id=\\\"toctitle\\\">\" + (doc.$attr(\"toc-title\")) + \"</div>\\n\" + (doc.$converter().$convert(doc, \"outline\")) + \"\\n\" + \"</div>\"\n        } else {\n          toc = \"\"\n        };\n        return \"\" + \"<div id=\\\"preamble\\\">\\n\" + \"<div class=\\\"sectionbody\\\">\\n\" + (node.$content()) + \"\\n\" + \"</div>\" + (toc) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_preamble$35.$$arity = 1);\n      \n      Opal.def(self, '$convert_quote', $Html5Converter_convert_quote$36 = function $$convert_quote(node) {\n        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"quoteblock\", node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        attribution = (function() {if ($truthy(node['$attr?'](\"attribution\"))) {\n          \n          return node.$attr(\"attribution\");\n        } else {\n          return nil\n        }; return nil; })();\n        citetitle = (function() {if ($truthy(node['$attr?'](\"citetitle\"))) {\n          \n          return node.$attr(\"citetitle\");\n        } else {\n          return nil\n        }; return nil; })();\n        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {\n          \n          cite_element = (function() {if ($truthy(citetitle)) {\n            return \"\" + \"<cite>\" + (citetitle) + \"</cite>\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_text = (function() {if ($truthy(attribution)) {\n            return \"\" + \"&#8212; \" + (attribution) + ((function() {if ($truthy(citetitle)) {\n              return \"\" + \"<br\" + (self.void_element_slash) + \">\\n\"\n            } else {\n              return \"\"\n            }; return nil; })())\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_element = \"\" + \"\\n<div class=\\\"attribution\\\">\\n\" + (attribution_text) + (cite_element) + \"\\n</div>\";\n        } else {\n          attribution_element = \"\"\n        };\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<blockquote>\\n\" + (node.$content()) + \"\\n\" + \"</blockquote>\" + (attribution_element) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_quote$36.$$arity = 1);\n      \n      Opal.def(self, '$convert_thematic_break', $Html5Converter_convert_thematic_break$37 = function $$convert_thematic_break(node) {\n        var self = this;\n\n        return \"\" + \"<hr\" + (self.void_element_slash) + \">\"\n      }, $Html5Converter_convert_thematic_break$37.$$arity = 1);\n      \n      Opal.def(self, '$convert_sidebar', $Html5Converter_convert_sidebar$38 = function $$convert_sidebar(node) {\n        var self = this, id_attribute = nil, title_element = nil, role = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\\n\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + \" class=\\\"sidebarblock\" + ((function() {if ($truthy((role = node.$role()))) {\n          return \"\" + \" \" + (role)\n        } else {\n          return \"\"\n        }; return nil; })()) + \"\\\">\\n\" + \"<div class=\\\"content\\\">\\n\" + (title_element) + (node.$content()) + \"\\n\" + \"</div>\\n\" + \"</div>\";\n      }, $Html5Converter_convert_sidebar$38.$$arity = 1);\n      \n      Opal.def(self, '$convert_table', $Html5Converter_convert_table$39 = function $$convert_table(node) {\n        var $a, $$40, $$41, self = this, result = nil, id_attribute = nil, frame = nil, classes = nil, stripes = nil, styles = nil, autowidth = nil, tablewidth = nil, role = nil, class_attribute = nil, style_attribute = nil, slash = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ((frame = node.$attr(\"frame\", \"all\", \"table-frame\"))['$=='](\"topbot\")) {\n          frame = \"ends\"};\n        classes = [\"tableblock\", \"\" + \"frame-\" + (frame), \"\" + \"grid-\" + (node.$attr(\"grid\", \"all\", \"table-grid\"))];\n        if ($truthy((stripes = node.$attr(\"stripes\", nil, \"table-stripes\")))) {\n          classes['$<<'](\"\" + \"stripes-\" + (stripes))};\n        styles = [];\n        if ($truthy(($truthy($a = (autowidth = node['$option?'](\"autowidth\"))) ? node['$attr?'](\"width\")['$!']() : $a))) {\n          classes['$<<'](\"fit-content\")\n        } else if ((tablewidth = node.$attr(\"tablepcwidth\"))['$=='](100)) {\n          classes['$<<'](\"stretch\")\n        } else {\n          styles['$<<'](\"\" + \"width: \" + (tablewidth) + \"%;\")\n        };\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))};\n        if ($truthy((role = node.$role()))) {\n          classes['$<<'](role)};\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        style_attribute = (function() {if ($truthy(styles['$empty?']())) {\n          return \"\"\n        } else {\n          return \"\" + \" style=\\\"\" + (styles.$join(\" \")) + \"\\\"\"\n        }; return nil; })();\n        result['$<<'](\"\" + \"<table\" + (id_attribute) + (class_attribute) + (style_attribute) + \">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<caption class=\\\"title\\\">\" + (node.$captioned_title()) + \"</caption>\")};\n        if ($truthy($rb_gt(node.$attr(\"rowcount\"), 0))) {\n          \n          slash = self.void_element_slash;\n          result['$<<'](\"<colgroup>\");\n          if ($truthy(autowidth)) {\n            result = $rb_plus(result, $$($nesting, 'Array').$new(node.$columns().$size(), \"\" + \"<col\" + (slash) + \">\"))\n          } else {\n            $send(node.$columns(), 'each', [], ($$40 = function(col){var self = $$40.$$s || this;\n\n            \n              \n              if (col == null) {\n                col = nil;\n              };\n              return result['$<<']((function() {if ($truthy(col['$option?'](\"autowidth\"))) {\n                return \"\" + \"<col\" + (slash) + \">\"\n              } else {\n                return \"\" + \"<col style=\\\"width: \" + (col.$attr(\"colpcwidth\")) + \"%;\\\"\" + (slash) + \">\"\n              }; return nil; })());}, $$40.$$s = self, $$40.$$arity = 1, $$40))\n          };\n          result['$<<'](\"</colgroup>\");\n          $send(node.$rows().$to_h(), 'each', [], ($$41 = function(tsec, rows){var self = $$41.$$s || this, $$42;\n\n          \n            \n            if (tsec == null) {\n              tsec = nil;\n            };\n            \n            if (rows == null) {\n              rows = nil;\n            };\n            if ($truthy(rows['$empty?']())) {\n              return nil;};\n            result['$<<'](\"\" + \"<t\" + (tsec) + \">\");\n            $send(rows, 'each', [], ($$42 = function(row){var self = $$42.$$s || this, $$43;\n\n            \n              \n              if (row == null) {\n                row = nil;\n              };\n              result['$<<'](\"<tr>\");\n              $send(row, 'each', [], ($$43 = function(cell){var self = $$43.$$s || this, $b, cell_content = nil, $case = nil, cell_tag_name = nil, cell_class_attribute = nil, cell_colspan_attribute = nil, cell_rowspan_attribute = nil, cell_style_attribute = nil;\n\n              \n                \n                if (cell == null) {\n                  cell = nil;\n                };\n                if (tsec['$=='](\"head\")) {\n                  cell_content = cell.$text()\n                } else {\n                  $case = cell.$style();\n                  if (\"asciidoc\"['$===']($case)) {cell_content = \"\" + \"<div class=\\\"content\\\">\" + (cell.$content()) + \"</div>\"}\n                  else if (\"literal\"['$===']($case)) {cell_content = \"\" + \"<div class=\\\"literal\\\"><pre>\" + (cell.$text()) + \"</pre></div>\"}\n                  else {cell_content = (function() {if ($truthy((cell_content = cell.$content())['$empty?']())) {\n                    return \"\"\n                  } else {\n                    return \"\" + \"<p class=\\\"tableblock\\\">\" + (cell_content.$join(\"\" + \"</p>\\n\" + \"<p class=\\\"tableblock\\\">\")) + \"</p>\"\n                  }; return nil; })()}\n                };\n                cell_tag_name = (function() {if ($truthy(($truthy($b = tsec['$=='](\"head\")) ? $b : cell.$style()['$=='](\"header\")))) {\n                  return \"th\"\n                } else {\n                  return \"td\"\n                }; return nil; })();\n                cell_class_attribute = \"\" + \" class=\\\"tableblock halign-\" + (cell.$attr(\"halign\")) + \" valign-\" + (cell.$attr(\"valign\")) + \"\\\"\";\n                cell_colspan_attribute = (function() {if ($truthy(cell.$colspan())) {\n                  return \"\" + \" colspan=\\\"\" + (cell.$colspan()) + \"\\\"\"\n                } else {\n                  return \"\"\n                }; return nil; })();\n                cell_rowspan_attribute = (function() {if ($truthy(cell.$rowspan())) {\n                  return \"\" + \" rowspan=\\\"\" + (cell.$rowspan()) + \"\\\"\"\n                } else {\n                  return \"\"\n                }; return nil; })();\n                cell_style_attribute = (function() {if ($truthy(node.$document()['$attr?'](\"cellbgcolor\"))) {\n                  return \"\" + \" style=\\\"background-color: \" + (node.$document().$attr(\"cellbgcolor\")) + \";\\\"\"\n                } else {\n                  return \"\"\n                }; return nil; })();\n                return result['$<<'](\"\" + \"<\" + (cell_tag_name) + (cell_class_attribute) + (cell_colspan_attribute) + (cell_rowspan_attribute) + (cell_style_attribute) + \">\" + (cell_content) + \"</\" + (cell_tag_name) + \">\");}, $$43.$$s = self, $$43.$$arity = 1, $$43));\n              return result['$<<'](\"</tr>\");}, $$42.$$s = self, $$42.$$arity = 1, $$42));\n            return result['$<<'](\"\" + \"</t\" + (tsec) + \">\");}, $$41.$$s = self, $$41.$$arity = 2, $$41));};\n        result['$<<'](\"</table>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_table$39.$$arity = 1);\n      \n      Opal.def(self, '$convert_toc', $Html5Converter_convert_toc$44 = function $$convert_toc(node) {\n        var $a, $b, self = this, doc = nil, id_attr = nil, title_id_attr = nil, title = nil, levels = nil, role = nil;\n\n        \n        if ($truthy(($truthy($a = ($truthy($b = (doc = node.$document())['$attr?'](\"toc-placement\", \"macro\")) ? doc['$sections?']() : $b)) ? doc['$attr?'](\"toc\") : $a))) {\n        } else {\n          return \"<!-- toc disabled -->\"\n        };\n        if ($truthy(node.$id())) {\n          \n          id_attr = \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\";\n          title_id_attr = \"\" + \" id=\\\"\" + (node.$id()) + \"title\\\"\";\n        } else {\n          \n          id_attr = \" id=\\\"toc\\\"\";\n          title_id_attr = \" id=\\\"toctitle\\\"\";\n        };\n        title = (function() {if ($truthy(node['$title?']())) {\n          return node.$title()\n        } else {\n          \n          return doc.$attr(\"toc-title\");\n        }; return nil; })();\n        levels = (function() {if ($truthy(node['$attr?'](\"levels\"))) {\n          return node.$attr(\"levels\").$to_i()\n        } else {\n          return nil\n        }; return nil; })();\n        role = (function() {if ($truthy(node['$role?']())) {\n          return node.$role()\n        } else {\n          \n          return doc.$attr(\"toc-class\", \"toc\");\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attr) + \" class=\\\"\" + (role) + \"\\\">\\n\" + \"<div\" + (title_id_attr) + \" class=\\\"title\\\">\" + (title) + \"</div>\\n\" + (doc.$converter().$convert(doc, \"outline\", $hash2([\"toclevels\"], {\"toclevels\": levels}))) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_toc$44.$$arity = 1);\n      \n      Opal.def(self, '$convert_ulist', $Html5Converter_convert_ulist$45 = function $$convert_ulist(node) {\n        var $$46, self = this, result = nil, id_attribute = nil, div_classes = nil, marker_checked = nil, marker_unchecked = nil, checklist = nil, ul_class_attribute = nil;\n\n        \n        result = [];\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        div_classes = [\"ulist\", node.$style(), node.$role()].$compact();\n        marker_checked = (marker_unchecked = \"\");\n        if ($truthy((checklist = node['$option?'](\"checklist\")))) {\n          \n          div_classes.$unshift(div_classes.$shift(), \"checklist\");\n          ul_class_attribute = \" class=\\\"checklist\\\"\";\n          if ($truthy(node['$option?'](\"interactive\"))) {\n            if ($truthy(self.xml_mode)) {\n              \n              marker_checked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"1\\\" checked=\\\"checked\\\"/> \";\n              marker_unchecked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"0\\\"/> \";\n            } else {\n              \n              marker_checked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"1\\\" checked> \";\n              marker_unchecked = \"<input type=\\\"checkbox\\\" data-item-complete=\\\"0\\\"> \";\n            }\n          } else if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n            \n            marker_checked = \"<i class=\\\"fa fa-check-square-o\\\"></i> \";\n            marker_unchecked = \"<i class=\\\"fa fa-square-o\\\"></i> \";\n          } else {\n            \n            marker_checked = \"&#10003; \";\n            marker_unchecked = \"&#10063; \";\n          };\n        } else {\n          ul_class_attribute = (function() {if ($truthy(node.$style())) {\n            return \"\" + \" class=\\\"\" + (node.$style()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })()\n        };\n        result['$<<'](\"\" + \"<div\" + (id_attribute) + \" class=\\\"\" + (div_classes.$join(\" \")) + \"\\\">\");\n        if ($truthy(node['$title?']())) {\n          result['$<<'](\"\" + \"<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\")};\n        result['$<<'](\"\" + \"<ul\" + (ul_class_attribute) + \">\");\n        $send(node.$items(), 'each', [], ($$46 = function(item){var self = $$46.$$s || this, $a;\n\n        \n          \n          if (item == null) {\n            item = nil;\n          };\n          if ($truthy(item.$id())) {\n            result['$<<'](\"\" + \"<li id=\\\"\" + (item.$id()) + \"\\\"\" + ((function() {if ($truthy(item.$role())) {\n              return \"\" + \" class=\\\"\" + (item.$role()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })()) + \">\")\n          } else if ($truthy(item.$role())) {\n            result['$<<'](\"\" + \"<li class=\\\"\" + (item.$role()) + \"\\\">\")\n          } else {\n            result['$<<'](\"<li>\")\n          };\n          if ($truthy(($truthy($a = checklist) ? item['$attr?'](\"checkbox\") : $a))) {\n            result['$<<'](\"\" + \"<p>\" + ((function() {if ($truthy(item['$attr?'](\"checked\"))) {\n              return marker_checked\n            } else {\n              return marker_unchecked\n            }; return nil; })()) + (item.$text()) + \"</p>\")\n          } else {\n            result['$<<'](\"\" + \"<p>\" + (item.$text()) + \"</p>\")\n          };\n          if ($truthy(item['$blocks?']())) {\n            result['$<<'](item.$content())};\n          return result['$<<'](\"</li>\");}, $$46.$$s = self, $$46.$$arity = 1, $$46));\n        result['$<<'](\"</ul>\");\n        result['$<<'](\"</div>\");\n        return result.$join($$($nesting, 'LF'));\n      }, $Html5Converter_convert_ulist$45.$$arity = 1);\n      \n      Opal.def(self, '$convert_verse', $Html5Converter_convert_verse$47 = function $$convert_verse(node) {\n        var $a, self = this, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, attribution = nil, citetitle = nil, cite_element = nil, attribution_text = nil, attribution_element = nil;\n\n        \n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"verseblock\", node.$role()].$compact();\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        attribution = (function() {if ($truthy(node['$attr?'](\"attribution\"))) {\n          \n          return node.$attr(\"attribution\");\n        } else {\n          return nil\n        }; return nil; })();\n        citetitle = (function() {if ($truthy(node['$attr?'](\"citetitle\"))) {\n          \n          return node.$attr(\"citetitle\");\n        } else {\n          return nil\n        }; return nil; })();\n        if ($truthy(($truthy($a = attribution) ? $a : citetitle))) {\n          \n          cite_element = (function() {if ($truthy(citetitle)) {\n            return \"\" + \"<cite>\" + (citetitle) + \"</cite>\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_text = (function() {if ($truthy(attribution)) {\n            return \"\" + \"&#8212; \" + (attribution) + ((function() {if ($truthy(citetitle)) {\n              return \"\" + \"<br\" + (self.void_element_slash) + \">\\n\"\n            } else {\n              return \"\"\n            }; return nil; })())\n          } else {\n            return \"\"\n          }; return nil; })();\n          attribution_element = \"\" + \"\\n<div class=\\\"attribution\\\">\\n\" + (attribution_text) + (cite_element) + \"\\n</div>\";\n        } else {\n          attribution_element = \"\"\n        };\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<pre class=\\\"content\\\">\" + (node.$content()) + \"</pre>\" + (attribution_element) + \"\\n\" + \"</div>\";\n      }, $Html5Converter_convert_verse$47.$$arity = 1);\n      \n      Opal.def(self, '$convert_video', $Html5Converter_convert_video$48 = function $$convert_video(node) {\n        var $a, $b, self = this, xml = nil, id_attribute = nil, classes = nil, class_attribute = nil, title_element = nil, width_attribute = nil, height_attribute = nil, $case = nil, asset_uri_scheme = nil, start_anchor = nil, delimiter = nil, autoplay_param = nil, loop_param = nil, muted_param = nil, rel_param_val = nil, start_param = nil, end_param = nil, has_loop_param = nil, mute_param = nil, controls_param = nil, fs_param = nil, fs_attribute = nil, modest_param = nil, theme_param = nil, hl_param = nil, target = nil, list = nil, list_param = nil, playlist = nil, poster_attribute = nil, val = nil, preload_attribute = nil, start_t = nil, end_t = nil, time_anchor = nil;\n\n        \n        xml = self.xml_mode;\n        id_attribute = (function() {if ($truthy(node.$id())) {\n          return \"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        classes = [\"videoblock\"];\n        if ($truthy(node['$attr?'](\"float\"))) {\n          classes['$<<'](node.$attr(\"float\"))};\n        if ($truthy(node['$attr?'](\"align\"))) {\n          classes['$<<'](\"\" + \"text-\" + (node.$attr(\"align\")))};\n        if ($truthy(node.$role())) {\n          classes['$<<'](node.$role())};\n        class_attribute = \"\" + \" class=\\\"\" + (classes.$join(\" \")) + \"\\\"\";\n        title_element = (function() {if ($truthy(node['$title?']())) {\n          return \"\" + \"\\n<div class=\\\"title\\\">\" + (node.$title()) + \"</div>\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        width_attribute = (function() {if ($truthy(node['$attr?'](\"width\"))) {\n          return \"\" + \" width=\\\"\" + (node.$attr(\"width\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        height_attribute = (function() {if ($truthy(node['$attr?'](\"height\"))) {\n          return \"\" + \" height=\\\"\" + (node.$attr(\"height\")) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return (function() {$case = node.$attr(\"poster\");\n        if (\"vimeo\"['$===']($case)) {\n        if ($truthy((asset_uri_scheme = node.$document().$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n        } else {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        start_anchor = (function() {if ($truthy(node['$attr?'](\"start\"))) {\n          return \"\" + \"#at=\" + (node.$attr(\"start\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        delimiter = [\"?\"];\n        autoplay_param = (function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"autoplay=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        loop_param = (function() {if ($truthy(node['$option?'](\"loop\"))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"loop=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        muted_param = (function() {if ($truthy(node['$option?'](\"muted\"))) {\n          return \"\" + (($truthy($a = delimiter.$pop()) ? $a : \"&amp;\")) + \"muted=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<iframe\" + (width_attribute) + (height_attribute) + \" src=\\\"\" + (asset_uri_scheme) + \"//player.vimeo.com/video/\" + (node.$attr(\"target\")) + (autoplay_param) + (loop_param) + (muted_param) + (start_anchor) + \"\\\" frameborder=\\\"0\\\"\" + ((function() {if ($truthy(node['$option?'](\"nofullscreen\"))) {\n          return \"\"\n        } else {\n          \n          return self.$append_boolean_attribute(\"allowfullscreen\", xml);\n        }; return nil; })()) + \"></iframe>\\n\" + \"</div>\\n\" + \"</div>\";}\n        else if (\"youtube\"['$===']($case)) {\n        if ($truthy((asset_uri_scheme = node.$document().$attr(\"asset-uri-scheme\", \"https\"))['$empty?']())) {\n        } else {\n          asset_uri_scheme = \"\" + (asset_uri_scheme) + \":\"\n        };\n        rel_param_val = (function() {if ($truthy(node['$option?'](\"related\"))) {\n          return 1\n        } else {\n          return 0\n        }; return nil; })();\n        start_param = (function() {if ($truthy(node['$attr?'](\"start\"))) {\n          return \"\" + \"&amp;start=\" + (node.$attr(\"start\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        end_param = (function() {if ($truthy(node['$attr?'](\"end\"))) {\n          return \"\" + \"&amp;end=\" + (node.$attr(\"end\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        autoplay_param = (function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          return \"&amp;autoplay=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        loop_param = (function() {if ($truthy((has_loop_param = node['$option?'](\"loop\")))) {\n          return \"&amp;loop=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        mute_param = (function() {if ($truthy(node['$option?'](\"muted\"))) {\n          return \"&amp;mute=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        controls_param = (function() {if ($truthy(node['$option?'](\"nocontrols\"))) {\n          return \"&amp;controls=0\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        if ($truthy(node['$option?'](\"nofullscreen\"))) {\n          \n          fs_param = \"&amp;fs=0\";\n          fs_attribute = \"\";\n        } else {\n          \n          fs_param = \"\";\n          fs_attribute = self.$append_boolean_attribute(\"allowfullscreen\", xml);\n        };\n        modest_param = (function() {if ($truthy(node['$option?'](\"modest\"))) {\n          return \"&amp;modestbranding=1\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        theme_param = (function() {if ($truthy(node['$attr?'](\"theme\"))) {\n          return \"\" + \"&amp;theme=\" + (node.$attr(\"theme\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        hl_param = (function() {if ($truthy(node['$attr?'](\"lang\"))) {\n          return \"\" + \"&amp;hl=\" + (node.$attr(\"lang\"))\n        } else {\n          return \"\"\n        }; return nil; })();\n        $b = node.$attr(\"target\").$split(\"/\", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (list = ($a[1] == null ? nil : $a[1])), $b;\n        if ($truthy((list = ($truthy($a = list) ? $a : node.$attr(\"list\"))))) {\n          list_param = \"\" + \"&amp;list=\" + (list)\n        } else {\n          \n          $b = target.$split(\",\", 2), $a = Opal.to_ary($b), (target = ($a[0] == null ? nil : $a[0])), (playlist = ($a[1] == null ? nil : $a[1])), $b;\n          if ($truthy((playlist = ($truthy($a = playlist) ? $a : node.$attr(\"playlist\"))))) {\n            list_param = \"\" + \"&amp;playlist=\" + (playlist)\n          } else {\n            list_param = (function() {if ($truthy(has_loop_param)) {\n              return \"\" + \"&amp;playlist=\" + (target)\n            } else {\n              return \"\"\n            }; return nil; })()\n          };\n        };\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<iframe\" + (width_attribute) + (height_attribute) + \" src=\\\"\" + (asset_uri_scheme) + \"//www.youtube.com/embed/\" + (target) + \"?rel=\" + (rel_param_val) + (start_param) + (end_param) + (autoplay_param) + (loop_param) + (mute_param) + (controls_param) + (list_param) + (fs_param) + (modest_param) + (theme_param) + (hl_param) + \"\\\" frameborder=\\\"0\\\"\" + (fs_attribute) + \"></iframe>\\n\" + \"</div>\\n\" + \"</div>\";}\n        else {\n        poster_attribute = (function() {if ($truthy((val = node.$attr(\"poster\"))['$nil_or_empty?']())) {\n          return \"\"\n        } else {\n          return \"\" + \" poster=\\\"\" + (node.$media_uri(val)) + \"\\\"\"\n        }; return nil; })();\n        preload_attribute = (function() {if ($truthy((val = node.$attr(\"preload\"))['$nil_or_empty?']())) {\n          return \"\"\n        } else {\n          return \"\" + \" preload=\\\"\" + (val) + \"\\\"\"\n        }; return nil; })();\n        start_t = node.$attr(\"start\");\n        end_t = node.$attr(\"end\");\n        time_anchor = (function() {if ($truthy(($truthy($a = start_t) ? $a : end_t))) {\n          return \"\" + \"#t=\" + (($truthy($a = start_t) ? $a : \"\")) + ((function() {if ($truthy(end_t)) {\n            return \"\" + \",\" + (end_t)\n          } else {\n            return \"\"\n          }; return nil; })())\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<div\" + (id_attribute) + (class_attribute) + \">\" + (title_element) + \"\\n\" + \"<div class=\\\"content\\\">\\n\" + \"<video src=\\\"\" + (node.$media_uri(node.$attr(\"target\"))) + (time_anchor) + \"\\\"\" + (width_attribute) + (height_attribute) + (poster_attribute) + ((function() {if ($truthy(node['$option?'](\"autoplay\"))) {\n          \n          return self.$append_boolean_attribute(\"autoplay\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"muted\"))) {\n          \n          return self.$append_boolean_attribute(\"muted\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"nocontrols\"))) {\n          return \"\"\n        } else {\n          \n          return self.$append_boolean_attribute(\"controls\", xml);\n        }; return nil; })()) + ((function() {if ($truthy(node['$option?'](\"loop\"))) {\n          \n          return self.$append_boolean_attribute(\"loop\", xml);\n        } else {\n          return \"\"\n        }; return nil; })()) + (preload_attribute) + \">\\n\" + \"Your browser does not support the video tag.\\n\" + \"</video>\\n\" + \"</div>\\n\" + \"</div>\";}})();\n      }, $Html5Converter_convert_video$48.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_anchor', $Html5Converter_convert_inline_anchor$49 = function $$convert_inline_anchor(node) {\n        var $a, $b, $c, self = this, $case = nil, path = nil, attrs = nil, text = nil, refid = nil, ref = nil, outer = nil;\n\n        return (function() {$case = node.$type();\n        if (\"xref\"['$===']($case)) {\n        if ($truthy((path = node.$attributes()['$[]'](\"path\")))) {\n          \n          attrs = self.$append_link_constraint_attrs(node, (function() {if ($truthy(node.$role())) {\n            return [\"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"]\n          } else {\n            return []\n          }; return nil; })()).$join();\n          text = ($truthy($a = node.$text()) ? $a : path);\n        } else {\n          \n          attrs = (function() {if ($truthy(node.$role())) {\n            return \"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          if ($truthy((text = node.$text()))) {\n          } else {\n            \n            refid = node.$attributes()['$[]'](\"refid\");\n            if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'AbstractNode')['$===']((ref = (self.refs = ($truthy($c = self.refs) ? $c : node.$document().$catalog()['$[]'](\"refs\")))['$[]'](refid)))) ? (self.resolving_xref = ($truthy($c = self.resolving_xref) ? $c : (outer = true))) : $b)) ? outer : $a))) {\n              \n              if ($truthy((text = ref.$xreftext(node.$attr(\"xrefstyle\", nil, true)))['$!']())) {\n                text = \"\" + \"[\" + (refid) + \"]\"\n              } else if ($truthy(text['$include?'](\"<a\"))) {\n                text = text.$gsub($$($nesting, 'DropAnchorRx'), \"\")};\n              self.resolving_xref = nil;\n            } else {\n              text = \"\" + \"[\" + (refid) + \"]\"\n            };\n          };\n        };\n        return \"\" + \"<a href=\\\"\" + (node.$target()) + \"\\\"\" + (attrs) + \">\" + (text) + \"</a>\";}\n        else if (\"ref\"['$===']($case)) {return \"\" + \"<a id=\\\"\" + (node.$id()) + \"\\\"></a>\"}\n        else if (\"link\"['$===']($case)) {\n        attrs = (function() {if ($truthy(node.$id())) {\n          return [\"\" + \" id=\\\"\" + (node.$id()) + \"\\\"\"]\n        } else {\n          return []\n        }; return nil; })();\n        if ($truthy(node.$role())) {\n          attrs['$<<'](\"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\")};\n        if ($truthy(node['$attr?'](\"title\"))) {\n          attrs['$<<'](\"\" + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\")};\n        return \"\" + \"<a href=\\\"\" + (node.$target()) + \"\\\"\" + (self.$append_link_constraint_attrs(node, attrs).$join()) + \">\" + (node.$text()) + \"</a>\";}\n        else if (\"bibref\"['$===']($case)) {return \"\" + \"<a id=\\\"\" + (node.$id()) + \"\\\"></a>[\" + (($truthy($a = node.$reftext()) ? $a : node.$id())) + \"]\"}\n        else {\n        self.$logger().$warn(\"\" + \"unknown anchor type: \" + (node.$type().$inspect()));\n        return nil;}})()\n      }, $Html5Converter_convert_inline_anchor$49.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_break', $Html5Converter_convert_inline_break$50 = function $$convert_inline_break(node) {\n        var self = this;\n\n        return \"\" + (node.$text()) + \"<br\" + (self.void_element_slash) + \">\"\n      }, $Html5Converter_convert_inline_break$50.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_button', $Html5Converter_convert_inline_button$51 = function $$convert_inline_button(node) {\n        var self = this;\n\n        return \"\" + \"<b class=\\\"button\\\">\" + (node.$text()) + \"</b>\"\n      }, $Html5Converter_convert_inline_button$51.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_callout', $Html5Converter_convert_inline_callout$52 = function $$convert_inline_callout(node) {\n        var self = this, src = nil, guard = nil;\n\n        if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n          return \"\" + \"<i class=\\\"conum\\\" data-value=\\\"\" + (node.$text()) + \"\\\"></i><b>(\" + (node.$text()) + \")</b>\"\n        } else if ($truthy(node.$document()['$attr?'](\"icons\"))) {\n          \n          src = node.$icon_uri(\"\" + \"callouts/\" + (node.$text()));\n          return \"\" + \"<img src=\\\"\" + (src) + \"\\\" alt=\\\"\" + (node.$text()) + \"\\\"\" + (self.void_element_slash) + \">\";\n        } else if ($truthy($$$('::', 'Array')['$===']((guard = node.$attributes()['$[]'](\"guard\"))))) {\n          return \"\" + \"&lt;!--<b class=\\\"conum\\\">(\" + (node.$text()) + \")</b>--&gt;\"\n        } else {\n          return \"\" + (guard) + \"<b class=\\\"conum\\\">(\" + (node.$text()) + \")</b>\"\n        }\n      }, $Html5Converter_convert_inline_callout$52.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_footnote', $Html5Converter_convert_inline_footnote$53 = function $$convert_inline_footnote(node) {\n        var self = this, index = nil, id_attr = nil;\n\n        if ($truthy((index = node.$attr(\"index\")))) {\n          if (node.$type()['$=='](\"xref\")) {\n            return \"\" + \"<sup class=\\\"footnoteref\\\">[<a class=\\\"footnote\\\" href=\\\"#_footnotedef_\" + (index) + \"\\\" title=\\\"View footnote.\\\">\" + (index) + \"</a>]</sup>\"\n          } else {\n            \n            id_attr = (function() {if ($truthy(node.$id())) {\n              return \"\" + \" id=\\\"_footnote_\" + (node.$id()) + \"\\\"\"\n            } else {\n              return \"\"\n            }; return nil; })();\n            return \"\" + \"<sup class=\\\"footnote\\\"\" + (id_attr) + \">[<a id=\\\"_footnoteref_\" + (index) + \"\\\" class=\\\"footnote\\\" href=\\\"#_footnotedef_\" + (index) + \"\\\" title=\\\"View footnote.\\\">\" + (index) + \"</a>]</sup>\";\n          }\n        } else if (node.$type()['$=='](\"xref\")) {\n          return \"\" + \"<sup class=\\\"footnoteref red\\\" title=\\\"Unresolved footnote reference.\\\">[\" + (node.$text()) + \"]</sup>\"\n        } else {\n          return nil\n        }\n      }, $Html5Converter_convert_inline_footnote$53.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_image', $Html5Converter_convert_inline_image$54 = function $$convert_inline_image(node) {\n        var $a, $b, $$55, $$56, $c, $d, self = this, type = nil, class_attr_val = nil, title_attr = nil, img = nil, target = nil, attrs = nil, svg = nil, obj = nil, fallback = nil, role = nil;\n\n        \n        if ($truthy((($a = (type = ($truthy($b = node.$type()) ? $b : \"image\"))['$=='](\"icon\")) ? node.$document()['$attr?'](\"icons\", \"font\") : (type = ($truthy($b = node.$type()) ? $b : \"image\"))['$=='](\"icon\")))) {\n          \n          class_attr_val = \"\" + \"fa fa-\" + (node.$target());\n          $send($hash2([\"size\", \"rotate\", \"flip\"], {\"size\": \"fa-\", \"rotate\": \"fa-rotate-\", \"flip\": \"fa-flip-\"}), 'each', [], ($$55 = function(key, prefix){var self = $$55.$$s || this;\n\n          \n            \n            if (key == null) {\n              key = nil;\n            };\n            \n            if (prefix == null) {\n              prefix = nil;\n            };\n            if ($truthy(node['$attr?'](key))) {\n              return (class_attr_val = \"\" + (class_attr_val) + \" \" + (prefix) + (node.$attr(key)))\n            } else {\n              return nil\n            };}, $$55.$$s = self, $$55.$$arity = 2, $$55));\n          title_attr = (function() {if ($truthy(node['$attr?'](\"title\"))) {\n            return \"\" + \" title=\\\"\" + (node.$attr(\"title\")) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          img = \"\" + \"<i class=\\\"\" + (class_attr_val) + \"\\\"\" + (title_attr) + \"></i>\";\n        } else if ($truthy((($a = type['$=='](\"icon\")) ? node.$document()['$attr?'](\"icons\")['$!']() : type['$=='](\"icon\")))) {\n          img = \"\" + \"[\" + (node.$alt()) + \"]\"\n        } else {\n          \n          target = node.$target();\n          attrs = $send([\"width\", \"height\", \"title\"], 'map', [], ($$56 = function(name){var self = $$56.$$s || this;\n\n          \n            \n            if (name == null) {\n              name = nil;\n            };\n            if ($truthy(node['$attr?'](name))) {\n              return \"\" + \" \" + (name) + \"=\\\"\" + (node.$attr(name)) + \"\\\"\"\n            } else {\n              return \"\"\n            };}, $$56.$$s = self, $$56.$$arity = 1, $$56)).$join();\n          if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = type['$!='](\"icon\")) ? ($truthy($d = node['$attr?'](\"format\", \"svg\")) ? $d : target['$include?'](\".svg\")) : $c)) ? $rb_lt(node.$document().$safe(), $$$($$($nesting, 'SafeMode'), 'SECURE')) : $b)) ? ($truthy($b = (svg = node['$option?'](\"inline\"))) ? $b : (obj = node['$option?'](\"interactive\"))) : $a))) {\n            if ($truthy(svg)) {\n              img = ($truthy($a = self.$read_svg_contents(node, target)) ? $a : \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\")\n            } else if ($truthy(obj)) {\n              \n              fallback = (function() {if ($truthy(node['$attr?'](\"fallback\"))) {\n                return \"\" + \"<img src=\\\"\" + (node.$image_uri(node.$attr(\"fallback\"))) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\"\n              } else {\n                return \"\" + \"<span class=\\\"alt\\\">\" + (node.$alt()) + \"</span>\"\n              }; return nil; })();\n              img = \"\" + \"<object type=\\\"image/svg+xml\\\" data=\\\"\" + (node.$image_uri(target)) + \"\\\"\" + (attrs) + \">\" + (fallback) + \"</object>\";}};\n          img = ($truthy($a = img) ? $a : \"\" + \"<img src=\\\"\" + ((function() {if (type['$=='](\"icon\")) {\n            \n            return node.$icon_uri(target);\n          } else {\n            \n            return node.$image_uri(target);\n          }; return nil; })()) + \"\\\" alt=\\\"\" + (self.$encode_attribute_value(node.$alt())) + \"\\\"\" + (attrs) + (self.void_element_slash) + \">\");\n        };\n        if ($truthy(node['$attr?'](\"link\"))) {\n          img = \"\" + \"<a class=\\\"image\\\" href=\\\"\" + (node.$attr(\"link\")) + \"\\\"\" + (self.$append_link_constraint_attrs(node).$join()) + \">\" + (img) + \"</a>\"};\n        if ($truthy((role = node.$role()))) {\n          if ($truthy(node['$attr?'](\"float\"))) {\n            class_attr_val = \"\" + (type) + \" \" + (node.$attr(\"float\")) + \" \" + (role)\n          } else {\n            class_attr_val = \"\" + (type) + \" \" + (role)\n          }\n        } else if ($truthy(node['$attr?'](\"float\"))) {\n          class_attr_val = \"\" + (type) + \" \" + (node.$attr(\"float\"))\n        } else {\n          class_attr_val = type\n        };\n        return \"\" + \"<span class=\\\"\" + (class_attr_val) + \"\\\">\" + (img) + \"</span>\";\n      }, $Html5Converter_convert_inline_image$54.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_indexterm', $Html5Converter_convert_inline_indexterm$57 = function $$convert_inline_indexterm(node) {\n        var self = this;\n\n        if (node.$type()['$=='](\"visible\")) {\n          return node.$text()\n        } else {\n          return \"\"\n        }\n      }, $Html5Converter_convert_inline_indexterm$57.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_kbd', $Html5Converter_convert_inline_kbd$58 = function $$convert_inline_kbd(node) {\n        var self = this, keys = nil;\n\n        if ((keys = node.$attr(\"keys\")).$size()['$=='](1)) {\n          return \"\" + \"<kbd>\" + (keys['$[]'](0)) + \"</kbd>\"\n        } else {\n          return \"\" + \"<span class=\\\"keyseq\\\"><kbd>\" + (keys.$join(\"</kbd>+<kbd>\")) + \"</kbd></span>\"\n        }\n      }, $Html5Converter_convert_inline_kbd$58.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_menu', $Html5Converter_convert_inline_menu$59 = function $$convert_inline_menu(node) {\n        var self = this, caret = nil, submenu_joiner = nil, menu = nil, submenus = nil, menuitem = nil;\n\n        \n        caret = (function() {if ($truthy(node.$document()['$attr?'](\"icons\", \"font\"))) {\n          return \"&#160;<i class=\\\"fa fa-angle-right caret\\\"></i> \"\n        } else {\n          return \"&#160;<b class=\\\"caret\\\">&#8250;</b> \"\n        }; return nil; })();\n        submenu_joiner = \"\" + \"</b>\" + (caret) + \"<b class=\\\"submenu\\\">\";\n        menu = node.$attr(\"menu\");\n        if ($truthy((submenus = node.$attr(\"submenus\"))['$empty?']())) {\n          if ($truthy((menuitem = node.$attr(\"menuitem\")))) {\n            return \"\" + \"<span class=\\\"menuseq\\\"><b class=\\\"menu\\\">\" + (menu) + \"</b>\" + (caret) + \"<b class=\\\"menuitem\\\">\" + (menuitem) + \"</b></span>\"\n          } else {\n            return \"\" + \"<b class=\\\"menuref\\\">\" + (menu) + \"</b>\"\n          }\n        } else {\n          return \"\" + \"<span class=\\\"menuseq\\\"><b class=\\\"menu\\\">\" + (menu) + \"</b>\" + (caret) + \"<b class=\\\"submenu\\\">\" + (submenus.$join(submenu_joiner)) + \"</b>\" + (caret) + \"<b class=\\\"menuitem\\\">\" + (node.$attr(\"menuitem\")) + \"</b></span>\"\n        };\n      }, $Html5Converter_convert_inline_menu$59.$$arity = 1);\n      \n      Opal.def(self, '$convert_inline_quoted', $Html5Converter_convert_inline_quoted$60 = function $$convert_inline_quoted(node) {\n        var $a, $b, self = this, open = nil, close = nil, tag = nil, class_attr = nil;\n\n        \n        $b = $$($nesting, 'QUOTE_TAGS')['$[]'](node.$type()), $a = Opal.to_ary($b), (open = ($a[0] == null ? nil : $a[0])), (close = ($a[1] == null ? nil : $a[1])), (tag = ($a[2] == null ? nil : $a[2])), $b;\n        if ($truthy(node.$id())) {\n          \n          class_attr = (function() {if ($truthy(node.$role())) {\n            return \"\" + \" class=\\\"\" + (node.$role()) + \"\\\"\"\n          } else {\n            return \"\"\n          }; return nil; })();\n          if ($truthy(tag)) {\n            return \"\" + (open.$chop()) + \" id=\\\"\" + (node.$id()) + \"\\\"\" + (class_attr) + \">\" + (node.$text()) + (close)\n          } else {\n            return \"\" + \"<span id=\\\"\" + (node.$id()) + \"\\\"\" + (class_attr) + \">\" + (open) + (node.$text()) + (close) + \"</span>\"\n          };\n        } else if ($truthy(node.$role())) {\n          if ($truthy(tag)) {\n            return \"\" + (open.$chop()) + \" class=\\\"\" + (node.$role()) + \"\\\">\" + (node.$text()) + (close)\n          } else {\n            return \"\" + \"<span class=\\\"\" + (node.$role()) + \"\\\">\" + (open) + (node.$text()) + (close) + \"</span>\"\n          }\n        } else {\n          return \"\" + (open) + (node.$text()) + (close)\n        };\n      }, $Html5Converter_convert_inline_quoted$60.$$arity = 1);\n      \n      Opal.def(self, '$read_svg_contents', $Html5Converter_read_svg_contents$61 = function $$read_svg_contents(node, target) {\n        var $$62, self = this, svg = nil, old_start_tag = nil, new_start_tag = nil, start_tag_match = nil;\n\n        \n        if ($truthy((svg = node.$read_contents(target, $hash2([\"start\", \"normalize\", \"label\", \"warn_if_empty\"], {\"start\": node.$document().$attr(\"imagesdir\"), \"normalize\": true, \"label\": \"SVG\", \"warn_if_empty\": true}))))) {\n          \n          if ($truthy(svg['$empty?']())) {\n            return nil};\n          if ($truthy(svg['$start_with?'](\"<svg\"))) {\n          } else {\n            svg = svg.$sub($$($nesting, 'SvgPreambleRx'), \"\")\n          };\n          old_start_tag = (new_start_tag = (start_tag_match = nil));\n          $send([\"width\", \"height\"], 'each', [], ($$62 = function(dim){var self = $$62.$$s || this, $a, $b;\n\n          \n            \n            if (dim == null) {\n              dim = nil;\n            };\n            if ($truthy(node['$attr?'](dim))) {\n            } else {\n              return nil;\n            };\n            if ($truthy(new_start_tag)) {\n            } else {\n              \n              if ((start_tag_match = ($truthy($a = start_tag_match) ? $a : ($truthy($b = svg.$match($$($nesting, 'SvgStartTagRx'))) ? $b : \"no_match\")))['$=='](\"no_match\")) {\n                return nil;};\n              new_start_tag = (old_start_tag = start_tag_match['$[]'](0)).$gsub($$($nesting, 'DimensionAttributeRx'), \"\");\n            };\n            return (new_start_tag = \"\" + (new_start_tag.$chop()) + \" \" + (dim) + \"=\\\"\" + (node.$attr(dim)) + \"\\\">\");}, $$62.$$s = self, $$62.$$arity = 1, $$62));\n          if ($truthy(new_start_tag)) {\n            svg = \"\" + (new_start_tag) + (svg['$[]'](Opal.Range.$new(old_start_tag.$length(), -1, false)))};};\n        return svg;\n      }, $Html5Converter_read_svg_contents$61.$$arity = 2);\n      self.$private();\n      \n      Opal.def(self, '$append_boolean_attribute', $Html5Converter_append_boolean_attribute$63 = function $$append_boolean_attribute(name, xml) {\n        var self = this;\n\n        if ($truthy(xml)) {\n          return \"\" + \" \" + (name) + \"=\\\"\" + (name) + \"\\\"\"\n        } else {\n          return \"\" + \" \" + (name)\n        }\n      }, $Html5Converter_append_boolean_attribute$63.$$arity = 2);\n      \n      Opal.def(self, '$append_link_constraint_attrs', $Html5Converter_append_link_constraint_attrs$64 = function $$append_link_constraint_attrs(node, attrs) {\n        var $a, self = this, rel = nil, window = nil;\n\n        \n        \n        if (attrs == null) {\n          attrs = [];\n        };\n        if ($truthy(node['$option?'](\"nofollow\"))) {\n          rel = \"nofollow\"};\n        if ($truthy((window = node.$attributes()['$[]'](\"window\")))) {\n          \n          attrs['$<<'](\"\" + \" target=\\\"\" + (window) + \"\\\"\");\n          if ($truthy(($truthy($a = window['$=='](\"_blank\")) ? $a : node['$option?'](\"noopener\")))) {\n            attrs['$<<']((function() {if ($truthy(rel)) {\n              return \"\" + \" rel=\\\"\" + (rel) + \" noopener\\\"\"\n            } else {\n              return \" rel=\\\"noopener\\\"\"\n            }; return nil; })())};\n        } else if ($truthy(rel)) {\n          attrs['$<<'](\"\" + \" rel=\\\"\" + (rel) + \"\\\"\")};\n        return attrs;\n      }, $Html5Converter_append_link_constraint_attrs$64.$$arity = -2);\n      \n      Opal.def(self, '$encode_attribute_value', $Html5Converter_encode_attribute_value$65 = function $$encode_attribute_value(val) {\n        var self = this;\n\n        if ($truthy(val['$include?'](\"\\\"\"))) {\n          \n          return val.$gsub(\"\\\"\", \"&quot;\");\n        } else {\n          return val\n        }\n      }, $Html5Converter_encode_attribute_value$65.$$arity = 1);\n      \n      Opal.def(self, '$generate_manname_section', $Html5Converter_generate_manname_section$66 = function $$generate_manname_section(node) {\n        var $a, self = this, manname_title = nil, next_section = nil, next_section_title = nil, manname_id_attr = nil, manname_id = nil;\n\n        \n        manname_title = node.$attr(\"manname-title\", \"Name\");\n        if ($truthy(($truthy($a = (next_section = node.$sections()['$[]'](0))) ? (next_section_title = next_section.$title())['$=='](next_section_title.$upcase()) : $a))) {\n          manname_title = manname_title.$upcase()};\n        manname_id_attr = (function() {if ($truthy((manname_id = node.$attr(\"manname-id\")))) {\n          return \"\" + \" id=\\\"\" + (manname_id) + \"\\\"\"\n        } else {\n          return \"\"\n        }; return nil; })();\n        return \"\" + \"<h2\" + (manname_id_attr) + \">\" + (manname_title) + \"</h2>\\n\" + \"<div class=\\\"sectionbody\\\">\\n\" + \"<p>\" + (node.$attr(\"manname\")) + \" - \" + (node.$attr(\"manpurpose\")) + \"</p>\\n\" + \"</div>\";\n      }, $Html5Converter_generate_manname_section$66.$$arity = 1);\n      return (Opal.def(self, '$method_missing', $Html5Converter_method_missing$67 = function $$method_missing(id, $a) {\n        var $post_args, params, $b, $iter = $Html5Converter_method_missing$67.$$p, $yield = $iter || nil, self = this, name = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n        if ($iter) $Html5Converter_method_missing$67.$$p = null;\n        // Prepare super implicit arguments\n        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n          $zuper[$zuper_i] = arguments[$zuper_i];\n        }\n        \n        \n        $post_args = Opal.slice.call(arguments, 1, arguments.length);\n        \n        params = $post_args;;\n        if ($truthy(($truthy($b = (name = id.$to_s())['$start_with?'](\"convert_\")['$!']()) ? self['$handles?'](name) : $b))) {\n          \n          return $send(self, 'send', [\"\" + \"convert_\" + (name)].concat(Opal.to_a(params)));\n        } else {\n          return $send(self, Opal.find_super_dispatcher(self, 'method_missing', $Html5Converter_method_missing$67, false), $zuper, $iter)\n        };\n      }, $Html5Converter_method_missing$67.$$arity = -2), nil) && 'method_missing';\n    })($$($nesting, 'Converter'), $$$($$($nesting, 'Converter'), 'Base'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/extensions\"] = function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  function $rb_plus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);\n  }\n  function $rb_gt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);\n  }\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $hash = Opal.hash;\n\n  Opal.add_stubs(['$==', '$[]=', '$config', '$-', '$const_defined?', '$singleton_class?', '$include', '$const_get', '$extend', '$attr_reader', '$merge', '$class', '$update', '$raise', '$document', '$doctype', '$[]', '$+', '$level', '$delete', '$>', '$casecmp', '$new', '$title=', '$sectname=', '$special=', '$fetch', '$numbered=', '$!', '$key?', '$attr?', '$special', '$numbered', '$generate_id', '$title', '$id=', '$update_attributes', '$tr', '$basename', '$create_block', '$assign_caption', '$===', '$parse_blocks', '$empty?', '$include?', '$sub_attributes', '$parse', '$each', '$define_method', '$unshift', '$shift', '$send', '$size', '$binding', '$receiver', '$define_singleton_method', '$instance_exec', '$to_proc', '$call', '$option', '$flatten', '$respond_to?', '$to_s', '$partition', '$to_i', '$<<', '$compact', '$inspect', '$attr_accessor', '$to_set', '$match?', '$resolve_regexp', '$method', '$register', '$values', '$groups', '$arity', '$activate', '$add_document_processor', '$any?', '$select', '$add_syntax_processor', '$to_sym', '$instance_variable_get', '$kind', '$private', '$join', '$map', '$split', '$capitalize', '$instance_variable_set', '$resolve_args', '$enable_dsl', '$singleton_class', '$process_block_given?', '$source_location', '$freeze', '$resolve_class', '$<', '$update_config', '$as_symbol', '$name', '$name=', '$pop', '$-@', '$next_auto_id', '$generate_name']);\n  \n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n  } else {\n    nil\n  };\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Extensions');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Processor');\n\n        var $nesting = [self].concat($parent_nesting), $Processor_initialize$4, $Processor_update_config$5, $Processor_process$6, $Processor_create_section$7, $Processor_create_block$8, $Processor_create_list$9, $Processor_create_list_item$10, $Processor_create_image_block$11, $Processor_create_inline$12, $Processor_parse_content$13, $Processor_parse_attributes$14, $Processor$15;\n\n        self.$$prototype.config = nil;\n        \n        (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $config$1, $option$2, $enable_dsl$3;\n\n          \n          \n          Opal.def(self, '$config', $config$1 = function $$config() {\n            var $a, self = this;\n            if (self.config == null) self.config = nil;\n\n            return (self.config = ($truthy($a = self.config) ? $a : $hash2([], {})))\n          }, $config$1.$$arity = 0);\n          \n          Opal.def(self, '$option', $option$2 = function $$option(key, default_value) {\n            var self = this, $writer = nil;\n\n            \n            $writer = [key, default_value];\n            $send(self.$config(), '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];\n          }, $option$2.$$arity = 2);\n          \n          Opal.def(self, '$enable_dsl', $enable_dsl$3 = function $$enable_dsl() {\n            var self = this;\n\n            if ($truthy(self['$const_defined?'](\"DSL\"))) {\n              if ($truthy(self['$singleton_class?']())) {\n                return self.$include(self.$const_get(\"DSL\"))\n              } else {\n                return self.$extend(self.$const_get(\"DSL\"))\n              }\n            } else {\n              return nil\n            }\n          }, $enable_dsl$3.$$arity = 0);\n          return Opal.alias(self, \"use_dsl\", \"enable_dsl\");\n        })(Opal.get_singleton_class(self), $nesting);\n        self.$attr_reader(\"config\");\n        \n        Opal.def(self, '$initialize', $Processor_initialize$4 = function $$initialize(config) {\n          var self = this;\n\n          \n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          return (self.config = self.$class().$config().$merge(config));\n        }, $Processor_initialize$4.$$arity = -1);\n        \n        Opal.def(self, '$update_config', $Processor_update_config$5 = function $$update_config(config) {\n          var self = this;\n\n          return self.config.$update(config)\n        }, $Processor_update_config$5.$$arity = 1);\n        \n        Opal.def(self, '$process', $Processor_process$6 = function $$process($a) {\n          var $post_args, args, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Processor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\");\n        }, $Processor_process$6.$$arity = -1);\n        \n        Opal.def(self, '$create_section', $Processor_create_section$7 = function $$create_section(parent, title, attrs, opts) {\n          var $a, self = this, doc = nil, book = nil, doctype = nil, level = nil, style = nil, sectname = nil, special = nil, sect = nil, $writer = nil, id = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          doc = parent.$document();\n          book = (doctype = doc.$doctype())['$=='](\"book\");\n          level = ($truthy($a = opts['$[]'](\"level\")) ? $a : $rb_plus(parent.$level(), 1));\n          if ($truthy((style = attrs.$delete(\"style\")))) {\n            if ($truthy(($truthy($a = book) ? style['$=='](\"abstract\") : $a))) {\n              $a = [\"chapter\", 1], (sectname = $a[0]), (level = $a[1]), $a\n            } else {\n              \n              $a = [style, true], (sectname = $a[0]), (special = $a[1]), $a;\n              if (level['$=='](0)) {\n                level = 1};\n            }\n          } else if ($truthy(book)) {\n            sectname = (function() {if (level['$=='](0)) {\n              return \"part\"\n            } else {\n              \n              if ($truthy($rb_gt(level, 1))) {\n                return \"section\"\n              } else {\n                return \"chapter\"\n              };\n            }; return nil; })()\n          } else if ($truthy((($a = doctype['$=='](\"manpage\")) ? title.$casecmp(\"synopsis\")['$=='](0) : doctype['$=='](\"manpage\")))) {\n            $a = [\"synopsis\", true], (sectname = $a[0]), (special = $a[1]), $a\n          } else {\n            sectname = \"section\"\n          };\n          sect = $$($nesting, 'Section').$new(parent, level);\n          $a = [title, sectname], sect['$title=']($a[0]), sect['$sectname=']($a[1]), $a;\n          if ($truthy(special)) {\n            \n            \n            $writer = [true];\n            $send(sect, 'special=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            if ($truthy(opts.$fetch(\"numbered\", style['$=='](\"appendix\")))) {\n              \n              $writer = [true];\n              $send(sect, 'numbered=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];\n            } else if ($truthy(($truthy($a = opts['$key?'](\"numbered\")['$!']()) ? doc['$attr?'](\"sectnums\", \"all\") : $a))) {\n              \n              $writer = [(function() {if ($truthy(($truthy($a = book) ? level['$=='](1) : $a))) {\n                return \"chapter\"\n              } else {\n                return true\n              }; return nil; })()];\n              $send(sect, 'numbered=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];};\n          } else if ($truthy($rb_gt(level, 0))) {\n            if ($truthy(opts.$fetch(\"numbered\", doc['$attr?'](\"sectnums\")))) {\n              \n              $writer = [(function() {if ($truthy(sect.$special())) {\n                return ($truthy($a = parent.$numbered()) ? true : $a)\n              } else {\n                return true\n              }; return nil; })()];\n              $send(sect, 'numbered=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];}\n          } else if ($truthy(opts.$fetch(\"numbered\", ($truthy($a = book) ? doc['$attr?'](\"partnums\") : $a)))) {\n            \n            $writer = [true];\n            $send(sect, 'numbered=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];};\n          if ((id = attrs['$[]'](\"id\"))['$=='](false)) {\n            attrs.$delete(\"id\")\n          } else {\n            \n            $writer = [(($writer = [\"id\", ($truthy($a = id) ? $a : (function() {if ($truthy(doc['$attr?'](\"sectids\"))) {\n              \n              return $$($nesting, 'Section').$generate_id(sect.$title(), doc);\n            } else {\n              return nil\n            }; return nil; })())]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])];\n            $send(sect, 'id=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];\n          };\n          sect.$update_attributes(attrs);\n          return sect;\n        }, $Processor_create_section$7.$$arity = -4);\n        \n        Opal.def(self, '$create_block', $Processor_create_block$8 = function $$create_block(parent, context, source, attrs, opts) {\n          var self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          return $$($nesting, 'Block').$new(parent, context, $hash2([\"source\", \"attributes\"], {\"source\": source, \"attributes\": attrs}).$merge(opts));\n        }, $Processor_create_block$8.$$arity = -5);\n        \n        Opal.def(self, '$create_list', $Processor_create_list$9 = function $$create_list(parent, context, attrs) {\n          var self = this, list = nil;\n\n          \n          \n          if (attrs == null) {\n            attrs = nil;\n          };\n          list = $$($nesting, 'List').$new(parent, context);\n          if ($truthy(attrs)) {\n            list.$update_attributes(attrs)};\n          return list;\n        }, $Processor_create_list$9.$$arity = -3);\n        \n        Opal.def(self, '$create_list_item', $Processor_create_list_item$10 = function $$create_list_item(parent, text) {\n          var self = this;\n\n          \n          \n          if (text == null) {\n            text = nil;\n          };\n          return $$($nesting, 'ListItem').$new(parent, text);\n        }, $Processor_create_list_item$10.$$arity = -2);\n        \n        Opal.def(self, '$create_image_block', $Processor_create_image_block$11 = function $$create_image_block(parent, attrs, opts) {\n          var $a, self = this, target = nil, $writer = nil, title = nil, block = nil;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((target = attrs['$[]'](\"target\")))) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"Unable to create an image block, target attribute is required\")\n          };\n          ($truthy($a = attrs['$[]'](\"alt\")) ? $a : (($writer = [\"alt\", (($writer = [\"default-alt\", $$($nesting, 'Helpers').$basename(target, true).$tr(\"_-\", \" \")]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)])]), $send(attrs, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n          title = (function() {if ($truthy(attrs['$key?'](\"title\"))) {\n            \n            return attrs.$delete(\"title\");\n          } else {\n            return nil\n          }; return nil; })();\n          block = self.$create_block(parent, \"image\", nil, attrs, opts);\n          if ($truthy(title)) {\n            \n            \n            $writer = [title];\n            $send(block, 'title=', Opal.to_a($writer));\n            $writer[$rb_minus($writer[\"length\"], 1)];;\n            block.$assign_caption(attrs.$delete(\"caption\"), \"figure\");};\n          return block;\n        }, $Processor_create_image_block$11.$$arity = -3);\n        \n        Opal.def(self, '$create_inline', $Processor_create_inline$12 = function $$create_inline(parent, context, text, opts) {\n          var self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          return $$($nesting, 'Inline').$new(parent, context, text, (function() {if (context['$=='](\"quoted\")) {\n            \n            return $hash2([\"type\"], {\"type\": \"unquoted\"}).$merge(opts);\n          } else {\n            return opts\n          }; return nil; })());\n        }, $Processor_create_inline$12.$$arity = -4);\n        \n        Opal.def(self, '$parse_content', $Processor_parse_content$13 = function $$parse_content(parent, content, attributes) {\n          var self = this, reader = nil;\n\n          \n          \n          if (attributes == null) {\n            attributes = nil;\n          };\n          reader = (function() {if ($truthy($$($nesting, 'Reader')['$==='](content))) {\n            return content\n          } else {\n            \n            return $$($nesting, 'Reader').$new(content);\n          }; return nil; })();\n          $$($nesting, 'Parser').$parse_blocks(reader, parent, attributes);\n          return parent;\n        }, $Processor_parse_content$13.$$arity = -3);\n        \n        Opal.def(self, '$parse_attributes', $Processor_parse_attributes$14 = function $$parse_attributes(block, attrlist, opts) {\n          var $a, self = this;\n\n          \n          \n          if (opts == null) {\n            opts = $hash2([], {});\n          };\n          if ($truthy((function() {if ($truthy(attrlist)) {\n            return attrlist['$empty?']()\n          } else {\n            return true\n          }; return nil; })())) {\n            return $hash2([], {})};\n          if ($truthy(($truthy($a = opts['$[]'](\"sub_attributes\")) ? attrlist['$include?']($$($nesting, 'ATTR_REF_HEAD')) : $a))) {\n            attrlist = block.$sub_attributes(attrlist)};\n          return $$($nesting, 'AttributeList').$new(attrlist).$parse(($truthy($a = opts['$[]'](\"positional_attributes\")) ? $a : []));\n        }, $Processor_parse_attributes$14.$$arity = -3);\n        return $send([[\"create_paragraph\", \"create_block\", \"paragraph\"], [\"create_open_block\", \"create_block\", \"open\"], [\"create_example_block\", \"create_block\", \"example\"], [\"create_pass_block\", \"create_block\", \"pass\"], [\"create_listing_block\", \"create_block\", \"listing\"], [\"create_literal_block\", \"create_block\", \"literal\"], [\"create_anchor\", \"create_inline\", \"anchor\"], [\"create_inline_pass\", \"create_inline\", \"quoted\"]], 'each', [], ($Processor$15 = function(method_name, delegate_method_name, context){var self = $Processor$15.$$s || this, $$16;\n\n        \n          \n          if (method_name == null) {\n            method_name = nil;\n          };\n          \n          if (delegate_method_name == null) {\n            delegate_method_name = nil;\n          };\n          \n          if (context == null) {\n            context = nil;\n          };\n          return $send(self, 'define_method', [method_name], ($$16 = function($a){var self = $$16.$$s || this, $post_args, args;\n\n          \n            \n            $post_args = Opal.slice.call(arguments, 0, arguments.length);\n            \n            args = $post_args;;\n            args.$unshift(args.$shift(), context);\n            return $send(self, 'send', [delegate_method_name].concat(Opal.to_a(args)));}, $$16.$$s = self, $$16.$$arity = -1, $$16));}, $Processor$15.$$s = self, $Processor$15.$$arity = 3, $Processor$15));\n      })($nesting[0], null, $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'ProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $ProcessorDsl_option$17, $ProcessorDsl_process$18, $ProcessorDsl_process_block_given$ques$20;\n\n        \n        \n        Opal.def(self, '$option', $ProcessorDsl_option$17 = function $$option(key, value) {\n          var self = this, $writer = nil;\n\n          \n          $writer = [key, value];\n          $send(self.$config(), '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        }, $ProcessorDsl_option$17.$$arity = 2);\n        \n        Opal.def(self, '$process', $ProcessorDsl_process$18 = function $$process($a) {\n          var $iter = $ProcessorDsl_process$18.$$p, block = $iter || nil, $post_args, args, $b, $$19, self = this, context = nil;\n          if (self.process_block == null) self.process_block = nil;\n\n          if ($iter) $ProcessorDsl_process$18.$$p = null;\n          \n          \n          if ($iter) $ProcessorDsl_process$18.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ((block !== nil)) {\n            \n            if ($truthy(args['$empty?']())) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"wrong number of arguments (given \" + (args.$size()) + \", expected 0)\")\n            };\n            if ($truthy(($truthy($b = block.$binding()) ? self['$=='](block.$binding().$receiver()) : $b))) {\n            } else {\n              \n              context = self;\n              $send(block, 'define_singleton_method', [\"call\"], ($$19 = function($c){var self = $$19.$$s || this, $post_args, m_args;\n\n              \n                \n                $post_args = Opal.slice.call(arguments, 0, arguments.length);\n                \n                m_args = $post_args;;\n                return $send(context, 'instance_exec', Opal.to_a(m_args), block.$to_proc());}, $$19.$$s = self, $$19.$$arity = -1, $$19));\n            };\n            return (self.process_block = block);\n          } else if ($truthy((($b = self['process_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {\n            return $send(self.process_block, 'call', Opal.to_a(args))\n          } else {\n            return self.$raise($$$('::', 'NotImplementedError'), \"\" + (self.$class()) + \" #\" + (\"process\") + \" method called before being registered\")\n          };\n        }, $ProcessorDsl_process$18.$$arity = -1);\n        \n        Opal.def(self, '$process_block_given?', $ProcessorDsl_process_block_given$ques$20 = function() {\n          var $a, self = this;\n\n          return (($a = self['process_block'], $a != null && $a !== nil) ? 'instance-variable' : nil)\n        }, $ProcessorDsl_process_block_given$ques$20.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DocumentProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $DocumentProcessorDsl_prefer$21;\n\n        \n        self.$include($$($nesting, 'ProcessorDsl'));\n        \n        Opal.def(self, '$prefer', $DocumentProcessorDsl_prefer$21 = function $$prefer() {\n          var self = this;\n\n          return self.$option(\"position\", \">>\")\n        }, $DocumentProcessorDsl_prefer$21.$$arity = 0);\n      })($nesting[0], $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'SyntaxProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $SyntaxProcessorDsl_named$22, $SyntaxProcessorDsl_content_model$23, $SyntaxProcessorDsl_positional_attributes$24, $SyntaxProcessorDsl_default_attributes$25, $SyntaxProcessorDsl_resolve_attributes$26;\n\n        \n        self.$include($$($nesting, 'ProcessorDsl'));\n        \n        Opal.def(self, '$named', $SyntaxProcessorDsl_named$22 = function $$named(value) {\n          var self = this;\n\n          if ($truthy($$($nesting, 'Processor')['$==='](self))) {\n            return (self.name = value)\n          } else {\n            return self.$option(\"name\", value)\n          }\n        }, $SyntaxProcessorDsl_named$22.$$arity = 1);\n        \n        Opal.def(self, '$content_model', $SyntaxProcessorDsl_content_model$23 = function $$content_model(value) {\n          var self = this;\n\n          return self.$option(\"content_model\", value)\n        }, $SyntaxProcessorDsl_content_model$23.$$arity = 1);\n        Opal.alias(self, \"parse_content_as\", \"content_model\");\n        \n        Opal.def(self, '$positional_attributes', $SyntaxProcessorDsl_positional_attributes$24 = function $$positional_attributes($a) {\n          var $post_args, value, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          return self.$option(\"positional_attrs\", value.$flatten());\n        }, $SyntaxProcessorDsl_positional_attributes$24.$$arity = -1);\n        Opal.alias(self, \"name_positional_attributes\", \"positional_attributes\");\n        Opal.alias(self, \"positional_attrs\", \"positional_attributes\");\n        \n        Opal.def(self, '$default_attributes', $SyntaxProcessorDsl_default_attributes$25 = function $$default_attributes(value) {\n          var self = this;\n\n          return self.$option(\"default_attrs\", value)\n        }, $SyntaxProcessorDsl_default_attributes$25.$$arity = 1);\n        Opal.alias(self, \"default_attrs\", \"default_attributes\");\n        \n        Opal.def(self, '$resolve_attributes', $SyntaxProcessorDsl_resolve_attributes$26 = function $$resolve_attributes($a) {\n          var $post_args, args, $b, $$27, $$28, self = this, $case = nil, names = nil, defaults = nil;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy($rb_gt(args.$size(), 1))) {\n          } else if ($truthy((args = args.$fetch(0, true))['$respond_to?'](\"to_sym\"))) {\n            args = [args]};\n          return (function() {$case = args;\n          if (true['$===']($case)) {\n          self.$option(\"positional_attrs\", []);\n          return self.$option(\"default_attrs\", $hash2([], {}));}\n          else if ($$$('::', 'Array')['$===']($case)) {\n          $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;\n          $send(args, 'each', [], ($$27 = function(arg){var self = $$27.$$s || this, $c, $d, name = nil, _ = nil, value = nil, idx = nil, $writer = nil;\n\n          \n            \n            if (arg == null) {\n              arg = nil;\n            };\n            if ($truthy((arg = arg.$to_s())['$include?'](\"=\"))) {\n              \n              $d = arg.$partition(\"=\"), $c = Opal.to_ary($d), (name = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (value = ($c[2] == null ? nil : $c[2])), $d;\n              if ($truthy(name['$include?'](\":\"))) {\n                \n                $d = name.$partition(\":\"), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n                idx = (function() {if (idx['$=='](\"@\")) {\n                  return names.$size()\n                } else {\n                  return idx.$to_i()\n                }; return nil; })();\n                \n                $writer = [idx, name];\n                $send(names, '[]=', Opal.to_a($writer));\n                $writer[$rb_minus($writer[\"length\"], 1)];;};\n              \n              $writer = [name, value];\n              $send(defaults, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else if ($truthy(arg['$include?'](\":\"))) {\n              \n              $d = arg.$partition(\":\"), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n              idx = (function() {if (idx['$=='](\"@\")) {\n                return names.$size()\n              } else {\n                return idx.$to_i()\n              }; return nil; })();\n              \n              $writer = [idx, name];\n              $send(names, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else {\n              return names['$<<'](arg)\n            };}, $$27.$$s = self, $$27.$$arity = 1, $$27));\n          self.$option(\"positional_attrs\", names.$compact());\n          return self.$option(\"default_attrs\", defaults);}\n          else if ($$$('::', 'Hash')['$===']($case)) {\n          $b = [[], $hash2([], {})], (names = $b[0]), (defaults = $b[1]), $b;\n          $send(args, 'each', [], ($$28 = function(key, val){var self = $$28.$$s || this, $c, $d, name = nil, idx = nil, _ = nil, $writer = nil;\n\n          \n            \n            if (key == null) {\n              key = nil;\n            };\n            \n            if (val == null) {\n              val = nil;\n            };\n            if ($truthy((name = key.$to_s())['$include?'](\":\"))) {\n              \n              $d = name.$partition(\":\"), $c = Opal.to_ary($d), (idx = ($c[0] == null ? nil : $c[0])), (_ = ($c[1] == null ? nil : $c[1])), (name = ($c[2] == null ? nil : $c[2])), $d;\n              idx = (function() {if (idx['$=='](\"@\")) {\n                return names.$size()\n              } else {\n                return idx.$to_i()\n              }; return nil; })();\n              \n              $writer = [idx, name];\n              $send(names, '[]=', Opal.to_a($writer));\n              $writer[$rb_minus($writer[\"length\"], 1)];;};\n            if ($truthy(val)) {\n              \n              $writer = [name, val];\n              $send(defaults, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];\n            } else {\n              return nil\n            };}, $$28.$$s = self, $$28.$$arity = 2, $$28));\n          self.$option(\"positional_attrs\", names.$compact());\n          return self.$option(\"default_attrs\", defaults);}\n          else {return self.$raise($$$('::', 'ArgumentError'), \"\" + \"unsupported attributes specification for macro: \" + (args.$inspect()))}})();\n        }, $SyntaxProcessorDsl_resolve_attributes$26.$$arity = -1);\n        Opal.alias(self, \"resolves_attributes\", \"resolve_attributes\");\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Preprocessor');\n\n        var $nesting = [self].concat($parent_nesting), $Preprocessor_process$29;\n\n        return (Opal.def(self, '$process', $Preprocessor_process$29 = function $$process(document, reader) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Preprocessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $Preprocessor_process$29.$$arity = 2), nil) && 'process'\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      Opal.const_set($$($nesting, 'Preprocessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'TreeProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $TreeProcessor_process$30;\n\n        return (Opal.def(self, '$process', $TreeProcessor_process$30 = function $$process(document) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'TreeProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $TreeProcessor_process$30.$$arity = 1), nil) && 'process'\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      Opal.const_set($$($nesting, 'TreeProcessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));\n      Opal.const_set($nesting[0], 'Treeprocessor', $$($nesting, 'TreeProcessor'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Postprocessor');\n\n        var $nesting = [self].concat($parent_nesting), $Postprocessor_process$31;\n\n        return (Opal.def(self, '$process', $Postprocessor_process$31 = function $$process(document, output) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'Postprocessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $Postprocessor_process$31.$$arity = 2), nil) && 'process'\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      Opal.const_set($$($nesting, 'Postprocessor'), 'DSL', $$($nesting, 'DocumentProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'IncludeProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $IncludeProcessor_process$32, $IncludeProcessor_handles$ques$33;\n\n        \n        \n        Opal.def(self, '$process', $IncludeProcessor_process$32 = function $$process(document, reader, target, attributes) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'IncludeProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $IncludeProcessor_process$32.$$arity = 4);\n        return (Opal.def(self, '$handles?', $IncludeProcessor_handles$ques$33 = function(target) {\n          var self = this;\n\n          return true\n        }, $IncludeProcessor_handles$ques$33.$$arity = 1), nil) && 'handles?';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'IncludeProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $IncludeProcessorDsl_handles$ques$34;\n\n        \n        self.$include($$($nesting, 'DocumentProcessorDsl'));\n        \n        Opal.def(self, '$handles?', $IncludeProcessorDsl_handles$ques$34 = function($a) {\n          var $iter = $IncludeProcessorDsl_handles$ques$34.$$p, block = $iter || nil, $post_args, args, $b, self = this;\n          if (self.handles_block == null) self.handles_block = nil;\n\n          if ($iter) $IncludeProcessorDsl_handles$ques$34.$$p = null;\n          \n          \n          if ($iter) $IncludeProcessorDsl_handles$ques$34.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ((block !== nil)) {\n            \n            if ($truthy(args['$empty?']())) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"wrong number of arguments (given \" + (args.$size()) + \", expected 0)\")\n            };\n            return (self.handles_block = block);\n          } else if ($truthy((($b = self['handles_block'], $b != null && $b !== nil) ? 'instance-variable' : nil))) {\n            return self.handles_block.$call(args['$[]'](0))\n          } else {\n            return true\n          };\n        }, $IncludeProcessorDsl_handles$ques$34.$$arity = -1);\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'IncludeProcessor'), 'DSL', $$($nesting, 'IncludeProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'DocinfoProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $DocinfoProcessor_initialize$35, $DocinfoProcessor_process$36;\n\n        self.$$prototype.config = nil;\n        \n        \n        Opal.def(self, '$initialize', $DocinfoProcessor_initialize$35 = function $$initialize(config) {\n          var $a, $iter = $DocinfoProcessor_initialize$35.$$p, $yield = $iter || nil, self = this, $writer = nil;\n\n          if ($iter) $DocinfoProcessor_initialize$35.$$p = null;\n          \n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $DocinfoProcessor_initialize$35, false), [config], null);\n          return ($truthy($a = self.config['$[]'](\"location\")) ? $a : (($writer = [\"location\", \"head\"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $DocinfoProcessor_initialize$35.$$arity = -1);\n        return (Opal.def(self, '$process', $DocinfoProcessor_process$36 = function $$process(document) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'DocinfoProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $DocinfoProcessor_process$36.$$arity = 1), nil) && 'process';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'DocinfoProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $DocinfoProcessorDsl_at_location$37;\n\n        \n        self.$include($$($nesting, 'DocumentProcessorDsl'));\n        \n        Opal.def(self, '$at_location', $DocinfoProcessorDsl_at_location$37 = function $$at_location(value) {\n          var self = this;\n\n          return self.$option(\"location\", value)\n        }, $DocinfoProcessorDsl_at_location$37.$$arity = 1);\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'DocinfoProcessor'), 'DSL', $$($nesting, 'DocinfoProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BlockProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $BlockProcessor_initialize$38, $BlockProcessor_process$39;\n\n        self.$$prototype.config = nil;\n        \n        self.$attr_accessor(\"name\");\n        \n        Opal.def(self, '$initialize', $BlockProcessor_initialize$38 = function $$initialize(name, config) {\n          var $a, $iter = $BlockProcessor_initialize$38.$$p, $yield = $iter || nil, self = this, $case = nil, $writer = nil;\n\n          if ($iter) $BlockProcessor_initialize$38.$$p = null;\n          \n          \n          if (name == null) {\n            name = nil;\n          };\n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $BlockProcessor_initialize$38, false), [config], null);\n          self.name = ($truthy($a = name) ? $a : self.config['$[]'](\"name\"));\n          $case = self.config['$[]'](\"contexts\");\n          if ($$$('::', 'NilClass')['$===']($case)) {($truthy($a = self.config['$[]'](\"contexts\")) ? $a : (($writer = [\"contexts\", [\"open\", \"paragraph\"].$to_set()]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))}\n          else if ($$$('::', 'Symbol')['$===']($case)) {\n          $writer = [\"contexts\", [self.config['$[]'](\"contexts\")].$to_set()];\n          $send(self.config, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];}\n          else {\n          $writer = [\"contexts\", self.config['$[]'](\"contexts\").$to_set()];\n          $send(self.config, '[]=', Opal.to_a($writer));\n          $writer[$rb_minus($writer[\"length\"], 1)];};\n          return ($truthy($a = self.config['$[]'](\"content_model\")) ? $a : (($writer = [\"content_model\", \"compound\"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $BlockProcessor_initialize$38.$$arity = -1);\n        return (Opal.def(self, '$process', $BlockProcessor_process$39 = function $$process(parent, reader, attributes) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'BlockProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $BlockProcessor_process$39.$$arity = 3), nil) && 'process';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'BlockProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $BlockProcessorDsl_contexts$40;\n\n        \n        self.$include($$($nesting, 'SyntaxProcessorDsl'));\n        \n        Opal.def(self, '$contexts', $BlockProcessorDsl_contexts$40 = function $$contexts($a) {\n          var $post_args, value, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          value = $post_args;;\n          return self.$option(\"contexts\", value.$flatten().$to_set());\n        }, $BlockProcessorDsl_contexts$40.$$arity = -1);\n        Opal.alias(self, \"on_contexts\", \"contexts\");\n        Opal.alias(self, \"on_context\", \"contexts\");\n        Opal.alias(self, \"bind_to\", \"contexts\");\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'BlockProcessor'), 'DSL', $$($nesting, 'BlockProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'MacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $MacroProcessor_initialize$41, $MacroProcessor_process$42;\n\n        self.$$prototype.config = nil;\n        \n        self.$attr_accessor(\"name\");\n        \n        Opal.def(self, '$initialize', $MacroProcessor_initialize$41 = function $$initialize(name, config) {\n          var $a, $iter = $MacroProcessor_initialize$41.$$p, $yield = $iter || nil, self = this, $writer = nil;\n\n          if ($iter) $MacroProcessor_initialize$41.$$p = null;\n          \n          \n          if (name == null) {\n            name = nil;\n          };\n          \n          if (config == null) {\n            config = $hash2([], {});\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $MacroProcessor_initialize$41, false), [config], null);\n          self.name = ($truthy($a = name) ? $a : self.config['$[]'](\"name\"));\n          return ($truthy($a = self.config['$[]'](\"content_model\")) ? $a : (($writer = [\"content_model\", \"attributes\"]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $MacroProcessor_initialize$41.$$arity = -1);\n        return (Opal.def(self, '$process', $MacroProcessor_process$42 = function $$process(parent, target, attributes) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'), \"\" + ($$($nesting, 'MacroProcessor')) + \" subclass \" + (self.$class()) + \" must implement the #\" + (\"process\") + \" method\")\n        }, $MacroProcessor_process$42.$$arity = 3), nil) && 'process';\n      })($nesting[0], $$($nesting, 'Processor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'MacroProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $MacroProcessorDsl_resolve_attributes$43;\n\n        \n        self.$include($$($nesting, 'SyntaxProcessorDsl'));\n        \n        Opal.def(self, '$resolve_attributes', $MacroProcessorDsl_resolve_attributes$43 = function $$resolve_attributes($a) {\n          var $post_args, args, $b, $iter = $MacroProcessorDsl_resolve_attributes$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;\n\n          if ($iter) $MacroProcessorDsl_resolve_attributes$43.$$p = null;\n          // Prepare super implicit arguments\n          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {\n            $zuper[$zuper_i] = arguments[$zuper_i];\n          }\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          if ($truthy((($b = args.$size()['$=='](1)) ? args['$[]'](0)['$!']() : args.$size()['$=='](1)))) {\n            return self.$option(\"content_model\", \"text\")\n          } else {\n            \n            $send(self, Opal.find_super_dispatcher(self, 'resolve_attributes', $MacroProcessorDsl_resolve_attributes$43, false), $zuper, $iter);\n            return self.$option(\"content_model\", \"attributes\");\n          };\n        }, $MacroProcessorDsl_resolve_attributes$43.$$arity = -1);\n        Opal.alias(self, \"resolves_attributes\", \"resolve_attributes\");\n      })($nesting[0], $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'BlockMacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $BlockMacroProcessor_name$44;\n\n        self.$$prototype.name = nil;\n        return (Opal.def(self, '$name', $BlockMacroProcessor_name$44 = function $$name() {\n          var self = this;\n\n          \n          if ($truthy($$($nesting, 'MacroNameRx')['$match?'](self.name.$to_s()))) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"invalid name for block macro: \" + (self.name))\n          };\n          return self.name;\n        }, $BlockMacroProcessor_name$44.$$arity = 0), nil) && 'name'\n      })($nesting[0], $$($nesting, 'MacroProcessor'), $nesting);\n      Opal.const_set($$($nesting, 'BlockMacroProcessor'), 'DSL', $$($nesting, 'MacroProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'InlineMacroProcessor');\n\n        var $nesting = [self].concat($parent_nesting), $InlineMacroProcessor_regexp$45, $InlineMacroProcessor_resolve_regexp$46;\n\n        self.$$prototype.config = self.$$prototype.name = nil;\n        \n        (Opal.class_variable_set($nesting[0], '@@rx_cache', $hash2([], {})));\n        \n        Opal.def(self, '$regexp', $InlineMacroProcessor_regexp$45 = function $$regexp() {\n          var $a, self = this, $writer = nil;\n\n          return ($truthy($a = self.config['$[]'](\"regexp\")) ? $a : (($writer = [\"regexp\", self.$resolve_regexp(self.name.$to_s(), self.config['$[]'](\"format\"))]), $send(self.config, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]))\n        }, $InlineMacroProcessor_regexp$45.$$arity = 0);\n        return (Opal.def(self, '$resolve_regexp', $InlineMacroProcessor_resolve_regexp$46 = function $$resolve_regexp(name, format) {\n          var $a, $b, self = this, $writer = nil;\n\n          \n          if ($truthy($$($nesting, 'MacroNameRx')['$match?'](name))) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"invalid name for inline macro: \" + (name))\n          };\n          return ($truthy($a = (($b = $nesting[0].$$cvars['@@rx_cache']) == null ? nil : $b)['$[]']([name, format])) ? $a : (($writer = [[name, format], new RegExp(\"\" + \"\\\\\\\\?\" + (name) + \":\" + ((function() {if (format['$=='](\"short\")) {\n            return \"(){0}\"\n          } else {\n            return \"(\\\\S+?)\"\n          }; return nil; })()) + \"\\\\[(|\" + ($$($nesting, 'CC_ANY')) + \"*?[^\\\\\\\\])\\\\]\")]), $send((($b = $nesting[0].$$cvars['@@rx_cache']) == null ? nil : $b), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer[\"length\"], 1)]));\n        }, $InlineMacroProcessor_resolve_regexp$46.$$arity = 2), nil) && 'resolve_regexp';\n      })($nesting[0], $$($nesting, 'MacroProcessor'), $nesting);\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'InlineMacroProcessorDsl');\n\n        var $nesting = [self].concat($parent_nesting), $InlineMacroProcessorDsl_format$47, $InlineMacroProcessorDsl_match$48;\n\n        \n        self.$include($$($nesting, 'MacroProcessorDsl'));\n        \n        Opal.def(self, '$format', $InlineMacroProcessorDsl_format$47 = function $$format(value) {\n          var self = this;\n\n          return self.$option(\"format\", value)\n        }, $InlineMacroProcessorDsl_format$47.$$arity = 1);\n        Opal.alias(self, \"match_format\", \"format\");\n        Opal.alias(self, \"using_format\", \"format\");\n        \n        Opal.def(self, '$match', $InlineMacroProcessorDsl_match$48 = function $$match(value) {\n          var self = this;\n\n          return self.$option(\"regexp\", value)\n        }, $InlineMacroProcessorDsl_match$48.$$arity = 1);\n      })($nesting[0], $nesting);\n      Opal.const_set($$($nesting, 'InlineMacroProcessor'), 'DSL', $$($nesting, 'InlineMacroProcessorDsl'));\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Extension');\n\n        var $nesting = [self].concat($parent_nesting), $Extension_initialize$49;\n\n        \n        self.$attr_reader(\"kind\");\n        self.$attr_reader(\"config\");\n        self.$attr_reader(\"instance\");\n        return (Opal.def(self, '$initialize', $Extension_initialize$49 = function $$initialize(kind, instance, config) {\n          var self = this;\n\n          \n          self.kind = kind;\n          self.instance = instance;\n          return (self.config = config);\n        }, $Extension_initialize$49.$$arity = 3), nil) && 'initialize';\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'ProcessorExtension');\n\n        var $nesting = [self].concat($parent_nesting), $ProcessorExtension_initialize$50;\n\n        \n        self.$attr_reader(\"process_method\");\n        return (Opal.def(self, '$initialize', $ProcessorExtension_initialize$50 = function $$initialize(kind, instance, process_method) {\n          var $a, $iter = $ProcessorExtension_initialize$50.$$p, $yield = $iter || nil, self = this;\n\n          if ($iter) $ProcessorExtension_initialize$50.$$p = null;\n          \n          \n          if (process_method == null) {\n            process_method = nil;\n          };\n          $send(self, Opal.find_super_dispatcher(self, 'initialize', $ProcessorExtension_initialize$50, false), [kind, instance, instance.$config()], null);\n          return (self.process_method = ($truthy($a = process_method) ? $a : instance.$method(\"process\")));\n        }, $ProcessorExtension_initialize$50.$$arity = -3), nil) && 'initialize';\n      })($nesting[0], $$($nesting, 'Extension'), $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Group');\n\n        var $nesting = [self].concat($parent_nesting), $Group_activate$52;\n\n        \n        (function(self, $parent_nesting) {\n          var $nesting = [self].concat($parent_nesting), $register$51;\n\n          return (Opal.def(self, '$register', $register$51 = function $$register(name) {\n            var self = this;\n\n            \n            \n            if (name == null) {\n              name = nil;\n            };\n            return $$($nesting, 'Extensions').$register(name, self);\n          }, $register$51.$$arity = -1), nil) && 'register'\n        })(Opal.get_singleton_class(self), $nesting);\n        return (Opal.def(self, '$activate', $Group_activate$52 = function $$activate(registry) {\n          var self = this;\n\n          return self.$raise($$$('::', 'NotImplementedError'))\n        }, $Group_activate$52.$$arity = 1), nil) && 'activate';\n      })($nesting[0], null, $nesting);\n      (function($base, $super, $parent_nesting) {\n        var self = $klass($base, $super, 'Registry');\n\n        var $nesting = [self].concat($parent_nesting), $Registry_initialize$53, $Registry_activate$54, $Registry_preprocessor$56, $Registry_preprocessors$ques$57, $Registry_preprocessors$58, $Registry_tree_processor$59, $Registry_tree_processors$ques$60, $Registry_tree_processors$61, $Registry_postprocessor$62, $Registry_postprocessors$ques$63, $Registry_postprocessors$64, $Registry_include_processor$65, $Registry_include_processors$ques$66, $Registry_include_processors$67, $Registry_docinfo_processor$68, $Registry_docinfo_processors$ques$69, $Registry_docinfo_processors$71, $Registry_block$73, $Registry_blocks$ques$74, $Registry_registered_for_block$ques$75, $Registry_find_block_extension$76, $Registry_block_macro$77, $Registry_block_macros$ques$78, $Registry_registered_for_block_macro$ques$79, $Registry_find_block_macro_extension$80, $Registry_inline_macro$81, $Registry_inline_macros$ques$82, $Registry_registered_for_inline_macro$ques$83, $Registry_find_inline_macro_extension$84, $Registry_inline_macros$85, $Registry_prefer$86, $Registry_add_document_processor$87, $Registry_add_syntax_processor$89, $Registry_resolve_args$91, $Registry_as_symbol$92;\n\n        self.$$prototype.groups = self.$$prototype.preprocessor_extensions = self.$$prototype.tree_processor_extensions = self.$$prototype.postprocessor_extensions = self.$$prototype.include_processor_extensions = self.$$prototype.docinfo_processor_extensions = self.$$prototype.block_extensions = self.$$prototype.block_macro_extensions = self.$$prototype.inline_macro_extensions = nil;\n        \n        self.$attr_reader(\"document\");\n        self.$attr_reader(\"groups\");\n        \n        Opal.def(self, '$initialize', $Registry_initialize$53 = function $$initialize(groups) {\n          var self = this;\n\n          \n          \n          if (groups == null) {\n            groups = $hash2([], {});\n          };\n          self.groups = groups;\n          self.preprocessor_extensions = (self.tree_processor_extensions = (self.postprocessor_extensions = (self.include_processor_extensions = (self.docinfo_processor_extensions = (self.block_extensions = (self.block_macro_extensions = (self.inline_macro_extensions = nil)))))));\n          return (self.document = nil);\n        }, $Registry_initialize$53.$$arity = -1);\n        \n        Opal.def(self, '$activate', $Registry_activate$54 = function $$activate(document) {\n          var $$55, self = this, ext_groups = nil;\n\n          \n          self.document = document;\n          if ($truthy((ext_groups = $rb_plus($$($nesting, 'Extensions').$groups().$values(), self.groups.$values()))['$empty?']())) {\n          } else {\n            $send(ext_groups, 'each', [], ($$55 = function(group){var self = $$55.$$s || this, $case = nil;\n\n            \n              \n              if (group == null) {\n                group = nil;\n              };\n              return (function() {$case = group;\n              if ($$$('::', 'Proc')['$===']($case)) {return (function() {$case = group.$arity();\n              if ((0)['$===']($case) || (-1)['$===']($case)) {return $send(self, 'instance_exec', [], group.$to_proc())}\n              else if ((1)['$===']($case)) {return group.$call(self)}\n              else { return nil }})()}\n              else if ($$$('::', 'Class')['$===']($case)) {return group.$new().$activate(self)}\n              else {return group.$activate(self)}})();}, $$55.$$s = self, $$55.$$arity = 1, $$55))\n          };\n          return self;\n        }, $Registry_activate$54.$$arity = 1);\n        \n        Opal.def(self, '$preprocessor', $Registry_preprocessor$56 = function $$preprocessor($a) {\n          var $iter = $Registry_preprocessor$56.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_preprocessor$56.$$p = null;\n          \n          \n          if ($iter) $Registry_preprocessor$56.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"preprocessor\", args], block.$to_proc());\n        }, $Registry_preprocessor$56.$$arity = -1);\n        \n        Opal.def(self, '$preprocessors?', $Registry_preprocessors$ques$57 = function() {\n          var self = this;\n\n          return self.preprocessor_extensions['$!']()['$!']()\n        }, $Registry_preprocessors$ques$57.$$arity = 0);\n        \n        Opal.def(self, '$preprocessors', $Registry_preprocessors$58 = function $$preprocessors() {\n          var self = this;\n\n          return self.preprocessor_extensions\n        }, $Registry_preprocessors$58.$$arity = 0);\n        \n        Opal.def(self, '$tree_processor', $Registry_tree_processor$59 = function $$tree_processor($a) {\n          var $iter = $Registry_tree_processor$59.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_tree_processor$59.$$p = null;\n          \n          \n          if ($iter) $Registry_tree_processor$59.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"tree_processor\", args], block.$to_proc());\n        }, $Registry_tree_processor$59.$$arity = -1);\n        \n        Opal.def(self, '$tree_processors?', $Registry_tree_processors$ques$60 = function() {\n          var self = this;\n\n          return self.tree_processor_extensions['$!']()['$!']()\n        }, $Registry_tree_processors$ques$60.$$arity = 0);\n        \n        Opal.def(self, '$tree_processors', $Registry_tree_processors$61 = function $$tree_processors() {\n          var self = this;\n\n          return self.tree_processor_extensions\n        }, $Registry_tree_processors$61.$$arity = 0);\n        Opal.alias(self, \"treeprocessor\", \"tree_processor\");\n        Opal.alias(self, \"treeprocessors?\", \"tree_processors?\");\n        Opal.alias(self, \"treeprocessors\", \"tree_processors\");\n        \n        Opal.def(self, '$postprocessor', $Registry_postprocessor$62 = function $$postprocessor($a) {\n          var $iter = $Registry_postprocessor$62.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_postprocessor$62.$$p = null;\n          \n          \n          if ($iter) $Registry_postprocessor$62.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"postprocessor\", args], block.$to_proc());\n        }, $Registry_postprocessor$62.$$arity = -1);\n        \n        Opal.def(self, '$postprocessors?', $Registry_postprocessors$ques$63 = function() {\n          var self = this;\n\n          return self.postprocessor_extensions['$!']()['$!']()\n        }, $Registry_postprocessors$ques$63.$$arity = 0);\n        \n        Opal.def(self, '$postprocessors', $Registry_postprocessors$64 = function $$postprocessors() {\n          var self = this;\n\n          return self.postprocessor_extensions\n        }, $Registry_postprocessors$64.$$arity = 0);\n        \n        Opal.def(self, '$include_processor', $Registry_include_processor$65 = function $$include_processor($a) {\n          var $iter = $Registry_include_processor$65.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_include_processor$65.$$p = null;\n          \n          \n          if ($iter) $Registry_include_processor$65.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"include_processor\", args], block.$to_proc());\n        }, $Registry_include_processor$65.$$arity = -1);\n        \n        Opal.def(self, '$include_processors?', $Registry_include_processors$ques$66 = function() {\n          var self = this;\n\n          return self.include_processor_extensions['$!']()['$!']()\n        }, $Registry_include_processors$ques$66.$$arity = 0);\n        \n        Opal.def(self, '$include_processors', $Registry_include_processors$67 = function $$include_processors() {\n          var self = this;\n\n          return self.include_processor_extensions\n        }, $Registry_include_processors$67.$$arity = 0);\n        \n        Opal.def(self, '$docinfo_processor', $Registry_docinfo_processor$68 = function $$docinfo_processor($a) {\n          var $iter = $Registry_docinfo_processor$68.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_docinfo_processor$68.$$p = null;\n          \n          \n          if ($iter) $Registry_docinfo_processor$68.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_document_processor', [\"docinfo_processor\", args], block.$to_proc());\n        }, $Registry_docinfo_processor$68.$$arity = -1);\n        \n        Opal.def(self, '$docinfo_processors?', $Registry_docinfo_processors$ques$69 = function(location) {\n          var $$70, self = this;\n\n          \n          \n          if (location == null) {\n            location = nil;\n          };\n          if ($truthy(self.docinfo_processor_extensions)) {\n            if ($truthy(location)) {\n              return $send(self.docinfo_processor_extensions, 'any?', [], ($$70 = function(ext){var self = $$70.$$s || this;\n\n              \n                \n                if (ext == null) {\n                  ext = nil;\n                };\n                return ext.$config()['$[]'](\"location\")['$=='](location);}, $$70.$$s = self, $$70.$$arity = 1, $$70))\n            } else {\n              return true\n            }\n          } else {\n            return false\n          };\n        }, $Registry_docinfo_processors$ques$69.$$arity = -1);\n        \n        Opal.def(self, '$docinfo_processors', $Registry_docinfo_processors$71 = function $$docinfo_processors(location) {\n          var $$72, self = this;\n\n          \n          \n          if (location == null) {\n            location = nil;\n          };\n          if ($truthy(self.docinfo_processor_extensions)) {\n            if ($truthy(location)) {\n              return $send(self.docinfo_processor_extensions, 'select', [], ($$72 = function(ext){var self = $$72.$$s || this;\n\n              \n                \n                if (ext == null) {\n                  ext = nil;\n                };\n                return ext.$config()['$[]'](\"location\")['$=='](location);}, $$72.$$s = self, $$72.$$arity = 1, $$72))\n            } else {\n              return self.docinfo_processor_extensions\n            }\n          } else {\n            return nil\n          };\n        }, $Registry_docinfo_processors$71.$$arity = -1);\n        \n        Opal.def(self, '$block', $Registry_block$73 = function $$block($a) {\n          var $iter = $Registry_block$73.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_block$73.$$p = null;\n          \n          \n          if ($iter) $Registry_block$73.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_syntax_processor', [\"block\", args], block.$to_proc());\n        }, $Registry_block$73.$$arity = -1);\n        \n        Opal.def(self, '$blocks?', $Registry_blocks$ques$74 = function() {\n          var self = this;\n\n          return self.block_extensions['$!']()['$!']()\n        }, $Registry_blocks$ques$74.$$arity = 0);\n        \n        Opal.def(self, '$registered_for_block?', $Registry_registered_for_block$ques$75 = function(name, context) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.block_extensions['$[]'](name.$to_sym())))) {\n            if ($truthy(ext.$config()['$[]'](\"contexts\")['$include?'](context))) {\n              return ext\n            } else {\n              return false\n            }\n          } else {\n            return false\n          }\n        }, $Registry_registered_for_block$ques$75.$$arity = 2);\n        \n        Opal.def(self, '$find_block_extension', $Registry_find_block_extension$76 = function $$find_block_extension(name) {\n          var self = this;\n\n          return self.block_extensions['$[]'](name.$to_sym())\n        }, $Registry_find_block_extension$76.$$arity = 1);\n        \n        Opal.def(self, '$block_macro', $Registry_block_macro$77 = function $$block_macro($a) {\n          var $iter = $Registry_block_macro$77.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_block_macro$77.$$p = null;\n          \n          \n          if ($iter) $Registry_block_macro$77.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_syntax_processor', [\"block_macro\", args], block.$to_proc());\n        }, $Registry_block_macro$77.$$arity = -1);\n        \n        Opal.def(self, '$block_macros?', $Registry_block_macros$ques$78 = function() {\n          var self = this;\n\n          return self.block_macro_extensions['$!']()['$!']()\n        }, $Registry_block_macros$ques$78.$$arity = 0);\n        \n        Opal.def(self, '$registered_for_block_macro?', $Registry_registered_for_block_macro$ques$79 = function(name) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.block_macro_extensions['$[]'](name.$to_sym())))) {\n            return ext\n          } else {\n            return false\n          }\n        }, $Registry_registered_for_block_macro$ques$79.$$arity = 1);\n        \n        Opal.def(self, '$find_block_macro_extension', $Registry_find_block_macro_extension$80 = function $$find_block_macro_extension(name) {\n          var self = this;\n\n          return self.block_macro_extensions['$[]'](name.$to_sym())\n        }, $Registry_find_block_macro_extension$80.$$arity = 1);\n        \n        Opal.def(self, '$inline_macro', $Registry_inline_macro$81 = function $$inline_macro($a) {\n          var $iter = $Registry_inline_macro$81.$$p, block = $iter || nil, $post_args, args, self = this;\n\n          if ($iter) $Registry_inline_macro$81.$$p = null;\n          \n          \n          if ($iter) $Registry_inline_macro$81.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          return $send(self, 'add_syntax_processor', [\"inline_macro\", args], block.$to_proc());\n        }, $Registry_inline_macro$81.$$arity = -1);\n        \n        Opal.def(self, '$inline_macros?', $Registry_inline_macros$ques$82 = function() {\n          var self = this;\n\n          return self.inline_macro_extensions['$!']()['$!']()\n        }, $Registry_inline_macros$ques$82.$$arity = 0);\n        \n        Opal.def(self, '$registered_for_inline_macro?', $Registry_registered_for_inline_macro$ques$83 = function(name) {\n          var self = this, ext = nil;\n\n          if ($truthy((ext = self.inline_macro_extensions['$[]'](name.$to_sym())))) {\n            return ext\n          } else {\n            return false\n          }\n        }, $Registry_registered_for_inline_macro$ques$83.$$arity = 1);\n        \n        Opal.def(self, '$find_inline_macro_extension', $Registry_find_inline_macro_extension$84 = function $$find_inline_macro_extension(name) {\n          var self = this;\n\n          return self.inline_macro_extensions['$[]'](name.$to_sym())\n        }, $Registry_find_inline_macro_extension$84.$$arity = 1);\n        \n        Opal.def(self, '$inline_macros', $Registry_inline_macros$85 = function $$inline_macros() {\n          var self = this;\n\n          return self.inline_macro_extensions.$values()\n        }, $Registry_inline_macros$85.$$arity = 0);\n        \n        Opal.def(self, '$prefer', $Registry_prefer$86 = function $$prefer($a) {\n          var $iter = $Registry_prefer$86.$$p, block = $iter || nil, $post_args, args, self = this, extension = nil, arg0 = nil, extensions_store = nil;\n\n          if ($iter) $Registry_prefer$86.$$p = null;\n          \n          \n          if ($iter) $Registry_prefer$86.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          extension = (function() {if ($truthy($$($nesting, 'ProcessorExtension')['$===']((arg0 = args.$shift())))) {\n            return arg0\n          } else {\n            \n            return $send(self, 'send', [arg0].concat(Opal.to_a(args)), block.$to_proc());\n          }; return nil; })();\n          extensions_store = self.$instance_variable_get((((\"\" + \"@\") + (extension.$kind())) + \"_extensions\").$to_sym());\n          extensions_store.$unshift(extensions_store.$delete(extension));\n          return extension;\n        }, $Registry_prefer$86.$$arity = -1);\n        self.$private();\n        \n        Opal.def(self, '$add_document_processor', $Registry_add_document_processor$87 = function $$add_document_processor(kind, args) {\n          var $iter = $Registry_add_document_processor$87.$$p, block = $iter || nil, $$88, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, extension = nil, config = nil, processor = nil, processor_class = nil, processor_instance = nil;\n\n          if ($iter) $Registry_add_document_processor$87.$$p = null;\n          \n          \n          if ($iter) $Registry_add_document_processor$87.$$p = null;;\n          kind_name = kind.$to_s().$tr(\"_\", \" \");\n          kind_class_symbol = $send(kind_name.$split(), 'map', [], ($$88 = function(it){var self = $$88.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return it.$capitalize();}, $$88.$$s = self, $$88.$$arity = 1, $$88)).$join().$to_sym();\n          kind_class = $$($nesting, 'Extensions').$const_get(kind_class_symbol, false);\n          kind_java_class = (function() {if ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {\n            \n            return $$$($$$('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol, false);\n          } else {\n            return nil\n          }; return nil; })();\n          kind_store = ($truthy($b = self.$instance_variable_get((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym())) ? $b : self.$instance_variable_set((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym(), []));\n          extension = (function() {if ((block !== nil)) {\n            \n            config = self.$resolve_args(args, 1);\n            (processor = kind_class.$new(config)).$singleton_class().$enable_dsl();\n            if (block.$arity()['$=='](0)) {\n              $send(processor, 'instance_exec', [], block.$to_proc())\n            } else {\n              Opal.yield1(block, processor)\n            };\n            if ($truthy(processor['$process_block_given?']())) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"No block specified to process \" + (kind_name) + \" extension at \" + (block.$source_location()))\n            };\n            processor.$freeze();\n            return $$($nesting, 'ProcessorExtension').$new(kind, processor);\n          } else {\n            \n            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;\n            if ($truthy((processor_class = $$($nesting, 'Helpers').$resolve_class(processor)))) {\n              \n              if ($truthy(($truthy($b = $rb_lt(processor_class, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor_class, kind_java_class) : $c)))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"Invalid type for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor_instance = processor_class.$new(config);\n              processor_instance.$freeze();\n              return $$($nesting, 'ProcessorExtension').$new(kind, processor_instance);\n            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {\n              \n              processor.$update_config(config);\n              processor.$freeze();\n              return $$($nesting, 'ProcessorExtension').$new(kind, processor);\n            } else {\n              return self.$raise($$$('::', 'ArgumentError'), \"\" + \"Invalid arguments specified for registering \" + (kind_name) + \" extension: \" + (args))\n            };\n          }; return nil; })();\n          if (extension.$config()['$[]'](\"position\")['$=='](\">>\")) {\n            \n            kind_store.$unshift(extension);\n          } else {\n            \n            kind_store['$<<'](extension);\n          };\n          return extension;\n        }, $Registry_add_document_processor$87.$$arity = 2);\n        \n        Opal.def(self, '$add_syntax_processor', $Registry_add_syntax_processor$89 = function $$add_syntax_processor(kind, args) {\n          var $iter = $Registry_add_syntax_processor$89.$$p, block = $iter || nil, $$90, $a, $b, $c, self = this, kind_name = nil, kind_class_symbol = nil, kind_class = nil, kind_java_class = nil, kind_store = nil, name = nil, config = nil, processor = nil, $writer = nil, processor_class = nil, processor_instance = nil;\n\n          if ($iter) $Registry_add_syntax_processor$89.$$p = null;\n          \n          \n          if ($iter) $Registry_add_syntax_processor$89.$$p = null;;\n          kind_name = kind.$to_s().$tr(\"_\", \" \");\n          kind_class_symbol = $send(kind_name.$split(), 'map', [], ($$90 = function(it){var self = $$90.$$s || this;\n\n          \n            \n            if (it == null) {\n              it = nil;\n            };\n            return it.$capitalize();}, $$90.$$s = self, $$90.$$arity = 1, $$90))['$<<'](\"Processor\").$join().$to_sym();\n          kind_class = $$($nesting, 'Extensions').$const_get(kind_class_symbol, false);\n          kind_java_class = (function() {if ($truthy((($a = $$$('::', 'AsciidoctorJ', 'skip_raise')) ? 'constant' : nil))) {\n            \n            return $$$($$$('::', 'AsciidoctorJ'), 'Extensions').$const_get(kind_class_symbol, false);\n          } else {\n            return nil\n          }; return nil; })();\n          kind_store = ($truthy($b = self.$instance_variable_get((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym())) ? $b : self.$instance_variable_set((((\"\" + \"@\") + (kind)) + \"_extensions\").$to_sym(), $hash2([], {})));\n          if ((block !== nil)) {\n            \n            $c = self.$resolve_args(args, 2), $b = Opal.to_ary($c), (name = ($b[0] == null ? nil : $b[0])), (config = ($b[1] == null ? nil : $b[1])), $c;\n            (processor = kind_class.$new(self.$as_symbol(name), config)).$singleton_class().$enable_dsl();\n            if (block.$arity()['$=='](0)) {\n              $send(processor, 'instance_exec', [], block.$to_proc())\n            } else {\n              Opal.yield1(block, processor)\n            };\n            if ($truthy((name = self.$as_symbol(processor.$name())))) {\n            } else {\n              self.$raise($$$('::', 'ArgumentError'), \"\" + \"No name specified for \" + (kind_name) + \" extension at \" + (block.$source_location()))\n            };\n            if ($truthy(processor['$process_block_given?']())) {\n            } else {\n              self.$raise($$$('::', 'NoMethodError'), \"\" + \"No block specified to process \" + (kind_name) + \" extension at \" + (block.$source_location()))\n            };\n            processor.$freeze();\n            \n            $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor)];\n            $send(kind_store, '[]=', Opal.to_a($writer));\n            return $writer[$rb_minus($writer[\"length\"], 1)];;\n          } else {\n            \n            $c = self.$resolve_args(args, 3), $b = Opal.to_ary($c), (processor = ($b[0] == null ? nil : $b[0])), (name = ($b[1] == null ? nil : $b[1])), (config = ($b[2] == null ? nil : $b[2])), $c;\n            if ($truthy((processor_class = $$($nesting, 'Helpers').$resolve_class(processor)))) {\n              \n              if ($truthy(($truthy($b = $rb_lt(processor_class, kind_class)) ? $b : ($truthy($c = kind_java_class) ? $rb_lt(processor_class, kind_java_class) : $c)))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"Class specified for \" + (kind_name) + \" extension does not inherit from \" + (kind_class) + \": \" + (processor))\n              };\n              processor_instance = processor_class.$new(self.$as_symbol(name), config);\n              if ($truthy((name = self.$as_symbol(processor_instance.$name())))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"No name specified for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor_instance.$freeze();\n              \n              $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor_instance)];\n              $send(kind_store, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else if ($truthy(($truthy($b = kind_class['$==='](processor)) ? $b : ($truthy($c = kind_java_class) ? kind_java_class['$==='](processor) : $c)))) {\n              \n              processor.$update_config(config);\n              if ($truthy((name = (function() {if ($truthy(name)) {\n                \n                \n                $writer = [self.$as_symbol(name)];\n                $send(processor, 'name=', Opal.to_a($writer));\n                return $writer[$rb_minus($writer[\"length\"], 1)];;\n              } else {\n                \n                return self.$as_symbol(processor.$name());\n              }; return nil; })()))) {\n              } else {\n                self.$raise($$$('::', 'ArgumentError'), \"\" + \"No name specified for \" + (kind_name) + \" extension: \" + (processor))\n              };\n              processor.$freeze();\n              \n              $writer = [name, $$($nesting, 'ProcessorExtension').$new(kind, processor)];\n              $send(kind_store, '[]=', Opal.to_a($writer));\n              return $writer[$rb_minus($writer[\"length\"], 1)];;\n            } else {\n              return self.$raise($$$('::', 'ArgumentError'), \"\" + \"Invalid arguments specified for registering \" + (kind_name) + \" extension: \" + (args))\n            };\n          };\n        }, $Registry_add_syntax_processor$89.$$arity = 2);\n        \n        Opal.def(self, '$resolve_args', $Registry_resolve_args$91 = function $$resolve_args(args, expect) {\n          var self = this, opts = nil, missing = nil;\n\n          \n          opts = (function() {if ($truthy($$$('::', 'Hash')['$==='](args['$[]'](-1)))) {\n            return args.$pop()\n          } else {\n            return $hash2([], {})\n          }; return nil; })();\n          if (expect['$=='](1)) {\n            return opts};\n          if ($truthy($rb_gt((missing = $rb_minus($rb_minus(expect, 1), args.$size())), 0))) {\n            args = $rb_plus(args, $$$('::', 'Array').$new(missing))\n          } else if ($truthy($rb_lt(missing, 0))) {\n            args.$pop(missing['$-@']())};\n          args['$<<'](opts);\n          return args;\n        }, $Registry_resolve_args$91.$$arity = 2);\n        return (Opal.def(self, '$as_symbol', $Registry_as_symbol$92 = function $$as_symbol(name) {\n          var self = this;\n\n          if ($truthy(name)) {\n            return name.$to_sym()\n          } else {\n            return nil\n          }\n        }, $Registry_as_symbol$92.$$arity = 1), nil) && 'as_symbol';\n      })($nesting[0], null, $nesting);\n      (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $generate_name$93, $next_auto_id$94, $groups$95, $create$96, $register$97, $unregister_all$98, $unregister$99;\n\n        \n        \n        Opal.def(self, '$generate_name', $generate_name$93 = function $$generate_name() {\n          var self = this;\n\n          return \"\" + \"extgrp\" + (self.$next_auto_id())\n        }, $generate_name$93.$$arity = 0);\n        \n        Opal.def(self, '$next_auto_id', $next_auto_id$94 = function $$next_auto_id() {\n          var $a, self = this;\n          if (self.auto_id == null) self.auto_id = nil;\n\n          \n          self.auto_id = ($truthy($a = self.auto_id) ? $a : -1);\n          return (self.auto_id = $rb_plus(self.auto_id, 1));\n        }, $next_auto_id$94.$$arity = 0);\n        \n        Opal.def(self, '$groups', $groups$95 = function $$groups() {\n          var $a, self = this;\n          if (self.groups == null) self.groups = nil;\n\n          return (self.groups = ($truthy($a = self.groups) ? $a : $hash2([], {})))\n        }, $groups$95.$$arity = 0);\n        \n        Opal.def(self, '$create', $create$96 = function $$create(name) {\n          var $iter = $create$96.$$p, block = $iter || nil, $a, self = this;\n\n          if ($iter) $create$96.$$p = null;\n          \n          \n          if ($iter) $create$96.$$p = null;;\n          \n          if (name == null) {\n            name = nil;\n          };\n          if ((block !== nil)) {\n            return $$($nesting, 'Registry').$new($hash(($truthy($a = name) ? $a : self.$generate_name()), block))\n          } else {\n            return $$($nesting, 'Registry').$new()\n          };\n        }, $create$96.$$arity = -1);\n        \n        Opal.def(self, '$register', $register$97 = function $$register($a) {\n          var $iter = $register$97.$$p, block = $iter || nil, $post_args, args, $b, self = this, argc = nil, resolved_group = nil, group = nil, name = nil, $writer = nil;\n\n          if ($iter) $register$97.$$p = null;\n          \n          \n          if ($iter) $register$97.$$p = null;;\n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          args = $post_args;;\n          argc = args.$size();\n          if ((block !== nil)) {\n            resolved_group = block\n          } else if ($truthy((group = args.$pop()))) {\n            resolved_group = ($truthy($b = $$($nesting, 'Helpers').$resolve_class(group)) ? $b : group)\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"Extension group to register not specified\")\n          };\n          name = ($truthy($b = args.$pop()) ? $b : self.$generate_name());\n          if ($truthy(args['$empty?']())) {\n          } else {\n            self.$raise($$$('::', 'ArgumentError'), \"\" + \"Wrong number of arguments (\" + (argc) + \" for 1..2)\")\n          };\n          \n          $writer = [name.$to_sym(), resolved_group];\n          $send(self.$groups(), '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];;\n        }, $register$97.$$arity = -1);\n        \n        Opal.def(self, '$unregister_all', $unregister_all$98 = function $$unregister_all() {\n          var self = this;\n\n          \n          self.groups = $hash2([], {});\n          return nil;\n        }, $unregister_all$98.$$arity = 0);\n        return (Opal.def(self, '$unregister', $unregister$99 = function $$unregister($a) {\n          var $post_args, names, $$100, self = this;\n\n          \n          \n          $post_args = Opal.slice.call(arguments, 0, arguments.length);\n          \n          names = $post_args;;\n          $send(names, 'each', [], ($$100 = function(group){var self = $$100.$$s || this;\n            if (self.groups == null) self.groups = nil;\n\n          \n            \n            if (group == null) {\n              group = nil;\n            };\n            return self.groups.$delete(group.$to_sym());}, $$100.$$s = self, $$100.$$arity = 1, $$100));\n          return nil;\n        }, $unregister$99.$$arity = -1), nil) && 'unregister';\n      })(Opal.get_singleton_class(self), $nesting);\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting);\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/stylesheet\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$rstrip', '$read', '$join']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Stylesheets');\n\n      var $nesting = [self].concat($parent_nesting), $Stylesheets_primary_stylesheet_data$1;\n\n      self.$$prototype.primary_stylesheet_data = nil;\n      return (Opal.def(self, '$primary_stylesheet_data', $Stylesheets_primary_stylesheet_data$1 = function $$primary_stylesheet_data() {\n        var $a, self = this;\n\n        return (self.primary_stylesheet_data = ($truthy($a = self.primary_stylesheet_data) ? $a : $$$('::', 'IO').$read($$$('::', 'File').$join(\"css\", \"asciidoctor.css\")).$rstrip()))\n      }, $Stylesheets_primary_stylesheet_data$1.$$arity = 0), nil) && 'primary_stylesheet_data'\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/document\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Document');\n\n      var $nesting = [self].concat($parent_nesting), $Document_fill_datetime_attributes$1;\n\n      return (Opal.def(self, '$fill_datetime_attributes', $Document_fill_datetime_attributes$1 = function $$fill_datetime_attributes(attrs, input_mtime) {\n        var self = this;\n\n        \n      var $truthy = Opal.truthy\n      var $falsy = Opal.falsy\n      var nil = Opal.nil\n      var utc_offset\n      var source_date_epoch\n\n      var getYear = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCFullYear() : time.getFullYear()\n      }\n      var getMonth = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCMonth() : time.getMonth()\n      }\n      var getDay = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCDate() : time.getDate()\n      }\n      var getHours = function (time, utc_offset) {\n        return utc_offset === 0 ? time.getUTCHours() : time.getHours()\n      }\n\n      var now = new Date()\n      // See https://reproducible-builds.org/specs/source-date-epoch/\n      if (Opal.const_get_qualified('::', 'ENV')['$key?']('SOURCE_DATE_EPOCH')) {\n        now.setTime(parseInt(Opal.const_get_qualified('::', 'ENV')['$[]']('SOURCE_DATE_EPOCH')) * 1000)\n        source_date_epoch = now\n        utc_offset = 0  // utc\n      } else {\n        utc_offset = -now.getTimezoneOffset() / 60 // local date\n      }\n      // localdate and localyear\n      if ($truthy((localdate = attrs['$[]']('localdate')))) {\n        if ($falsy(localyear = attrs['$[]']('localyear'))) {\n          localyear = localdate.indexOf('-') === 4 ? localdate.substring(0, 4) : nil\n          attrs['$[]=']('localyear', localyear)\n        }\n      } else {\n        var now_year = getYear(now, utc_offset).toString()\n        var now_month = ('0' + (getMonth(now, utc_offset) + 1)).slice(-2)\n        var now_day = ('0' + getDay(now, utc_offset)).slice(-2)\n        localdate = now_year + '-' + now_month + '-' + now_day\n        attrs['$[]=']('localdate', localdate)\n        localyear = now_year\n        attrs['$[]=']('localyear', now_year)\n      }\n      // localtime\n      if ($falsy((localtime = attrs['$[]']('localtime')))) {\n        var hours = ('0' + (getHours(now, utc_offset))).slice(-2)\n        var minutes = ('0' + (now.getMinutes())).slice(-2)\n        var seconds = ('0' + (now.getSeconds())).slice(-2)\n        var utc_offset_format\n        if (utc_offset === 0) {\n          utc_offset_format = 'UTC'\n        } else if (utc_offset > 0) {\n          utc_offset_format = ('+0' + (utc_offset * 100)).slice(-5)\n        } else {\n          utc_offset_format = ('-0' + (-utc_offset * 100)).slice(-5)\n        }\n        localtime = hours + ':' + minutes + ':' + seconds + ' ' + utc_offset_format\n        attrs['$[]=']('localtime', localtime)\n      }\n      // localdatetime\n      if ($falsy((localdatetime = attrs['$[]']('localdatetime')))) {\n        localdatetime = localdate + ' ' + localtime\n        attrs['$[]=']('localdatetime', localdatetime)\n      }\n\n      // docdate, doctime and docdatetime should default to localdate, localtime and localdatetime if not otherwise set\n      if ($truthy(source_date_epoch)) {\n        input_mtime = source_date_epoch\n      } else if ($truthy(input_mtime)) {\n        utc_offset = -input_mtime.getTimezoneOffset() / 60\n      } else {\n        input_mtime = now\n      }\n\n      // docdate and docyear\n      if ($truthy(docdate = attrs['$[]']('docdate'))) {\n        attrs['$[]=']('docyear', docdate.indexOf('-') === 4 ? docdate.substring(0, 4) : nil)\n      } else {\n        var mtime_year = getYear(input_mtime, utc_offset).toString()\n        var mtime_month = ('0' + (getMonth(input_mtime, utc_offset) + 1)).slice(-2)\n        var mtime_day = ('0' + (getDay(input_mtime, utc_offset))).slice(-2)\n        docdate = mtime_year + '-' + mtime_month + '-' + mtime_day\n        attrs['$[]=']('docdate', docdate)\n        if ($falsy(attrs['$[]']('docyear'))) {\n          attrs['$[]=']('docyear', mtime_year)\n        }\n      }\n      // doctime\n      if ($falsy(doctime = attrs['$[]']('doctime'))) {\n        var mtime_hours = ('0' + (getHours(input_mtime, utc_offset))).slice(-2)\n        var mtime_minutes = ('0' + (input_mtime.getMinutes())).slice(-2)\n        var mtime_seconds = ('0' + (input_mtime.getSeconds())).slice(-2)\n        if (utc_offset === 0) {\n          utc_offset_format = 'UTC'\n        } else if (utc_offset > 0) {\n          utc_offset_format = ('+0' + (utc_offset * 100)).slice(-5)\n        } else {\n          utc_offset_format = ('-0' + (-utc_offset * 100)).slice(-5)\n        }\n        doctime = mtime_hours + ':' + mtime_minutes + ':' + mtime_seconds + ' ' + utc_offset_format\n        attrs['$[]=']('doctime', doctime)\n      }\n      // docdatetime\n      if ($falsy(attrs['$[]']('docdatetime'))) {\n        attrs['$[]=']('docdatetime', docdate + ' ' + doctime)\n      }\n      return nil\n    \n      }, $Document_fill_datetime_attributes$1.$$arity = 2), nil) && 'fill_datetime_attributes'\n    })($nesting[0], $$($nesting, 'AbstractBlock'), $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/substitutors\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Substitutors');\n\n      var $nesting = [self].concat($parent_nesting), $Substitutors_sub_placeholder$1;\n\n      \n      Opal.def(self, '$sub_placeholder', $Substitutors_sub_placeholder$1 = function $$sub_placeholder(format_string, replacement) {\n        var self = this;\n\n        return format_string.replace('%s', replacement);\n      }, $Substitutors_sub_placeholder$1.$$arity = 2)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/parser\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Parser');\n\n      var $nesting = [self].concat($parent_nesting), $Parser_uniform$ques$1, $Parser_uniform$ques$2;\n\n      if ($truthy(String.prototype.repeat)) {\n        return (Opal.defs(self, '$uniform?', $Parser_uniform$ques$1 = function(str, chr, len) {\n          var self = this;\n\n          return chr.repeat(len) === str;\n        }, $Parser_uniform$ques$1.$$arity = 3), nil) && 'uniform?'\n      } else {\n        return (Opal.defs(self, '$uniform?', $Parser_uniform$ques$2 = function(str, chr, len) {\n          var self = this;\n\n          return Array.apply(null, { length: len }).map(function () { return chr }).join('') === str;\n        }, $Parser_uniform$ques$2.$$arity = 3), nil) && 'uniform?'\n      }\n    })($nesting[0], null, $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext/syntax_highlighter\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$key?', '$registry', '$[]', '$include?', '$include', '$empty?', '$debug', '$logger', '$join', '$keys']);\n  return (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting);\n\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SyntaxHighlighter');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      (function($base, $parent_nesting) {\n        var self = $module($base, 'Factory');\n\n        var $nesting = [self].concat($parent_nesting), $Factory_for$1;\n\n        \n        Opal.def(self, '$for', $Factory_for$1 = function(name) {\n          var self = this;\n\n          if ($truthy(self.$registry()['$key?'](name))) {\n            return self.$registry()['$[]'](name)\n          } else {\n            \n            if ($truthy(self['$include?']($$($nesting, 'Logging')))) {\n            } else {\n              self.$include($$($nesting, 'Logging'))\n            };\n            if ($truthy(self.$registry()['$empty?']())) {\n              self.$logger().$debug(\"no syntax highlighter available, functionality disabled.\")\n            } else {\n              self.$logger().$debug(\"\" + \"syntax highlighter named '\" + (name) + \"' is not available, must be one of: '\" + (self.$registry().$keys().$join(\"', '\")) + \"'.\")\n            };\n            return nil;\n          }\n        }, $Factory_for$1.$$arity = 1)\n      })($nesting[0], $nesting)\n    })($nesting[0], $nesting)\n  })($nesting[0], $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/asciidoctor_ext\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/js/asciidoctor_ext/stylesheet\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/document\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/substitutors\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/parser\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext/syntax_highlighter\");\n  \n// Load specific runtime\nself.$require(\"asciidoctor/js/asciidoctor_ext/browser\");\n;\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/opal_ext/logger\"] = function(Opal) {\n  function $rb_lt(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$chr', '$rjust', '$message_as_string', '$<', '$write', '$call', '$[]']);\n  return (function($base, $super, $parent_nesting) {\n    var self = $klass($base, $super, 'Logger');\n\n    var $nesting = [self].concat($parent_nesting), $Logger_add$2;\n\n    self.$$prototype.level = self.$$prototype.progname = self.$$prototype.pipe = self.$$prototype.formatter = nil;\n    \n    (function($base, $super, $parent_nesting) {\n      var self = $klass($base, $super, 'Formatter');\n\n      var $nesting = [self].concat($parent_nesting), $Formatter_call$1;\n\n      return (Opal.def(self, '$call', $Formatter_call$1 = function $$call(severity, time, progname, msg) {\n        var self = this, time_format = nil;\n\n        \n        time_format = time.getFullYear() + '-' + ('0'+(time.getMonth()+1)).slice(-2) + '-' + ('0'+time.getDate()).slice(-2) + 'T' + ('0'+time.getHours()).slice(-2) + ':' + ('0'+time.getMinutes()).slice(-2) + ':' + ('0'+time.getSeconds()).slice(-2) + '.' + ('00' + new Date().getMilliseconds() * 1000).slice(-6);\n        return \"\" + (severity.$chr()) + \", [\" + (time_format) + \"] \" + (severity.$rjust(5)) + \" -- \" + (progname) + \": \" + (self.$message_as_string(msg));\n      }, $Formatter_call$1.$$arity = 4), nil) && 'call'\n    })($nesting[0], null, $nesting);\n    return (Opal.def(self, '$add', $Logger_add$2 = function $$add(severity, message, progname) {\n      var $iter = $Logger_add$2.$$p, block = $iter || nil, $a, self = this;\n\n      if ($iter) $Logger_add$2.$$p = null;\n      \n      \n      if ($iter) $Logger_add$2.$$p = null;;\n      \n      if (message == null) {\n        message = nil;\n      };\n      \n      if (progname == null) {\n        progname = nil;\n      };\n      if ($truthy($rb_lt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), self.level))) {\n        return true};\n      progname = ($truthy($a = progname) ? $a : self.progname);\n      if ($truthy(message)) {\n      } else if ((block !== nil)) {\n        message = Opal.yieldX(block, [])\n      } else {\n        \n        message = progname;\n        progname = self.progname;\n      };\n      self.pipe.$write(self.formatter.$call(($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : \"ANY\"), new Date(), progname, message));\n      return true;\n    }, $Logger_add$2.$$arity = -2), nil) && 'add';\n  })($nesting[0], null, $nesting)\n};\n\n/* Generated by Opal 0.11.99.dev */\nOpal.modules[\"asciidoctor/js/postscript\"] = function(Opal) {\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;\n\n  Opal.add_stubs(['$require']);\n  \n  self.$require(\"asciidoctor/converter/composite\");\n  self.$require(\"asciidoctor/converter/html5\");\n  self.$require(\"asciidoctor/extensions\");\n  self.$require(\"asciidoctor/js/asciidoctor_ext\");\n  return self.$require(\"asciidoctor/js/opal_ext/logger\");\n};\n\n/* Generated by Opal 0.11.99.dev */\n(function(Opal) {\n  function $rb_minus(lhs, rhs) {\n    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);\n  }\n  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;\n\n  Opal.add_stubs(['$require', '$==', '$tap', '$each', '$constants', '$const_get', '$downcase', '$to_s', '$[]=', '$-', '$upcase', '$[]', '$values', '$new', '$attr_reader', '$instance_variable_set', '$send', '$singleton_class', '$<<', '$define', '$dirname', '$absolute_path', '$__dir__', '$join', '$home', '$pwd', '$to_set', '$chr', '$each_key', '$slice', '$length', '$merge', '$default=', '$drop', '$insert']);\n  \n  self.$require(\"set\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    self.$require(\"asciidoctor/js\")\n  } else {\n    nil\n  };\n  (function($base, $parent_nesting) {\n    var self = $module($base, 'Asciidoctor');\n\n    var $nesting = [self].concat($parent_nesting), $a, $b, $Asciidoctor$7, $Asciidoctor$9, $Asciidoctor$11, $Asciidoctor$13, $writer = nil;\n\n    \n    Opal.const_set($nesting[0], 'RUBY_ENGINE_OPAL', Opal.const_set($nesting[0], 'RUBY_ENGINE', $$$('::', 'RUBY_ENGINE'))['$=='](\"opal\"));\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'SafeMode');\n\n      var $nesting = [self].concat($parent_nesting), $SafeMode$1, $SafeMode_value_for_name$3, $SafeMode_name_for_value$4, $SafeMode_names$5;\n\n      \n      Opal.const_set($nesting[0], 'UNSAFE', 0);\n      Opal.const_set($nesting[0], 'SAFE', 1);\n      Opal.const_set($nesting[0], 'SERVER', 10);\n      Opal.const_set($nesting[0], 'SECURE', 20);\n      self.names_by_value = $send($hash2([], {}), 'tap', [], ($SafeMode$1 = function(accum){var self = $SafeMode$1.$$s || this, $$2;\n\n      \n        \n        if (accum == null) {\n          accum = nil;\n        };\n        return $send(self.$constants(false), 'each', [], ($$2 = function(sym){var self = $$2.$$s || this, $writer = nil;\n\n        \n          \n          if (sym == null) {\n            sym = nil;\n          };\n          $writer = [self.$const_get(sym, false), sym.$to_s().$downcase()];\n          $send(accum, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];}, $$2.$$s = self, $$2.$$arity = 1, $$2));}, $SafeMode$1.$$s = self, $SafeMode$1.$$arity = 1, $SafeMode$1));\n      Opal.defs(self, '$value_for_name', $SafeMode_value_for_name$3 = function $$value_for_name(name) {\n        var self = this;\n\n        return self.$const_get(name.$upcase(), false)\n      }, $SafeMode_value_for_name$3.$$arity = 1);\n      Opal.defs(self, '$name_for_value', $SafeMode_name_for_value$4 = function $$name_for_value(value) {\n        var self = this;\n        if (self.names_by_value == null) self.names_by_value = nil;\n\n        return self.names_by_value['$[]'](value)\n      }, $SafeMode_name_for_value$4.$$arity = 1);\n      Opal.defs(self, '$names', $SafeMode_names$5 = function $$names() {\n        var self = this;\n        if (self.names_by_value == null) self.names_by_value = nil;\n\n        return self.names_by_value.$values()\n      }, $SafeMode_names$5.$$arity = 0);\n    })($nesting[0], $nesting);\n    (function($base, $parent_nesting) {\n      var self = $module($base, 'Compliance');\n\n      var $nesting = [self].concat($parent_nesting);\n\n      \n      self.keys = $$$('::', 'Set').$new();\n      (function(self, $parent_nesting) {\n        var $nesting = [self].concat($parent_nesting), $define$6;\n\n        \n        self.$attr_reader(\"keys\");\n        return (Opal.def(self, '$define', $define$6 = function $$define(key, value) {\n          var self = this;\n          if (self.keys == null) self.keys = nil;\n\n          \n          self.$instance_variable_set(\"\" + \"@\" + (key), value);\n          self.$singleton_class().$send(\"attr_accessor\", key);\n          self.keys['$<<'](key);\n          return nil;\n        }, $define$6.$$arity = 2), nil) && 'define';\n      })(Opal.get_singleton_class(self), $nesting);\n      self.$define(\"block_terminates_paragraph\", true);\n      self.$define(\"strict_verbatim_paragraphs\", true);\n      self.$define(\"underline_style_section_titles\", true);\n      self.$define(\"unwrap_standalone_preamble\", true);\n      self.$define(\"attribute_missing\", \"skip\");\n      self.$define(\"attribute_undefined\", \"drop-line\");\n      self.$define(\"shorthand_property_syntax\", true);\n      self.$define(\"natural_xrefs\", true);\n      self.$define(\"unique_id_start_index\", 2);\n      self.$define(\"markdown_syntax\", true);\n    })($nesting[0], $nesting);\n    if ($truthy((($a = $$($nesting, 'ROOT_DIR', 'skip_raise')) ? 'constant' : nil))) {\n    } else {\n      Opal.const_set($nesting[0], 'ROOT_DIR', $$$('::', 'File').$dirname($$$('::', 'File').$absolute_path(self.$__dir__())))\n    };\n    Opal.const_set($nesting[0], 'LIB_DIR', $$$('::', 'File').$join($$($nesting, 'ROOT_DIR'), \"lib\"));\n    Opal.const_set($nesting[0], 'DATA_DIR', $$$('::', 'File').$join($$($nesting, 'ROOT_DIR'), \"data\"));\n    Opal.const_set($nesting[0], 'USER_HOME', (function() { try {\n      return $$$('::', 'Dir').$home()\n    } catch ($err) {\n      if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {\n        try {\n          \n          return ($truthy($b = $$$('::', 'ENV')['$[]'](\"HOME\")) ? $b : $$$('::', 'Dir').$pwd());\n        } finally { Opal.pop_exception() }\n      } else { throw $err; }\n    }})());\n    Opal.const_set($nesting[0], 'LF', \"\\n\");\n    Opal.const_set($nesting[0], 'NULL', \"\\u0000\");\n    Opal.const_set($nesting[0], 'TAB', \"\\t\");\n    Opal.const_set($nesting[0], 'MAX_INT', 9007199254740991);\n    Opal.const_set($nesting[0], 'UTF_8', $$$($$$('::', 'Encoding'), 'UTF_8'));\n    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_8', [239, 187, 191]);\n    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16LE', [255, 254]);\n    Opal.const_set($nesting[0], 'BOM_BYTES_UTF_16BE', [254, 255]);\n    Opal.const_set($nesting[0], 'FILE_READ_MODE', (function() {if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n      return \"r\"\n    } else {\n      return \"rb:utf-8:utf-8\"\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'URI_READ_MODE', $$($nesting, 'FILE_READ_MODE'));\n    Opal.const_set($nesting[0], 'FILE_WRITE_MODE', (function() {if ($truthy($$($nesting, 'RUBY_ENGINE_OPAL'))) {\n      return \"w\"\n    } else {\n      return \"w:utf-8\"\n    }; return nil; })());\n    Opal.const_set($nesting[0], 'DEFAULT_DOCTYPE', \"article\");\n    Opal.const_set($nesting[0], 'DEFAULT_BACKEND', \"html5\");\n    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_KEYS', [\"\", \"DEFAULT\"].$to_set());\n    Opal.const_set($nesting[0], 'DEFAULT_STYLESHEET_NAME', \"asciidoctor.css\");\n    Opal.const_set($nesting[0], 'BACKEND_ALIASES', $hash2([\"html\", \"docbook\"], {\"html\": \"html5\", \"docbook\": \"docbook5\"}));\n    Opal.const_set($nesting[0], 'DEFAULT_PAGE_WIDTHS', $hash2([\"docbook\"], {\"docbook\": 425}));\n    Opal.const_set($nesting[0], 'DEFAULT_EXTENSIONS', $hash2([\"html\", \"docbook\", \"pdf\", \"epub\", \"manpage\", \"asciidoc\"], {\"html\": \".html\", \"docbook\": \".xml\", \"pdf\": \".pdf\", \"epub\": \".epub\", \"manpage\": \".man\", \"asciidoc\": \".adoc\"}));\n    Opal.const_set($nesting[0], 'ASCIIDOC_EXTENSIONS', $hash2([\".adoc\", \".asciidoc\", \".asc\", \".ad\", \".txt\"], {\".adoc\": true, \".asciidoc\": true, \".asc\": true, \".ad\": true, \".txt\": true}));\n    Opal.const_set($nesting[0], 'SETEXT_SECTION_LEVELS', $hash2([\"=\", \"-\", \"~\", \"^\", \"+\"], {\"=\": 0, \"-\": 1, \"~\": 2, \"^\": 3, \"+\": 4}));\n    Opal.const_set($nesting[0], 'ADMONITION_STYLES', [\"NOTE\", \"TIP\", \"IMPORTANT\", \"WARNING\", \"CAUTION\"].$to_set());\n    Opal.const_set($nesting[0], 'ADMONITION_STYLE_HEADS', $send($$$('::', 'Set').$new(), 'tap', [], ($Asciidoctor$7 = function(accum){var self = $Asciidoctor$7.$$s || this, $$8;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      return $send($$($nesting, 'ADMONITION_STYLES'), 'each', [], ($$8 = function(s){var self = $$8.$$s || this;\n\n      \n        \n        if (s == null) {\n          s = nil;\n        };\n        return accum['$<<'](s.$chr());}, $$8.$$s = self, $$8.$$arity = 1, $$8));}, $Asciidoctor$7.$$s = self, $Asciidoctor$7.$$arity = 1, $Asciidoctor$7)));\n    Opal.const_set($nesting[0], 'PARAGRAPH_STYLES', [\"comment\", \"example\", \"literal\", \"listing\", \"normal\", \"open\", \"pass\", \"quote\", \"sidebar\", \"source\", \"verse\", \"abstract\", \"partintro\"].$to_set());\n    Opal.const_set($nesting[0], 'VERBATIM_STYLES', [\"literal\", \"listing\", \"source\", \"verse\"].$to_set());\n    Opal.const_set($nesting[0], 'DELIMITED_BLOCKS', $hash2([\"--\", \"----\", \"....\", \"====\", \"****\", \"____\", \"++++\", \"|===\", \",===\", \":===\", \"!===\", \"////\", \"```\"], {\"--\": [\"open\", [\"comment\", \"example\", \"literal\", \"listing\", \"pass\", \"quote\", \"sidebar\", \"source\", \"verse\", \"admonition\", \"abstract\", \"partintro\"].$to_set()], \"----\": [\"listing\", [\"literal\", \"source\"].$to_set()], \"....\": [\"literal\", [\"listing\", \"source\"].$to_set()], \"====\": [\"example\", [\"admonition\"].$to_set()], \"****\": [\"sidebar\", $$$('::', 'Set').$new()], \"____\": [\"quote\", [\"verse\"].$to_set()], \"++++\": [\"pass\", [\"stem\", \"latexmath\", \"asciimath\"].$to_set()], \"|===\": [\"table\", $$$('::', 'Set').$new()], \",===\": [\"table\", $$$('::', 'Set').$new()], \":===\": [\"table\", $$$('::', 'Set').$new()], \"!===\": [\"table\", $$$('::', 'Set').$new()], \"////\": [\"comment\", $$$('::', 'Set').$new()], \"```\": [\"fenced_code\", $$$('::', 'Set').$new()]}));\n    Opal.const_set($nesting[0], 'DELIMITED_BLOCK_HEADS', $send($hash2([], {}), 'tap', [], ($Asciidoctor$9 = function(accum){var self = $Asciidoctor$9.$$s || this, $$10;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      return $send($$($nesting, 'DELIMITED_BLOCKS'), 'each_key', [], ($$10 = function(k){var self = $$10.$$s || this, $writer = nil;\n\n      \n        \n        if (k == null) {\n          k = nil;\n        };\n        $writer = [k.$slice(0, 2), true];\n        $send(accum, '[]=', Opal.to_a($writer));\n        return $writer[$rb_minus($writer[\"length\"], 1)];}, $$10.$$s = self, $$10.$$arity = 1, $$10));}, $Asciidoctor$9.$$s = self, $Asciidoctor$9.$$arity = 1, $Asciidoctor$9)));\n    Opal.const_set($nesting[0], 'DELIMITED_BLOCK_TAILS', $send($hash2([], {}), 'tap', [], ($Asciidoctor$11 = function(accum){var self = $Asciidoctor$11.$$s || this, $$12;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      return $send($$($nesting, 'DELIMITED_BLOCKS'), 'each_key', [], ($$12 = function(k){var self = $$12.$$s || this, $writer = nil;\n\n      \n        \n        if (k == null) {\n          k = nil;\n        };\n        if (k.$length()['$=='](4)) {\n          \n          $writer = [k, k['$[]']($rb_minus(k.$length(), 1))];\n          $send(accum, '[]=', Opal.to_a($writer));\n          return $writer[$rb_minus($writer[\"length\"], 1)];\n        } else {\n          return nil\n        };}, $$12.$$s = self, $$12.$$arity = 1, $$12));}, $Asciidoctor$11.$$s = self, $Asciidoctor$11.$$arity = 1, $Asciidoctor$11)));\n    Opal.const_set($nesting[0], 'CAPTION_ATTRIBUTE_NAMES', $hash2([\"example\", \"figure\", \"listing\", \"table\"], {\"example\": \"example-caption\", \"figure\": \"figure-caption\", \"listing\": \"listing-caption\", \"table\": \"table-caption\"}));\n    Opal.const_set($nesting[0], 'LAYOUT_BREAK_CHARS', $hash2([\"'\", \"<\"], {\"'\": \"thematic_break\", \"<\": \"page_break\"}));\n    Opal.const_set($nesting[0], 'MARKDOWN_THEMATIC_BREAK_CHARS', $hash2([\"-\", \"*\", \"_\"], {\"-\": \"thematic_break\", \"*\": \"thematic_break\", \"_\": \"thematic_break\"}));\n    Opal.const_set($nesting[0], 'HYBRID_LAYOUT_BREAK_CHARS', $$($nesting, 'LAYOUT_BREAK_CHARS').$merge($$($nesting, 'MARKDOWN_THEMATIC_BREAK_CHARS')));\n    Opal.const_set($nesting[0], 'NESTABLE_LIST_CONTEXTS', [\"ulist\", \"olist\", \"dlist\"]);\n    Opal.const_set($nesting[0], 'ORDERED_LIST_STYLES', [\"arabic\", \"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"]);\n    Opal.const_set($nesting[0], 'ORDERED_LIST_KEYWORDS', $hash2([\"loweralpha\", \"lowerroman\", \"upperalpha\", \"upperroman\"], {\"loweralpha\": \"a\", \"lowerroman\": \"i\", \"upperalpha\": \"A\", \"upperroman\": \"I\"}));\n    Opal.const_set($nesting[0], 'ATTR_REF_HEAD', \"{\");\n    Opal.const_set($nesting[0], 'LIST_CONTINUATION', \"+\");\n    Opal.const_set($nesting[0], 'HARD_LINE_BREAK', \" +\");\n    Opal.const_set($nesting[0], 'LINE_CONTINUATION', \" \\\\\");\n    Opal.const_set($nesting[0], 'LINE_CONTINUATION_LEGACY', \" +\");\n    Opal.const_set($nesting[0], 'BLOCK_MATH_DELIMITERS', $hash2([\"asciimath\", \"latexmath\"], {\"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\[\", \"\\\\]\"]}));\n    Opal.const_set($nesting[0], 'INLINE_MATH_DELIMITERS', $hash2([\"asciimath\", \"latexmath\"], {\"asciimath\": [\"\\\\$\", \"\\\\$\"], \"latexmath\": [\"\\\\(\", \"\\\\)\"]}));\n    \n    $writer = [\"asciimath\"];\n    $send(Opal.const_set($nesting[0], 'STEM_TYPE_ALIASES', $hash2([\"latexmath\", \"latex\", \"tex\"], {\"latexmath\": \"latexmath\", \"latex\": \"latexmath\", \"tex\": \"latexmath\"})), 'default=', Opal.to_a($writer));\n    $writer[$rb_minus($writer[\"length\"], 1)];;\n    Opal.const_set($nesting[0], 'FONT_AWESOME_VERSION', \"4.7.0\");\n    Opal.const_set($nesting[0], 'HIGHLIGHT_JS_VERSION', \"9.18.3\");\n    Opal.const_set($nesting[0], 'MATHJAX_VERSION', \"2.7.9\");\n    Opal.const_set($nesting[0], 'DEFAULT_ATTRIBUTES', $hash2([\"appendix-caption\", \"appendix-refsig\", \"caution-caption\", \"chapter-refsig\", \"example-caption\", \"figure-caption\", \"important-caption\", \"last-update-label\", \"note-caption\", \"part-refsig\", \"prewrap\", \"sectids\", \"section-refsig\", \"table-caption\", \"tip-caption\", \"toc-placement\", \"toc-title\", \"untitled-label\", \"version-label\", \"warning-caption\"], {\"appendix-caption\": \"Appendix\", \"appendix-refsig\": \"Appendix\", \"caution-caption\": \"Caution\", \"chapter-refsig\": \"Chapter\", \"example-caption\": \"Example\", \"figure-caption\": \"Figure\", \"important-caption\": \"Important\", \"last-update-label\": \"Last updated\", \"note-caption\": \"Note\", \"part-refsig\": \"Part\", \"prewrap\": \"\", \"sectids\": \"\", \"section-refsig\": \"Section\", \"table-caption\": \"Table\", \"tip-caption\": \"Tip\", \"toc-placement\": \"auto\", \"toc-title\": \"Table of Contents\", \"untitled-label\": \"Untitled\", \"version-label\": \"Version\", \"warning-caption\": \"Warning\"}));\n    Opal.const_set($nesting[0], 'FLEXIBLE_ATTRIBUTES', [\"sectnums\"]);\n    Opal.const_set($nesting[0], 'INTRINSIC_ATTRIBUTES', $hash2([\"startsb\", \"endsb\", \"vbar\", \"caret\", \"asterisk\", \"tilde\", \"plus\", \"backslash\", \"backtick\", \"blank\", \"empty\", \"sp\", \"two-colons\", \"two-semicolons\", \"nbsp\", \"deg\", \"zwsp\", \"quot\", \"apos\", \"lsquo\", \"rsquo\", \"ldquo\", \"rdquo\", \"wj\", \"brvbar\", \"pp\", \"cpp\", \"amp\", \"lt\", \"gt\"], {\"startsb\": \"[\", \"endsb\": \"]\", \"vbar\": \"|\", \"caret\": \"^\", \"asterisk\": \"*\", \"tilde\": \"~\", \"plus\": \"&#43;\", \"backslash\": \"\\\\\", \"backtick\": \"`\", \"blank\": \"\", \"empty\": \"\", \"sp\": \" \", \"two-colons\": \"::\", \"two-semicolons\": \";;\", \"nbsp\": \"&#160;\", \"deg\": \"&#176;\", \"zwsp\": \"&#8203;\", \"quot\": \"&#34;\", \"apos\": \"&#39;\", \"lsquo\": \"&#8216;\", \"rsquo\": \"&#8217;\", \"ldquo\": \"&#8220;\", \"rdquo\": \"&#8221;\", \"wj\": \"&#8288;\", \"brvbar\": \"&#166;\", \"pp\": \"&#43;&#43;\", \"cpp\": \"C&#43;&#43;\", \"amp\": \"&\", \"lt\": \"<\", \"gt\": \">\"}));\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    } else {\n      nil\n    };\n    Opal.const_set($nesting[0], 'QUOTE_SUBS', $send($hash2([], {}), 'tap', [], ($Asciidoctor$13 = function(accum){var self = $Asciidoctor$13.$$s || this, normal = nil, compat = nil;\n\n    \n      \n      if (accum == null) {\n        accum = nil;\n      };\n      \n      $writer = [false, (normal = [[\"strong\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?\\\\*\\\\*(\" + ($$($nesting, 'CC_ALL')) + \"+?)\\\\*\\\\*\", 'm')], [\"strong\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\\*(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\*(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"double\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\"`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)`\\\"(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"single\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:`}])(?:\\\\[([^\\\\]]+)\\\\])?'`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)`'(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"monospaced\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?``(\" + ($$($nesting, 'CC_ALL')) + \"+?)``\", 'm')], [\"monospaced\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:\\\"'`}])(?:\\\\[([^\\\\]]+)\\\\])?`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)`(?![\" + ($$($nesting, 'CC_WORD')) + \"\\\"'`])\", 'm')], [\"emphasis\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?__(\" + ($$($nesting, 'CC_ALL')) + \"+?)__\", 'm')], [\"emphasis\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?_(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)_(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"mark\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?##(\" + ($$($nesting, 'CC_ALL')) + \"+?)##\", 'm')], [\"mark\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \"&;:}])(?:\\\\[([^\\\\]]+)\\\\])?#(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)#(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')], [\"superscript\", \"unconstrained\", /\\\\?(?:\\[([^\\]]+)\\])?\\^(\\S+?)\\^/], [\"subscript\", \"unconstrained\", /\\\\?(?:\\[([^\\]]+)\\])?~(\\S+?)~/]])];\n      $send(accum, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [true, (compat = normal.$drop(0))];\n      $send(accum, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [2, [\"double\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?``(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)''(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [3, [\"single\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?`(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)'(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [4, [\"monospaced\", \"unconstrained\", new RegExp(\"\" + \"\\\\\\\\?(?:\\\\[([^\\\\]]+)\\\\])?\\\\+\\\\+(\" + ($$($nesting, 'CC_ALL')) + \"+?)\\\\+\\\\+\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      \n      $writer = [5, [\"monospaced\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?\\\\+(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)\\\\+(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]];\n      $send(compat, '[]=', Opal.to_a($writer));\n      $writer[$rb_minus($writer[\"length\"], 1)];;\n      return compat.$insert(3, [\"emphasis\", \"constrained\", new RegExp(\"\" + \"(^|[^\" + ($$($nesting, 'CC_WORD')) + \";:}])(?:\\\\[([^\\\\]]+)\\\\])?'(\\\\S|\\\\S\" + ($$($nesting, 'CC_ALL')) + \"*?\\\\S)'(?!\" + ($$($nesting, 'CG_WORD')) + \")\", 'm')]);}, $Asciidoctor$13.$$s = self, $Asciidoctor$13.$$arity = 1, $Asciidoctor$13)));\n    Opal.const_set($nesting[0], 'REPLACEMENTS', [[/\\\\?\\(C\\)/, \"&#169;\", \"none\"], [/\\\\?\\(R\\)/, \"&#174;\", \"none\"], [/\\\\?\\(TM\\)/, \"&#8482;\", \"none\"], [/(?: |\\n|^|\\\\)--(?: |\\n|$)/, \"&#8201;&#8212;&#8201;\", \"none\"], [new RegExp(\"\" + \"(\" + ($$($nesting, 'CG_WORD')) + \")\\\\\\\\?--(?=\" + ($$($nesting, 'CG_WORD')) + \")\"), \"&#8212;&#8203;\", \"leading\"], [/\\\\?\\.\\.\\./, \"&#8230;&#8203;\", \"none\"], [/\\\\?`'/, \"&#8217;\", \"none\"], [new RegExp(\"\" + \"(\" + ($$($nesting, 'CG_ALNUM')) + \")\\\\\\\\?'(?=\" + ($$($nesting, 'CG_ALPHA')) + \")\"), \"&#8217;\", \"leading\"], [/\\\\?-&gt;/, \"&#8594;\", \"none\"], [/\\\\?=&gt;/, \"&#8658;\", \"none\"], [/\\\\?&lt;-/, \"&#8592;\", \"none\"], [/\\\\?&lt;=/, \"&#8656;\", \"none\"], [/\\\\?(&)amp;((?:[a-zA-Z][a-zA-Z]+\\d{0,2}|#\\d\\d\\d{0,4}|#x[\\da-fA-F][\\da-fA-F][\\da-fA-F]{0,3});)/, \"\", \"bounding\"]]);\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    } else {\n      nil\n    };\n    if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    } else {\n      nil\n    };\n  })($nesting[0], $nesting);\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/core_ext\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/helpers\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/logging\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/rx\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/substitutors\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/version\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/abstract_node\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/abstract_block\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/attribute_list\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/block\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/callouts\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/converter\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/document\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/inline\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/list\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/parser\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/path_resolver\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/reader\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/section\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/stylesheets\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/table\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/writer\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/load\");\n  self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/convert\");\n  if ($$($nesting, 'RUBY_ENGINE')['$=='](\"opal\")) {\n    \n    self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/syntax_highlighter\");\n    self.$require(\"asciidoctor.rb\"+ '/../' + \"asciidoctor/timings\");\n    return self.$require(\"asciidoctor/js/postscript\");\n  } else {\n    return nil\n  };\n})(Opal);\n\n\n/* global Opal */\n\n/**\n * Convert a JSON to an (Opal) Hash.\n * @private\n */\nvar toHash = function (object) {\n  return object && !object.$$is_hash ? Opal.hash2(Object.keys(object), object) : object\n}\n\n/**\n * Convert an (Opal) Hash to JSON.\n * @private\n */\nvar fromHash = function (hash) {\n  var object = {}\n  if (hash) {\n    var stringMap = hash.$$smap\n    for (var stringMapKey in stringMap) {\n      var stringMapValue = stringMap[stringMapKey]\n      object[stringMapKey] = stringMapValue === Opal.nil ? undefined : stringMapValue\n    }\n    var numericMap = hash.$$map\n    if (numericMap) {\n      var positional = []\n      for (var numericMapKey in numericMap) {\n        var entry = numericMap[numericMapKey]\n        var numericMapValue = entry.value\n        var index = entry.key - 1\n        positional[index] = numericMapValue === Opal.nil ? undefined : numericMapValue\n      }\n      if (positional.length > 0) {\n        object.$positional = positional\n      }\n    }\n  }\n  return object\n}\n\nvar fromHashKeys = function (hash) {\n  var object = {}\n  if (hash) {\n    var data = hash.$$keys\n    for (var key in data) {\n      var value = data[key].value\n      object[key.toString()] = value === Opal.nil ? undefined : value\n    }\n  }\n  return object\n}\n\n/**\n * @private\n */\nvar prepareOptions = function (options) {\n  options = toHash(options)\n  if (options) {\n    var attrs = options['$[]']('attributes')\n    if (attrs && typeof attrs === 'object' && attrs.constructor.name === 'Object') {\n      options = options.$dup()\n      options['$[]=']('attributes', toHash(attrs))\n    }\n  }\n  return options\n}\n\nfunction initializeClass (superClass, className, functions, defaultFunctions, argProxyFunctions) {\n  var scope = Opal.klass(Opal.Object, superClass, className, function () { })\n  var postConstructFunction\n  var initializeFunction\n  var constructorFunction\n  var defaultFunctionsOverridden = {}\n  for (var functionName in functions) {\n    if (Object.prototype.hasOwnProperty.call(functions, functionName)) {\n      (function (functionName) {\n        var userFunction = functions[functionName]\n        if (functionName === 'postConstruct') {\n          postConstructFunction = userFunction\n        } else if (functionName === 'initialize') {\n          initializeFunction = userFunction\n        } else if (functionName === 'constructor') {\n          constructorFunction = userFunction\n        } else {\n          if (defaultFunctions && Object.prototype.hasOwnProperty.call(defaultFunctions, functionName)) {\n            defaultFunctionsOverridden[functionName] = true\n          }\n          Opal.def(scope, '$' + functionName, function () {\n            var args\n            if (argProxyFunctions && Object.prototype.hasOwnProperty.call(argProxyFunctions, functionName)) {\n              args = argProxyFunctions[functionName](arguments)\n            } else {\n              args = arguments\n            }\n            return userFunction.apply(this, args)\n          })\n        }\n      }(functionName))\n    }\n  }\n  var initialize\n  if (typeof constructorFunction === 'function') {\n    initialize = function () {\n      var args = Array.from(arguments)\n      for (var i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      args.unshift(null)\n      var result = new (Function.prototype.bind.apply(constructorFunction, args)) // eslint-disable-line\n      Object.assign(this, result)\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  } else if (typeof initializeFunction === 'function') {\n    initialize = function () {\n      var args = Array.from(arguments)\n      for (var i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      initializeFunction.apply(this, args)\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  } else {\n    initialize = function () {\n      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize))\n      if (typeof postConstructFunction === 'function') {\n        postConstructFunction.bind(this)()\n      }\n    }\n  }\n  Opal.def(scope, '$initialize', initialize)\n  Opal.def(scope, 'super', function (func) {\n    if (typeof func === 'function') {\n      Opal.send(this, Opal.find_super_dispatcher(this, func.name, func))\n    } else {\n      // Bind the initialize function to super();\n      var argumentsList = Array.from(arguments)\n      for (var i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object') {\n          argumentsList[i] = toHash(argumentsList[i])\n        }\n      }\n      Opal.send(this, Opal.find_super_dispatcher(this, 'initialize', initialize), argumentsList)\n    }\n  })\n  if (defaultFunctions) {\n    for (var defaultFunctionName in defaultFunctions) {\n      if (Object.prototype.hasOwnProperty.call(defaultFunctions, defaultFunctionName) && !Object.prototype.hasOwnProperty.call(defaultFunctionsOverridden, defaultFunctionName)) {\n        (function (defaultFunctionName) {\n          var defaultFunction = defaultFunctions[defaultFunctionName]\n          Opal.def(scope, '$' + defaultFunctionName, function () {\n            return defaultFunction.apply(this, arguments)\n          })\n        }(defaultFunctionName))\n      }\n    }\n  }\n  return scope\n}\n\n// Asciidoctor API\n\n/**\n * @namespace\n * @description\n * The main application interface (API) for Asciidoctor.\n * This API provides methods to parse AsciiDoc content and convert it to various output formats using built-in or third-party converters.\n *\n * An AsciiDoc document can be as simple as a single line of content,\n * though it more commonly starts with a document header that declares the document title and document attribute definitions.\n * The document header is then followed by zero or more section titles, optionally nested, to organize the paragraphs, blocks, lists, etc. of the document.\n *\n * By default, the processor converts the AsciiDoc document to HTML 5 using a built-in converter.\n * However, this behavior can be changed by specifying a different backend (e.g., +docbook+).\n * A backend is a keyword for an output format (e.g., DocBook).\n * That keyword, in turn, is used to select a converter, which carries out the request to convert the document to that format.\n *\n * @example\n * asciidoctor.convertFile('document.adoc', { 'safe': 'safe' }) // Convert an AsciiDoc file\n *\n * asciidoctor.convert(\"I'm using *Asciidoctor* version {asciidoctor-version}.\", { 'safe': 'safe' }) // Convert an AsciiDoc string\n *\n * const doc = asciidoctor.loadFile('document.adoc', { 'safe': 'safe' }) // Parse an AsciiDoc file into a document object\n *\n * const doc = asciidoctor.load(\"= Document Title\\n\\nfirst paragraph\\n\\nsecond paragraph\", { 'safe': 'safe' }) // Parse an AsciiDoc string into a document object\n */\nvar Asciidoctor = Opal.Asciidoctor.$$class\n\n/**\n * Get Asciidoctor core version number.\n *\n * @returns {string} - the version number of Asciidoctor core.\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.getCoreVersion = function () {\n  return this.$$const.VERSION\n}\n\n/**\n * Get Asciidoctor.js runtime environment information.\n *\n * @returns {Object} - the runtime environment including the ioModule, the platform, the engine and the framework.\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.getRuntime = function () {\n  return {\n    ioModule: Opal.const_get_qualified('::', 'JAVASCRIPT_IO_MODULE'),\n    platform: Opal.const_get_qualified('::', 'JAVASCRIPT_PLATFORM'),\n    engine: Opal.const_get_qualified('::', 'JAVASCRIPT_ENGINE'),\n    framework: Opal.const_get_qualified('::', 'JAVASCRIPT_FRAMEWORK')\n  }\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.\n *\n * Accepts input as a Buffer or String.\n *\n * @param {string|Buffer} input - AsciiDoc input as String or Buffer\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {string|Document} - the {@link Document} object if the converted String is written to a file,\n * otherwise the converted String\n * @example\n * var input = '= Hello, AsciiDoc!\\n' +\n *   'Guillaume Grossetie <ggrossetie@example.com>\\n\\n' +\n *   'An introduction to http://asciidoc.org[AsciiDoc].\\n\\n' +\n *   '== First Section\\n\\n' +\n *   '* item 1\\n' +\n *   '* item 2\\n';\n *\n * var html = asciidoctor.convert(input);\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.convert = function (input, options) {\n  if (typeof input === 'object' && input.constructor.name === 'Buffer') {\n    input = input.toString('utf8')\n  }\n  var result = this.$convert(input, prepareOptions(options))\n  return result === Opal.nil ? '' : result\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document} and convert it to the specified backend format.\n *\n * @param {string} filename - source filename\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {string|Document} - the {@link Document} object if the converted String is written to a file,\n * otherwise the converted String\n * @example\n * var html = asciidoctor.convertFile('./document.adoc');\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.convertFile = function (filename, options) {\n  return this.$convert_file(filename, prepareOptions(options))\n}\n\n/**\n * Parse the AsciiDoc source input into an {@link Document}\n *\n * Accepts input as a Buffer or String.\n *\n * @param {string|Buffer} input - AsciiDoc input as String or Buffer\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {Document} - the {@link Document} object\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.load = function (input, options) {\n  if (typeof input === 'object' && input.constructor.name === 'Buffer') {\n    input = input.toString('utf8')\n  }\n  return this.$load(input, prepareOptions(options))\n}\n\n/**\n * Parse the contents of the AsciiDoc source file into an {@link Document}\n *\n * @param {string} filename - source filename\n * @param {Object} options - a JSON of options to control processing (default: {})\n * @returns {Document} - the {@link Document} object\n * @memberof Asciidoctor\n */\nAsciidoctor.prototype.loadFile = function (filename, options) {\n  return this.$load_file(filename, prepareOptions(options))\n}\n\n// AbstractBlock API\n\n/**\n * @namespace\n * @extends AbstractNode\n */\nvar AbstractBlock = Opal.Asciidoctor.AbstractBlock\n\n/**\n * Append a block to this block's list of child blocks.\n * @param {AbstractBlock} block - the block to append\n * @returns {AbstractBlock} - the parent block to which this block was appended.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.append = function (block) {\n  this.$append(block)\n  return this\n}\n\n/**\n * Get the String title of this Block with title substitions applied\n *\n * The following substitutions are applied to block and section titles:\n *\n * <code>specialcharacters</code>, <code>quotes</code>, <code>replacements</code>, <code>macros</code>, <code>attributes</code> and <code>post_replacements</code>\n *\n * @returns {string} - the converted String title for this Block, or undefined if the title is not set.\n * @example\n * block.title // \"Foo 3^ # {two-colons} Bar(1)\"\n * block.getTitle(); // \"Foo 3^ # :: Bar(1)\"\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getTitle = function () {\n  var title = this.$title()\n  return title === Opal.nil ? undefined : title\n}\n\n/**\n * Set the String block title.\n *\n * @param {string} title - The block title\n * @returns {string} - the new String title assigned to this Block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setTitle = function (title) {\n  title = typeof title === 'undefined' ? Opal.nil : title\n  return this['$title='](title)\n}\n\n/**\n * Generate and assign caption to block if not already assigned.\n *\n * If the block has a title and a caption prefix is available for this block,\n * then build a caption from this information, assign it a number and store it\n * to the caption attribute on the block.\n *\n * If a caption has already been assigned to this block, do nothing.\n *\n * The parts of a complete caption are: <prefix> <number>. <title>\n * This partial caption represents the part the precedes the title.\n *\n * @param {string} value - the String caption to assign to this block or nil to use document attribute.\n * @param {string} captionContext - the String context to use when resolving caption-related attributes.\n * If not provided, the name of the context for this block is used. Only certain contexts allow the caption to be looked up.\n *\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.assignCaption = function (value, captionContext) {\n  value = typeof value === 'undefined' ? Opal.nil : value\n  captionContext = typeof captionContext === 'undefined' ? null : captionContext\n  this.$assign_caption(value, captionContext)\n}\n\n/**\n * Convenience method that returns the interpreted title of the Block\n * with the caption prepended.\n * Concatenates the value of this Block's caption instance variable and the\n * return value of this Block's title method. No space is added between the\n * two values. If the Block does not have a caption, the interpreted title is\n * returned.\n *\n * @returns {string} - the converted String title prefixed with the caption, or just the converted String title if no caption is set\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getCaptionedTitle = function () {\n  return this.$captioned_title()\n}\n\n/**\n * Get the style (block type qualifier) for this block.\n *\n * @returns {string} - the style for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getStyle = function () {\n  var style = this.style\n  return style === Opal.nil ? undefined : style\n}\n\n/**\n * Set the style for this block.\n *\n * @param {string} style - Style\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setStyle = function (style) {\n  this.style = style\n}\n\n/**\n * Get the location in the AsciiDoc source where this block begins.\n *\n * @returns {string} - the style for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getSourceLocation = function () {\n  var sourceLocation = this.source_location\n  if (sourceLocation === Opal.nil) {\n    return undefined\n  }\n  sourceLocation.getFile = function () {\n    var file = this.file\n    return file === Opal.nil ? undefined : file\n  }\n  sourceLocation.getDirectory = function () {\n    var dir = this.dir\n    return dir === Opal.nil ? undefined : dir\n  }\n  sourceLocation.getPath = function () {\n    var path = this.path\n    return path === Opal.nil ? undefined : path\n  }\n  sourceLocation.getLineNumber = function () {\n    var lineno = this.lineno\n    return lineno === Opal.nil ? undefined : lineno\n  }\n  return sourceLocation\n}\n\n/**\n * Get the caption for this block.\n *\n * @returns {string} - the caption for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getCaption = function () {\n  var caption = this.$caption()\n  return caption === Opal.nil ? undefined : caption\n}\n\n/**\n * Set the caption for this block.\n *\n * @param {string} caption - Caption\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setCaption = function (caption) {\n  this.caption = typeof caption === 'undefined' ? Opal.nil : caption\n}\n\n/**\n * Get the level of this section or the section level in which this block resides.\n *\n * @returns {number} - the level (Integer) of this section\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getLevel = function () {\n  var level = this.level\n  return level === Opal.nil ? undefined : level\n}\n\n/**\n * Get the substitution keywords to be applied to the contents of this block.\n *\n * @returns {Array<string>} - the list of {string} substitution keywords associated with this block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getSubstitutions = function () {\n  return this.subs\n}\n\n/**\n * Check whether a given substitution keyword is present in the substitutions for this block.\n *\n * @returns {boolean} - whether the substitution is present on this block.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasSubstitution = function (substitution) {\n  return this['$sub?'](substitution)\n}\n\n/**\n * Remove the specified substitution keyword from the list of substitutions for this block.\n *\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.removeSubstitution = function (substitution) {\n  this.$remove_sub(substitution)\n}\n\n/**\n * Checks if the {@link AbstractBlock} contains any child blocks.\n *\n * @returns {boolean} - whether the {@link AbstractBlock} has child blocks.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasBlocks = function () {\n  return this.blocks.length > 0\n}\n\n/**\n * Get the list of {@link AbstractBlock} sub-blocks for this block.\n *\n * @returns {Array<AbstractBlock>} - a list of {@link AbstractBlock} sub-blocks\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getBlocks = function () {\n  return this.blocks\n}\n\n/**\n * Get the converted result of the child blocks by converting the children appropriate to content model that this block supports.\n *\n * @returns {string} - the converted result of the child blocks\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getContent = function () {\n  return this.$content()\n}\n\n/**\n * Get the converted content for this block.\n * If the block has child blocks, the content method should cause them to be converted\n * and returned as content that can be included in the parent block's template.\n *\n * @returns {string} - the converted String content for this block\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.convert = function () {\n  return this.$convert()\n}\n\n/**\n * Query for all descendant block-level nodes in the document tree\n * that match the specified selector (context, style, id, and/or role).\n * If a function block is given, it's used as an additional filter.\n * If no selector or function block is supplied, all block-level nodes in the tree are returned.\n * @param {Object} [selector]\n * @param {function} [block]\n * @example\n * doc.findBy({'context': 'section'});\n * // => { level: 0, title: \"Hello, AsciiDoc!\", blocks: 0 }\n * // => { level: 1, title: \"First Section\", blocks: 1 }\n *\n * doc.findBy({'context': 'section'}, function (section) { return section.getLevel() === 1; });\n * // => { level: 1, title: \"First Section\", blocks: 1 }\n *\n * doc.findBy({'context': 'listing', 'style': 'source'});\n * // => { context: :listing, content_model: :verbatim, style: \"source\", lines: 1 }\n *\n * @returns {Array<AbstractBlock>} - a list of block-level nodes that match the filter or an empty list if no matches are found\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.findBy = function (selector, block) {\n  if (typeof block === 'undefined' && typeof selector === 'function') {\n    return Opal.send(this, 'find_by', null, selector)\n  } else if (typeof block === 'function') {\n    return Opal.send(this, 'find_by', [toHash(selector)], block)\n  } else {\n    return this.$find_by(toHash(selector))\n  }\n}\n\n/**\n * Get the source line number where this block started.\n * @returns {number} - the source line number where this block started\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getLineNumber = function () {\n  var lineno = this.$lineno()\n  return lineno === Opal.nil ? undefined : lineno\n}\n\n/**\n * Check whether this block has any child Section objects.\n * Only applies to Document and Section instances.\n * @returns {boolean} - true if this block has child Section objects, otherwise false\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasSections = function () {\n  // REMIND: call directly the underlying method \"$sections?\"\n  // once https://github.com/asciidoctor/asciidoctor/pull/3591 is merged and a new version is released.\n  // return this['$sections?']()\n  return this.next_section_index !== Opal.nil && this.next_section_index > 0\n}\n\n/**\n * Get the Array of child Section objects.\n * Only applies to Document and Section instances.\n * @memberof AbstractBlock\n * @returns {Array<Section>} - an {Array} of {@link Section} objects\n */\nAbstractBlock.prototype.getSections = function () {\n  return this.$sections()\n}\n\n/**\n * Get the numeral of this block (if section, relative to parent, otherwise absolute).\n * Only assigned to section if automatic section numbering is enabled.\n * Only assigned to formal block (block with title) if corresponding caption attribute is present.\n * If the section is an appendix, the numeral is a letter (starting with A).\n * @returns {string} - the numeral\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.getNumeral = function () {\n  return this.$numeral()\n}\n\n/**\n * Set the numeral of this block.\n * @param {string} value - The numeral value\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.setNumeral = function (value) {\n  this['$numeral='](value)\n}\n\n/**\n * A convenience method that checks whether the title of this block is defined.\n *\n * @returns {boolean} - a {boolean} indicating whether this block has a title.\n * @memberof AbstractBlock\n */\nAbstractBlock.prototype.hasTitle = function () {\n  return this['$title?']()\n}\n\n// Section API\n\n/**\n * @description\n * Methods for managing sections of AsciiDoc content in a document.\n *\n * @example\n * <pre>\n *   section = asciidoctor.Section.create()\n *   section.setTitle('Section 1')\n *   section.setId('sect1')\n *   section.getBlocks().length // 0\n *   section.getId() // \"sect1\"\n *   section.append(newBlock)\n *   section.getBlocks().length // 1\n * </pre>\n * @namespace\n * @extends AbstractBlock\n */\nvar Section = Opal.Asciidoctor.Section\n\n/**\n * Create a {Section} object.\n * @param {AbstractBlock} [parent] - The parent AbstractBlock. If set, must be a Document or Section object (default: undefined)\n * @param {number} [level] - The Integer level of this section (default: 1 more than parent level or 1 if parent not defined)\n * @param {boolean} [numbered] - A Boolean indicating whether numbering is enabled for this Section (default: false)\n * @param {Object} [opts] - An optional JSON of options (default: {})\n * @returns {Section} - a new {Section} object\n * @memberof Section\n */\nSection.create = function (parent, level, numbered, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$new(parent, level, numbered, toHash(opts))\n}\n\n/**\n * Set the level of this section or the section level in which this block resides.\n * @param {number} level - Level (Integer)\n * @memberof AbstractBlock\n */\nSection.prototype.setLevel = function (level) {\n  this.level = level\n}\n\n/**\n * Get the 0-based index order of this section within the parent block.\n * @returns {number}\n * @memberof Section\n */\nSection.prototype.getIndex = function () {\n  return this.index\n}\n\n/**\n * Set the 0-based index order of this section within the parent block.\n * @param {string} index - The index order of this section\n * @memberof Section\n */\nSection.prototype.setIndex = function (index) {\n  this.index = index\n}\n\n/**\n * Get the section name of this section.\n * @returns {string|undefined}\n * @memberof Section\n */\nSection.prototype.getSectionName = function () {\n  var sectname = this.sectname\n  return sectname === Opal.nil ? undefined : sectname\n}\n\n/**\n * Set the section name of this section.\n * @param {string} value - The section name\n * @memberof Section\n */\nSection.prototype.setSectionName = function (value) {\n  this.sectname = value\n}\n\n/**\n * Get the flag to indicate whether this is a special section or a child of one.\n * @returns {boolean}\n * @memberof Section\n */\nSection.prototype.isSpecial = function () {\n  return this.special\n}\n\n/**\n * Set the flag to indicate whether this is a special section or a child of one.\n * @param {boolean} value - A flag to indicated if this is a special section\n * @memberof Section\n */\nSection.prototype.setSpecial = function (value) {\n  this.special = value\n}\n\n/**\n * Get the state of the numbered attribute at this section (need to preserve for creating TOC).\n * @returns {boolean}\n * @memberof Section\n */\nSection.prototype.isNumbered = function () {\n  return this.numbered\n}\n\n/**\n * Get the caption for this section (only relevant for appendices).\n * @returns {string}\n * @memberof Section\n */\nSection.prototype.getCaption = function () {\n  var value = this.caption\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Get the name of the Section (title)\n * @returns {string}\n * @see {@link AbstractBlock#getTitle}\n * @memberof Section\n */\nSection.prototype.getName = function () {\n  return this.getTitle()\n}\n\n/**\n * @description\n * Methods for managing AsciiDoc content blocks.\n *\n * @example\n * block = asciidoctor.Block.create(parent, 'paragraph', {source: '_This_ is a <test>'})\n * block.getContent()\n * // \"<em>This</em> is a &lt;test&gt;\"\n *\n * @namespace\n * @extends AbstractBlock\n */\nvar Block = Opal.Asciidoctor.Block\n\n/**\n * Create a {Block} object.\n * @param {AbstractBlock} parent - The parent {AbstractBlock} with a compound content model to which this {Block} will be appended.\n * @param {string} context - The context name for the type of content (e.g., \"paragraph\").\n * @param {Object} [opts] - a JSON of options to customize block initialization: (default: {})\n * @param {string} opts.content_model - indicates whether blocks can be nested in this {Block} (\"compound\"),\n * otherwise how the lines should be processed (\"simple\", \"verbatim\", \"raw\", \"empty\"). (default: \"simple\")\n * @param {Object} opts.attributes - a JSON of attributes (key/value pairs) to assign to this {Block}. (default: {})\n * @param {string|Array<string>} opts.source - a String or {Array} of raw source for this {Block}. (default: undefined)\n *\n * IMPORTANT: If you don't specify the `subs` option, you must explicitly call the `commit_subs` method to resolve and assign the substitutions\n * to this block (which are resolved from the `subs` attribute, if specified, or the default substitutions based on this block's context).\n * If you want to use the default subs for a block, pass the option `subs: \"default\"`.\n * You can override the default subs using the `default_subs` option.\n *\n * @returns {Block} - a new {Block} object\n * @memberof Block\n */\nBlock.create = function (parent, context, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$new(parent, context, toHash(opts))\n}\n\n/**\n * Get the source of this block.\n * @returns {string} - the String source of this block.\n * @memberof Block\n */\nBlock.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * Get the source lines of this block.\n * @returns {Array<string>} - the String {Array} of source lines for this block.\n * @memberof Block\n */\nBlock.prototype.getSourceLines = function () {\n  return this.lines\n}\n\n// AbstractNode API\n\n/**\n * @namespace\n * @description\n * An abstract base class that provides state and methods for managing a node of AsciiDoc content.\n * The state and methods on this class are common to all content segments in an AsciiDoc document.\n */\nvar AbstractNode = Opal.Asciidoctor.AbstractNode\n\n/**\n * Apply the specified substitutions to the text.\n * If no substitutions are specified, the following substitutions are applied:\n * <code>specialcharacters</code>, <code>quotes</code>, <code>attributes</code>, <code>replacements</code>, <code>macros</code>, and <code>post_replacements</code>.\n *\n * @param {string|Array<string>} text - The String or String Array of text to process; must not be undefined.\n * @param {Array<string>} [subs] - The substitutions to perform; must be an Array or undefined.\n * @returns {string|Array<string>} - a String or String Array to match the type of the text argument with substitutions applied.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.applySubstitutions = function (text, subs) {\n  return this.$apply_subs(text, subs)\n}\n\n/**\n * Resolve the list of comma-delimited subs against the possible options.\n *\n * @param {string} subs - The comma-delimited String of substitution names or aliases.\n * @param {string} [type] - A String representing the context for which the subs are being resolved (default: 'block').\n * @param {Array<string>} [defaults] - An Array of substitutions to start with when computing incremental substitutions (default: undefined).\n * @param {string} [subject] - The String to use in log messages to communicate the subject for which subs are being resolved (default: undefined)\n *\n * @returns {Array<string>} - An Array of Strings representing the substitution operation or nothing if no subs are found.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.resolveSubstitutions = function (subs, type, defaults, subject) {\n  if (typeof type === 'undefined') {\n    type = 'block'\n  }\n  if (typeof defaults === 'undefined') {\n    defaults = Opal.nil\n  }\n  if (typeof subject === 'undefined') {\n    subject = Opal.nil\n  }\n  return this.$resolve_subs(subs, type, defaults, subject)\n}\n\n/**\n * Call {@link AbstractNode#resolveSubstitutions} for the 'block' type.\n *\n * @see {@link AbstractNode#resolveSubstitutions}\n */\nAbstractNode.prototype.resolveBlockSubstitutions = function (subs, defaults, subject) {\n  return this.resolveSubstitutions(subs, 'block', defaults, subject)\n}\n\n/**\n * Call {@link AbstractNode#resolveSubstitutions} for the 'inline' type with the subject set as passthrough macro.\n *\n * @see {@link AbstractNode#resolveSubstitutions}\n */\nAbstractNode.prototype.resolvePassSubstitutions = function (subs) {\n  return this.resolveSubstitutions(subs, 'inline', undefined, 'passthrough macro')\n}\n\n/**\n * @returns {string} - the String name of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getNodeName = function () {\n  return this.node_name\n}\n\n/**\n * @returns {Object} - the JSON of attributes for this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getAttributes = function () {\n  return fromHash(this.attributes)\n}\n\n/**\n * Get the value of the specified attribute.\n * If the attribute is not found on this node, fallback_name is set, and this node is not the Document node, get the value of the specified attribute from the Document node.\n *\n * Look for the specified attribute in the attributes on this node and return the value of the attribute, if found.\n * Otherwise, if fallback_name is set (default: same as name) and this node is not the Document node, look for that attribute on the Document node and return its value, if found.\n * Otherwise, return the default value (default: undefined).\n *\n * @param {string} name - The String of the attribute to resolve.\n * @param {*} [defaultValue] - The {Object} value to return if the attribute is not found (default: undefined).\n * @param {string} [fallbackName] - The String of the attribute to resolve on the Document if the attribute is not found on this node (default: same as name).\n *\n * @returns {*} - the {Object} value (typically a String) of the attribute or defaultValue if the attribute is not found.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getAttribute = function (name, defaultValue, fallbackName) {\n  var value = this.$attr(name, defaultValue, fallbackName)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Check whether the specified attribute is present on this node.\n *\n * @param {string} name - The String of the attribute to resolve.\n * @returns {boolean} - true if the attribute is present, otherwise false\n * @memberof AbstractNode\n */\nAbstractNode.prototype.hasAttribute = function (name) {\n  return name in this.attributes.$$smap\n}\n\n/**\n * Check if the specified attribute is defined using the same logic as {AbstractNode#getAttribute}, optionally performing acomparison with the expected value if specified.\n *\n * Look for the specified attribute in the attributes on this node.\n * If not found, fallback_name is specified (default: same as name), and this node is not the Document node, look for that attribute on the Document node.\n * In either case, if the attribute is found, and the comparison value is truthy, return whether the two values match.\n * Otherwise, return whether the attribute was found.\n *\n * @param {string} name - The String name of the attribute to resolve.\n * @param {*} [expectedValue] - The expected Object value of the attribute (default: undefined).\n * @param {string} fallbackName - The String of the attribute to resolve on the Document if the attribute is not found on this node (default: same as name).\n *\n * @returns {boolean} - a Boolean indicating whether the attribute exists and, if a truthy comparison value is specified, whether the value of the attribute matches the comparison value.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isAttribute = function (name, expectedValue, fallbackName) {\n  var result = this['$attr?'](name, expectedValue, fallbackName)\n  return result === Opal.nil ? false : result\n}\n\n/**\n * Assign the value to the attribute name for the current node.\n *\n * @param {string} name - The String attribute name to assign\n * @param {*} value - The Object value to assign to the attribute (default: '')\n * @param {boolean} overwrite - A Boolean indicating whether to assign the attribute if currently present in the attributes JSON (default: true)\n *\n * @returns {boolean} - a Boolean indicating whether the assignment was performed\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setAttribute = function (name, value, overwrite) {\n  if (typeof overwrite === 'undefined') overwrite = true\n  return this.$set_attr(name, value, overwrite)\n}\n\n/**\n * Remove the attribute from the current node.\n * @param {string} name - The String attribute name to remove\n * @returns {string} - the previous {string} value, or undefined if the attribute was not present.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.removeAttribute = function (name) {\n  var value = this.$remove_attr(name)\n  return value === Opal.nil ? undefined : value\n}\n\n/**\n * Get the {@link Document} to which this node belongs.\n *\n * @returns {Document} - the {@link Document} object to which this node belongs.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getDocument = function () {\n  return this.document\n}\n\n/**\n * Get the {@link AbstractNode} to which this node is attached.\n *\n * @memberof AbstractNode\n * @returns {AbstractNode} - the {@link AbstractNode} object to which this node is attached,\n * or undefined if this node has no parent.\n */\nAbstractNode.prototype.getParent = function () {\n  var parent = this.parent\n  return parent === Opal.nil ? undefined : parent\n}\n\n/**\n * @returns {boolean} - true if this {AbstractNode} is an instance of {Inline}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isInline = function () {\n  return this['$inline?']()\n}\n\n/**\n * @returns {boolean} - true if this {AbstractNode} is an instance of {Block}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isBlock = function () {\n  return this['$block?']()\n}\n\n/**\n * Checks if the role attribute is set on this node and, if an expected value is given, whether the space-separated role matches that value.\n *\n * @param {string} expectedValue - The expected String value of the role (optional, default: undefined)\n *\n * @returns {boolean} - a Boolean indicating whether the role attribute is set on this node and, if an expected value is given, whether the space-separated role matches that value.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isRole = function (expectedValue) {\n  return this['$role?'](expectedValue)\n}\n\n/**\n * Retrieves the space-separated String role for this node.\n *\n * @returns {string} - the role as a space-separated String.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getRole = function () {\n  return this.$role()\n}\n\n/**\n * Checks if the specified role is present in the list of roles for this node.\n *\n * @param {string} name - The String name of the role to find.\n *\n * @returns {boolean} - a Boolean indicating whether this node has the specified role.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.hasRole = function (name) {\n  return this['$has_role?'](name)\n}\n\n/**\n * Retrieves the String role names for this node as an Array.\n *\n * @returns {Array<string>} - the role names as a String {Array}, which is empty if the role attribute is absent on this node.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getRoles = function () {\n  return this.$roles()\n}\n\n/**\n * Adds the given role directly to this node.\n *\n * @param {string} name - The name of the role to add\n *\n * @returns {boolean} - a Boolean indicating whether the role was added.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.addRole = function (name) {\n  return this.$add_role(name)\n}\n\n/**\n * Public: Removes the given role directly from this node.\n *\n * @param {string} name - The name of the role to remove\n *\n * @returns {boolean} - a Boolean indicating whether the role was removed.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.removeRole = function (name) {\n  return this.$remove_role(name)\n}\n\n/**\n * A convenience method that checks if the reftext attribute is defined.\n * @returns {boolean} - A Boolean indicating whether the reftext attribute is defined\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isReftext = function () {\n  return this['$reftext?']()\n}\n\n/**\n * A convenience method that returns the value of the reftext attribute with substitutions applied.\n * @returns {string|undefined} - the value of the reftext attribute with substitutions applied.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getReftext = function () {\n  var reftext = this.$reftext()\n  return reftext === Opal.nil ? undefined : reftext\n}\n\n/**\n * @returns {string} - Get the context name for this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getContext = function () {\n  var context = this.context\n  // Automatically convert Opal pseudo-symbol to String\n  return typeof context === 'string' ? context : context.toString()\n}\n\n/**\n * @returns {string} - the String id of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getId = function () {\n  var id = this.id\n  return id === Opal.nil ? undefined : id\n}\n\n/**\n * @param {string} id - the String id of this node\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setId = function (id) {\n  this.id = id\n}\n\n/**\n * A convenience method to check if the specified option attribute is enabled on the current node.\n * Check if the option is enabled. This method simply checks to see if the <name>-option attribute is defined on the current node.\n *\n * @param {string} name - the String name of the option\n *\n * @return {boolean} - a Boolean indicating whether the option has been specified\n * @memberof AbstractNode\n */\nAbstractNode.prototype.isOption = function (name) {\n  return this['$option?'](name)\n}\n\n/**\n * Set the specified option on this node.\n * This method sets the specified option on this node by setting the <name>-option attribute.\n *\n * @param {string} name - the String name of the option\n *\n * @memberof AbstractNode\n */\nAbstractNode.prototype.setOption = function (name) {\n  return this.$set_option(name)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getIconUri = function (name) {\n  return this.$icon_uri(name)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getMediaUri = function (target, assetDirKey) {\n  return this.$media_uri(target, assetDirKey)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getImageUri = function (targetImage, assetDirKey) {\n  return this.$image_uri(targetImage, assetDirKey)\n}\n\n/**\n * Get the {Converter} instance being used to convert the current {Document}.\n * @returns {Object}\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getConverter = function () {\n  return this.$converter()\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.readContents = function (target, options) {\n  return this.$read_contents(target, toHash(options))\n}\n\n/**\n * Read the contents of the file at the specified path.\n * This method assumes that the path is safe to read.\n * It checks that the file is readable before attempting to read it.\n *\n * @param path - the {string} path from which to read the contents\n * @param {Object} options - a JSON {Object} of options to control processing (default: {})\n * @param {boolean} options.warn_on_failure - a {boolean} that controls whether a warning is issued if the file cannot be read (default: false)\n * @param {boolean} options.normalize - a {boolean} that controls whether the lines are normalized and coerced to UTF-8 (default: false)\n *\n * @returns {string} - the String content of the file at the specified path, or undefined if the file does not exist.\n * @memberof AbstractNode\n */\nAbstractNode.prototype.readAsset = function (path, options) {\n  var result = this.$read_asset(path, toHash(options))\n  return result === Opal.nil ? undefined : result\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeWebPath = function (target, start, preserveTargetUri) {\n  return this.$normalize_web_path(target, start, preserveTargetUri)\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeSystemPath = function (target, start, jail, options) {\n  return this.$normalize_system_path(target, start, jail, toHash(options))\n}\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.normalizeAssetPath = function (assetRef, assetName, autoCorrect) {\n  return this.$normalize_asset_path(assetRef, assetName, autoCorrect)\n}\n\n// Document API\n\n/**\n * The {@link Document} class represents a parsed AsciiDoc document.\n *\n * Document is the root node of a parsed AsciiDoc document.<br/>\n * It provides an abstract syntax tree (AST) that represents the structure of the AsciiDoc document\n * from which the Document object was parsed.\n *\n * Although the constructor can be used to create an empty document object,\n * more commonly, you'll load the document object from AsciiDoc source\n * using the primary API methods on {@link Asciidoctor}.\n * When using one of these APIs, you almost always want to set the safe mode to 'safe' (or 'unsafe')\n * to enable all of Asciidoctor's features.\n *\n * <pre>\n *   var doc = Asciidoctor.load('= Hello, AsciiDoc!', { 'safe': 'safe' })\n *   // => Asciidoctor::Document { doctype: \"article\", doctitle: \"Hello, AsciiDoc!\", blocks: 0 }\n * </pre>\n *\n * Instances of this class can be used to extract information from the document or alter its structure.\n * As such, the Document object is most often used in extensions and by integrations.\n *\n * The most basic usage of the Document object is to retrieve the document's title.\n *\n * <pre>\n *  var source = '= Document Title'\n *  var doc = asciidoctor.load(source, { 'safe': 'safe' })\n *  console.log(doc.getTitle()) // 'Document Title'\n * </pre>\n *\n * You can also use the Document object to access document attributes defined in the header, such as the author and doctype.\n * @namespace\n * @extends AbstractBlock\n */\nvar Document = Opal.Asciidoctor.Document\n\n/**\n * Returns a JSON {Object} of references captured by the processor.\n *\n * @returns {Object} - a JSON {Object} of {AbstractNode} in the document.\n * @memberof Document\n */\nDocument.prototype.getRefs = function () {\n  return fromHash(this.catalog.$$smap.refs)\n}\n\n/**\n * Returns an {Array} of {Document/ImageReference} captured by the processor.\n *\n * @returns {Array<ImageReference>} - an {Array} of {Document/ImageReference} in the document.\n * Will return an empty array if the option \"catalog_assets: true\" was not defined on the processor.\n * @memberof Document\n */\nDocument.prototype.getImages = function () {\n  return this.catalog.$$smap.images\n}\n\n/**\n * Returns an {Array} of links captured by the processor.\n *\n * @returns {Array<string>} - an {Array} of links in the document.\n * Will return an empty array if:\n * - the function was called before the document was converted\n * - the option \"catalog_assets: true\" was not defined on the processor\n * @memberof Document\n */\nDocument.prototype.getLinks = function () {\n  return this.catalog.$$smap.links\n}\n\n/**\n * @returns {boolean} - true if the document has footnotes otherwise false\n * @memberof Document\n */\nDocument.prototype.hasFootnotes = function () {\n  return this['$footnotes?']()\n}\n\n/**\n * Returns an {Array} of {Document/Footnote} captured by the processor.\n *\n * @returns {Array<Footnote>} - an {Array} of {Document/Footnote} in the document.\n * Will return an empty array if the function was called before the document was converted.\n * @memberof Document\n */\nDocument.prototype.getFootnotes = function () {\n  return this.$footnotes()\n}\n\n/**\n * Returns the level-0 {Section} (i.e. the document title).\n * Only stores the title, not the header attributes.\n *\n * @returns {string} - the level-0 {Section}.\n * @memberof Document\n */\nDocument.prototype.getHeader = function () {\n  return this.header\n}\n\n/**\n * @memberof Document\n */\nDocument.prototype.setAttribute = function (name, value) {\n  return this.$set_attribute(name, value)\n}\n\n/**\n\n * @memberof Document\n */\nDocument.prototype.removeAttribute = function (name) {\n  this.attributes.$delete(name)\n  this.attribute_overrides.$delete(name)\n}\n\n/**\n * Convert the AsciiDoc document using the templates loaded by the Converter.\n * If a \"template_dir\" is not specified, or a template is missing, the converter will fall back to using the appropriate built-in template.\n *\n * @param {Object} [options] - a JSON of options to control processing (default: {})\n *\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.convert = function (options) {\n  var result = this.$convert(toHash(options))\n  return result === Opal.nil ? '' : result\n}\n\n/**\n * Write the output to the specified file.\n *\n * If the converter responds to \"write\", delegate the work of writing the file to that method.\n * Otherwise, write the output the specified file.\n *\n * @param {string} output\n * @param {string} target\n *\n * @memberof Document\n */\nDocument.prototype.write = function (output, target) {\n  return this.$write(output, target)\n}\n\n/**\n * @returns {string} - the full name of the author as a String\n * @memberof Document\n */\nDocument.prototype.getAuthor = function () {\n  return this.$author()\n}\n\n/**\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * @returns {Array<string>}\n * @memberof Document\n */\nDocument.prototype.getSourceLines = function () {\n  return this.$source_lines()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isNested = function () {\n  return this['$nested?']()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isEmbedded = function () {\n  return this['$embedded?']()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasExtensions = function () {\n  return this['$extensions?']()\n}\n\n/**\n * Get the value of the doctype attribute for this document.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getDoctype = function () {\n  return this.doctype\n}\n\n/**\n * Get the value of the backend attribute for this document.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getBackend = function () {\n  return this.backend\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.isBasebackend = function (base) {\n  return this['$basebackend?'](base)\n}\n\n/**\n * Get the title explicitly defined in the document attributes.\n * @returns {string}\n * @see {@link AbstractNode#getAttributes}\n * @memberof Document\n */\nDocument.prototype.getTitle = function () {\n  var title = this.$title()\n  return title === Opal.nil ? undefined : title\n}\n\n/**\n * Set the title on the document header\n *\n * Set the title of the document header to the specified value.\n * If the header does not exist, it is first created.\n *\n * @param {string} title - the String title to assign as the title of the document header\n *\n * @returns {string} - the new String title assigned to the document header\n * @memberof Document\n */\nDocument.prototype.setTitle = function (title) {\n  return this['$title='](title)\n}\n\n/**\n * @returns {Document/Title} - a {@link Document/Title}\n * @memberof Document\n */\nDocument.prototype.getDocumentTitle = function (options) {\n  var doctitle = this.$doctitle(toHash(options))\n  return doctitle === Opal.nil ? undefined : doctitle\n}\n\n/**\n * @see {@link Document#getDocumentTitle}\n * @memberof Document\n */\nDocument.prototype.getDoctitle = Document.prototype.getDocumentTitle\n\n/**\n * Get the document catalog JSON object.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCatalog = function () {\n  return fromHash(this.catalog)\n}\n\n/**\n *\n * @returns {Object}\n * @see Document#getCatalog\n * @memberof Document\n */\nDocument.prototype.getReferences = Document.prototype.getCatalog\n\n/**\n * Get the document revision date from document header (document attribute <code>revdate</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionDate = function () {\n  return this.getAttribute('revdate')\n}\n\n/**\n * @see Document#getRevisionDate\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevdate = function () {\n  return this.getRevisionDate()\n}\n\n/**\n * Get the document revision number from document header (document attribute <code>revnumber</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionNumber = function () {\n  return this.getAttribute('revnumber')\n}\n\n/**\n * Get the document revision remark from document header (document attribute <code>revremark</code>).\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getRevisionRemark = function () {\n  return this.getAttribute('revremark')\n}\n\n/**\n *  Assign a value to the specified attribute in the document header.\n *\n *  The assignment will be visible when the header attributes are restored,\n *  typically between processor phases (e.g., between parse and convert).\n *\n * @param {string} name - The {string} attribute name to assign\n * @param {Object} value - The {Object} value to assign to the attribute (default: '')\n * @param {boolean} overwrite - A {boolean} indicating whether to assign the attribute\n * if already present in the attributes Hash (default: true)\n *\n * @returns {boolean} - true if the assignment was performed otherwise false\n * @memberof Document\n */\nDocument.prototype.setHeaderAttribute = function (name, value, overwrite) {\n  if (typeof overwrite === 'undefined') overwrite = true\n  if (typeof value === 'undefined') value = ''\n  return this.$set_header_attribute(name, value, overwrite)\n}\n\n/**\n * Convenience method to retrieve the authors of this document as an {Array} of {Document/Author} objects.\n *\n * This method is backed by the author-related attributes on the document.\n *\n * @returns {Array<Author>} - an {Array} of {Document/Author} objects.\n * @memberof Document\n */\nDocument.prototype.getAuthors = function () {\n  return this.$authors()\n}\n\n// Document.Footnote API\n\n/**\n * @namespace\n * @module Document/Footnote\n */\nvar Footnote = Document.Footnote\n\n/**\n * @returns {number} - the footnote's index\n * @memberof Document/Footnote\n */\nFootnote.prototype.getIndex = function () {\n  var index = this.$$data.index\n  return index === Opal.nil ? undefined : index\n}\n\n/**\n * @returns {number} - the footnote's id\n * @memberof Document/Footnote\n */\nFootnote.prototype.getId = function () {\n  var id = this.$$data.id\n  return id === Opal.nil ? undefined : id\n}\n\n/**\n * @returns {string} - the footnote's text\n * @memberof Document/Footnote\n */\nFootnote.prototype.getText = function () {\n  var text = this.$$data.text\n  return text === Opal.nil ? undefined : text\n}\n\n// Document.ImageReference API\n\n/**\n * @class\n * @module Document/ImageReference\n */\nvar ImageReference = Document.ImageReference\n\n/**\n * @returns {string} - the image's target\n * @memberof Document/ImageReference\n */\nImageReference.prototype.getTarget = function () {\n  return this.$$data.target\n}\n\n/**\n * @returns {string} - the image's directory (imagesdir attribute)\n * @memberof Document/ImageReference\n */\nImageReference.prototype.getImagesDirectory = function () {\n  var value = this.$$data.imagesdir\n  return value === Opal.nil ? undefined : value\n}\n\n// Document.Author API\n\n/**\n * The Author class represents information about an author extracted from document attributes.\n * @namespace\n * @module Document/Author\n */\nvar Author = Document.Author\n\n/**\n * @returns {string} - the author's full name\n * @memberof Document/Author\n */\nAuthor.prototype.getName = function () {\n  var name = this.$$data.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @returns {string} - the author's first name\n * @memberof Document/Author\n */\nAuthor.prototype.getFirstName = function () {\n  var firstName = this.$$data.firstname\n  return firstName === Opal.nil ? undefined : firstName\n}\n\n/**\n * @returns {string} - the author's middle name (or undefined if the author has no middle name)\n * @memberof Document/Author\n */\nAuthor.prototype.getMiddleName = function () {\n  var middleName = this.$$data.middlename\n  return middleName === Opal.nil ? undefined : middleName\n}\n\n/**\n * @returns {string} - the author's last name\n * @memberof Document/Author\n */\nAuthor.prototype.getLastName = function () {\n  var lastName = this.$$data.lastname\n  return lastName === Opal.nil ? undefined : lastName\n}\n\n/**\n * @returns {string} - the author's initials (by default based on the author's name)\n * @memberof Document/Author\n */\nAuthor.prototype.getInitials = function () {\n  var initials = this.$$data.initials\n  return initials === Opal.nil ? undefined : initials\n}\n\n/**\n * @returns {string} - the author's email\n * @memberof Document/Author\n */\nAuthor.prototype.getEmail = function () {\n  var email = this.$$data.email\n  return email === Opal.nil ? undefined : email\n}\n\n// private constructor\nDocument.RevisionInfo = function (date, number, remark) {\n  this.date = date\n  this.number = number\n  this.remark = remark\n}\n\n/**\n * @class\n * @namespace\n * @module Document/RevisionInfo\n */\nvar RevisionInfo = Document.RevisionInfo\n\n/**\n * Get the document revision date from document header (document attribute <code>revdate</code>).\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getDate = function () {\n  return this.date\n}\n\n/**\n * Get the document revision number from document header (document attribute <code>revnumber</code>).\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getNumber = function () {\n  return this.number\n}\n\n/**\n * Get the document revision remark from document header (document attribute <code>revremark</code>).\n * A short summary of changes in this document revision.\n * @returns {string}\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.getRemark = function () {\n  return this.remark\n}\n\n/**\n * @returns {boolean} - true if the revision info is empty (ie. not defined), otherwise false\n * @memberof Document/RevisionInfo\n */\nRevisionInfo.prototype.isEmpty = function () {\n  return this.date === undefined && this.number === undefined && this.remark === undefined\n}\n\n// SafeMode API\n\n/**\n * @namespace\n */\nvar SafeMode = Opal.Asciidoctor.SafeMode\n\n/**\n * @param {string} name - the name of the security level\n * @returns {number} - the integer value of the corresponding security level\n */\nSafeMode.getValueForName = function (name) {\n  return this.$value_for_name(name)\n}\n\n/**\n * @param {number} value - the integer value of the security level\n * @returns {string} - the name of the corresponding security level\n */\nSafeMode.getNameForValue = function (value) {\n  var name = this.$name_for_value(value)\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @returns {Array<string>} - the String {Array} of security levels\n */\nSafeMode.getNames = function () {\n  return this.$names()\n}\n\n// Callouts API\n\n/**\n * Maintains a catalog of callouts and their associations.\n * @namespace\n */\nvar Callouts = Opal.Asciidoctor.Callouts\n\n/**\n * Create a new Callouts.\n * @returns {Callouts} - a new Callouts\n * @memberof Callouts\n */\nCallouts.create = function () {\n  return this.$new()\n}\n\n/**\n * Register a new callout for the given list item ordinal.\n * Generates a unique id for this callout based on the index of the next callout list in the document and the index of this callout since the end of the last callout list.\n *\n * @param {number} ordinal - the Integer ordinal (1-based) of the list item to which this callout is to be associated\n * @returns {string} - The unique String id of this callout\n * @example\n *  callouts = asciidoctor.Callouts.create()\n *  callouts.register(1)\n *  // => \"CO1-1\"\n *  callouts.nextList()\n *  callouts.register(2)\n *  // => \"CO2-1\"\n * @memberof Callouts\n */\n\nCallouts.prototype.register = function (ordinal) {\n  return this.$register(ordinal)\n}\n/**\n * Get the next callout index in the document.\n *\n * Reads the next callout index in the document and advances the pointer.\n * This method is used during conversion to retrieve the unique id of the callout that was generated during parsing.\n *\n * @returns {string} - The unique String id of the next callout in the document\n * @memberof Callouts\n */\nCallouts.prototype.readNextId = function () {\n  return this.$read_next_id()\n}\n\n/**\n * et a space-separated list of callout ids for the specified list item.\n * @param {number} ordinal - the Integer ordinal (1-based) of the list item for which to retrieve the callouts\n * @returns {string} - a space-separated String of callout ids associated with the specified list item\n * @memberof Callouts\n */\nCallouts.prototype.getCalloutIds = function (ordinal) {\n  return this.$callout_ids(ordinal)\n}\n\n/**\n * @memberof Callouts\n */\nCallouts.prototype.getLists = function () {\n  var lists = this.lists\n  if (lists && lists.length > 0) {\n    for (var i = 0; i < lists.length; i++) {\n      var list = lists[i]\n      if (list && list.length > 0) {\n        for (var j = 0; j < list.length; j++) {\n          if (typeof list[j] === 'object' && '$$smap' in list[j]) {\n            list[j] = fromHash(list[j])\n          }\n        }\n      }\n    }\n  }\n  return lists\n}\n\n/**\n * @memberof Callouts\n */\nCallouts.prototype.getListIndex = function () {\n  return this.list_index\n}\n\n/**\n * The current list for which callouts are being collected.\n * @returns {Array} - The Array of callouts at the position of the list index pointer\n * @memberof Callouts\n */\nCallouts.prototype.getCurrentList = function () {\n  var currentList = this.$current_list()\n  if (currentList && currentList.length > 0) {\n    for (var i = 0; i < currentList.length; i++) {\n      if (typeof currentList[i] === 'object' && '$$smap' in currentList[i]) {\n        currentList[i] = fromHash(currentList[i])\n      }\n    }\n  }\n  return currentList\n}\n\n/**\n * Advance to the next callout list in the document.\n * @memberof Callouts\n */\nCallouts.prototype.nextList = function () {\n  return this.$nextList()\n}\n\n/**\n * Rewind the list index pointer, intended to be used when switching from the parsing to conversion phase.\n * @memberof Callouts\n */\nCallouts.prototype.rewind = function () {\n  return this.$rewind()\n}\n\n/**\n * @returns {Document/RevisionInfo} - a {@link Document/RevisionInfo}\n * @memberof Document\n */\nDocument.prototype.getRevisionInfo = function () {\n  return new Document.RevisionInfo(this.getRevisionDate(), this.getRevisionNumber(), this.getRevisionRemark())\n}\n\n/**\n * @returns {boolean} - true if the document contains revision info, otherwise false\n * @memberof Document\n */\nDocument.prototype.hasRevisionInfo = function () {\n  var revisionInfo = this.getRevisionInfo()\n  return !revisionInfo.isEmpty()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNotitle = function () {\n  return this.$notitle()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNoheader = function () {\n  return this.$noheader()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getNofooter = function () {\n  return this.$nofooter()\n}\n\n/**\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasHeader = function () {\n  return this['$header?']()\n}\n\n/**\n * Replay attribute assignments at the block level.\n *\n * <i>This method belongs to an internal API that deals with how attributes are managed by the processor.</i>\n * If you understand why this group of methods are necessary, and what they do, feel free to use them.\n * <strong>However, keep in mind they are subject to change at any time.</strong>\n *\n * @param {Object} blockAttributes - A JSON of attributes\n * @memberof Document\n */\nDocument.prototype.playbackAttributes = function (blockAttributes) {\n  blockAttributes = toHash(blockAttributes)\n  if (blockAttributes) {\n    var attrEntries = blockAttributes['$[]']('attribute_entries')\n    if (attrEntries && Array.isArray(attrEntries)) {\n      var result = []\n      for (var i = 0; i < attrEntries.length; i++) {\n        var attrEntryObject = attrEntries[i]\n        if (attrEntryObject && typeof attrEntryObject === 'object' && attrEntryObject.constructor.name === 'Object') {\n          attrEntryObject.$name = function () {\n            return this.name\n          }\n          attrEntryObject.$value = function () {\n            return this.value\n          }\n          attrEntryObject.$negate = function () {\n            return this.negate\n          }\n        }\n        result.push(attrEntryObject)\n      }\n      blockAttributes['$[]=']('attribute_entries', result)\n    }\n  }\n  this.$playback_attributes(blockAttributes)\n}\n\n/**\n * Delete the specified attribute from the document if the name is not locked.\n * If the attribute is locked, false is returned.\n * Otherwise, the attribute is deleted.\n *\n * @param {string} name - the String attribute name\n *\n * @returns {boolean} - true if the attribute was deleted, false if it was not because it's locked\n * @memberof Document\n */\nDocument.prototype.deleteAttribute = function (name) {\n  return this.$delete_attribute(name)\n}\n\n/**\n * Determine if the attribute has been locked by being assigned in document options.\n *\n * @param {string} key - The attribute key to check\n *\n * @returns {boolean} - true if the attribute is locked, false otherwise\n * @memberof Document\n */\nDocument.prototype.isAttributeLocked = function (key) {\n  return this['$attribute_locked?'](key)\n}\n\n/**\n * Restore the attributes to the previously saved state (attributes in header).\n *\n * @memberof Document\n */\nDocument.prototype.restoreAttributes = function () {\n  return this.$restore_attributes()\n}\n\n/**\n * Parse the AsciiDoc source stored in the {Reader} into an abstract syntax tree.\n *\n * If the data parameter is not nil, create a new {PreprocessorReader} and assigned it to the reader property of this object.\n * Otherwise, continue with the reader that was created when the {Document} was instantiated.\n * Pass the reader to {Parser.parse} to parse the source data into an abstract syntax tree.\n *\n * If parsing has already been performed, this method returns without performing any processing.\n *\n * @param {string|Array<string>} [data] - The optional replacement AsciiDoc source data as a String or String Array. (default: undefined)\n *\n * @returns {Document} - this {Document}\n * @memberof Document\n */\nDocument.prototype.parse = function (data) {\n  return this.$parse(data)\n}\n\n/**\n * @memberof Document\n */\nDocument.prototype.getDocinfo = function (docinfoLocation, suffix) {\n  return this.$docinfo(docinfoLocation, suffix)\n}\n\n/**\n * @param {string} [docinfoLocation] - A {string} for checking docinfo extensions at a given location (head or footer) (default: head)\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.hasDocinfoProcessors = function (docinfoLocation) {\n  return this['$docinfo_processors?'](docinfoLocation)\n}\n\n/**\n * Increment the specified counter and store it in the block's attributes.\n *\n * @param {string} counterName - the String name of the counter attribute\n * @param {Block} block - the {Block} on which to save the counter\n *\n * @returns {number} - the next number in the sequence for the specified counter\n * @memberof Document\n */\nDocument.prototype.incrementAndStoreCounter = function (counterName, block) {\n  return this.$increment_and_store_counter(counterName, block)\n}\n\n/**\n * @deprecated Please use {Document#incrementAndStoreCounter} method.\n * @memberof Document\n */\nDocument.prototype.counterIncrement = Document.prototype.incrementAndStoreCounter\n\n/**\n * Get the named counter and take the next number in the sequence.\n *\n * @param {string} name - the String name of the counter\n * @param {string|number} seed - the initial value as a String or Integer\n *\n * @returns {number} the next number in the sequence for the specified counter\n * @memberof Document\n */\nDocument.prototype.counter = function (name, seed) {\n  return this.$counter(name, seed)\n}\n\n/**\n * A read-only integer value indicating the level of security that should be enforced while processing this document.\n * The value must be set in the Document constructor using the \"safe\" option.\n *\n * A value of 0 (UNSAFE) disables any of the security features enforced by Asciidoctor.\n *\n * A value of 1 (SAFE) closely parallels safe mode in AsciiDoc.\n * In particular, it prevents access to files which reside outside of the parent directory of the source file and disables any macro other than the include directive.\n *\n * A value of 10 (SERVER) disallows the document from setting attributes that would affect the conversion of the document,\n * in addition to all the security features of SafeMode.SAFE.\n * For instance, this level forbids changing the backend or source-highlighter using an attribute defined in the source document header.\n * This is the most fundamental level of security for server deployments (hence the name).\n *\n * A value of 20 (SECURE) disallows the document from attempting to read files from the file system and including the contents of them into the document,\n * in addition to all the security features of SafeMode.SECURE.\n * In particular, it disallows use of the include::[] directive and the embedding of binary content (data uri), stylesheets and JavaScripts referenced by the document.\n * (Asciidoctor and trusted extensions may still be allowed to embed trusted content into the document).\n *\n * Since Asciidoctor is aiming for wide adoption, 20 (SECURE) is the default value and is recommended for server deployments.\n *\n * A value of 100 (PARANOID) is planned to disallow the use of passthrough macros and prevents the document from setting any known attributes,\n * in addition to all the security features of SafeMode.SECURE.\n * Please note that this level is not currently implemented (and therefore not enforced)!\n *\n * @returns {number} - An integer value indicating the level of security\n * @memberof Document\n */\nDocument.prototype.getSafe = function () {\n  return this.safe\n}\n\n/**\n * Get the Boolean AsciiDoc compatibility mode.\n * Enabling this attribute activates the following syntax changes:\n *\n *   * single quotes as constrained emphasis formatting marks\n *   * single backticks parsed as inline literal, formatted as monospace\n *   * single plus parsed as constrained, monospaced inline formatting\n *   * double plus parsed as constrained, monospaced inline formatting\n *\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getCompatMode = function () {\n  return this.compat_mode\n}\n\n/**\n * Get the Boolean flag that indicates whether source map information should be tracked by the parser.\n * @returns {boolean}\n * @memberof Document\n */\nDocument.prototype.getSourcemap = function () {\n  var sourcemap = this.sourcemap\n  return sourcemap === Opal.nil ? false : sourcemap\n}\n\n/**\n * Set the Boolean flag that indicates whether source map information should be tracked by the parser.\n * @param {boolean} value\n * @memberof Document\n */\nDocument.prototype.setSourcemap = function (value) {\n  this.sourcemap = value\n}\n\n/**\n * Get the JSON of document counters.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCounters = function () {\n  return fromHash(this.counters)\n}\n\n/**\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getCallouts = function () {\n  return this.$callouts()\n}\n\n/**\n * Get the String base directory for converting this document.\n *\n * Defaults to directory of the source file.\n * If the source is a string, defaults to the current directory.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getBaseDir = function () {\n  return this.base_dir\n}\n\n/**\n * Get the JSON of resolved options used to initialize this {Document}.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getOptions = function () {\n  return fromHash(this.options)\n}\n\n/**\n * Get the outfilesuffix defined at the end of the header.\n * @returns {string}\n * @memberof Document\n */\nDocument.prototype.getOutfilesuffix = function () {\n  return this.outfilesuffix\n}\n\n/**\n * Get a reference to the parent Document of this nested document.\n * @returns {Document|undefined}\n * @memberof Document\n */\nDocument.prototype.getParentDocument = function () {\n  var parentDocument = this.parent_document\n  return parentDocument === Opal.nil ? undefined : parentDocument\n}\n\n/**\n * Get the {Reader} associated with this document.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getReader = function () {\n  return this.reader\n}\n\n/**\n * Get the {Converter} instance being used to convert the current {Document}.\n * @returns {Object}\n * @memberof Document\n */\nDocument.prototype.getConverter = function () {\n  return this.converter\n}\n\n/**\n * Get the activated {Extensions.Registry} associated with this document.\n * @returns {Extensions/Registry}\n * @memberof Document\n */\nDocument.prototype.getExtensions = function () {\n  var extensions = this.extensions\n  return extensions === Opal.nil ? undefined : extensions\n}\n\n// Document.Title API\n\n/**\n * A partitioned title (i.e., title & subtitle).\n * @namespace\n * @module Document/Title\n */\nvar Title = Document.Title\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getMain = function () {\n  return this.main\n}\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getCombined = function () {\n  return this.combined\n}\n\n/**\n * @returns {string}\n * @memberof Document/Title\n */\nTitle.prototype.getSubtitle = function () {\n  var subtitle = this.subtitle\n  return subtitle === Opal.nil ? undefined : subtitle\n}\n\n/**\n * @returns {boolean}\n * @memberof Document/Title\n */\nTitle.prototype.isSanitized = function () {\n  var sanitized = this['$sanitized?']()\n  return sanitized === Opal.nil ? false : sanitized\n}\n\n/**\n * @returns {boolean}\n * @memberof Document/Title\n */\nTitle.prototype.hasSubtitle = function () {\n  return this['$subtitle?']()\n}\n\n// Inline API\n\n/**\n * Methods for managing inline elements in AsciiDoc block.\n * @namespace\n * @extends AbstractNode\n */\nvar Inline = Opal.Asciidoctor.Inline\n\n/**\n * Create a new Inline element.\n * @param {AbstractBlock} parent\n * @param {string} context\n * @param {string|undefined} text\n * @param {Object|undefined} opts\n * @returns {Inline} - a new Inline element\n * @memberof Inline\n */\nInline.create = function (parent, context, text, opts) {\n  return this.$new(parent, context, text, toHash(opts))\n}\n\n/**\n * Get the converted content for this inline node.\n *\n * @returns {string} - the converted String content for this inline node\n * @memberof Inline\n */\nInline.prototype.convert = function () {\n  return this.$convert()\n}\n\n/**\n * Get the converted String text of this Inline node, if applicable.\n *\n * @returns {string|undefined} - the converted String text for this Inline node, or undefined if not applicable for this node.\n * @memberof Inline\n */\nInline.prototype.getText = function () {\n  var text = this.$text()\n  return text === Opal.nil ? undefined : text\n}\n\n/**\n * Get the String sub-type (aka qualifier) of this Inline node.\n *\n * This value is used to distinguish different variations of the same node\n * category, such as different types of anchors.\n *\n * @returns {string} - the string sub-type of this Inline node.\n * @memberof Inline\n */\nInline.prototype.getType = function () {\n  return this.$type()\n}\n\n/**\n * Get the primary String target of this Inline node.\n *\n * @returns {string|undefined} - the string target of this Inline node.\n * @memberof Inline\n */\nInline.prototype.getTarget = function () {\n  var target = this.$target()\n  return target === Opal.nil ? undefined : target\n}\n\n// List API\n\n/**\n * Methods for managing AsciiDoc lists (ordered, unordered and description lists).\n * @namespace\n * @extends AbstractBlock\n */\nvar List = Opal.Asciidoctor.List\n\n/**\n * Checks if the {@link List} contains any child {@link ListItem}.\n *\n * @memberof List\n * @returns {boolean} - whether the {@link List} has child {@link ListItem}.\n */\nList.prototype.hasItems = function () {\n  return this['$items?']()\n}\n\n/**\n * Get the Array of {@link ListItem} nodes for this {@link List}.\n *\n * @returns {Array<ListItem>} - an Array of {@link ListItem} nodes.\n * @memberof List\n */\nList.prototype.getItems = function () {\n  return this.blocks\n}\n\n// ListItem API\n\n/**\n * Methods for managing items for AsciiDoc olists, ulist, and dlists.\n *\n * In a description list (dlist), each item is a tuple that consists of a 2-item Array of ListItem terms and a ListItem description (i.e., [[term, term, ...], desc].\n * If a description is not set, then the second entry in the tuple is nil.\n * @namespace\n * @extends AbstractBlock\n */\nvar ListItem = Opal.Asciidoctor.ListItem\n\n/**\n * Get the converted String text of this {@link ListItem} node.\n *\n * @returns {string} - the converted String text for this {@link ListItem} node.\n * @memberof ListItem\n */\nListItem.prototype.getText = function () {\n  return this.$text()\n}\n\n/**\n * Set the String source text of this {@link ListItem} node.\n *\n * @returns {string} - the new String text assigned to this {@link ListItem}\n * @memberof ListItem\n */\nListItem.prototype.setText = function (text) {\n  return this['$text='](text)\n}\n\n/**\n * A convenience method that checks whether the text of this {@link ListItem} is not blank (i.e. not undefined or empty string).\n *\n * @returns {boolean} - whether the text is not blank\n * @memberof ListItem\n */\nListItem.prototype.hasText = function () {\n  return this['$text?']()\n}\n\n/**\n * Get the {string} used to mark this {@link ListItem}.\n *\n * @returns {string}\n * @memberof ListItem\n */\nListItem.prototype.getMarker = function () {\n  return this.marker\n}\n\n/**\n * Set the {string} used to mark this {@link ListItem}.\n *\n * @param {string} marker - the {string} used to mark this {@link ListItem}\n * @memberof ListItem\n */\nListItem.prototype.setMarker = function (marker) {\n  this.marker = marker\n}\n\n/**\n * Get the {@link List} to which this {@link ListItem} is attached.\n *\n * @returns {List} - the {@link List} object to which this {@link ListItem} is attached,\n * or undefined if this node has no parent.\n * @memberof ListItem\n */\nListItem.prototype.getList = function () {\n  return this.$list()\n}\n\n/**\n * @see {@link ListItem#getList}\n * @memberof ListItem\n */\nListItem.prototype.getParent = ListItem.prototype.getList\n\n// Reader API\n\n/** @namespace */\nvar Reader = Opal.Asciidoctor.Reader\n\n/**\n * Push source onto the front of the reader and switch the context based on the file, document-relative path and line information given.\n *\n * This method is typically used in an IncludeProcessor to add source read from the target specified.\n *\n * @param {string} data\n * @param {string|undefined} file\n * @param {string|undefined} path\n * @param {number} lineno - The line number\n * @param {Object} attributes - a JSON of attributes\n * @returns {Reader} - this {Reader} object.\n * @memberof Reader\n */\nReader.prototype.pushInclude = function (data, file, path, lineno, attributes) {\n  return this.$push_include(data, file, path, lineno, toHash(attributes))\n}\n\n/**\n * Get the current location of the reader's cursor, which encapsulates the file, dir, path, and lineno of the file being read.\n *\n * @returns {Cursor}\n * @memberof Reader\n */\nReader.prototype.getCursor = function () {\n  return this.$cursor()\n}\n\n/**\n * Get the remaining unprocessed lines, without consuming them, as an {Array} of {string}.\n *\n * Lines will not be consumed from the Reader (ie. you will be able to read these lines again).\n *\n * @returns {Array<string>} - the remaining unprocessed lines as an {Array} of {string}.\n * @memberof Reader\n */\nReader.prototype.getLines = function () {\n  return this.$lines()\n}\n\n/**\n * Get the remaining unprocessed lines, without consuming them, as a {string}.\n *\n * Lines will not be consumed from the Reader (ie. you will be able to read these lines again).\n *\n * @returns {string} - the remaining unprocessed lines as a {string} (joined by linefeed characters).\n * @memberof Reader\n */\nReader.prototype.getString = function () {\n  return this.$string()\n}\n\n/**\n * Check whether there are any lines left to read.\n * If a previous call to this method resulted in a value of false, immediately returned the cached value.\n * Otherwise, delegate to peekLine to determine if there is a next line available.\n *\n * @returns {boolean} - true if there are more lines, false if there are not.\n * @memberof Reader\n */\nReader.prototype.hasMoreLines = function () {\n  return this['$has_more_lines?']()\n}\n\n/**\n * Check whether this reader is empty (contains no lines).\n *\n * @returns {boolean} - true if there are no more lines to peek, otherwise false.\n * @memberof Reader\n */\nReader.prototype.isEmpty = function () {\n  return this['$empty?']()\n}\n\n/**\n * Peek at the next line.\n * Processes the line if not already marked as processed, but does not consume it (ie. you will be able to read this line again).\n *\n * This method will probe the reader for more lines.\n * If there is a next line that has not previously been visited, the line is passed to the Reader#processLine method to be initialized.\n * This call gives sub-classes the opportunity to do preprocessing.\n * If the return value of the Reader#processLine is undefined, the data is assumed to be changed and Reader#peekLine is invoked again to perform further processing.\n *\n * If hasMoreLines is called immediately before peekLine, the direct flag is implicitly true (since the line is flagged as visited).\n *\n * @param {boolean} direct - A {boolean} flag to bypasses the check for more lines and immediately returns the first element of the internal lines {Array}. (default: false)\n * @returns {string} - the next line as a {string} if there are lines remaining.\n * @memberof Reader\n */\nReader.prototype.peekLine = function (direct) {\n  direct = direct || false\n  var line = this.$peek_line(direct)\n  return line === Opal.nil ? undefined : line\n}\n\n/**\n * Consume, preprocess, and return the next line.\n *\n * Line will be consumed from the Reader (ie. you won't be able to read this line again).\n *\n * @returns {string} - the next line as a {string} if data is present.\n * @memberof Reader\n */\nReader.prototype.readLine = function () {\n  var line = this.$read_line()\n  return line === Opal.nil ? undefined : line\n}\n\n/**\n * Consume, preprocess, and return the remaining lines.\n *\n * This method calls Reader#readLine repeatedly until all lines are consumed and returns the lines as an {Array} of {string}.\n * This method differs from Reader#getLines in that it processes each line in turn, hence triggering any preprocessors implemented in sub-classes.\n *\n * Lines will be consumed from the Reader (ie. you won't be able to read these lines again).\n *\n * @returns {Array<string>} - the lines read as an {Array} of {string}.\n * @memberof Reader\n */\nReader.prototype.readLines = function () {\n  return this.$read_lines()\n}\n\n/**\n * Consume, preprocess, and return the remaining lines joined as a {string}.\n *\n * Delegates to Reader#readLines, then joins the result.\n *\n * Lines will be consumed from the Reader (ie. you won't be able to read these lines again).\n *\n * @returns {string} - the lines read joined as a {string}\n * @memberof Reader\n */\nReader.prototype.read = function () {\n  return this.$read()\n}\n\n/**\n * Advance to the next line by discarding the line at the front of the stack.\n *\n * @returns {boolean} - a Boolean indicating whether there was a line to discard.\n * @memberof Reader\n */\nReader.prototype.advance = function () {\n  return this.$advance()\n}\n\n// Cursor API\n\n/** @namespace */\nvar Cursor = Opal.Asciidoctor.Reader.Cursor\n\n/**\n * Get the file associated to the cursor.\n * @returns {string|undefined}\n * @memberof Cursor\n */\nCursor.prototype.getFile = function () {\n  var file = this.file\n  return file === Opal.nil ? undefined : file\n}\n\n/**\n * Get the directory associated to the cursor.\n * @returns {string|undefined} - the directory associated to the cursor\n * @memberof Cursor\n */\nCursor.prototype.getDirectory = function () {\n  var dir = this.dir\n  return dir === Opal.nil ? undefined : dir\n}\n\n/**\n * Get the path associated to the cursor.\n * @returns {string|undefined} - the path associated to the cursor (or '<stdin>')\n * @memberof Cursor\n */\nCursor.prototype.getPath = function () {\n  var path = this.path\n  return path === Opal.nil ? undefined : path\n}\n\n/**\n * Get the line number of the cursor.\n * @returns {number|undefined} - the line number of the cursor\n * @memberof Cursor\n */\nCursor.prototype.getLineNumber = function () {\n  return this.lineno\n}\n\n// Logger API (available in Asciidoctor 1.5.7+)\n\nfunction initializeLoggerFormatterClass (className, functions) {\n  var superclass = Opal.const_get_qualified(Opal.Logger, 'Formatter')\n  return initializeClass(superclass, className, functions, {}, {\n    call: function (args) {\n      for (var i = 0; i < args.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof args[i] === 'object' && '$$smap' in args[i]) {\n          args[i] = fromHash(args[i])\n        }\n      }\n      return args\n    }\n  })\n}\n\nfunction initializeLoggerClass (className, functions) {\n  var superClass = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger')\n  return initializeClass(superClass, className, functions, {}, {\n    add: function (args) {\n      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {\n        var message = args[2]\n        var messageObject = fromHash(message)\n        messageObject.getText = function () {\n          return this.text\n        }\n        messageObject.getSourceLocation = function () {\n          return this.source_location\n        }\n        messageObject.$inspect = function () {\n          var sourceLocation = this.getSourceLocation()\n          if (sourceLocation) {\n            return sourceLocation.getPath() + ': line ' + sourceLocation.getLineNumber() + ': ' + this.getText()\n          } else {\n            return this.getText()\n          }\n        }\n        args[2] = messageObject\n      }\n      if (args.length >= 1) {\n        args[1] = args[1] === Opal.nil ? undefined : args[1]\n      }\n      return args\n    }\n  })\n}\n\n/**\n * @namespace\n */\nvar LoggerManager = Opal.const_get_qualified(Opal.Asciidoctor, 'LoggerManager', true)\n\n// Alias\nOpal.Asciidoctor.LoggerManager = LoggerManager\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.getLogger = function () {\n  return this.$logger()\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.setLogger = function (logger) {\n  this.logger = logger\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.newLogger = function (name, functions) {\n  return initializeLoggerClass(name, functions).$new()\n}\n\n/**\n * @memberof LoggerManager\n */\nLoggerManager.newFormatter = function (name, functions) {\n  return initializeLoggerFormatterClass(name, functions).$new()\n}\n\n/**\n * @namespace\n */\nvar LoggerSeverity = Opal.const_get_qualified(Opal.Logger, 'Severity', true)\n\n// Alias\nOpal.Asciidoctor.LoggerSeverity = LoggerSeverity\n\n/**\n * @memberof LoggerSeverity\n */\nLoggerSeverity.get = function (severity) {\n  return LoggerSeverity.$constants()[severity]\n}\n\n/**\n * @namespace\n */\nvar LoggerFormatter = Opal.const_get_qualified(Opal.Logger, 'Formatter', true)\n\n// Alias\nOpal.Asciidoctor.LoggerFormatter = LoggerFormatter\n\n/**\n * @memberof LoggerFormatter\n */\nLoggerFormatter.prototype.call = function (severity, time, programName, message) {\n  return this.$call(LoggerSeverity.get(severity), time, programName, message)\n}\n\n/**\n * @namespace\n */\nvar MemoryLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'MemoryLogger', true)\n\n// Alias\nOpal.Asciidoctor.MemoryLogger = MemoryLogger\n\n/**\n * Create a new MemoryLogger.\n * @returns {MemoryLogger} - a MemoryLogger\n * @memberof MemoryLogger\n */\nMemoryLogger.create = function () {\n  return this.$new()\n}\n\n/**\n * @returns {Array<Object>} - a list of messages\n * @memberof MemoryLogger\n */\nMemoryLogger.prototype.getMessages = function () {\n  var messages = this.messages\n  var result = []\n  for (var i = 0; i < messages.length; i++) {\n    var message = messages[i]\n    var messageObject = fromHash(message)\n    if (typeof messageObject.message === 'string') {\n      messageObject.getText = function () {\n        return this.message\n      }\n    } else {\n      // also convert the message attribute\n      messageObject.message = fromHash(messageObject.message)\n      messageObject.getText = function () {\n        return this.message.text\n      }\n    }\n    messageObject.getSeverity = function () {\n      return this.severity.toString()\n    }\n    messageObject.getSourceLocation = function () {\n      return this.message.source_location\n    }\n    result.push(messageObject)\n  }\n  return result\n}\n\nvar Logging = Opal.const_get_qualified(Opal.Asciidoctor, 'Logging', true)\n\nOpal.Asciidoctor.Logging = Logging\n\nLogging.getLogger = function () {\n  return LoggerManager.$logger()\n}\n\nLogging.createLogMessage = function (text, context) {\n  return Logging.prototype.$message_with_context(text, toHash(context))\n}\n\n// alias\n\n/**\n * @memberof Reader\n */\nReader.prototype.getLogger = Logging.getLogger\n/**\n * @memberof Reader\n */\nReader.prototype.createLogMessage = Logging.createLogMessage\n\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.getLogger = Logging.getLogger\n/**\n * @memberof AbstractNode\n */\nAbstractNode.prototype.createLogMessage = Logging.createLogMessage\n\n/**\n * @namespace\n */\nvar Logger = Opal.const_get_qualified(Opal.Asciidoctor, 'Logger', true)\n\n// Alias\nOpal.Asciidoctor.Logger = Logger\n\n/**\n * @returns {number|undefined} - the maximum severity\n * @memberof Logger\n */\nLogger.prototype.getMaxSeverity = function () {\n  var result = this.max_severity\n  return result === Opal.nil ? undefined : result\n}\n/**\n * @returns {LoggerFormatter} - the formatter\n * @memberof Logger\n */\nLogger.prototype.getFormatter = function () {\n  return this.formatter\n}\n/**\n * @param {LoggerFormatter} formatter - the formatter\n * @memberof Logger\n */\nLogger.prototype.setFormatter = function (formatter) {\n  this.formatter = formatter\n}\n/**\n * @returns {number} - the logging severity threshold\n * @memberof Logger\n */\nLogger.prototype.getLevel = function () {\n  return this.level\n}\n/**\n * @param {number} level - the logging severity threshold\n * @memberof Logger\n */\nLogger.prototype.setLevel = function (level) {\n  this.level = level\n}\n/**\n * @returns {string} - the program name\n * @memberof Logger\n */\nLogger.prototype.getProgramName = function () {\n  return this.progname\n}\n/**\n * @param {string} programName - the program name\n * @memberof Logger\n */\nLogger.prototype.setProgramName = function (programName) {\n  this.progname = programName\n}\n\nvar RubyLogger = Opal.const_get_qualified('::', 'Logger')\n\nvar log = function (logger, level, message) {\n  logger['$' + level](message)\n}\nRubyLogger.prototype.add = function (severity, message, programName) {\n  var severityValue = typeof severity === 'string' ? LoggerSeverity[severity.toUpperCase()] : severity\n  this.$add(severityValue, message, programName)\n}\nRubyLogger.prototype.log = RubyLogger.prototype.add\nRubyLogger.prototype.debug = function (message) {\n  log(this, 'debug', message)\n}\nRubyLogger.prototype.info = function (message) {\n  log(this, 'info', message)\n}\nRubyLogger.prototype.warn = function (message) {\n  log(this, 'warn', message)\n}\nRubyLogger.prototype.error = function (message) {\n  log(this, 'error', message)\n}\nRubyLogger.prototype.fatal = function (message) {\n  log(this, 'fatal', message)\n}\nRubyLogger.prototype.isDebugEnabled = function () {\n  return this['$debug?']()\n}\nRubyLogger.prototype.isInfoEnabled = function () {\n  return this['$info?']()\n}\nRubyLogger.prototype.isWarnEnabled = function () {\n  return this['$warn?']()\n}\nRubyLogger.prototype.isErrorEnabled = function () {\n  return this['$error?']()\n}\nRubyLogger.prototype.isFatalEnabled = function () {\n  return this['$fatal?']()\n}\n\n/**\n * @namespace\n */\nvar NullLogger = Opal.const_get_qualified(Opal.Asciidoctor, 'NullLogger', true)\n\n// Alias\nOpal.Asciidoctor.NullLogger = NullLogger\n\n/**\n * Create a new NullLogger.\n * @returns {NullLogger} - a NullLogger\n * @memberof NullLogger\n */\nNullLogger.create = function () {\n  return this.$new()\n}\n\n/**\n * @returns {number|undefined} - the maximum severity\n * @memberof NullLogger\n */\nNullLogger.prototype.getMaxSeverity = function () {\n  return this.max_severity\n}\n\n// Alias\nOpal.Asciidoctor.StopIteration = Opal.StopIteration\n\n/**\n * @namespace\n */\nvar Timings = Opal.const_get_qualified(Opal.Asciidoctor, 'Timings', true)\n\n// Alias\nOpal.Asciidoctor.Timings = Timings\n\n/**\n * Create a new Timings.\n * @returns {Timings} - a Timings\n * @memberof Timings\n */\nTimings.create = function () {\n  return this.$new()\n}\n\n/**\n * Print a report to the specified output.\n * The report will include:\n * - the time to read and parse source\n * - the time to convert document\n * - the total time (read, parse and convert)\n * @param {RubyLogger|console|Object} [to] - an optional output (by default stdout)\n * @param {string} [subject] - an optional subject (usually the file name)\n * @memberof Timings\n */\nTimings.prototype.printReport = function (to, subject) {\n  var outputFunction\n  if (to) {\n    if (typeof to.$add === 'function') {\n      outputFunction = function (message) {\n        to.$add(1, message)\n      }\n    } else if (typeof to.log === 'function') {\n      outputFunction = to.log\n    } else if (typeof to.write === 'function') {\n      outputFunction = function (message) {\n        to.write(message, 'utf-8')\n      }\n    } else {\n      throw new Error('The output should be a Stream (with a write function), an object with a log function or a Ruby Logger (with a add function)')\n    }\n  } else {\n    outputFunction = function (message) {\n      Opal.gvars.stdout.$write(message)\n    }\n  }\n  if (subject) {\n    outputFunction('Input file: ' + subject)\n  }\n  outputFunction(' Time to read and parse source: ' + this.$read_parse().toFixed(2))\n  outputFunction(' Time to convert document: ' + this.$convert().toFixed(2))\n  outputFunction(' Total time (read, parse and convert): ' + this.$read_parse_convert().toFixed(2))\n}\n\n/**\n * @namespace\n * @description\n * This API is experimental and subject to change.\n *\n * A pluggable adapter for integrating a syntax (aka code) highlighter into AsciiDoc processing.\n *\n * There are two types of syntax highlighter adapters. The first performs syntax highlighting during the convert phase.\n * This adapter type must define a \"handlesHighlighting\" method that returns true.\n * The companion \"highlight\" method will then be called to handle the \"specialcharacters\" substitution for source blocks.\n *\n * The second assumes syntax highlighting is performed on the client (e.g., when the HTML document is loaded).\n * This adapter type must define a \"hasDocinfo\" method that returns true.\n * The companion \"docinfo\" method will then be called to insert markup into the output document.\n * The docinfo functionality is available to both adapter types.\n *\n * Asciidoctor.js provides several a built-in adapter for highlight.js.\n * Additional adapters can be registered using SyntaxHighlighter.register.\n */\nvar SyntaxHighlighter = Opal.const_get_qualified(Opal.Asciidoctor, 'SyntaxHighlighter', true)\n\n// Alias\nOpal.Asciidoctor.SyntaxHighlighter = SyntaxHighlighter\n\n/**\n * Associates the syntax highlighter class or object with the specified names.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string|Array} names - A {string} name or an {Array} of {string} names\n * @param functions - A list of functions representing a {SyntaxHighlighter} or a {SyntaxHighlighter} class to instantiate\n * @memberof SyntaxHighlighter\n */\nSyntaxHighlighter.register = function (names, functions) {\n  var name = typeof names === 'string' ? names : names[0]\n  if (typeof functions === 'function') {\n    var classObject = functions\n    var prototype = classObject.prototype\n    var properties = Object.getOwnPropertyNames(prototype)\n    functions = {}\n    for (var propertyIdx in properties) {\n      var propertyName = properties[propertyIdx]\n      functions[propertyName] = prototype[propertyName]\n    }\n  }\n  var scope = initializeClass(SyntaxHighlighterBase, name, functions, {}, {\n    format: function (args) {\n      if (args.length >= 2 && typeof args[2] === 'object' && '$$smap' in args[2]) {\n        args[2] = fromHash(args[2])\n      }\n      if (args.length >= 1) {\n        args[1] = args[1] === Opal.nil ? undefined : args[1]\n      }\n      return args\n    },\n    highlight: function (args) {\n      if (args.length >= 3 && typeof args[3] === 'object' && '$$smap' in args[3]) {\n        var opts = args[3]\n        opts = fromHash(opts)\n        for (var key in opts) {\n          var value = opts[key]\n          if (key === 'callouts') {\n            var callouts = fromHashKeys(value)\n            for (var idx in callouts) {\n              var callout = callouts[idx]\n              for (var i = 0; i < callout.length; i++) {\n                var items = callout[i]\n                for (var j = 0; j < items.length; j++) {\n                  items[j] = items[j] === Opal.nil ? undefined : items[j]\n                }\n              }\n            }\n            opts[key] = callouts\n          } else {\n            opts[key] = value === Opal.nil ? undefined : value\n          }\n        }\n        args[3] = opts\n      }\n      if (args.length >= 2) {\n        args[2] = args[2] === Opal.nil ? undefined : args[2]\n      }\n      return args\n    }\n  })\n  for (var functionName in functions) {\n    if (Object.prototype.hasOwnProperty.call(functions, functionName)) {\n      (function (functionName) {\n        var userFunction = functions[functionName]\n        if (functionName === 'handlesHighlighting') {\n          Opal.def(scope, '$highlight?', function () {\n            return userFunction.call()\n          })\n        } else if (functionName === 'hasDocinfo') {\n          Opal.def(scope, '$docinfo?', function (location) {\n            return userFunction.apply(this, [location])\n          })\n        }\n      }(functionName))\n    }\n  }\n  Opal.def(scope, '$name', function () {\n    return name\n  })\n  SyntaxHighlighter.$register(scope, names)\n  return scope\n}\n\n/**\n * Retrieves the syntax highlighter class or object registered for the specified name.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string} name - The {string} name of the syntax highlighter to retrieve.\n * @returns {SyntaxHighlighter} - the {SyntaxHighlighter} registered for this name.\n * @memberof SyntaxHighlighter\n */\nSyntaxHighlighter.get = function (name) {\n  var result = SyntaxHighlighter.$for(name)\n  return result === Opal.nil ? undefined : result\n}\n\n/**\n * @deprecated Please use {SyntaxHighlighter#get} method as \"for\" is a reserved keyword.\n */\nSyntaxHighlighter.for = SyntaxHighlighter.get\n\n/**\n * @namespace\n */\nvar SyntaxHighlighterBase = Opal.const_get_qualified(SyntaxHighlighter, 'Base', true)\n\n// Alias\nOpal.Asciidoctor.SyntaxHighlighterBase = SyntaxHighlighterBase\n\n/**\n * Statically register the current class in the registry for the specified names.\n *\n * @description This API is experimental and subject to change.\n *\n * @param {string|Array<string>} names - A {string} name or an {Array} of {string} names\n * @memberof SyntaxHighlighterBase\n */\nSyntaxHighlighterBase.prototype.registerFor = function (names) {\n  SyntaxHighlighter.$register(this, names)\n}\n\n// Table API\n\n/**\n * Methods for managing AsciiDoc tables.\n * @namespace\n * @extends AbstractBlock\n */\nvar Table = Opal.Asciidoctor.Table\n\n/**\n * Create a new Table element.\n * @param {AbstractBlock} parent\n * @param {Object|undefined} attributes\n * @returns {Table} - a new {Table} object\n */\nTable.create = function (parent, attributes) {\n  return this.$new(parent, toHash(attributes))\n}\n\n/**\n * Get the caption of the table.\n * @returns {string}\n * @memberof Table\n */\nTable.prototype.getCaption = function () {\n  return this.caption\n}\n\n/**\n * Get the rows of this table.\n * @returns {Table.Rows} - an {Table.Rows} object with the members \"head\", \"body\" and \"foot\"\n * @memberof Table\n */\nTable.prototype.getRows = function () {\n  return this.rows\n}\n\n/**\n * Get the columns of this table.\n * @returns {Array<Column>}\n * @memberof Table\n */\nTable.prototype.getColumns = function () {\n  return this.columns\n}\n\n/**\n * Get the head rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getHeadRows = function () {\n  return this.rows.head\n}\n\n/**\n * Check if the table has a head rows.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasHeadRows = function () {\n  return this.rows !== Opal.nil && this.rows.head.length > 0\n}\n\n/**\n * Get the body rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getBodyRows = function () {\n  return this.rows.body\n}\n\n/**\n * Check if the table has a body rows.\n * @returns {boolean}\n */\nTable.prototype.hasBodyRows = function () {\n  return this.rows !== Opal.nil && this.rows.body.length > 0\n}\n\n/**\n * Get the foot rows of this table.\n * @returns {Array<Array<Cell>>} - an Array of Array of Cell\n * @memberof Table\n */\nTable.prototype.getFootRows = function () {\n  return this.rows.foot\n}\n\n/**\n * Check if the table has a foot rows.\n * @returns {boolean}\n */\nTable.prototype.hasFootRows = function () {\n  return this.rows !== Opal.nil && this.rows.foot.length > 0\n}\n\n/**\n * Check if the table has a header option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasHeaderOption = function () {\n  return this.has_header_option\n}\n\n/**\n * Check if the table has the footer option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasFooterOption = function () {\n  var footerOption = this.getAttributes()['footer-option']\n  return footerOption === ''\n}\n\n/**\n * Check if the table has the autowidth option set.\n * @returns {boolean}\n * @memberof Table\n */\nTable.prototype.hasAutowidthOption = function () {\n  var autowidthOption = this.getAttributes()['autowidth-option']\n  return autowidthOption === ''\n}\n\n/**\n * Get the number of rows in the table.\n * Please note that the header and footer rows are also counted.\n * @returns {number|undefined}\n * @memberof Table\n */\nTable.prototype.getRowCount = function () {\n  return this.getAttribute('rowcount')\n}\n\n/**\n * Set the number of rows in the table.\n * Please note that the header and footer rows are also counted.\n * @param {number} value - the value\n * @memberof Table\n */\nTable.prototype.setRowCount = function (value) {\n  this.setAttribute('rowcount', value)\n}\n\n/**\n * Get the number of columns in the table.\n * @returns {number|undefined}\n * @memberof Table\n */\nTable.prototype.getColumnCount = function () {\n  return this.getAttribute('colcount')\n}\n\n/**\n * Set the number of columns in the table.\n * @param {number} value - the value\n * @memberof Table\n */\nTable.prototype.setColumnCount = function (value) {\n  this.setAttribute('colcount', value)\n}\n\n// Rows\n\n/**\n * @namespace\n */\nvar Rows = Opal.Asciidoctor.Table.Rows\n\n/**\n * Create a new Rows element.\n * @param {array<array<Cell>>} head\n * @param {array<array<Cell>>} foot\n * @param {array<array<Cell>>} body\n * @returns Rows\n */\nRows.create = function (head, foot, body) {\n  return this.$new(head, foot, body)\n}\n\n/**\n * Get head rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getHead = function () {\n  return this.head\n}\n\n/**\n * Get foot rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getFoot = function () {\n  return this.foot\n}\n\n/**\n * Get body rows.\n * @returns {array<array<Cell>>}\n */\nRows.prototype.getBody = function () {\n  return this.body\n}\n\n/**\n * Retrieve the rows grouped by section as a nested Array.\n *\n * Creates a 2-dimensional array of two element entries.\n * The first element is the section name as a string.\n * The second element is the Array of rows in that section.\n * The entries are in document order (head, foot, body).\n * @returns {[[string, array<array<Cell>>], [string, array<array<Cell>>], [string, array<array<Cell>>]]}\n */\nRows.prototype.bySection = function () {\n  return [['head', this.head], ['body', this.body], ['foot', this.foot]]\n}\n\n// Table Column\n\n/**\n * Methods to manage the columns of an AsciiDoc table.\n * In particular, it keeps track of the column specs.\n * @namespace\n * @extends AbstractNode\n */\nvar Column = Opal.Asciidoctor.Table.Column\n\n/**\n * Create a new Column element.\n * @param {Table} table\n * @param {number} index\n * @param {Object|undefined} attributes\n * @returns Column\n */\nColumn.create = function (table, index, attributes) {\n  return this.$new(table, index, toHash(attributes))\n}\n\n/**\n * Get the column number of this cell.\n * @returns {number|undefined}\n * @memberof Column\n */\nColumn.prototype.getColumnNumber = function () {\n  return this.getAttribute('colnumber')\n}\n\n/**\n * Get the width of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getWidth = function () {\n  return this.getAttribute('width')\n}\n\n/**\n * Get the horizontal align of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getHorizontalAlign = function () {\n  return this.getAttribute('halign')\n}\n\n/**\n * Get the vertical align of this cell.\n * @returns {string|undefined}\n * @memberof Column\n */\nColumn.prototype.getVerticalAlign = function () {\n  return this.getAttribute('valign')\n}\n\n/**\n * Get the style of this cell.\n * @returns {string}\n * @memberof Column\n */\nColumn.prototype.getStyle = function () {\n  var style = this.style\n  return style === Opal.nil ? undefined : style\n}\n\n// Table Cell\n\n/**\n * Methods for managing the cells in an AsciiDoc table.\n * @namespace\n * @extends AbstractBlock\n */\nvar Cell = Opal.Asciidoctor.Table.Cell\n\n/**\n * Create a new Cell element\n * @param {Column} column\n * @param {string} cellText\n * @param {Object|undefined} attributes\n * @param {Object|undefined} opts\n * @returns {Cell}\n */\nCell.create = function (column, cellText, attributes, opts) {\n  return this.$new(column, cellText, toHash(attributes), toHash(opts))\n}\n\n/**\n * Get the column span of this {@link Cell} node.\n * @returns {number} - An Integer of the number of columns this cell will span (default: undefined)\n * @memberof Cell\n */\nCell.prototype.getColumnSpan = function () {\n  var colspan = this.colspan\n  return colspan === Opal.nil ? undefined : colspan\n}\n\n/**\n * Set the column span of this {@link Cell} node.\n * @param {number} value\n * @returns {number} - The new colspan value\n * @memberof Cell\n */\nCell.prototype.setColumnSpan = function (value) {\n  return this['$colspan='](value)\n}\n\n/**\n * Get the row span of this {@link Cell} node\n * @returns {number|undefined} - An Integer of the number of rows this cell will span (default: undefined)\n * @memberof Cell\n */\nCell.prototype.getRowSpan = function () {\n  var rowspan = this.rowspan\n  return rowspan === Opal.nil ? undefined : rowspan\n}\n\n/**\n * Set the row span of this {@link Cell} node\n * @param {number} value\n * @returns {number} - The new rowspan value\n * @memberof Cell\n */\nCell.prototype.setRowSpan = function (value) {\n  return this['$rowspan='](value)\n}\n\n/**\n * Get the content of the cell.\n * This method should not be used for cells in the head row or that have the literal style.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getContent = function () {\n  return this.$content()\n}\n\n/**\n * Get the text of the cell.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getText = function () {\n  return this.$text()\n}\n\n/**\n * Get the source of the cell.\n * @returns {string}\n * @memberof Cell\n */\nCell.prototype.getSource = function () {\n  return this.$source()\n}\n\n/**\n * Get the lines of the cell.\n * @returns {Array<string>}\n * @memberof Cell\n */\nCell.prototype.getLines = function () {\n  return this.$lines()\n}\n\n/**\n * Get the line number of the cell.\n * @returns {number|undefined}\n * @memberof Cell\n */\nCell.prototype.getLineNumber = function () {\n  var lineno = this.$lineno()\n  return lineno === Opal.nil ? undefined : lineno\n}\n\n/**\n * Get the source file of the cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getFile = function () {\n  var file = this.$file()\n  return file === Opal.nil ? undefined : file\n}\n\n/**\n * Get the style of the cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getStyle = function () {\n  var style = this.$style()\n  return style === Opal.nil ? undefined : style\n}\n\n/**\n * Get the column of this cell.\n * @returns {Column|undefined}\n * @memberof Cell\n */\nCell.prototype.getColumn = function () {\n  var column = this.$column()\n  return column === Opal.nil ? undefined : column\n}\n\n/**\n * Get the width of this cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getWidth = function () {\n  return this.getAttribute('width')\n}\n\n/**\n * Get the column width in percentage of this cell.\n * @returns {string|undefined}\n * @memberof Cell\n */\nCell.prototype.getColumnPercentageWidth = function () {\n  return this.getAttribute('colpcwidth')\n}\n\n/**\n * Get the nested {Document} of this cell when style is 'asciidoc'.\n * @returns {Document|undefined} - the nested {Document}\n * @memberof Cell\n */\nCell.prototype.getInnerDocument = function () {\n  var innerDocument = this.inner_document\n  return innerDocument === Opal.nil ? undefined : innerDocument\n}\n\n// Templates\n\n/**\n * @description\n * This API is experimental and subject to change.\n *\n * Please note that this API is currently only available in a Node environment.\n * We recommend to use a custom converter if you are running in the browser.\n *\n * @namespace\n * @module Converter/TemplateConverter\n */\nvar TemplateConverter = Opal.Asciidoctor.Converter.TemplateConverter\n\nif (TemplateConverter) {\n  // Alias\n  Opal.Asciidoctor.TemplateConverter = TemplateConverter\n\n  /**\n   * Create a new TemplateConverter.\n   * @param {string} backend - the backend name\n   * @param templateDirectories - a list of template directories\n   * @param {Object} opts - a JSON of options\n   * @param {string} opts.template_engine - the name of the template engine\n   * @param {Object} [opts.template_cache] - an optional template cache\n   * @param {Object} [opts.template_cache.scans] - a JSON of template objects keyed by template name keyed by path patterns\n   * @param {Object} [opts.template_cache.templates] - a JSON of template objects keyed by file paths\n   * @returns {TemplateConverter}\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.create = function (backend, templateDirectories, opts) {\n    if (opts && opts.template_cache) {\n      opts.template_cache = toHash(opts.template_cache)\n    }\n    this.$new(backend, templateDirectories, toHash(opts))\n  }\n\n  /**\n   * @returns {Object} - The global cache\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.getCache = function () {\n    var caches = fromHash(this.caches)\n    if (caches) {\n      if (caches.scans) {\n        caches.scans = fromHash(caches.scans)\n        for (var key in caches.scans) {\n          caches.scans[key] = fromHash(caches.scans[key])\n        }\n      }\n      if (caches.templates) {\n        caches.templates = fromHash(caches.templates)\n      }\n    }\n    return caches\n  }\n\n  /**\n   * Clear the global cache.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.clearCache = function () {\n    this.$clear_caches()\n  }\n\n  /**\n   * Convert an {AbstractNode} to the backend format using the named template.\n   *\n   * Looks for a template that matches the value of the template name or,\n   * if the template name is not specified, the value of the {@see AbstractNode.getNodeName} function.\n   *\n   * @param {AbstractNode} node - the AbstractNode to convert\n   * @param {string} templateName - the {string} name of the template to use, or the node name of the node if a template name is not specified. (optional, default: undefined)\n   * @param {Object} opts - an optional JSON that is passed as local variables to the template. (optional, default: undefined)\n   * @returns {string} - The {string} result from rendering the template\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.convert = function (node, templateName, opts) {\n    return this.$convert(node, templateName, toHash(opts))\n  }\n\n  /**\n   * Checks whether there is a template registered with the specified name.\n   *\n   * @param {string} name - the {string} template name\n   * @returns {boolean} - a {boolean} that indicates whether a template is registered for the specified template name.\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.handles = function (name) {\n    return this['$handles?'](name)\n  }\n\n  /**\n   * Retrieves the templates that this converter manages.\n   *\n   * @returns {Object} - a JSON of template objects keyed by template name\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.getTemplates = function () {\n    return fromHash(this.$templates())\n  }\n\n  /**\n   * Registers a template with this converter.\n   *\n   * @param {string} name - the {string} template name\n   * @param {Object} template - the template object to register\n   * @returns {Object} - the template object\n   * @memberof Converter/TemplateConverter\n   */\n  TemplateConverter.prototype.register = function (name, template) {\n    return this.$register(name, template)\n  }\n\n  /**\n   * @namespace\n   * @description\n   * This API is experimental and subject to change.\n   *\n   * Please note that this API is currently only available in a Node environment.\n   * We recommend to use a custom converter if you are running in the browser.\n   *\n   * A pluggable adapter for integrating a template engine into the built-in template converter.\n   */\n  var TemplateEngine = {}\n  TemplateEngine.registry = {}\n\n  // Alias\n  Opal.Asciidoctor.TemplateEngine = TemplateEngine\n\n  /**\n   * Register a template engine adapter for the given names.\n   * @param {string|Array} names - a {string} name or an {Array} of {string} names\n   * @param {Object} templateEngineAdapter - a template engine adapter instance\n   * @example\n   *  const fs = require('fs')\n   *  class DotTemplateEngineAdapter {\n   *    constructor () {\n   *      this.doT = require('dot')\n   *    }\n   *    compile (file, _) {\n   *      const templateFn = this.doT.template(fs.readFileSync(file, 'utf8'))\n   *      return {\n   *        render: templateFn\n   *      }\n   *    }\n   *  }\n   *  asciidoctor.TemplateEngine.register('dot, new DotTemplateEngineAdapter())\n   * @memberof TemplateEngine\n   */\n  TemplateEngine.register = function (names, templateEngineAdapter) {\n    if (typeof names === 'string') {\n      this.registry[names] = templateEngineAdapter\n    } else {\n      // array\n      for (var i = 0; i < names.length; i++) {\n        var name = names[i]\n        this.registry[name] = templateEngineAdapter\n      }\n    }\n  }\n}\n\n/* global Opal, fromHash, toHash, initializeClass */\n// Extensions API\n\n/**\n * @private\n */\nvar toBlock = function (block) {\n  // arity is a mandatory field\n  block.$$arity = block.length\n  return block\n}\n\nvar registerExtension = function (registry, type, processor, name) {\n  if (typeof processor === 'object' || processor.$$is_class) {\n    // processor is an instance or a class\n    return registry['$' + type](processor, name)\n  } else {\n    // processor is a function/lambda\n    return Opal.send(registry, type, name && [name], toBlock(processor))\n  }\n}\n\n/**\n * @namespace\n * @description\n * Extensions provide a way to participate in the parsing and converting\n * phases of the AsciiDoc processor or extend the AsciiDoc syntax.\n *\n * The various extensions participate in AsciiDoc processing as follows:\n *\n * 1. After the source lines are normalized, {{@link Extensions/Preprocessor}}s modify or replace\n *    the source lines before parsing begins. {{@link Extensions/IncludeProcessor}}s are used to\n *    process include directives for targets which they claim to handle.\n * 2. The Parser parses the block-level content into an abstract syntax tree.\n *    Custom blocks and block macros are processed by associated {{@link Extensions/BlockProcessor}}s\n *    and {{@link Extensions/BlockMacroProcessor}}s, respectively.\n * 3. {{@link Extensions/TreeProcessor}}s are run on the abstract syntax tree.\n * 4. Conversion of the document begins, at which point inline markup is processed\n *    and converted. Custom inline macros are processed by associated {InlineMacroProcessor}s.\n * 5. {{@link Extensions/Postprocessor}}s modify or replace the converted document.\n * 6. The output is written to the output stream.\n *\n * Extensions may be registered globally using the {Extensions.register} method\n * or added to a custom {Registry} instance and passed as an option to a single\n * Asciidoctor processor.\n *\n * @example\n * asciidoctor.Extensions.register(function () {\n *   this.block(function () {\n *     var self = this;\n *     self.named('shout');\n *     self.onContext('paragraph');\n *     self.process(function (parent, reader) {\n *       var lines = reader.getLines().map(function (l) { return l.toUpperCase(); });\n *       return self.createBlock(parent, 'paragraph', lines);\n *     });\n *   });\n * });\n */\nvar Extensions = Opal.const_get_qualified(Opal.Asciidoctor, 'Extensions')\n\n// Alias\nOpal.Asciidoctor.Extensions = Extensions\n\n/**\n * Create a new {@link Extensions/Registry}.\n * @param {string} name\n * @param {function} block\n * @memberof Extensions\n * @returns {Extensions/Registry} - returns a {@link Extensions/Registry}\n */\nExtensions.create = function (name, block) {\n  if (typeof name === 'function' && typeof block === 'undefined') {\n    return Opal.send(this, 'create', null, toBlock(name))\n  } else if (typeof block === 'function') {\n    return Opal.send(this, 'create', [name], toBlock(block))\n  } else {\n    return this.$create()\n  }\n}\n\n/**\n * @memberof Extensions\n */\nExtensions.register = function (name, block) {\n  if (typeof name === 'function' && typeof block === 'undefined') {\n    return Opal.send(this, 'register', null, toBlock(name))\n  } else {\n    return Opal.send(this, 'register', [name], toBlock(block))\n  }\n}\n\n/**\n * Get statically-registered extension groups.\n * @memberof Extensions\n */\nExtensions.getGroups = function () {\n  return fromHash(this.$groups())\n}\n\n/**\n * Unregister all statically-registered extension groups.\n * @memberof Extensions\n */\nExtensions.unregisterAll = function () {\n  this.$unregister_all()\n}\n\n/**\n * Unregister the specified statically-registered extension groups.\n *\n * NOTE Opal cannot delete an entry from a Hash that is indexed by symbol, so\n * we have to resort to using low-level operations in this method.\n *\n * @memberof Extensions\n */\nExtensions.unregister = function () {\n  var names = Array.prototype.concat.apply([], arguments)\n  var groups = this.$groups()\n  var groupNameIdx = {}\n  for (var i = 0, groupSymbolNames = groups.$$keys; i < groupSymbolNames.length; i++) {\n    var groupSymbolName = groupSymbolNames[i]\n    groupNameIdx[groupSymbolName.toString()] = groupSymbolName\n  }\n  for (var j = 0; j < names.length; j++) {\n    var groupStringName = names[j]\n    if (groupStringName in groupNameIdx) Opal.hash_delete(groups, groupNameIdx[groupStringName])\n  }\n}\n\n/**\n * @namespace\n * @module Extensions/Registry\n */\nvar Registry = Extensions.Registry\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.getGroups = Extensions.getGroups\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.unregisterAll = function () {\n  this.groups = Opal.hash()\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.unregister = Extensions.unregister\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.prefer = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  if (typeof processor === 'object' || processor.$$is_class) {\n    // processor is an instance or a class\n    return this.$prefer(name, processor)\n  } else {\n    // processor is a function/lambda\n    return Opal.send(this, 'prefer', name && [name], toBlock(processor))\n  }\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.block = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'block', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.inlineMacro = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'inline_macro', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.includeProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'include_processor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.blockMacro = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'block_macro', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.treeProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'tree_processor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.postprocessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'postprocessor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.preprocessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'preprocessor', processor, name)\n}\n\n/**\n * @memberof Extensions/Registry\n */\nRegistry.prototype.docinfoProcessor = function (name, processor) {\n  if (arguments.length === 1) {\n    processor = name\n    name = null\n  }\n  return registerExtension(this, 'docinfo_processor', processor, name)\n}\n\n/**\n * Checks whether any {{@link Extensions/Preprocessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/Preprocessor}} extensions are registered.\n */\nRegistry.prototype.hasPreprocessors = function () {\n  return this['$preprocessors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/TreeProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/TreeProcessor}} extensions are registered.\n */\nRegistry.prototype.hasTreeProcessors = function () {\n  return this['$tree_processors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/IncludeProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/IncludeProcessor}} extensions are registered.\n */\nRegistry.prototype.hasIncludeProcessors = function () {\n  return this['$include_processors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/Postprocessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/Postprocessor}} extensions are registered.\n */\nRegistry.prototype.hasPostprocessors = function () {\n  return this['$postprocessors?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/DocinfoProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @param location - A {string} for selecting docinfo extensions at a given location (head or footer) (default: undefined)\n * @returns a {boolean} indicating whether any {{@link Extensions/DocinfoProcessor}} extensions are registered.\n */\nRegistry.prototype.hasDocinfoProcessors = function (location) {\n  return this['$docinfo_processors?'](location)\n}\n\n/**\n * Checks whether any {{@link Extensions/BlockProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/BlockProcessor}} extensions are registered.\n */\nRegistry.prototype.hasBlocks = function () {\n  return this['$blocks?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/BlockMacroProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/BlockMacroProcessor}} extensions are registered.\n */\nRegistry.prototype.hasBlockMacros = function () {\n  return this['$block_macros?']()\n}\n\n/**\n * Checks whether any {{@link Extensions/InlineMacroProcessor}} extensions have been registered.\n *\n * @memberof Extensions/Registry\n * @returns a {boolean} indicating whether any {{@link Extensions/InlineMacroProcessor}} extensions are registered.\n */\nRegistry.prototype.hasInlineMacros = function () {\n  return this['$inline_macros?']()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/Preprocessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getPreprocessors = function () {\n  return this.$preprocessors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/TreeProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getTreeProcessors = function () {\n  return this.$tree_processors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/IncludeProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getIncludeProcessors = function () {\n  return this.$include_processors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/Postprocessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getPostprocessors = function () {\n  return this.$postprocessors()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/DocinfoProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @param location - A {string} for selecting docinfo extensions at a given location (head or footer) (default: undefined)\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getDocinfoProcessors = function (location) {\n  return this.$docinfo_processors(location)\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/BlockProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getBlocks = function () {\n  return this.block_extensions.$values()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/BlockMacroProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getBlockMacros = function () {\n  return this.block_macro_extensions.$values()\n}\n\n/**\n * Retrieves the Extension proxy objects for all the {{@link Extensions/InlineMacroProcessor}} instances stored in this registry.\n *\n * @memberof Extensions/Registry\n * @returns an {array} of Extension proxy objects.\n */\nRegistry.prototype.getInlineMacros = function () {\n  return this.$inline_macros()\n}\n\n/**\n * Get any {{@link Extensions/InlineMacroProcessor}} extensions are registered to handle the specified inline macro name.\n *\n * @param name - the {string} inline macro name\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/InlineMacroProcessor}} that matches the inline macro name or undefined if no match is found.\n */\nRegistry.prototype.getInlineMacroFor = function (name) {\n  var result = this['$registered_for_inline_macro?'](name)\n  return result === false ? undefined : result\n}\n\n/**\n * Get any {{@link Extensions/BlockProcessor}} extensions are registered to handle the specified block name appearing on the specified context.\n * @param name - the {string} block name\n * @param context - the context of the block: paragraph, open... (optional)\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/BlockProcessor}} that matches the block name and context or undefined if no match is found.\n */\nRegistry.prototype.getBlockFor = function (name, context) {\n  if (typeof context === 'undefined') {\n    var ext = this.$find_block_extension(name)\n    return ext === Opal.nil ? undefined : ext\n  }\n  var result = this['$registered_for_block?'](name, context)\n  return result === false ? undefined : result\n}\n\n/**\n * Get any {{@link Extensions/BlockMacroProcessor}} extensions are registered to handle the specified macro name.\n *\n * @param name - the {string} macro name\n * @memberof Extensions/Registry\n * @returns the Extension proxy object for the {{@link Extensions/BlockMacroProcessor}} that matches the macro name or undefined if no match is found.\n */\nRegistry.prototype.getBlockMacroFor = function (name) {\n  var result = this['$registered_for_block_macro?'](name)\n  return result === false ? undefined : result\n}\n\n/**\n * @namespace\n * @module Extensions/Processor\n */\nvar Processor = Extensions.Processor\n\n/**\n * The extension will be added to the beginning of the list for that extension type. (default is append).\n * @memberof Extensions/Processor\n * @deprecated Please use the <code>prefer</pre> function on the {@link Extensions/Registry},\n * the {@link Extensions/IncludeProcessor},\n * the {@link Extensions/TreeProcessor},\n * the {@link Extensions/Postprocessor},\n * the {@link Extensions/Preprocessor}\n * or the {@link Extensions/DocinfoProcessor}\n */\nProcessor.prototype.prepend = function () {\n  this.$option('position', '>>')\n}\n\n/**\n * @memberof Extensions/Processor\n */\nProcessor.prototype.process = function (block) {\n  var handler = {\n    apply: function (target, thisArg, argumentsList) {\n      for (var i = 0; i < argumentsList.length; i++) {\n        // convert all (Opal) Hash arguments to JSON.\n        if (typeof argumentsList[i] === 'object' && '$$smap' in argumentsList[i]) {\n          argumentsList[i] = fromHash(argumentsList[i])\n        }\n      }\n      return target.apply(thisArg, argumentsList)\n    }\n  }\n  var blockProxy = new Proxy(block, handler)\n  return Opal.send(this, 'process', null, toBlock(blockProxy))\n}\n\n/**\n * @param {string} name\n * @memberof Extensions/Processor\n */\nProcessor.prototype.named = function (name) {\n  return this.$named(name)\n}\n\n/**\n * Creates a block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} context\n * @param {string|Array<string>} source\n * @param {Object|undefined} attrs - A JSON of attributes\n * @param {Object|undefined} opts - A JSON of options\n * @return {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createBlock = function (parent, context, source, attrs, opts) {\n  return this.$create_block(parent, context, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a list block node and links it to the specified parent.\n *\n * @param parent - The parent Block (Block, Section, or Document) of this new list block.\n * @param {string} context - The list context (e.g., ulist, olist, colist, dlist)\n * @param {Object} attrs - An object of attributes to set on this list block\n * @returns {List}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createList = function (parent, context, attrs) {\n  return this.$create_list(parent, context, toHash(attrs))\n}\n\n/**\n * Creates a list item node and links it to the specified parent.\n *\n * @param {List} parent - The parent {List} of this new list item block.\n * @param {string} text - The text of the list item.\n * @returns {ListItem}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createListItem = function (parent, text) {\n  return this.$create_list_item(parent, text)\n}\n\n/**\n * Creates an image block node and links it to the specified parent.\n * @param {Block|Section|Document} parent - The parent Block of this new image block.\n * @param {Object} attrs - A JSON of attributes\n * @param {string} attrs.target - the target attribute to set the source of the image.\n * @param {string} attrs.alt - the alt attribute to specify an alternative text for the image.\n * @param {Object} opts - A JSON of options\n * @returns {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createImageBlock = function (parent, attrs, opts) {\n  return this.$create_image_block(parent, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a paragraph block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a paragraph {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createParagraph = function (parent, source, attrs, opts) {\n  return this.$create_paragraph(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an open block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - an open {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createOpenBlock = function (parent, source, attrs, opts) {\n  return this.$create_open_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an example block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - an example {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createExampleBlock = function (parent, source, attrs, opts) {\n  return this.$create_example_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a literal block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a literal {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createPassBlock = function (parent, source, attrs, opts) {\n  return this.$create_pass_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a listing block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a listing {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createListingBlock = function (parent, source, attrs, opts) {\n  return this.$create_listing_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates a literal block and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string|Array<string>} source - The source\n * @param {Object|undefined} attrs - An object of attributes to set on this block\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Block} - a literal {Block}\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createLiteralBlock = function (parent, source, attrs, opts) {\n  return this.$create_literal_block(parent, source, toHash(attrs), toHash(opts))\n}\n\n/**\n * Creates an inline anchor and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} text - The text\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Inline} - an {Inline} anchor\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createAnchor = function (parent, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_anchor(parent, text, toHash(opts))\n}\n\n/**\n * Creates an inline pass and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block (Block, Section, or Document) of this new block.\n * @param {string} text - The text\n * @param {Object|undefined} opts - An object of options to set on this block\n * @returns {Inline} - an {Inline} pass\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createInlinePass = function (parent, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_inline_pass(parent, text, toHash(opts))\n}\n\n/**\n * Creates an inline node and links it to the specified parent.\n *\n * @param {Block|Section|Document} parent - The parent Block of this new inline node.\n * @param {string} context - The context name\n * @param {string} text - The text\n * @param {Object|undefined} opts - A JSON of options\n * @returns {Inline} - an {Inline} node\n * @memberof Extensions/Processor\n */\nProcessor.prototype.createInline = function (parent, context, text, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return this.$create_inline(parent, context, text, toHash(opts))\n}\n\n/**\n * Parses blocks in the content and attaches the block to the parent.\n * @param {AbstractBlock} parent - the parent block\n * @param {string|Array<string>} content - the content\n * @param {Object|undefined} attrs - an object of attributes\n * @returns {AbstractNode} - The parent node into which the blocks are parsed.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.parseContent = function (parent, content, attrs) {\n  return this.$parse_content(parent, content, attrs)\n}\n\n/**\n *  Parses the attrlist String into a JSON of attributes\n * @param {AbstractBlock} block - the current AbstractBlock or the parent AbstractBlock if there is no current block (used for applying subs)\n * @param {string} attrlist - the list of attributes as a String\n * @param {Object|undefined} opts - an optional JSON of options to control processing:\n * - positional_attributes: an Array of attribute names to map positional arguments to (optional, default: [])\n * - sub_attributes: enables attribute substitution on the attrlist argument (optional, default: false)\n *\n * @returns - a JSON of parsed attributes\n * @memberof Extensions/Processor\n */\nProcessor.prototype.parseAttributes = function (block, attrlist, opts) {\n  if (opts && opts.attributes) {\n    opts.attributes = toHash(opts.attributes)\n  }\n  return fromHash(this.$parse_attributes(block, attrlist, toHash(opts)))\n}\n\n/**\n * @param {string|Array<string>} value - Name of a positional attribute or an Array of positional attribute names\n * @memberof Extensions/Processor\n */\nProcessor.prototype.positionalAttributes = function (value) {\n  return this.$positional_attrs(value)\n}\n\n/**\n * Specify how to resolve attributes.\n *\n * @param {string|Array<string>|Object|boolean} [value] - A specification to resolve attributes.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.resolveAttributes = function (value) {\n  if (typeof value === 'object' && !Array.isArray(value)) {\n    return this.$resolves_attributes(toHash(value))\n  }\n  if (arguments.length > 1) {\n    return this.$resolves_attributes(Array.prototype.slice.call(arguments))\n  }\n  if (typeof value === 'undefined') {\n    // Convert to nil otherwise an exception is thrown at:\n    // https://github.com/asciidoctor/asciidoctor/blob/0bcb4addc17b307f62975aad203fb556a1bcd8a5/lib/asciidoctor/extensions.rb#L583\n    //\n    // if args.size == 1 && !args[0]\n    //\n    // In the above Ruby code, args[0] is undefined and Opal will try to call the function \"!\" on an undefined object.\n    return this.$resolves_attributes(Opal.nil)\n  }\n  return this.$resolves_attributes(value)\n}\n\n/**\n * @deprecated Please use the <code>resolveAttributes</pre> function on the {@link Extensions/Processor}.\n * @memberof Extensions/Processor\n * @see {Processor#resolveAttributes}\n */\nProcessor.prototype.resolvesAttributes = Processor.prototype.resolveAttributes\n\n/**\n * Get the configuration JSON for this processor instance.\n * @memberof Extensions/Processor\n */\nProcessor.prototype.getConfig = function () {\n  return fromHash(this.config)\n}\n\n/**\n * @memberof Extensions/Processor\n */\nProcessor.prototype.option = function (key, value) {\n  this.$option(key, value)\n}\n\n/**\n * @namespace\n * @module Extensions/BlockProcessor\n */\nvar BlockProcessor = Extensions.BlockProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @param {string} context - A context name\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.onContext = function (context) {\n  return this.$on_context(context)\n}\n\n/**\n * @param {...string} contexts - A list of context names\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.onContexts = function (contexts) {\n  return this.$on_contexts(Array.prototype.slice.call(arguments))\n}\n\n/**\n * @returns {string}\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.getName = function () {\n  var name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/BlockProcessor\n */\nBlockProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @namespace\n * @module Extensions/BlockMacroProcessor\n */\nvar BlockMacroProcessor = Extensions.BlockMacroProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @returns {string} - the block macro name\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.getName = function () {\n  var name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/BlockMacroProcessor\n */\nBlockMacroProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @namespace\n * @module Extensions/InlineMacroProcessor\n */\nvar InlineMacroProcessor = Extensions.InlineMacroProcessor\n\n/**\n * @param {Object} value - a JSON of default values for attributes\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.defaultAttributes = function (value) {\n  this.$default_attributes(toHash(value))\n}\n\n/**\n * @returns {string} - the inline macro name\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.getName = function () {\n  var name = this.name\n  return name === Opal.nil ? undefined : name\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.parseContentAs = function (value) {\n  this.$parse_content_as(value)\n}\n\n/**\n * @param {string} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.matchFormat = function (value) {\n  this.$match_format(value)\n}\n\n/**\n * @param {RegExp} value\n * @memberof Extensions/InlineMacroProcessor\n */\nInlineMacroProcessor.prototype.match = function (value) {\n  this.$match(value)\n}\n\n/**\n * @namespace\n * @module Extensions/IncludeProcessor\n */\nvar IncludeProcessor = Extensions.IncludeProcessor\n\n/**\n * @memberof Extensions/IncludeProcessor\n */\nIncludeProcessor.prototype.handles = function (block) {\n  return Opal.send(this, 'handles?', null, toBlock(block))\n}\n\n/**\n * @memberof Extensions/IncludeProcessor\n */\nIncludeProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/TreeProcessor\n */\nvar TreeProcessor = Extensions.TreeProcessor\n\n/**\n * @memberof Extensions/TreeProcessor\n */\nTreeProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/Postprocessor\n */\nvar Postprocessor = Extensions.Postprocessor\n\n/**\n * @memberof Extensions/Postprocessor\n */\nPostprocessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/Preprocessor\n */\nvar Preprocessor = Extensions.Preprocessor\n\n/**\n * @memberof Extensions/Preprocessor\n */\nPreprocessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @namespace\n * @module Extensions/DocinfoProcessor\n */\nvar DocinfoProcessor = Extensions.DocinfoProcessor\n\n/**\n * @memberof Extensions/DocinfoProcessor\n */\nDocinfoProcessor.prototype.prefer = function () {\n  this.$prefer()\n}\n\n/**\n * @param {string} value - The docinfo location (\"head\", \"header\" or \"footer\")\n * @memberof Extensions/DocinfoProcessor\n */\nDocinfoProcessor.prototype.atLocation = function (value) {\n  this.$at_location(value)\n}\n\nfunction initializeProcessorClass (superclassName, className, functions) {\n  var superClass = Opal.const_get_qualified(Extensions, superclassName)\n  return initializeClass(superClass, className, functions, {\n    'handles?': function () {\n      return true\n    }\n  })\n}\n\n// Postprocessor\n\n/**\n * Create a postprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createPostprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('Postprocessor', name, functions)\n}\n\n/**\n * Create and instantiate a postprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newPostprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createPostprocessor(name, functions).$new()\n}\n\n// Preprocessor\n\n/**\n * Create a preprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createPreprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('Preprocessor', name, functions)\n}\n\n/**\n * Create and instantiate a preprocessor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newPreprocessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createPreprocessor(name, functions).$new()\n}\n\n// Tree Processor\n\n/**\n * Create a tree processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createTreeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('TreeProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a tree processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newTreeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createTreeProcessor(name, functions).$new()\n}\n\n// Include Processor\n\n/**\n * Create an include processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createIncludeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('IncludeProcessor', name, functions)\n}\n\n/**\n * Create and instantiate an include processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newIncludeProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createIncludeProcessor(name, functions).$new()\n}\n\n// Docinfo Processor\n\n/**\n * Create a Docinfo processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createDocinfoProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('DocinfoProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a Docinfo processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newDocinfoProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createDocinfoProcessor(name, functions).$new()\n}\n\n// Block Processor\n\n/**\n * Create a block processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createBlockProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('BlockProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a block processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newBlockProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createBlockProcessor(name, functions).$new()\n}\n\n// Inline Macro Processor\n\n/**\n * Create an inline macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createInlineMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('InlineMacroProcessor', name, functions)\n}\n\n/**\n * Create and instantiate an inline macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newInlineMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createInlineMacroProcessor(name, functions).$new()\n}\n\n// Block Macro Processor\n\n/**\n * Create a block macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.createBlockMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return initializeProcessorClass('BlockMacroProcessor', name, functions)\n}\n\n/**\n * Create and instantiate a block macro processor\n * @description this API is experimental and subject to change\n * @memberof Extensions\n */\nExtensions.newBlockMacroProcessor = function (name, functions) {\n  if (arguments.length === 1) {\n    functions = name\n    name = null\n  }\n  return this.createBlockMacroProcessor(name, functions).$new()\n}\n\n// Converter API\n\n/**\n * @namespace\n * @module Converter\n */\nvar Converter = Opal.const_get_qualified(Opal.Asciidoctor, 'Converter')\n\n// Alias\nOpal.Asciidoctor.Converter = Converter\n\n/**\n * Convert the specified node.\n *\n * @param {AbstractNode} node - the AbstractNode to convert\n * @param {string} transform - an optional String transform that hints at\n * which transformation should be applied to this node.\n * @param {Object} opts - a JSON of options that provide additional hints about how to convert the node (default: {})\n * @returns the {Object} result of the conversion, typically a {string}.\n * @memberof Converter\n */\nConverter.prototype.convert = function (node, transform, opts) {\n  return this.$convert(node, transform, toHash(opts))\n}\n\n/**\n * Create an instance of the converter bound to the specified backend.\n *\n * @param {string} backend - look for a converter bound to this keyword.\n * @param {Object} opts - a JSON of options to pass to the converter (default: {})\n * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.\n * @memberof Converter\n */\nConverter.create = function (backend, opts) {\n  return this.$create(backend, toHash(opts))\n}\n\n// Converter Factory API\n\n/**\n * @namespace\n * @module Converter/Factory\n */\nvar ConverterFactory = Opal.Asciidoctor.Converter.Factory\n\nvar ConverterBase = Opal.Asciidoctor.Converter.Base\n\n// Alias\nOpal.Asciidoctor.ConverterFactory = ConverterFactory\n\nvar ConverterBackendTraits = Opal.Asciidoctor.Converter.BackendTraits\n\n// Alias\nOpal.Asciidoctor.ConverterBackendTraits = ConverterBackendTraits\n\n/**\n * Register a custom converter in the global converter factory to handle conversion to the specified backends.\n * If the backend value is an asterisk, the converter is used to handle any backend that does not have an explicit converter.\n *\n * @param converter - The Converter instance to register\n * @param backends {Array} - A {string} {Array} of backend names that this converter should be registered to handle (optional, default: ['*'])\n * @return {*} - Returns nothing\n * @memberof Converter/Factory\n */\nConverterFactory.register = function (converter, backends) {\n  var object\n  var buildBackendTraitsFromObject = function (obj) {\n    return Object.assign({},\n      obj.basebackend ? { basebackend: obj.basebackend } : {},\n      obj.outfilesuffix ? { outfilesuffix: obj.outfilesuffix } : {},\n      obj.filetype ? { filetype: obj.filetype } : {},\n      obj.htmlsyntax ? { htmlsyntax: obj.htmlsyntax } : {},\n      obj.supports_templates ? { supports_templates: obj.supports_templates } : {}\n    )\n  }\n  var assignBackendTraitsToInstance = function (obj, instance) {\n    if (obj.backend_traits) {\n      instance.backend_traits = toHash(obj.backend_traits)\n    } else if (obj.backendTraits) {\n      instance.backend_traits = toHash(obj.backendTraits)\n    } else if (obj.basebackend || obj.outfilesuffix || obj.filetype || obj.htmlsyntax || obj.supports_templates) {\n      instance.backend_traits = toHash(buildBackendTraitsFromObject(obj))\n    }\n  }\n  var bridgeHandlesMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$handles?', 'handles', function () {\n      return true\n    })\n  }\n  var bridgeComposedMethodToInstance = function (obj, instance) {\n    bridgeMethodToInstance(obj, instance, '$composed', 'composed')\n  }\n  var bridgeMethodToInstance = function (obj, instance, methodName, functionName, defaultImplementation) {\n    if (typeof obj[methodName] === 'undefined') {\n      if (typeof obj[functionName] === 'function') {\n        instance[methodName] = obj[functionName]\n      } else if (defaultImplementation) {\n        instance[methodName] = defaultImplementation\n      }\n    }\n  }\n  var addRespondToMethod = function (instance) {\n    if (typeof instance['$respond_to?'] !== 'function') {\n      instance['$respond_to?'] = function (name) {\n        return typeof this[name] === 'function'\n      }\n    }\n  }\n  if (typeof converter === 'function') {\n    // Class\n    object = initializeClass(ConverterBase, converter.constructor.name, {\n      initialize: function (backend, opts) {\n        var self = this\n        var result = new converter(backend, opts) // eslint-disable-line\n        Object.assign(this, result)\n        assignBackendTraitsToInstance(result, self)\n        var propertyNames = Object.getOwnPropertyNames(converter.prototype)\n        for (var i = 0; i < propertyNames.length; i++) {\n          var propertyName = propertyNames[i]\n          if (propertyName !== 'constructor') {\n            self[propertyName] = result[propertyName]\n          }\n        }\n        if (typeof result.$convert === 'undefined' && typeof result.convert === 'function') {\n          self.$convert = result.convert\n        }\n        bridgeHandlesMethodToInstance(result, self)\n        bridgeComposedMethodToInstance(result, self)\n        addRespondToMethod(self)\n        self.super(backend, opts)\n      }\n    })\n    object.$extend(ConverterBackendTraits)\n  } else if (typeof converter === 'object') {\n    // Instance\n    if (typeof converter.$convert === 'undefined' && typeof converter.convert === 'function') {\n      converter.$convert = converter.convert\n    }\n    assignBackendTraitsToInstance(converter, converter)\n    if (converter.backend_traits) {\n      // \"extends\" ConverterBackendTraits\n      var converterBackendTraitsFunctionNames = [\n        'basebackend',\n        'filetype',\n        'htmlsyntax',\n        'outfilesuffix',\n        'supports_templates',\n        'supports_templates?',\n        'init_backend_traits',\n        'backend_traits'\n      ]\n      for (var functionName of converterBackendTraitsFunctionNames) {\n        converter['$' + functionName] = ConverterBackendTraits.prototype['$' + functionName]\n      }\n      converter.$$meta = ConverterBackendTraits\n    }\n    bridgeHandlesMethodToInstance(converter, converter)\n    bridgeComposedMethodToInstance(converter, converter)\n    addRespondToMethod(converter)\n    object = converter\n  }\n  var args = [object].concat(backends)\n  return Converter.$register.apply(Converter, args)\n}\n\n/**\n * Retrieves the singleton instance of the converter factory.\n *\n * @param {boolean} initialize - instantiate the singleton if it has not yet\n * been instantiated. If this value is false and the singleton has not yet been\n * instantiated, this method returns a fresh instance.\n * @returns {Converter/Factory} an instance of the converter factory.\n * @memberof Converter/Factory\n */\nConverterFactory.getDefault = function (initialize) {\n  return this.$default(initialize)\n}\n\n/**\n * Create an instance of the converter bound to the specified backend.\n *\n * @param {string} backend - look for a converter bound to this keyword.\n * @param {Object} opts - a JSON of options to pass to the converter (default: {})\n * @returns {Converter} - a converter instance for converting nodes in an Asciidoctor AST.\n * @memberof Converter/Factory\n */\nConverterFactory.prototype.create = function (backend, opts) {\n  return this.$create(backend, toHash(opts))\n}\n\n/**\n * Get the converter registry.\n * @returns the registry of converter instances or classes keyed by backend name\n * @memberof Converter/Factory\n */\nConverterFactory.getRegistry = function () {\n  return fromHash(Converter.$registry())\n}\n\n/**\n * Lookup the custom converter registered with this factory to handle the specified backend.\n *\n * @param {string} backend - The {string} backend name.\n * @returns the {Converter} class or instance registered to convert the specified backend or undefined if no match is found.\n * @memberof Converter/Factory\n */\nConverterFactory.for = function (backend) {\n  const converter = Converter.$for(backend)\n  return converter === Opal.nil ? undefined : converter\n}\n\n/*\n * Unregister any custom converter classes that are registered with this factory.\n * Intended for testing only!\n */\nConverterFactory.unregisterAll = function () {\n  var internalRegistry = Converter.DefaultFactory.$$cvars['@@registry']\n  Converter.DefaultFactory.$$cvars['@@registry'] = toHash({ html5: internalRegistry['$[]']('html5') })\n}\n\n// Built-in converter\n\n/**\n * @namespace\n * @module Converter/Html5Converter\n */\nvar Html5Converter = Opal.Asciidoctor.Converter.Html5Converter\n\n// Alias\nOpal.Asciidoctor.Html5Converter = Html5Converter\n\n/**\n * Create a new Html5Converter.\n * @returns {Html5Converter} - a Html5Converter\n * @memberof Converter/Html5Converter\n */\nHtml5Converter.create = function () {\n  return this.$new()\n}\n\n/**\n * Converts an {AbstractNode} using the given transform.\n * This method must be implemented by a concrete converter class.\n *\n * @param {AbstractNode} node - The concrete instance of AbstractNode to convert.\n * @param {string} [transform] - An optional String transform that hints at which transformation should be applied to this node.\n * If a transform is not given, the transform is often derived from the value of the {AbstractNode#getNodeName} property. (optional, default: undefined)\n * @param {Object} [opts]- An optional JSON of options hints about how to convert the node. (optional, default: undefined)\n *\n * @returns {string} - the String result.\n * @memberof Converter/Html5Converter\n */\nHtml5Converter.prototype.convert = function (node, transform, opts) {\n  return this.$convert(node, transform, opts)\n}\n\n\nvar ASCIIDOCTOR_JS_VERSION = '2.2.1';\n\n  /**\n   * Get Asciidoctor.js version number.\n   *\n   * @memberof Asciidoctor\n   * @returns {string} - returns the version number of Asciidoctor.js.\n   */\n  Opal.Asciidoctor.prototype.getVersion = function () {\n    return ASCIIDOCTOR_JS_VERSION\n  }\n  return Opal.Asciidoctor\n}))\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../../../buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../../../webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js?");

/***/ }),

/***/ "./node_modules/amplitudejs/dist/amplitude.js":
/*!****************************************************!*\
  !*** ./node_modules/amplitudejs/dist/amplitude.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 47);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _package = __webpack_require__(59);\n\nmodule.exports = {\n  version: _package.version,\n\n  audio: null,\n\n  active_metadata: {},\n\n  active_album: \"\",\n\n  active_index: 0,\n\n  active_playlist: null,\n\n  playback_speed: 1.0,\n\n  callbacks: {},\n\n  songs: [],\n\n  playlists: {},\n\n  start_song: \"\",\n\n  starting_playlist: \"\",\n\n  starting_playlist_song: \"\",\n\n  repeat: false,\n\n  repeat_song: false,\n\n  shuffle_list: {},\n\n  shuffle_on: false,\n\n  default_album_art: \"\",\n\n  default_playlist_art: \"\",\n\n  debug: false,\n\n  volume: 0.5,\n\n  pre_mute_volume: 0.5,\n\n  volume_increment: 5,\n\n  volume_decrement: 5,\n\n  soundcloud_client: \"\",\n\n  soundcloud_use_art: false,\n\n  soundcloud_song_count: 0,\n\n  soundcloud_songs_ready: 0,\n\n  is_touch_moving: false,\n\n  buffered: 0,\n\n  bindings: {},\n\n  continue_next: true,\n\n  delay: 0,\n\n  player_state: \"stopped\",\n\n  web_audio_api_available: false,\n\n  context: null,\n\n  source: null,\n\n  analyser: null,\n\n  visualizations: {\n    available: [],\n\n    active: [],\n\n    backup: \"\"\n  },\n\n  waveforms: {\n    sample_rate: 100,\n\n    built: []\n  }\n}; /**\n    * These variables make Amplitude run. The config is the most important\n    * containing active settings and parameters.\n    *\n    * The config JSON is the global settings for ALL of Amplitude functions.\n    * This is global and contains all of the user preferences. The default\n    * settings are set, and the user overwrites them when they initialize\n    * Amplitude.\n    *\n    * @module config\n    * @type {object}\n    * @property {string}  \tconfig.version          \t\t\t\t- The current version of AmplitudeJS.\n    * @property {object} \tconfig.audio \t\t \t\t\t\t\t\t\t\t-\tHandles all of the audio.\n    * @property {object} \tconfig.active_metadata\t\t\t\t\t- Contains the active metadata for the song.\n    * @property {string} \tconfig.active_album\t\t\t\t\t\t\t- Holds the active album name. Used to check and see if the album changed and run the album changed callback.\n    * @property {number} \tconfig.active_index\t\t\t\t\t\t\t- Contains the index of the actively playing song.\n    * @property {string} \tconfig.active_playlist\t\t\t\t\t- Contains the key to the active playlist index.\n    * @property {number} \tconfig.playback_speed\t\t\t\t\t\t- Sets the initial playback speed of the song. The values for this can be 1.0, 1.5, 2.0\n    * @property {object} \tconfig.callbacks\t\t\t\t\t\t\t\t- The user can pass a JSON object with a key => value store of callbacks to be run at certain events.\n    * @property {array} \t\tconfig.songs\t\t\t\t\t\t\t\t\t\t- Contains all of the songs the user has passed to Amplitude to use.\n    * @property {object} \tconfig.playlists\t\t\t\t\t\t\t\t- Contains all of the playlists the user created.\n    * @property {object} \tconfig.start_song \t\t\t\t\t\t\t- The index of the song that AmplitudeJS should start with.\n    * @property {string} \tconfig.starting_playlist \t\t\t\t- The starting playlist the player will intiialize to.\n    * @property {string} \tconfig.starting_playlist_song \t- The index of the song in the playlist that should be started.\n    * @property {boolean} \tconfig.repeat \t\t\t\t\t\t\t\t\t- When repeat is on, when the song ends the song will replay itself.\n    * @property {object} \tconfig.shuffle_list\t\t\t\t\t\t\t- When shuffled, gets populated with the songs the user provided in a random order.\n    * @property {boolean} \tconfig.shuffle_on\t\t\t\t\t\t\t\t- When on, gets set to true so when traversing through songs, AmplitudeJS knows whether or not to use the songs object or the shuffle_list\n    * @property {string}\t\tconfig.default_album_art \t\t\t\t- The user can set default album art to be displayed if the song they set doesn't contain album art.\n    * @property {string} \tconfig.default_playlist_art \t\t- The user can set default playlist art to be displayed if the playlist they are setting meta data for doesn't contain an art picture.\n    * @property {boolean} \tconfig.debug\t\t\t\t\t\t\t\t\t\t- When set to true, AmplitudeJS will print to the console any errors providing helpful feedback to the user.\n    * @property {number} \tconfig.volume \t\t\t\t\t\t\t\t\t- The user can set the initial volume to a number between 0 and 1 over-riding the default of .5\n    * @property {number} \tconfig.pre_mute_volume \t\t\t\t\t- This is set on mute so that when a user un-mutes AmplitudeJS knows what to restore the volume to.\n    * @property {number}\t\tconfig.volume_increment \t\t\t\t- The default values are an integer between 1 and 100 for how much the volume should increase when the user presses the volume up button.\n    * @property {number}\t\tconfig.volume_decrement \t\t\t\t- The default values are an integer between 1 and 100 for how much the volume should decrease when the user presses the volume down button.\n    * @property {string} \tconfig.soundcloud_client \t\t\t\t- When using SoundCloud, the user will have to provide their API Client ID\n    * @property {boolean} \tconfig.soundcloud_use_art \t\t\t- The user can set this to true and AmplitudeJS will use the album art for the song returned from the Soundcloud API\n    * @property {number} \tconfig.soundcloud_song_count \t\t- Used on config to count how many songs are from Soundcloud and compare it to how many are ready for when to move to the rest of the configuration\n    * @property {number} \tconfig.soundcloud_songs_ready \t- Used on config to count how many songs are ready so when we get all of the data from the SoundCloud API that we need this should match the SoundCloud song count meaning we can move to the rest of the config.\n    * @property {integer}\tconfig.is_touch_moving \t\t\t\t\t- Flag for if the user is moving the screen.\n    * @property {boolean}\tconfig.buffered\t\t\t\t\t\t\t\t\t- How much of the song is buffered.\n    * @property {object} \tconfig.bindings\t\t\t\t\t\t\t\t\t- Array of bindings to certain key events.\n    * @property {boolean} \tconfig.continue_next \t\t\t\t\t\t- Determines when a song ends, we should continue to the next song.\n    * @property {number}   config.delay \t\t\t\t\t\t\t\t\t\t- Sets the delay between songs in MS.\n    * @property {boolean}  config.use_web_audio_api \t\t\t\t- Flag that determines if the user wants to use Web Audio API Components.\n    * @property {boolean}  config.web_audio_api_available  - Flag that determines if the Web Audio API is available.\n    * @property {object}  \tconfig.context \t\t\t\t\t\t\t\t\t- Web Audio API Context\n    * @property {object}\t\tconfig.source \t\t\t\t\t\t\t\t\t- Web Audio API Source\n    * @property {object} \tconfig.analyser \t\t\t\t\t\t\t\t- Web Audio API Analyser\n    * @property {string}\t\tconfig.player_state \t\t\t\t\t\t- The current state of the player.\n    */\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nvar _metaDataElements = __webpack_require__(7);\n\nvar _metaDataElements2 = _interopRequireDefault(_metaDataElements);\n\nvar _callbacks = __webpack_require__(9);\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _visualizations = __webpack_require__(16);\n\nvar _visualizations2 = _interopRequireDefault(_visualizations);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Interacts directly with native functions of the Audio element. Logic\n * leading up to these methods are handled by click handlers which call\n * helpers and visual synchronizers. These are the core functions of AmplitudeJS.\n * Every other function that leads to these prepare the information to be\n * acted upon by these functions.\n *\n * @module core/Core\n */\n\n\n/**\n * Imports AmplitudeJS Debug Utility\n * @module utilities/debug\n */\n\n\n/**\n * Imports the Meta Data Visual Elements module.\n * @module visual/metaDataElements\n */\n\n\n/**\n * Imports the Audio Navigation module.\n * @module utilities/audioNavigation\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Core = function () {\n  /**\n   * Plays the active song. If the current song is live, it reconnects\n   * the stream before playing.\n   *\n   * Public Accessor: Amplitude.play()\n   *\n   * @access public\n   */\n  function play() {\n    _visualizations2.default.stop();\n    _visualizations2.default.run();\n\n    /*\n    If the audio is live we re-conenct the stream.\n    */\n    if (_config2.default.active_metadata.live) {\n      reconnectStream();\n    }\n\n    /*\n    Mobile remote sources need to be reconnected on play. I think this is\n    because mobile browsers are optimized not to load all resources\n    for speed reasons. We only do this if mobile and the paused button\n    is not clicked. If the pause button was clicked then we don't reconnect\n    or the user will lose their place in the stream.\n    */\n    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && !_config2.default.paused) {\n      reconnectStream();\n    }\n\n    /*\n    Play the song and set the playback rate to the playback\n    speed.\n    */\n    var playPromise = _config2.default.audio.play();\n\n    if (playPromise !== undefined) {\n      playPromise.then(function (_) {}).catch(function (error) {});\n    }\n    _config2.default.audio.play();\n    _config2.default.audio.playbackRate = _config2.default.playback_speed;\n  }\n\n  /**\n   * Pauses the active song. If it's live, it disconnects the stream.\n   *\n   * Public Accessor: Amplitude.pause()\n   *\n   * @access public\n   */\n  function pause() {\n    _visualizations2.default.stop();\n\n    /*\n    Pause the active song.\n    */\n    _config2.default.audio.pause();\n\n    /*\n    Flag that pause button was clicked.\n    */\n    _config2.default.paused = true;\n\n    /*\n    If the song is live, we disconnect the stream so we aren't\n    saving it to memory.\n    */\n    if (_config2.default.active_metadata.live) {\n      disconnectStream();\n    }\n  }\n\n  /**\n   * Stops the active song by setting the current song time to 0.\n   * When the user resumes, it will be from the beginning.\n   * If it's a live stream it disconnects.\n   *\n   * Public Accessor: Amplitude.stop()\n   *\n   * @access public\n   */\n  function stop() {\n    _visualizations2.default.stop();\n\n    /*\n    Set the current time of the song to 0 which will reset the song.\n    */\n    if (_config2.default.audio.currentTime != 0) {\n      _config2.default.audio.currentTime = 0;\n    }\n\n    /*\n    Run pause so the song will stop\n    */\n    _config2.default.audio.pause();\n\n    /*\n    If the song is live, disconnect the stream.\n    */\n    if (_config2.default.active_metadata.live) {\n      disconnectStream();\n    }\n\n    /*\n    Run the stop callback\n    */\n    _callbacks2.default.run(\"stop\");\n  }\n\n  /**\n   * Sets the song volume.\n   *\n   * Public Accessor: Amplitude.setVolume( volumeLevel )\n   *\n   * @access public\n   * @param {number} volumeLevel - A number between 1 and 100 as a percentage of\n   * min to max for a volume level.\n   */\n  function setVolume(volumeLevel) {\n    /*\n    If the volume is set to mute somewhere else, we sync the display.\n    */\n    if (volumeLevel == 0) {\n      _config2.default.audio.muted = true;\n    } else {\n      _config2.default.audio.muted = false;\n    }\n\n    /*\n    Sets the volume in the config so we can reference it later on.\n    */\n    _config2.default.volume = volumeLevel;\n\n    /*\n    Set the volume of the active song.\n    */\n    _config2.default.audio.volume = volumeLevel / 100;\n  }\n\n  /**\n   * Sets the song percentage. If it's a live song, we ignore this because\n   * we can't skip ahead. This is an issue if you have a playlist with\n   * a live source.\n   *\n   * Public Accessor: Amplitude.setSongLocation( songPercentage )\n   *\n   * @access public\n   * @param {number} songPercentage - A number between 1 and 100 as a percentage of song completion.\n   */\n  function setSongLocation(songPercentage) {\n    /*\n    As long as the song is not live, we can set the current time of the\n    song to the percentage the user passed in.\n    */\n    if (!_config2.default.active_metadata.live) {\n      _config2.default.audio.currentTime = _config2.default.audio.duration * (songPercentage / 100);\n    }\n  }\n\n  /**\n   * Skips to a location in a song\n   *\n   * Public Accessor: Amplitude.skipToLocation( seconds )\n   *\n   * @access public\n   * @param {number} seconds - An integer containing the seconds to skip to\n   */\n  function skipToLocation(seconds) {\n    /*\n    When the active song can be played through, we can check to\n    see if the seconds will work. We only bind the event handler\n    once and remove it once it's fired.\n    */\n    _config2.default.audio.addEventListener(\"canplaythrough\", function () {\n      /*\n      If the active song duration is greater than or equal to the\n      amount of seconds the user wants to skip to and the seconds\n      is greater than 0, we skip to the seconds defined.\n      */\n      if (_config2.default.audio.duration >= seconds && seconds > 0) {\n        _config2.default.audio.currentTime = seconds;\n      } else {\n        _debug2.default.writeMessage(\"Amplitude can't skip to a location greater than the duration of the audio or less than 0\");\n      }\n    }, { once: true });\n  }\n\n  /**\n   * Disconnects the live stream\n   *\n   * Public Accessor: Amplitude.disconnectStream()\n   *\n   * @access public\n   */\n  function disconnectStream() {\n    _config2.default.audio = new Audio();\n    _config2.default.audio.src = \"\";\n    _config2.default.audio.load();\n  }\n\n  /**\n   * Reconnects the live stream\n   *\n   * Public Accessor: Amplitude.reconnectStream()\n   *\n   * @access public\\\n   */\n  function reconnectStream() {\n    _config2.default.audio = new Audio();\n    _config2.default.audio.src = _config2.default.active_metadata.url;\n    _config2.default.audio.load();\n  }\n\n  /**\n   * Sets the playback speed for the song.\n   *\n   * @param {number} playbackSpeed The speed we want the song to play back at.\n   */\n  function setPlaybackSpeed(playbackSpeed) {\n    /*\n    Set the config playback speed.\n    */\n    _config2.default.playback_speed = playbackSpeed;\n\n    /*\n    Set the active song playback rate.\n    */\n    _config2.default.audio.playbackRate = _config2.default.playback_speed;\n  }\n\n  /*\n  Return publically facing functions\n  */\n  return {\n    play: play,\n    pause: pause,\n    stop: stop,\n    setVolume: setVolume,\n    setSongLocation: setSongLocation,\n    skipToLocation: skipToLocation,\n    disconnectStream: disconnectStream,\n    reconnectStream: reconnectStream,\n    setPlaybackSpeed: setPlaybackSpeed\n  };\n}();\n\n/**\n * Import the Visualizations from the FX module.\n * @module fx/visualizations\n */\n\n\n/**\n * Imports AmplitudeJS Callback Utility\n * @module utilities/callbacks\n */\n\n\n/**\n * Imports the Play/Pause Visual Elements module.\n * @module visual/playPauseElements\n */\n\n\n/**\n * Imports the Checks module.\n * @module utilities/checks\n */\nexports.default = Core;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Defines the visual representation of AmplitudeJS play pause elements.\n * @module visual/PlayPauseElements\n */\nvar PlayPauseElements = function () {\n  /**\n   * Syncs all play pause elements.\n   *\n   * @access public\n   */\n  function sync() {\n    syncGlobal();\n    syncPlaylist();\n    syncSong();\n    syncSongInPlaylist();\n  }\n\n  /**\n   * Syncs the global play pause buttons to the state of the active song.\n   *\n   * @access public\n   */\n  function syncGlobal() {\n    /*\n      Get the active song state.\n    */\n    var state = _config2.default.audio.paused ? \"paused\" : \"playing\";\n\n    /*\n      Get all play pause buttons.\n    */\n    var playPauseElements = document.querySelectorAll(\".amplitude-play-pause\");\n\n    /*\n      Iterate over all of the play pause elements syncing the\n      display visually.\n    */\n    for (var i = 0; i < playPauseElements.length; i++) {\n      /*\n        Grab the playlist and song attributes from the element.\n      */\n      var playlist = playPauseElements[i].getAttribute(\"data-amplitude-playlist\");\n      var song = playPauseElements[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        This method is responsible for only the global elements,\n        so we make sure there are no playlist or songs defined on\n        the element.\n      */\n      if (playlist == null && song == null) {\n        /*\n          Determines what classes we should add and remove\n          from the elements.\n        */\n        switch (state) {\n          case \"playing\":\n            setElementPlay(playPauseElements[i]);\n            break;\n          case \"paused\":\n            setElementPause(playPauseElements[i]);\n            break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the main playlist play pause buttons to the state of the active song.\n   *\n   * @access public\n   */\n  function syncPlaylist() {\n    var state = _config2.default.audio.paused ? \"paused\" : \"playing\";\n\n    /*\n      Get all of the main playlist play pause elements\n    */\n    var playlistPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n      Iterate over the play pause elements, syncing the state accordingly.\n    */\n    for (var i = 0; i < playlistPlayPauseElements.length; i++) {\n      /*\n        Grab the song attributes from the element.\n      */\n      var song = playlistPlayPauseElements[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        We want only the play pause elements for the main on a\n        playlist nothing else. We have another method for the\n        song in playlist play pause method.\n      */\n      if (song == null) {\n        /*\n          Determines what classes we should add and remove\n          from the elements.\n        */\n        switch (state) {\n          case \"playing\":\n            setElementPlay(playlistPlayPauseElements[i]);\n            break;\n          case \"paused\":\n            setElementPause(playlistPlayPauseElements[i]);\n            break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song play pause buttons to the state of the active song.\n   *\n   * @access public\n   */\n  function syncSong() {\n    var state = _config2.default.audio.paused ? \"paused\" : \"playing\";\n\n    /*\n      Get all of the individual song play pause buttons. These have an\n      amplitude-song-index that matches the active index attribute.\n    */\n    var songPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n    /*\n      Iterate over all of the song play pause elements\n    */\n    for (var i = 0; i < songPlayPauseElements.length; i++) {\n      /*\n        Grab the playlist attributes from the element.\n      */\n      var playlist = songPlayPauseElements[i].getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        We want only the song play pause buttons, not ones scoped in a playlist.\n      */\n      if (playlist == null) {\n        /*\n          Determines what classes we should add and remove\n          from the elements.\n        */\n        switch (state) {\n          case \"playing\":\n            setElementPlay(songPlayPauseElements[i]);\n            break;\n          case \"paused\":\n            setElementPause(songPlayPauseElements[i]);\n            break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song in playlist play pause buttons to the state of\n   * the active song.\n   *\n   * @access public\n   */\n  function syncSongInPlaylist() {\n    var state = _config2.default.audio.paused ? \"paused\" : \"playing\";\n\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    /*\n      Get all of the individual song play pause buttons. These have an\n      amplitude-song-index attribute. Some have amplitude-playlist which\n      means they are individual songs within a playlist.\n    */\n    var songInPlaylistPlayPauseElements = document.querySelectorAll('.amplitude-play-pause[data-amplitude-song-index=\"' + activePlaylistIndex + '\"][data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n      Iterate over all of the individual play pause elements for songs inspect\n      a playlist.\n    */\n    for (var i = 0; i < songInPlaylistPlayPauseElements.length; i++) {\n      /*\n        Determines what classes we should add and remove\n        from the elements.\n      */\n      switch (state) {\n        case \"playing\":\n          setElementPlay(songInPlaylistPlayPauseElements[i]);\n          break;\n        case \"paused\":\n          setElementPause(songInPlaylistPlayPauseElements[i]);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Sets all of the play pause buttons to paused.\n   *\n   * @access public\n   */\n  function syncToPause() {\n    /*\n      Gets all of the play pause elements\n    */\n    var playPauseElements = document.querySelectorAll(\".amplitude-play-pause\");\n\n    /*\n      Sets all of the elements to pause\n    */\n    for (var i = 0; i < playPauseElements.length; i++) {\n      setElementPause(playPauseElements[i]);\n    }\n  }\n\n  /**\n   * Sets an element to be playing by removing the 'amplitude-paused' class\n   * and adding the 'amplitude-playing' class\n   *\n   * @access public\n   * @param {element} element \t- The element getting the playing class added.\n   */\n  function setElementPlay(element) {\n    element.classList.add(\"amplitude-playing\");\n    element.classList.remove(\"amplitude-paused\");\n  }\n\n  /**\n   * Sets an element to be paused by adding the 'amplitude-paused' class\n   * and removing the 'amplitude-playing' class\n   *\n   * @access public\n   * @param {element} element \t- The element getting the paused class added.\n   */\n  function setElementPause(element) {\n    element.classList.remove(\"amplitude-playing\");\n    element.classList.add(\"amplitude-paused\");\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    sync: sync,\n    syncGlobal: syncGlobal,\n    syncPlaylist: syncPlaylist,\n    syncSong: syncSong,\n    syncSongInPlaylist: syncSongInPlaylist,\n    syncToPause: syncToPause\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = PlayPauseElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _callbacks = __webpack_require__(9);\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nvar _songSliderElements = __webpack_require__(14);\n\nvar _songSliderElements2 = _interopRequireDefault(_songSliderElements);\n\nvar _songPlayedProgressElements = __webpack_require__(20);\n\nvar _songPlayedProgressElements2 = _interopRequireDefault(_songPlayedProgressElements);\n\nvar _timeElements = __webpack_require__(15);\n\nvar _timeElements2 = _interopRequireDefault(_timeElements);\n\nvar _metaDataElements = __webpack_require__(7);\n\nvar _metaDataElements2 = _interopRequireDefault(_metaDataElements);\n\nvar _containerElements = __webpack_require__(49);\n\nvar _containerElements2 = _interopRequireDefault(_containerElements);\n\nvar _events = __webpack_require__(22);\n\nvar _events2 = _interopRequireDefault(_events);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Audio Navigation Utility.\n *\n * @module utilities/AudioNavigation\n */\n\n\n/**\n * Container Elements Module\n *\n * @module visual/ContainerElements\n */\n\n\n/**\n * Imports the Time Elements Module\n *\n * @module visual/TimeElements\n */\n\n\n/**\n * Imports the Song Slider Elements Module\n *\n * @module visual/SongSliderElements\n */\n\n\n/**\n * Imports the Checks Module\n *\n * @module utilities/Checks\n */\n\n\n/**\n * Imports the Core Module\n *\n * @module core/Core\n */\nvar AudioNavigation = function () {\n  /**\n   * Sets the next song\n   *\n   * @access public\n   * @param {boolean} [songEnded=false] If the song ended, this is set to true\n   * so we take into effect the repeat setting.\n   */\n  function setNext() {\n    var songEnded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    /*\n      Initializes the next index variable. This will be the\n      index of the song that is next.\n    */\n    var nextIndex = null;\n    var nextSong = {};\n\n    /*\n      Ensure we don't loop in the playlist if config.repeat is not true\n    */\n    var endOfList = false;\n\n    /*\n      Determines if we are repeating the song or not. If we are repeating,\n      the next song will be the same song index.\n    */\n    if (_config2.default.repeat_song) {\n      /*\n        If the playlist is shuffled, get the now playing index.\n      */\n      if (_config2.default.shuffle_on) {\n        nextIndex = _config2.default.shuffle_list[_config2.default.active_index].index;\n        nextSong = _config2.default.shuffle_list[nextIndex];\n      } else {\n        nextIndex = _config2.default.active_index;\n        nextSong = _config2.default.songs[nextIndex];\n      }\n    } else {\n      /*\n        If the shuffle is on, we use the shuffled list of\n        songs to determine our next song.\n      */\n      if (_config2.default.shuffle_on) {\n        /*\n          If the active shuffle index + 1 is less than the length, then\n          we use the next shuffle otherwise we go to the beginning\n          of the shuffle list.\n        */\n        if (parseInt(_config2.default.active_index) + 1 < _config2.default.shuffle_list.length) {\n          /*\n            Set the next index to be the index of the song in the shuffle list.\n          */\n          nextIndex = parseInt(_config2.default.active_index) + 1;\n        } else {\n          nextIndex = 0;\n          endOfList = true;\n        }\n\n        nextSong = _config2.default.shuffle_list[nextIndex];\n      } else {\n        /*\n          If the active index + 1 is less than the length of the songs, then\n          we use the next song otherwise we go to the beginning of the\n          song list.\n        */\n        if (parseInt(_config2.default.active_index) + 1 < _config2.default.songs.length) {\n          nextIndex = parseInt(_config2.default.active_index) + 1;\n        } else {\n          nextIndex = 0;\n          endOfList = true;\n        }\n\n        /*\n          Sets the next index.\n        */\n        nextSong = _config2.default.songs[nextIndex];\n      }\n    }\n\n    /*\n      Change the song after the next button has been pressed.\n    */\n    changeSong(nextSong, nextIndex);\n\n    /*\n    \tIf it's the end of the list and repeat is not on, do nothing.\n    */\n    if (endOfList && !_config2.default.repeat) {} else {\n      /*\n      If the song has ended and repeat is on, play the song.\n      */\n      if (!(songEnded && !_config2.default.repeat && endOfList)) {\n        _core2.default.play();\n      }\n    }\n\n    /*\n      Sync the play pause elements and run the\n      after next callback.\n    */\n    _playPauseElements2.default.sync();\n    _callbacks2.default.run(\"next\");\n\n    /*\n      If we repeated the song, run the repeat song callback.\n    */\n    if (_config2.default.repeat_song) {\n      _callbacks2.default.run(\"song_repeated\");\n    }\n  }\n\n  /**\n   * Sets the next song in a playlist\n   *\n   * @param {string} playlist - The playlist being shuffled\n   * @param {boolean} [songEnded=false] - If the song ended, this is set to true\n   * so we take into effect the repeat setting.\n   */\n  function setNextPlaylist(playlist) {\n    var songEnded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    /*\n      Initializes the next index\n    */\n    var nextIndex = null;\n    var nextSong = {};\n\n    /*\n      Ensure we don't loop in the playlist if config.repeat is not true\n    */\n    var endOfList = false;\n\n    /*\n      If we are repeating the song, then we just start the song over.\n    */\n    if (_config2.default.repeat_song) {\n      /*\n        If the playlist is shuffled, get the now playing index.\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        nextIndex = _config2.default.playlists[playlist].active_index;\n        nextSong = _config2.default.playlists[playlist].shuffle_list[nextIndex];\n      } else {\n        nextIndex = _config2.default.playlists[playlist].active_index;\n        nextSong = _config2.default.playlists[playlist].songs[nextIndex];\n      }\n    } else {\n      /*\n        If the playlist is shuffled we get the next index of the playlist.\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        /*\n          If the active shuffle index + 1 is less than the length of the shuffle list,\n          then we use the next shuffle otherwise we go to the beginning of the shuffle list.\n        */\n        if (parseInt(_config2.default.playlists[playlist].active_index) + 1 < _config2.default.playlists[playlist].shuffle_list.length) {\n          /*\n            Set the next index to be the index of the song in the shuffle list.\n          */\n          nextIndex = _config2.default.playlists[playlist].active_index + 1;\n        } else {\n          nextIndex = 0;\n          endOfList = true;\n        }\n\n        nextSong = _config2.default.playlists[playlist].shuffle_list[nextIndex];\n      } else {\n        /*\n          If the active index +1 is less than the length of the songs in the playlist,\n          then we use the next song otherwise we go to the beginning of the playlist.\n        */\n        if (parseInt(_config2.default.playlists[playlist].active_index) + 1 < _config2.default.playlists[playlist].songs.length) {\n          nextIndex = parseInt(_config2.default.playlists[playlist].active_index) + 1;\n        } else {\n          nextIndex = 0;\n          endOfList = true;\n        }\n\n        /*\n          Sets the next song.\n        */\n        nextSong = _config2.default.playlists[playlist].songs[nextIndex];\n      }\n    }\n\n    /*\n      Sets the active playlist to the playlist we are on.\n    */\n    setActivePlaylist(playlist);\n\n    /*\n      Change the song within the playlist.\n    */\n    changeSongPlaylist(playlist, nextSong, nextIndex);\n\n    /*\n      If it's the end of the playlist and we aren't repeating, do nothing.\n    */\n    if (endOfList && !_config2.default.repeat) {} else {\n      if (!(songEnded && !_config2.default.repeat && endOfList)) {\n        _core2.default.play();\n      }\n    }\n\n    /*\n      Sync the play pause buttons.\n    */\n    _playPauseElements2.default.sync();\n    _callbacks2.default.run(\"next\");\n\n    /*\n      Repeat the song.\n    */\n    if (_config2.default.repeat_song) {\n      _callbacks2.default.run(\"song_repeated\");\n    }\n  }\n\n  /**\n   * Sets the previous song on the global songs array.\n   *\n   * @access private\n   */\n  function setPrevious() {\n    /*\n      Initializes the previous index\n    */\n    var previousIndex = null;\n    var previousSong = {};\n\n    /*\n      If we are repeating the song, then we just start the song over.\n    */\n    if (_config2.default.repeat_song) {\n      /*\n        If the config is shuffled, get the now playing index.\n      */\n      if (_config2.default.shuffle_on) {\n        previousIndex = _config2.default.active_index;\n        previousSong = _config2.default.shuffle_list[previousIndex];\n      } else {\n        previousIndex = _config2.default.active_index;\n        previousSong = _config2.default.songs[previousIndex];\n      }\n    } else {\n      /*\n        Get the previous index. If the previous index will be less than 0, get the\n        last song of the array and continue.\n      */\n      if (parseInt(_config2.default.active_index) - 1 >= 0) {\n        previousIndex = parseInt(_config2.default.active_index - 1);\n      } else {\n        previousIndex = parseInt(_config2.default.songs.length - 1);\n      }\n\n      /*\n        If the config is shuffled, we grab the song from the shuffle list\n      */\n      if (_config2.default.shuffle_on) {\n        /*\n          Grab song from the shuffle list\n        */\n        previousSong = _config2.default.shuffle_list[previousIndex];\n      } else {\n        /*\n          Grab song from the songs array\n        */\n        previousSong = _config2.default.songs[previousIndex];\n      }\n    }\n    /*\n      Change the song after the next button has been pressed.\n    */\n    changeSong(previousSong, previousIndex);\n\n    /*\n      Play the newest song.\n    */\n    _core2.default.play();\n\n    /*\n      Sync the play pause elements and run the\n      after next callback.\n    */\n    _playPauseElements2.default.sync();\n    _callbacks2.default.run(\"prev\");\n\n    /*\n      If we repeated the song, run the repeat song callback.\n    */\n    if (_config2.default.repeat_song) {\n      _callbacks2.default.run(\"song_repeated\");\n    }\n  }\n\n  /**\n   * Sets the previous playlist song.\n   *\n   * @access private\n   *\n   * @prop {string} playlist  - The playlist we are navigating in.\n   */\n  function setPreviousPlaylist(playlist) {\n    /*\n      Initializes the previous index\n    */\n    var previousIndex = null;\n    var previousSong = {};\n\n    /*\n      If we are repeating the song, then we just start the song over.\n    */\n    if (_config2.default.repeat_song) {\n      /*\n        If the playlist is shuffled, get the now playing index.\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        previousIndex = _config2.default.playlists[playlist].active_index;\n        previousSong = _config2.default.playlists[playlist].shuffle_list[previousIndex];\n      } else {\n        previousIndex = _config2.default.playlists[playlist].active_index;\n        previousSong = _config2.default.playlists[playlist].songs[previousIndex];\n      }\n    } else {\n      /*\n        Get the previous index. If the previous index will be less than 0, get the\n        last song of the array and continue.\n      */\n      if (parseInt(_config2.default.playlists[playlist].active_index) - 1 >= 0) {\n        previousIndex = parseInt(_config2.default.playlists[playlist].active_index - 1);\n      } else {\n        previousIndex = parseInt(_config2.default.playlists[playlist].songs.length - 1);\n      }\n\n      /*\n        If the playlist is shuffled, we grab the song from the shuffle list\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        /*\n          Grab song from the shuffle list\n        */\n        previousSong = _config2.default.playlists[playlist].shuffle_list[previousIndex];\n      } else {\n        /*\n          Grab song from the songs array\n        */\n        previousSong = _config2.default.playlists[playlist].songs[previousIndex];\n      }\n    }\n\n    /*\n      Sets the active playlist to the playlist we are on.\n    */\n    setActivePlaylist(playlist);\n\n    /*\n      Change the song within the playlist.\n    */\n    changeSongPlaylist(playlist, previousSong, previousIndex);\n\n    /*\n      Plays the song\n    */\n    _core2.default.play();\n\n    /*\n      Sync the play pause buttons.\n    */\n    _playPauseElements2.default.sync();\n    _callbacks2.default.run(\"prev\");\n\n    /*\n      Repeat the song.\n    */\n    if (_config2.default.repeat_song) {\n      _callbacks2.default.run(\"song_repeated\");\n    }\n  }\n\n  /**\n   * Change song in the songs array.\n   *\n   * @access private\n   * @prop {object} song  - The song we are changing to.\n   * @prop {number} index - The index we are changing to.\n   * @prop {boolean} direct - Determines if it was a direct click on the song. We\n   *      then don't care if shuffle is on or not.\n   */\n  function changeSong(song, index) {\n    var direct = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    /*\n      Prepare the song change.\n    */\n    prepareSongChange(song);\n\n    /*\n      Change the song.\n       We're removing/adding event listeners on \n      the audio object before we create a new one\n      and then after we create it, re-binding.\n    */\n    _events2.default.destroyAudioBindings();\n    _config2.default.audio = new Audio(song.url);\n    _events2.default.rebindAudio();\n    _callbacks2.default.initialize();\n\n    _config2.default.audio.src = song.url;\n    _config2.default.active_metadata = song;\n    _config2.default.active_album = song.album;\n\n    _config2.default.active_index = parseInt(index);\n\n    /*\n      Set new information now that the song has changed.\n    */\n    afterSongChange(direct);\n  }\n\n  /**\n   * Handles a song change in the playlist\n   *\n   * @access private\n   * @prop {string} playlist - The playlist we are changing the song on.\n   * @prop {object} song     - The song we are changing to in the playlist.\n   * @prop {number} index    - The inded of the song we are changing to in the playlist.\n   * @prop {boolean} direct - Determines if it was a direct click on the song. We\n   *      then don't care if shuffle is on or not.\n   */\n  function changeSongPlaylist(playlist, song, index) {\n    var direct = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    /*\n      Prepare the song change.\n    */\n    prepareSongChange(song);\n\n    /*\n      Change the song.\n    */\n    _events2.default.destroyAudioBindings();\n    _config2.default.audio = new Audio();\n    _events2.default.rebindAudio();\n    _callbacks2.default.initialize();\n\n    _config2.default.audio.src = song.url;\n    _config2.default.active_metadata = song;\n    _config2.default.active_album = song.album;\n    _config2.default.active_index = null;\n\n    _config2.default.playlists[playlist].active_index = parseInt(index);\n\n    /*\n      Set new information now that the song has changed.\n    */\n    afterSongChange(direct);\n  }\n\n  /**\n   *  Prepares a song change\n   *\n   * @access private\n   * @prop {object} song  - The song we change to.\n   */\n  function prepareSongChange(song) {\n    /*\n      Stop the current song.\n    */\n    _core2.default.stop();\n\n    /*\n      Sync all of the elements to a stopped song.\n    */\n    _playPauseElements2.default.syncToPause();\n    _songSliderElements2.default.resetElements();\n    _songPlayedProgressElements2.default.resetElements();\n    _timeElements2.default.resetCurrentTimes();\n\n    /*\n      If an album changes, fire an album change.\n    */\n    if (_checks2.default.newAlbum(song)) {\n      _callbacks2.default.run(\"album_change\");\n    }\n  }\n\n  /**\n   * Updates data on the display after a song has changed.\n   * @prop {boolean} direct - Determines if it was a direct click on the song. We\n   *      then don't care if shuffle is on or not.\n   * @access private\n   */\n  function afterSongChange(direct) {\n    _metaDataElements2.default.displayMetaData();\n    _containerElements2.default.setActive(direct);\n    _timeElements2.default.resetDurationTimes();\n\n    /*\n      Run the song change callback.\n    */\n    _callbacks2.default.run(\"song_change\");\n  }\n\n  /**\n   * Sets the active playlist\n   *\n   * @access public\n   * @param {string} playlist - The string of the playlist being set to active.\n   */\n  function setActivePlaylist(playlist) {\n    /*\n      If the active playlist is different than the playlist being set,\n      we run the `playlist_changed` callback.\n    */\n    if (_config2.default.active_playlist != playlist) {\n      _callbacks2.default.run(\"playlist_changed\");\n      /*\n        Set the active playlist to the playlist parameter. Only need to\n        set if it's different.\n      */\n      _config2.default.active_playlist = playlist;\n\n      if (playlist != null) {\n        _config2.default.playlists[playlist].active_index = 0;\n      }\n    }\n  }\n\n  /*\n    Return the publically facing methods\n  */\n  return {\n    setNext: setNext,\n    setNextPlaylist: setNextPlaylist,\n    setPrevious: setPrevious,\n    setPreviousPlaylist: setPreviousPlaylist,\n    changeSong: changeSong,\n    changeSongPlaylist: changeSongPlaylist,\n    setActivePlaylist: setActivePlaylist\n  };\n}();\n\n/**\n * Time Update Handle\n * \n * @module events/Events\n */\n\n\n/**\n * Meta Data Elements Module\n *\n * @module visual/MetaDataElements\n */\n\n\n/**\n * Imports the Song Played Progress Elements Module\n *\n * @module visual/SongPlayedProgressElements\n */\n\n\n/**\n * Imports the Play Pause Elements Module\n *\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the Callbacks Module\n *\n * @module utilities/Callbacks\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = AudioNavigation;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the debugging of AmplitudeJS\n * @module utilities/Debug\n */\nvar Debug = function () {\n  /**\n   * Writes out debug message to the console if enabled.\n   *\n   * Public Accessor: Debug.writeMessage( message )\n   *\n   * @access public\n   * @param {string} message - The string that gets printed to alert the user of a debugging error.\n   */\n  function writeMessage(message) {\n    /*\n      If the user has flagged AmplitudeJS to debug, we print out a message\n      to the console.\n    */\n    if (_config2.default.debug) {\n      console.log(message);\n    }\n  }\n\n  /*\n    Returns the public facing methods\n  */\n  return {\n    writeMessage: writeMessage\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = Debug;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Checks Module. Checks for new songs, albums, and playlists\n *\n * @module utilities/Checks\n */\nvar Checks = function () {\n  /**\n   * Checks to see if the new song to be played is different than the song\n   * that is currently playing. To be true, the user would have selected\n   * play on a new song with a new index. To be false, the user would have\n   * clicked play/pause on the song that was playing.\n   *\n   * Public Accessor: Checks.newSong( playlist, songIndex )\n   * @access public\n   * @param {string} playlist - The playlist we are checking the new song for. Could be null\n   * @param {number} songIndex - The index of the new song to be played.\n   * @returns {boolean} True if we are setting a new song, false if we are not setting a new song.\n   */\n  function newSong(playlist, songIndex) {\n    /*\n      If the playlists don't match, then it's definitely a new song.\n    */\n    if (_config2.default.active_playlist != playlist) {\n      return true;\n    } else {\n      /*\n        If we aren't in a playlist, we check the active index.\n      */\n      if (_config2.default.active_playlist == null && playlist == null) {\n        /*\n          If the active indexes don't match, then it's a new song.\n        */\n        if (_config2.default.active_index != songIndex) {\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        /*\n          If we are in a playlist, then we check to see if the\n          new song index matches the active index.\n        */\n        if (_config2.default.active_playlist == playlist && _config2.default.playlists[playlist].active_index != songIndex) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n  }\n\n  /**\n   * Checks to see if there is a new album\n   *\n   * Public Accessor: Checks.newAlbum( album )\n   *\n   * @access public\n   * @param {string} album - Checks to see if the new song will have a new album.\n   * @returns {boolean} True if there is a new album, false if there is not a new ablum.\n   */\n  function newAlbum(album) {\n    if (_config2.default.active_album != album) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Checks to see if there is a new playlist\n   *\n   * Public Accessor: Checks.newPlaylist( playlist )\n   *\n   * @access public\n   * @param {string} playlist - The playlist passed in to check against the active playlist.\n   * @returns {boolean} True if there is a new playlist, false if there is not a new playlist.\n   */\n  function newPlaylist(playlist) {\n    if (_config2.default.active_playlist != playlist) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines if the string passed in is a URL or not\n   *\n   * Public Accessor: AmplitudeHelpers.isURL( url )\n   *\n   * @access public\n   * @param {string} url - The string we are testing to see if it's a URL.\n   * @returns {boolean} True if the string is a url, false if it is not.\n   */\n  function isURL(url) {\n    /*\n    Test the string against the URL pattern and return if it matches\n    */\n    var pattern = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n    return pattern.test(url);\n  }\n\n  /**\n   * Determines if what is passed in is an integer or not.\n   *\n   * Public Accessor: AmplitudeHelpers.isInt( int )\n   *\n   * @access public\n   * @param {string|number} int - The variable we are testing to see is an integer or not.\n   * @returns {boolean} If the variable is an integer or not.\n   */\n  function isInt(int) {\n    return !isNaN(int) && parseInt(Number(int)) == int && !isNaN(parseInt(int, 10));\n  }\n\n  /**\n   * Returns public facing methods\n   */\n  return {\n    newSong: newSong,\n    newAlbum: newAlbum,\n    newPlaylist: newPlaylist,\n    isURL: isURL,\n    isInt: isInt\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = Checks;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the state of the config object.\n *\n * @module utilities/ConfigState\n */\nvar ConfigState = function () {\n  /**\n   * Resets the config to the default state. This is called on initialize\n   * to ensure the user's config is what matters.\n   *\n   * Public Accessor: AmplitudeHelpers.resetConfig()\n   *\n   * @access public\n   */\n  function resetConfig() {\n    _config2.default.audio = new Audio();\n    _config2.default.active_metadata = {};\n    _config2.default.active_album = \"\";\n    _config2.default.active_index = 0;\n    _config2.default.active_playlist = null;\n    _config2.default.playback_speed = 1.0;\n    _config2.default.callbacks = {};\n    _config2.default.songs = [];\n    _config2.default.playlists = {};\n    _config2.default.start_song = \"\";\n    _config2.default.starting_playlist = \"\";\n    _config2.default.starting_playlist_song = \"\";\n    _config2.default.repeat = false;\n    _config2.default.shuffle_list = {};\n    _config2.default.shuffle_on = false;\n    _config2.default.default_album_art = \"\";\n    _config2.default.default_playlist_art = \"\";\n    _config2.default.debug = false;\n    _config2.default.volume = 0.5;\n    _config2.default.pre_mute_volume = 0.5;\n    _config2.default.volume_increment = 5;\n    _config2.default.volume_decrement = 5;\n    _config2.default.soundcloud_client = \"\";\n    _config2.default.soundcloud_use_art = false;\n    _config2.default.soundcloud_song_count = 0;\n    _config2.default.soundcloud_songs_ready = 0;\n    _config2.default.continue_next = true;\n  }\n\n  /**\n   * Sets the state of the player.\n   */\n  function setPlayerState() {\n    /*\n      If paused and the current time is 0 the player is stopped.\n    */\n    if (_config2.default.audio.paused && _config2.default.audio.currentTime == 0) {\n      _config2.default.player_state = \"stopped\";\n    }\n\n    /*\n      If paused and the current time is greater than 0 the player is\n      paused.\n    */\n    if (_config2.default.audio.paused && _config2.default.audio.currentTime > 0) {\n      _config2.default.player_state = \"paused\";\n    }\n\n    /*\n      If playing, the current state is playing.\n    */\n    if (!_config2.default.audio.paused) {\n      _config2.default.player_state = \"playing\";\n    }\n  }\n\n  /*\n  Returns the public facing methods\n  */\n  return {\n    resetConfig: resetConfig,\n    setPlayerState: setPlayerState\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = ConfigState;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * These methods help display the audio's meta data\n *\n * @module visual/MetaDataElements\n */\nvar MetaDataElements = function () {\n  /**\n   * Displays the active song's metadata. This is called after a song has\n   * been changed. This method takes the active song and displays the\n   * metadata. So once the new active song is set, we update all of the\n   * screen elements.\n   *\n   * @access public\n   */\n  function displayMetaData() {\n    /*\n    Define the image meta data keys. These are managed separately\n    since we aren't actually changing the inner HTML of these elements.\n    */\n    var imageMetaDataKeys = [\"cover_art_url\", \"station_art_url\", \"podcast_episode_cover_art_url\"];\n\n    /*\n    Get all of the song info elements\n    */\n    var songInfoElements = document.querySelectorAll(\"[data-amplitude-song-info]\");\n\n    /*\n    Iterate over all of the song info elements. We will either\n    set these to the new values, or clear them if the active song\n    doesn't have the info set.\n    */\n    for (var i = 0; i < songInfoElements.length; i++) {\n      /*\n      Get the info so we can check if the active meta data has the\n      key.\n      */\n      var info = songInfoElements[i].getAttribute(\"data-amplitude-song-info\");\n\n      /*\n      Grab the playlist and song index.\n      */\n      var playlist = songInfoElements[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = songInfoElements[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n      Ensure that we don't set any individual elements now. We set this with the\n      sync meta data method. The reason we don't set them here is because\n      all individual songs would get the now playing artwork. If the playlists\n      match or the element is a main element meaning it doesn't\n      belong to a playlist or a song, then we set the song info.\n      */\n      if (songIndex == null && (_config2.default.active_playlist == playlist || playlist == null && songIndex == null)) {\n        /*\n        If the active metadata has the key, then we set it,\n        otherwise we clear it. If it's an image element then\n        we default it to the default info if needed.\n        */\n        var val = _config2.default.active_metadata[info] != undefined ? _config2.default.active_metadata[info] : null;\n        if (imageMetaDataKeys.indexOf(info) >= 0) {\n          val = val || _config2.default.default_album_art;\n          songInfoElements[i].setAttribute(\"src\", val);\n        } else {\n          val = val || \"\";\n          songInfoElements[i].innerHTML = val;\n        }\n      }\n    }\n  }\n\n  /**\n   * Displays the playlist meta data.\n   */\n  function displayPlaylistMetaData() {\n    /*\n    Define the image meta data keys. These are managed separately\n    since we aren't actually changing the inner HTML of these elements.\n    */\n    var imageMetaDataKeys = [\"image_url\"];\n\n    /*\n    Get all of the playlist info elements\n    */\n    var playlistInfoElements = document.querySelectorAll(\"[data-amplitude-playlist-info]\");\n\n    /*\n    Iterate over all of the playlist info elements. We will either\n    set these to the new values, or clear them if the active song\n    doesn't have the info set.\n    */\n    for (var i = 0; i < playlistInfoElements.length; i++) {\n      /*\n      Get the info so we can check if the active meta data has the\n      key.\n      */\n      var info = playlistInfoElements[i].getAttribute(\"data-amplitude-playlist-info\");\n      var playlist = playlistInfoElements[i].getAttribute(\"data-amplitude-playlist\");\n\n      if (_config2.default.playlists[playlist][info] != undefined) {\n        if (imageMetaDataKeys.indexOf(info) >= 0) {\n          playlistInfoElements[i].setAttribute(\"src\", _config2.default.playlists[playlist][info]);\n        } else {\n          playlistInfoElements[i].innerHTML = _config2.default.playlists[playlist][info];\n        }\n      } else {\n        /*\n        We look for the default album art because\n        the actual key didn't exist. If the default album\n        art doesn't exist then we set the src attribute\n        to null.\n        */\n        if (imageMetaDataKeys.indexOf(info) >= 0) {\n          if (_config2.default.default_playlist_art != \"\") {\n            playlistInfoElements[i].setAttribute(\"src\", _config2.default.default_playlist_art);\n          } else {\n            playlistInfoElements[i].setAttribute(\"src\", \"\");\n          }\n        } else {\n          playlistInfoElements[i].innerHTML = \"\";\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the first song in the playlist. This is used to fill in the meta\n   * data in the playlist\n   *\n   * @param {object} song \t\t\t- The song we are setting to be the first song in the playlist\n   * @param {string} playlist \t- Key of the playlist we are setting the first song in\n   */\n  function setFirstSongInPlaylist(song, playlist) {\n    /*\n      Define the image meta data keys. These are managed separately\n      since we aren't actually changing the inner HTML of these elements.\n    */\n    var imageMetaDataKeys = [\"cover_art_url\", \"station_art_url\", \"podcast_episode_cover_art_url\"];\n\n    /*\n      Get all of the song info elements\n    */\n    var songInfoElements = document.querySelectorAll('[data-amplitude-song-info][data-amplitude-playlist=\"' + playlist + '\"]');\n\n    /*\n      Iterate over all of the song info elements. We will either\n      set these to the new values, or clear them if the active song\n      doesn't have the info set.\n    */\n    for (var i = 0; i < songInfoElements.length; i++) {\n      /*\n        Get the info so we can check if the active meta data has the\n        key.\n      */\n      var info = songInfoElements[i].getAttribute(\"data-amplitude-song-info\");\n\n      /*\n        Get the song info element playlist.\n      */\n      var elementPlaylist = songInfoElements[i].getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        If the playlists match or the element is a main element, then\n        we set the song info.\n      */\n      if (elementPlaylist == playlist) {\n        /*\n          If the active metadata has the key, then we set it,\n          otherwise we clear it. If it's an image element then\n          we default it to the default info if needed.\n        */\n        if (song[info] != undefined) {\n          if (imageMetaDataKeys.indexOf(info) >= 0) {\n            songInfoElements[i].setAttribute(\"src\", song[info]);\n          } else {\n            songInfoElements[i].innerHTML = song[info];\n          }\n        } else {\n          /*\n            We look for the default album art because\n            the actual key didn't exist. If the default album\n            art doesn't exist then we set the src attribute\n            to null.\n          */\n          if (imageMetaDataKeys.indexOf(info) >= 0) {\n            if (song.default_album_art != \"\") {\n              songInfoElements[i].setAttribute(\"src\", song.default_album_art);\n            } else {\n              songInfoElements[i].setAttribute(\"src\", \"\");\n            }\n          } else {\n            songInfoElements[i].innerHTML = \"\";\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the meta data for songs loaded in the songs array\n   */\n  function syncMetaData() {\n    /*\n    Define the image meta data keys. These are managed separately\n    since we aren't actually changing the inner HTML of these elements.\n    */\n    var imageMetaDataKeys = [\"cover_art_url\", \"station_art_url\", \"podcast_episode_cover_art_url\"];\n\n    /*\n    Get all of the song info elements\n    */\n    var songInfoElements = document.querySelectorAll(\"[data-amplitude-song-info]\");\n\n    /*\n    Iterate over all of the song info elements. We will either\n    set these to the new values, or clear them if the active song\n    doesn't have the info set.\n    */\n    for (var i = 0; i < songInfoElements.length; i++) {\n      var songIndex = songInfoElements[i].getAttribute(\"data-amplitude-song-index\");\n      var playlist = songInfoElements[i].getAttribute(\"data-amplitude-playlist\");\n\n      if (songIndex != null && playlist == null) {\n        var info = songInfoElements[i].getAttribute(\"data-amplitude-song-info\");\n\n        /*\n         Get the song info value referenced on the element.  Depending on the type of\n         element, we may need to fallback to another value when the direct value\n         we want isn't found.\n         i.e.\n            data-amplitude-song-info=\"cover_art_url\" defaults to using the value\n            of \"default_album_art\" when \"cover_art_url\" is missing on the song.\n        */\n        var val = _config2.default.songs[songIndex][info] != undefined ? _config2.default.songs[songIndex][info] : null;\n        /*\n         If it's an image meta data key, then we set the src attribute of\n         the element. Otherwise we set the inner HTML of the element.\n        */\n        if (imageMetaDataKeys.indexOf(info) >= 0) {\n          /*\n           If this is an image meta data key and the individual song doesn't\n           have the key, use the default_album_art\n           */\n          val = val || _config2.default.default_album_art;\n          songInfoElements[i].setAttribute(\"src\", val);\n        } else {\n          songInfoElements[i].innerHTML = val;\n        }\n      }\n\n      /*\n        If the song index and playlist are not null, continue.\n      */\n      if (songIndex != null && playlist != null) {\n        /*\n          Get the info we are displaying.\n        */\n        var _info = songInfoElements[i].getAttribute(\"data-amplitude-song-info\");\n\n        /*\n          Set the meta data accordingly.\n        */\n        if (_config2.default.playlists[playlist].songs[songIndex][_info] != undefined) {\n          if (imageMetaDataKeys.indexOf(_info) >= 0) {\n            songInfoElements[i].setAttribute(\"src\", _config2.default.playlists[playlist].songs[songIndex][_info]);\n          } else {\n            songInfoElements[i].innerHTML = _config2.default.playlists[playlist].songs[songIndex][_info];\n          }\n        }\n      }\n    }\n\n    /*\n      Display the playlist meta data.\n    */\n    displayPlaylistMetaData();\n  }\n\n  /**\n   * Returns publically facing methods\n   */\n  return {\n    displayMetaData: displayMetaData,\n    setFirstSongInPlaylist: setFirstSongInPlaylist,\n    syncMetaData: syncMetaData,\n    displayPlaylistMetaData: displayPlaylistMetaData\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = MetaDataElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the visual syncing to the state of the config for the repeat\n * elements.\n *\n * @module visual/RepeatElements\n */\nvar RepeatElements = function () {\n  /**\n   * Syncs repeat for all of the repeat buttons. Users\n   * can apply styles to the 'amplitude-repeat-on' and\n   * 'amplitude-repeat-off' classes. They represent the state\n   * of the player.\n   */\n  function syncRepeat() {\n    /*\n    Gets all of the repeat classes\n    */\n    var repeatClasses = document.getElementsByClassName(\"amplitude-repeat\");\n\n    /*\n    Iterate over all of the repeat classes. If repeat is on,\n    then add the 'amplitude-repeat-on' class and remove the\n    'amplitude-repeat-off' class. If it's off, then do the\n    opposite.\n    */\n    for (var i = 0; i < repeatClasses.length; i++) {\n      if (_config2.default.repeat) {\n        repeatClasses[i].classList.add(\"amplitude-repeat-on\");\n        repeatClasses[i].classList.remove(\"amplitude-repeat-off\");\n      } else {\n        repeatClasses[i].classList.remove(\"amplitude-repeat-on\");\n        repeatClasses[i].classList.add(\"amplitude-repeat-off\");\n      }\n    }\n  }\n\n  /**\n   * Syncs repeat for all of the playlist repeat buttons. Users\n   * can apply styles to the `amplitude-repeat-on` and `amplitude-repeat-off`\n   * classes. They repreent the state of the playlist in the player.\n   */\n  function syncRepeatPlaylist(playlist) {\n    /*\n    Gets all of the repeat buttons.\n    */\n    var repeatButtons = document.getElementsByClassName(\"amplitude-repeat\");\n\n    /*\n    Iterate over all of the repeat buttons\n    */\n    for (var i = 0; i < repeatButtons.length; i++) {\n      /*\n      Ensure that the repeat button belongs to matches the\n      playlist we are syncing the state for.\n      */\n      if (repeatButtons[i].getAttribute(\"data-amplitude-playlist\") == playlist) {\n        /*\n        If the state of the playlist is shuffled on, true, then\n        we add the 'amplitude-repeat-on' class and remove the\n        'amplitude-repeat-off' class. If the player is not shuffled\n        then we do the opposite.\n        */\n        if (_config2.default.playlists[playlist].repeat) {\n          repeatButtons[i].classList.add(\"amplitude-repeat-on\");\n          repeatButtons[i].classList.remove(\"amplitude-repeat-off\");\n        } else {\n          repeatButtons[i].classList.add(\"amplitude-repeat-off\");\n          repeatButtons[i].classList.remove(\"amplitude-repeat-on\");\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs repeat for all of the repeat song buttons. Users\n   * can apply styles to the 'amplitude-repeat-song-on' and\n   * 'amplitude-repeat-song-off' classes. They represent the state\n   * of the player.\n   */\n  function syncRepeatSong() {\n    /*\n    Gets all of the repeat song classes\n    */\n    var repeatSongClasses = document.getElementsByClassName(\"amplitude-repeat-song\");\n\n    /*\n    Iterate over all of the repeat song classes. If repeat is on,\n    then add the 'amplitude-repeat-song-on' class and remove the\n    'amplitude-repeat-song-off' class. If it's off, then do the\n    opposite.\n    */\n    for (var i = 0; i < repeatSongClasses.length; i++) {\n      if (_config2.default.repeat_song) {\n        repeatSongClasses[i].classList.add(\"amplitude-repeat-song-on\");\n        repeatSongClasses[i].classList.remove(\"amplitude-repeat-song-off\");\n      } else {\n        repeatSongClasses[i].classList.remove(\"amplitude-repeat-song-on\");\n        repeatSongClasses[i].classList.add(\"amplitude-repeat-song-off\");\n      }\n    }\n  }\n\n  /*\n    Returns the publically available methods.\n  */\n  return {\n    syncRepeat: syncRepeat,\n    syncRepeatPlaylist: syncRepeatPlaylist,\n    syncRepeatSong: syncRepeatSong\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = RepeatElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Callback Utility\n *\n * @module utilities/callbacks\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Callbacks = function () {\n  /**\n   * Initializes the callbacks for the player.\n   */\n  function initialize() {\n    /*\n      Event: abort\n      https://www.w3schools.com/tags/av_event_abort.asp\n    */\n    _config2.default.audio.addEventListener(\"abort\", function () {\n      run(\"abort\");\n    });\n\n    /*\n      Event: error\n      https://www.w3schools.com/tags/av_event_error.asp\n    */\n    _config2.default.audio.addEventListener(\"error\", function () {\n      run(\"error\");\n    });\n\n    /*\n      Event: loadeddata\n      https://www.w3schools.com/tags/av_event_loadeddata.asp\n    */\n    _config2.default.audio.addEventListener(\"loadeddata\", function () {\n      run(\"loadeddata\");\n    });\n\n    /*\n      Event: loadedmetadata\n      https://www.w3schools.com/tags/av_event_loadedmetadata.asp\n    */\n    _config2.default.audio.addEventListener(\"loadedmetadata\", function () {\n      run(\"loadedmetadata\");\n    });\n\n    /*\n      Event: loadstart\n      https://www.w3schools.com/tags/av_event_loadstart.asp\n    */\n    _config2.default.audio.addEventListener(\"loadstart\", function () {\n      run(\"loadstart\");\n    });\n\n    /*\n      Event: pause\n      https://www.w3schools.com/tags/av_event_pause.asp\n    */\n    _config2.default.audio.addEventListener(\"pause\", function () {\n      run(\"pause\");\n    });\n\n    /*\n      Event: playing\n      https://www.w3schools.com/tags/av_event_playing.asp\n    */\n    _config2.default.audio.addEventListener(\"playing\", function () {\n      run(\"playing\");\n    });\n\n    /*\n      Event: play\n      https://www.w3schools.com/tags/av_event_play.asp\n    */\n    _config2.default.audio.addEventListener(\"play\", function () {\n      run(\"play\");\n    });\n\n    /*\n      Event: progress\n      https://www.w3schools.com/tags/av_event_progress.asp\n    */\n    _config2.default.audio.addEventListener(\"progress\", function () {\n      run(\"progress\");\n    });\n\n    /*\n      Event: ratechange\n      https://www.w3schools.com/tags/av_event_ratechange.asp\n    */\n    _config2.default.audio.addEventListener(\"ratechange\", function () {\n      run(\"ratechange\");\n    });\n\n    /*\n      Event: seeked\n      https://www.w3schools.com/tags/av_event_seeked.asp\n    */\n    _config2.default.audio.addEventListener(\"seeked\", function () {\n      run(\"seeked\");\n    });\n\n    /*\n      Event: seeking\n      https://www.w3schools.com/tags/av_event_seeking.asp\n    */\n    _config2.default.audio.addEventListener(\"seeking\", function () {\n      run(\"seeking\");\n    });\n\n    /*\n      Event: stalled\n      https://www.w3schools.com/tags/av_event_stalled.asp\n    */\n    _config2.default.audio.addEventListener(\"stalled\", function () {\n      run(\"stalled\");\n    });\n\n    /*\n      Event: suspend\n      https://www.w3schools.com/tags/av_event_suspend.asp\n    */\n    _config2.default.audio.addEventListener(\"suspend\", function () {\n      run(\"suspend\");\n    });\n\n    /*\n      Event: timeupdate\n      https://www.w3schools.com/tags/av_event_timeupdate.asp\n    */\n    _config2.default.audio.addEventListener(\"timeupdate\", function () {\n      run(\"timeupdate\");\n    });\n\n    /*\n      Event: volumechange\n      https://www.w3schools.com/tags/av_event_volumechange.asp\n    */\n    _config2.default.audio.addEventListener(\"volumechange\", function () {\n      run(\"volumechange\");\n    });\n\n    /*\n      Event: waiting\n      https://www.w3schools.com/tags/av_event_waiting.asp\n    */\n    _config2.default.audio.addEventListener(\"waiting\", function () {\n      run(\"waiting\");\n    });\n\n    /*\n      Event: canplay\n      https://www.w3schools.com/tags/av_event_canplay.asp\n    */\n    _config2.default.audio.addEventListener(\"canplay\", function () {\n      run(\"canplay\");\n    });\n\n    /*\n      Event: canplaythrough\n      https://www.w3schools.com/tags/av_event_canplaythrough.asp\n    */\n    _config2.default.audio.addEventListener(\"canplaythrough\", function () {\n      run(\"canplaythrough\");\n    });\n\n    /*\n      Event: durationchange\n      https://www.w3schools.com/tags/av_event_durationchange.asp\n    */\n    _config2.default.audio.addEventListener(\"durationchange\", function () {\n      run(\"durationchange\");\n    });\n\n    /*\n      Event: ended\n      https://www.w3schools.com/tags/av_event_ended.asp\n    */\n    _config2.default.audio.addEventListener(\"ended\", function () {\n      run(\"ended\");\n    });\n  }\n\n  /**\n   * Runs a user defined callback method\n   *\n   * Public Accessor: Callbacks.run( callbackName )\n   *\n   * @access public\n   * @param {string} callbackName - The name of the callback we are going to run.\n   */\n  function run(callbackName) {\n    /*\n      Checks to see if a user defined a callback method for the\n      callback we are running.\n    */\n    if (_config2.default.callbacks[callbackName]) {\n      /*\n        Build the callback function\n      */\n      var callbackFunction = _config2.default.callbacks[callbackName];\n\n      /*\n        Write a debug message stating the callback we are running\n      */\n      _debug2.default.writeMessage(\"Running Callback: \" + callbackName);\n\n      /*\n        Run the callback function and catch any errors\n      */\n      try {\n        callbackFunction();\n      } catch (error) {\n        if (error.message == \"CANCEL EVENT\") {\n          throw error;\n        } else {\n          _debug2.default.writeMessage(\"Callback error: \" + error.message);\n        }\n      }\n    }\n  }\n\n  return {\n    initialize: initialize,\n    run: run\n  };\n}();\n\n/**\n * Imports the debug module\n * @module utilities/debug\n */\nexports.default = Callbacks;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Handles the visual state for all of the mute elements.\n *\n * @module visual/MuteElements\n */\nvar MuteElements = function () {\n  /**\n   * Syncs mute for all of the mute buttons. This represents the\n   * state of the player if it's muted or not.\n   *\n   * @access public\n   * @param {string} state \t- The muted state of the player.\n   */\n  function setMuted(state) {\n    /*\n    Get all of the mute buttons.\n    */\n    var muteClasses = document.getElementsByClassName(\"amplitude-mute\");\n\n    /*\n    Iterate over all of the mute classes. If the state of the player\n    is not-muted then we add the amplitude-not-muted classe and remove\n    the amplitude muted class otherwise we do the opposite.\n    */\n    for (var i = 0; i < muteClasses.length; i++) {\n      if (!state) {\n        muteClasses[i].classList.add(\"amplitude-not-muted\");\n        muteClasses[i].classList.remove(\"amplitude-muted\");\n      } else {\n        muteClasses[i].classList.remove(\"amplitude-not-muted\");\n        muteClasses[i].classList.add(\"amplitude-muted\");\n      }\n    }\n  }\n\n  return {\n    setMuted: setMuted\n  };\n}();\n\nexports.default = MuteElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Keeps the volume slider elements in sync.\n * @module visual/VolumeSliderElements\n */\nvar VolumeSliderElements = function () {\n  /**\n   * Visually syncs the volume sliders so they are all the same if there\n   * are more than one.\n   *\n   * @access public\n   */\n  function sync() {\n    var volumeSliders = document.getElementsByClassName(\"amplitude-volume-slider\");\n\n    /*\n    Iterates over all of the volume sliders for the song, setting the value\n    to the config value.\n    */\n    for (var i = 0; i < volumeSliders.length; i++) {\n      volumeSliders[i].value = _config2.default.audio.volume * 100;\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    sync: sync\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = VolumeSliderElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Repeater utility. Handles setting the repeat for all scenarios.\n *\n * @module utilities/Repeater\n */\nvar Repeater = function () {\n  /**\n   * Sets the state of the repeat for a song.\n   *\n   * @access public\n   * @param {boolean} repeat - A boolean representing whether the repeat should be on or off\n   */\n  function setRepeat(repeat) {\n    /*\n      Set the global repeat to be toggled\n    */\n    _config2.default.repeat = repeat;\n  }\n\n  /**\n   * Sets the state of the repeat for a playlist.\n   *\n   * @access public\n   * @param {boolean} repeat - A boolean representing whether the repeat should be on or off\n   * @param {string} playlist - The key of the playlist for repeating\n   */\n  function setRepeatPlaylist(repeat, playlist) {\n    /*\n      Set the playlist repeat to be toggled.\n    */\n    _config2.default.playlists[playlist].repeat = repeat;\n  }\n\n  /**\n   * Sets the state of the repeat song\n   *\n   * @access public\n   * @param {boolean} repeat - A boolean representing whether the repeat shoudl be on or off for the song.\n   */\n  function setRepeatSong(repeat) {\n    _config2.default.repeat_song = repeat;\n  }\n\n  /*\n    Returns the public facing methods\n  */\n  return {\n    setRepeat: setRepeat,\n    setRepeatPlaylist: setRepeatPlaylist,\n    setRepeatSong: setRepeatSong\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = Repeater;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Shuffle Module. Handles all of the shuffling functionality for\n * AmplitudeJS\n *\n * @module utilities/Shuffler\n */\nvar Shuffler = function () {\n  /**\n   * Sets the shuffle state globally\n   *\n   * @access public\n   * @param {boolean} shuffle   - True when we are shuffling, false when we turn it off.\n   */\n  function setShuffle(shuffle) {\n    _config2.default.shuffle_on = shuffle;\n\n    if (shuffle) {\n      shuffleSongs();\n    } else {\n      _config2.default.shuffle_list = [];\n    }\n  }\n\n  /**\n   * Toggles the shuffle status globally.\n   *\n   * @access public\n   */\n  function toggleShuffle() {\n    /*\n      If shuffle is on, we toggle it off. If shuffle is off, we\n      toggle on.\n    */\n    if (_config2.default.shuffle_on) {\n      _config2.default.shuffle_on = false;\n      _config2.default.shuffle_list = [];\n    } else {\n      _config2.default.shuffle_on = true;\n      shuffleSongs();\n    }\n  }\n\n  /**\n   * Sets the shuffle state for a playlist\n   *\n   * @access public\n   * @param {string} playlist   The key of the playlist we are shuffling.\n   * @param {boolean} shuffle   True when we are shuffling the playlist, false when we turn off shuffle.\n   */\n  function setShufflePlaylist(playlist, shuffle) {\n    _config2.default.playlists[playlist].shuffle = shuffle;\n\n    if (_config2.default.playlists[playlist].shuffle) {\n      shufflePlaylistSongs(playlist);\n    } else {\n      _config2.default.playlists[playlist].shuffle_list = [];\n    }\n  }\n\n  /**\n   * Sets the shuffle state for a playlist\n   *\n   * @access public\n   * @param {string} playlist   The key of the playlist we are shuffling.\n   */\n  function toggleShufflePlaylist(playlist) {\n    /*\n      If the playlist shuffled is on, we toggle it off. If the\n      playlist shuffled is off, we toggle it on.\n    */\n    if (_config2.default.playlists[playlist].shuffle) {\n      _config2.default.playlists[playlist].shuffle = false;\n      _config2.default.playlists[playlist].shuffle_list = [];\n    } else {\n      _config2.default.playlists[playlist].shuffle = true;\n      shufflePlaylistSongs(playlist);\n    }\n  }\n\n  /**\n   * Shuffles individual songs in the config\n   * Based off of: http://www.codinghorror.com/blog/2007/12/the-danger-of-naivete.html\n   *\n   * Public Accessor: Shuffle.shuffleSongs()\n   *\n   * @access public\n   */\n  function shuffleSongs() {\n    /*\n    Builds a temporary array with the length of the config.\n    */\n    var shuffleTemp = new Array(_config2.default.songs.length);\n\n    /*\n    Set the temporary array equal to the songs array.\n    */\n    for (var i = 0; i < _config2.default.songs.length; i++) {\n      shuffleTemp[i] = _config2.default.songs[i];\n    }\n\n    /*\n    Iterate ove rthe songs and generate random numbers to\n    swap the indexes of the shuffle array.\n    */\n    for (var _i = _config2.default.songs.length - 1; _i > 0; _i--) {\n      var randNum = Math.floor(Math.random() * _config2.default.songs.length + 1);\n      shuffleSwap(shuffleTemp, _i, randNum - 1);\n    }\n\n    /*\n    Set the shuffle list to the shuffle temp.\n    */\n    _config2.default.shuffle_list = shuffleTemp;\n  }\n\n  /**\n   * Shuffle songs in a playlist\n   *\n   * Public Accessor: Shuffle.shufflePlaylistSongs( playlist )\n   *\n   * @access public\n   * @param {string} playlist - The playlist we are shuffling.\n   */\n  function shufflePlaylistSongs(playlist) {\n    /*\n      Builds a temporary array with the length of the playlist songs.\n    */\n    var shuffleTemp = new Array(_config2.default.playlists[playlist].songs.length);\n\n    /*\n      Set the temporary array equal to the playlist array.\n    */\n    for (var i = 0; i < _config2.default.playlists[playlist].songs.length; i++) {\n      shuffleTemp[i] = _config2.default.playlists[playlist].songs[i];\n    }\n\n    /*\n      Iterate ove rthe songs and generate random numbers to\n      swap the indexes of the shuffle array.\n    */\n    for (var _i2 = _config2.default.playlists[playlist].songs.length - 1; _i2 > 0; _i2--) {\n      var randNum = Math.floor(Math.random() * _config2.default.playlists[playlist].songs.length + 1);\n      shuffleSwap(shuffleTemp, _i2, randNum - 1);\n    }\n\n    /*\n      Set the shuffle list to the shuffle temp.\n    */\n    _config2.default.playlists[playlist].shuffle_list = shuffleTemp;\n  }\n\n  /**\n   * Swaps and randomizes the song shuffle.\n   *\n   * @access private\n   * @param {object} shuffleList \t- The list of songs that is going to be shuffled\n   * @param {number} original \t\t- The original index of he song in the songs array\n   * @param {number} random \t\t\t- The randomized index that will be the new index of the song in the shuffle array.\n   */\n  function shuffleSwap(shuffleList, original, random) {\n    var temp = shuffleList[original];\n    shuffleList[original] = shuffleList[random];\n    shuffleList[random] = temp;\n  }\n\n  /**\n   * Returns public facing methods\n   */\n  return {\n    setShuffle: setShuffle,\n    toggleShuffle: toggleShuffle,\n    setShufflePlaylist: setShufflePlaylist,\n    toggleShufflePlaylist: toggleShufflePlaylist,\n    shuffleSongs: shuffleSongs,\n    shufflePlaylistSongs: shufflePlaylistSongs\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = Shuffler;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Defines the visual representation of AmplitudeJS song slider elements.\n * @module visual/SongSliderElements\n */\nvar SongSliderElements = function () {\n  /**\n   * Syncs all of the song slider elements.\n   *\n   * @access public\n   * @param {number} location \t- The location of the song as a percentage.\n   * @param {string} playlist \t- The playlist we are setting the song slider for.\n   * @param {number} songIndex \t- The index of the song we are adjusting the song slider for.\n   */\n  function sync(location, playlist, songIndex) {\n    syncMain(location);\n    syncPlaylist(location, playlist);\n    syncSong(location, songIndex);\n    syncSongInPlaylist(location, playlist);\n  }\n\n  /**\n   * Syncs the main slider location\n   *\n   * @access public\n   * @param {number} location \t- The location of the song as a percentage.\n   */\n  function syncMain(location) {\n    /*\n    Ensure we have a location that's a number\n    */\n    location = !isNaN(location) ? location : 0;\n\n    /*\n    Gets the main song sliders\n    */\n    var mainSongSliders = document.querySelectorAll(\".amplitude-song-slider\");\n\n    /*\n    Iterates over all of the main sliders and sets the value to the\n    percentage of the song played.\n    */\n    for (var i = 0; i < mainSongSliders.length; i++) {\n      /*\n        Grab the playlist and song attributes from the element.\n      */\n      var playlist = mainSongSliders[i].getAttribute(\"data-amplitude-playlist\");\n      var song = mainSongSliders[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        This method is responsible for only the global elements,\n        so we make sure there are no playlist or songs defined on\n        the element.\n      */\n      if (playlist == null && song == null) {\n        mainSongSliders[i].value = location;\n      }\n    }\n  }\n\n  /**\n   * Syncs playlist song slider locations\n   *\n   * @access public\n   * @param {number} location \t- The location of the song as a percentage.\n   * @param {string} playlist \t- The playlist we are setting the song slider for.\n   */\n  function syncPlaylist(location, playlist) {\n    /*\n    Ensure we have a location that's a number\n    */\n    location = !isNaN(location) ? location : 0;\n\n    /*\n    Gets the playlist song sliders\n    */\n    var playlistSongSliders = document.querySelectorAll('.amplitude-song-slider[data-amplitude-playlist=\"' + playlist + '\"]');\n\n    /*\n    Iterates over all of the playlist sliders and sets the value to the\n    percentage of the song played.\n    */\n    for (var i = 0; i < playlistSongSliders.length; i++) {\n      /*\n        Grab the playlist and song attributes from the element.\n      */\n      var playlistAttribute = playlistSongSliders[i].getAttribute(\"data-amplitude-playlist\");\n      var songAttribute = playlistSongSliders[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n      This method is responsible for only the playlist elements,\n      so we make sure the playlist attribute matches what is passed\n      in.\n      */\n      if (playlistAttribute == playlist && songAttribute == null) {\n        playlistSongSliders[i].value = location;\n      }\n    }\n  }\n\n  /**\n   * Syncs individual song slider locations\n   *\n   * @access public\n   * @param {number} location \t- The location of the song as a percentage.\n   * @param {number} songIndex \t- The index of the song we are adjusting the song slider for.\n   */\n  function syncSong(location, songIndex) {\n    /*\n    We only want to sync song sliders if the playlist is null.\n    */\n    if (_config2.default.active_playlist == null) {\n      /*\n      Ensure we have a location that's a number\n      */\n      location = !isNaN(location) ? location : 0;\n\n      /*\n      Gets the individual song sliders\n      */\n      var songSliders = document.querySelectorAll('.amplitude-song-slider[data-amplitude-song-index=\"' + songIndex + '\"]');\n\n      /*\n      Iterates over all of the individual song sliders and sets the value\n      to the percentage of the song played.\n      */\n      for (var i = 0; i < songSliders.length; i++) {\n        /*\n         Grab the playlist and song attributes from the element.\n        */\n        var playlistAttribute = songSliders[i].getAttribute(\"data-amplitude-playlist\");\n        var songAttribute = songSliders[i].getAttribute(\"data-amplitude-song-index\");\n\n        /*\n        This method is responsible for only the playlist elements,\n        so we make sure the playlist attribute matches what is passed\n        in.\n        */\n        if (playlistAttribute == null && songAttribute == songIndex) {\n          songSliders[i].value = location;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs individual song slider locations\n   *\n   * @access public\n   * @param {number} location \t- The location of the song as a percentage.\n   * @param {string} playlist \t- The playlist we are setting the song slider for.\n   */\n  function syncSongInPlaylist(location, playlist) {\n    /*\n    Ensure we have a location that's a number\n    */\n    location = !isNaN(location) ? location : 0;\n\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    /*\n    Gets the song in playlist sliders\n    */\n    var songInPlaylistSliders = document.querySelectorAll('.amplitude-song-slider[data-amplitude-playlist=\"' + playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    /*\n    Iterates over all of the song in playlist sliders and sets the value\n    to the percentage of the song played.\n    */\n    for (var i = 0; i < songInPlaylistSliders.length; i++) {\n      songInPlaylistSliders[i].value = location;\n    }\n  }\n\n  /**\n   * Visually syncs the song sliders back to 0. This usually happens when\n   * a song has changed, we ensure that all song sliders get reset.\n   *\n   * @access public\n   */\n  function resetElements() {\n    var songSliders = document.getElementsByClassName(\"amplitude-song-slider\");\n\n    /*\n    Iterate over all of the song sliders and set them to\n    0 essentially resetting them.\n    */\n    for (var i = 0; i < songSliders.length; i++) {\n      songSliders[i].value = 0;\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    sync: sync,\n    syncMain: syncMain,\n    syncPlaylist: syncPlaylist,\n    syncSong: syncSong,\n    syncSongInPlaylist: syncSongInPlaylist,\n    resetElements: resetElements\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = SongSliderElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _currentTimeElements = __webpack_require__(53);\n\nvar _currentTimeElements2 = _interopRequireDefault(_currentTimeElements);\n\nvar _currentHourElements = __webpack_require__(50);\n\nvar _currentHourElements2 = _interopRequireDefault(_currentHourElements);\n\nvar _currentMinuteElements = __webpack_require__(51);\n\nvar _currentMinuteElements2 = _interopRequireDefault(_currentMinuteElements);\n\nvar _currentSecondElements = __webpack_require__(52);\n\nvar _currentSecondElements2 = _interopRequireDefault(_currentSecondElements);\n\nvar _durationCountDownTimeElements = __webpack_require__(54);\n\nvar _durationCountDownTimeElements2 = _interopRequireDefault(_durationCountDownTimeElements);\n\nvar _durationHourElements = __webpack_require__(55);\n\nvar _durationHourElements2 = _interopRequireDefault(_durationHourElements);\n\nvar _durationMinuteElements = __webpack_require__(56);\n\nvar _durationMinuteElements2 = _interopRequireDefault(_durationMinuteElements);\n\nvar _durationSecondElements = __webpack_require__(57);\n\nvar _durationSecondElements2 = _interopRequireDefault(_durationSecondElements);\n\nvar _durationTimeElements = __webpack_require__(58);\n\nvar _durationTimeElements2 = _interopRequireDefault(_durationTimeElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Time Elements Interface. This allows us to update all of the sub time elements\n * through one central point.\n * @module visual/TimeElements\n */\n\n\n/**\n * Imports the AmplitudeJS Duration Second Elements\n * @module visual/time/DurationSecondElements\n */\n\n\n/**\n * Imports the AmplitudeJS Duration Hour Elements\n * @module visual/time/DurationHourElements\n */\n\n\n/**\n * Imports the AmplitudeJS Current Second Elements\n * @module visual/time/CurrentTimeElements\n */\n\n\n/**\n * Imports the AmplitudeJS Current Hour Elements\n * @module visual/time/CurrentHourElements\n */\nvar TimeElements = function () {\n  /**\n   * Resets the current times.\n   */\n  function resetCurrentTimes() {\n    _currentTimeElements2.default.resetTimes();\n    _currentHourElements2.default.resetTimes();\n    _currentMinuteElements2.default.resetTimes();\n    _currentSecondElements2.default.resetTimes();\n  }\n\n  /**\n   * Syncs the current time elements to the time provided.\n   *\n   * @param {Object} currentTime - An object representing the current time of the audio.\n   */\n  function syncCurrentTimes(currentTime) {\n    _currentTimeElements2.default.sync(currentTime);\n    _currentHourElements2.default.sync(currentTime.hours);\n    _currentMinuteElements2.default.sync(currentTime.minutes);\n    _currentSecondElements2.default.sync(currentTime.seconds);\n  }\n\n  /**\n   * Resets the duration times.\n   */\n  function resetDurationTimes() {\n    _durationCountDownTimeElements2.default.resetTimes();\n    _durationHourElements2.default.resetTimes();\n    _durationMinuteElements2.default.resetTimes();\n    _durationSecondElements2.default.resetTimes();\n    _durationTimeElements2.default.resetTimes();\n  }\n\n  /**\n   * Syncs the duration times to the times provided.\n   *\n   * @param {Object} currentTime - An object representing the current time of the audio.\n   * @param {Object} songDuration - An object representing the duration of the audio\n   */\n  function syncDurationTimes(currentTime, songDuration) {\n    _durationCountDownTimeElements2.default.sync(currentTime, songDuration);\n    _durationTimeElements2.default.sync(songDuration);\n    _durationHourElements2.default.sync(songDuration.hours);\n    _durationMinuteElements2.default.sync(songDuration.minutes);\n    _durationSecondElements2.default.sync(songDuration.seconds);\n  }\n\n  /**\n   * Returns the publically accessible methods.\n   */\n  return {\n    resetCurrentTimes: resetCurrentTimes,\n    syncCurrentTimes: syncCurrentTimes,\n    resetDurationTimes: resetDurationTimes,\n    syncDurationTimes: syncDurationTimes\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Duration Time Elements\n * @module visual/time/DurationTimeElements\n */\n\n\n/**\n * Imports the AmplitudeJS Duration Minute Elements\n * @module visual/time/DurationMinuteElements\n */\n\n\n/**\n * Imports the AmplitudeJS Duration Count Down Time Elements\n * @module visual/time/DurationCountDownTimeElements\n */\n\n\n/**\n * Imports the AmplitudeJS Current Minute Elements\n * @module visual/time/CurrentMinuteElements\n */\n/**\n * Imports the AmplitudeJS Current Time\n * @module visual/time/CurrentTimeElements\n */\nexports.default = TimeElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the visualizations elements.\n *\n * @module Visualizations\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Visualizations = function () {\n  /**\n   * Runs all of the visualizations on the screen.\n   */\n  function run() {\n    /*\n      Get all of the visualization elements on the page\n    */\n    var visualizationElements = document.querySelectorAll(\".amplitude-visualization\");\n\n    /*\n      If the web audio API is available, we display the visualizations.\n    */\n    if (_config2.default.web_audio_api_available) {\n      /*\n        If the visualization has not started, there are visualizations available,\n        and we have at least one visualization element, then we continue.\n      */\n      if (Object.keys(_config2.default.visualizations.available).length > 0 && visualizationElements.length > 0) {\n        /*\n            Iterate over all of the visualizations on the page and activate the\n            ones we need.\n          */\n        for (var i = 0; i < visualizationElements.length; i++) {\n          /*\n              Grab the playlist and song attributes from the visualization to\n              determine which one we run.\n            */\n          var playlist = visualizationElements[i].getAttribute(\"data-amplitude-playlist\");\n          var song = visualizationElements[i].getAttribute(\"data-amplitude-song-index\");\n\n          /*\n              If the playlist and song are null, it's a global visualization element.\n            */\n          if (playlist == null && song == null) {\n            runGlobalVisualization(visualizationElements[i]);\n          }\n\n          /*\n              if the playlist is not null and the song is null it's a playlist visualization\n              element.\n            */\n          if (playlist != null && song == null) {\n            runPlaylistVisualization(visualizationElements[i], playlist);\n          }\n\n          /*\n              If the playlist is null and the song is not null it's a song visualization element.\n            */\n          if (playlist == null && song != null) {\n            runSongVisualization(visualizationElements[i], song);\n          }\n\n          /*\n              If the playlist and song are not null then it's a song in playlist visualization\n              element.\n            */\n          if (playlist != null && song != null) {\n            runSongInPlaylistVisualization(visualizationElements[i], playlist, song);\n          }\n        }\n      }\n    } else {\n      displayBackups();\n    }\n  }\n\n  /**\n   * Runs a global visualization\n   *\n   * @param {Node} element  The container element that handles the visualization.\n   */\n  function runGlobalVisualization(element) {\n    /*\n      Gets the global visualization index and the active song visualization indexes\n      so we know which visualization to use. The song will override the global\n    */\n    var globalVisualizationIndex = _config2.default.visualization;\n    var activeSongVisualizationIndex = _config2.default.active_index != null ? _config2.default.songs[_config2.default.active_index].visualization : _config2.default.playlists[_config2.default.active_playlist].songs[_config2.default.playlists[_config2.default.active_playlist].active_index].visualization;\n\n    /*\n      If the active song visualization is defined and the visualization exists,\n      use that visualization.\n    */\n    if (activeSongVisualizationIndex != undefined && _config2.default.visualizations.available[activeSongVisualizationIndex] != undefined) {\n      addToActiveVisualizations(activeSongVisualizationIndex, element);\n\n      /*\n      If the user defined a global visualization, use that one.\n      */\n    } else if (globalVisualizationIndex != undefined && _config2.default.visualizations.available[globalVisualizationIndex] != undefined) {\n      addToActiveVisualizations(globalVisualizationIndex, element);\n\n      /*\n      If the user didn't define a global visualization, use the first visualization\n      registered if there is one.\n      */\n    } else {\n      /*\n        Grab the first registered visualization. If it exists, use that one.\n      */\n      var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;\n\n      if (firstVisualization != null) {\n        addToActiveVisualizations(firstVisualization, element);\n      }\n    }\n  }\n\n  /**\n   * Run a specific playlist visualization.\n   *\n   * @param {Node} element  The container element that handles the visualization.\n   * @param {string} playlist The key of the playlist we are running the visualization for.\n   */\n  function runPlaylistVisualization(element, playlist) {\n    /*\n      If the playlist is equal to the active playlist, then we continue.\n    */\n    if (playlist == _config2.default.active_playlist) {\n      /*\n        Checks if the song has a visualization and that visualization exists,\n        run that visualization.\n      */\n      var activeSongVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].songs[_config2.default.playlists[_config2.default.active_playlist].active_index].visualization;\n      var activePlaylistVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].visualization;\n      var globalVisualizationIndex = _config2.default.visualization;\n\n      /*\n        If the actual song has a visualization, we run that.\n      */\n      if (activeSongVisualizationIndex != undefined && _config2.default.visualizations.available[activeSongVisualizationIndex] != undefined) {\n        addToActiveVisualizations(activeSongVisualizationIndex, element);\n\n        /*\n        If the actual playlist has a visualization, run that.\n        */\n      } else if (activePlaylistVisualizationIndex != undefined && _config2.default.visualizations.available[activePlaylistVisualizationIndex] != undefined) {\n        addToActiveVisualizations(activePlaylistVisualizationIndex, element);\n\n        /*\n        If a global visualization is defined, run that.\n        */\n      } else if (globalVisualizationIndex != undefined && _config2.default.visualizations.available[globalVisualizationIndex] != undefined) {\n        addToActiveVisualizations(globalVisualizationIndex, element);\n      } else {\n        /*\n          Grab the first registered visualization. If it exists, use that one.\n        */\n        var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;\n\n        if (firstVisualization != null) {\n          addToActiveVisualizations(firstVisualization, element);\n        }\n      }\n    }\n  }\n\n  /**\n   * Run a song specific visualization.\n   *\n   * @param {Node} element The container element that handles the visualization.\n   * @param {string} song The song index that we are running the visualization for.\n   */\n  function runSongVisualization(element, song) {\n    /*\n      If the song is equal to the active song, then we continue.\n    */\n    if (song == _config2.default.active_index) {\n      /*\n        Get the indexes of the song\n      */\n      var activeSongVisualizationIndex = _config2.default.songs[_config2.default.active_index].visualization;\n      var globalVisualizationIndex = _config2.default.visualization;\n\n      /*\n        If the song has a visualization, run that.\n      */\n      if (activeSongVisualizationIndex != undefined && _config2.default.visualizations.available[activeSongVisualizationIndex] != undefined) {\n        addToActiveVisualizations(activeSongVisualizationIndex, element);\n\n        /*\n        If the global visualization is set, use that.\n        */\n      } else if (globalVisualizationIndex != undefined && _config2.default.visualizations.available[globalVisualizationIndex] != undefined) {\n        addToActiveVisualizations(globalVisualizationIndex, element);\n      } else {\n        /*\n          Grab the first registered visualization. If it exists, use that one.\n        */\n        var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;\n\n        if (firstVisualization != null) {\n          addToActiveVisualizations(firstVisualization, element);\n        }\n      }\n    }\n  }\n\n  /**\n   * Run a song in playlist visualization.\n   *\n   * @param {Node} element - The element containing the visualization.\n   * @param {string} playlist - The string of the playlist key.\n   * @param {index} song - The index of the song in the playlist.\n   */\n  function runSongInPlaylistVisualization(element, playlist, song) {\n    /*\n      If the playlist is the same as the active playlist and the active\n      index of the song is the same as the song, then we continue.\n    */\n    if (playlist == _config2.default.active_playlist && _config2.default.playlists[playlist].active_index == song) {\n      /*\n        Checks if the song has a visualization and that visualization exists,\n        run that visualization.\n      */\n      var activeSongVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].songs[_config2.default.playlists[_config2.default.active_playlist].active_index].visualization;\n      var activePlaylistVisualizationIndex = _config2.default.playlists[_config2.default.active_playlist].visualization;\n      var globalVisualizationIndex = _config2.default.visualization;\n\n      /*\n        If the active song has a visualization, we use that.\n      */\n      if (activeSongVisualizationIndex != undefined && _config2.default.visualizations.available[activeSongVisualizationIndex] != undefined) {\n        addToActiveVisualizations(activeSongVisualizationIndex, element);\n\n        /*\n        If the active playlist has a visualization, we use that.\n        */\n      } else if (activePlaylistVisualizationIndex != undefined && _config2.default.visualizations.available[activePlaylistVisualizationIndex] != undefined) {\n        addToActiveVisualizations(activePlaylistVisualizationIndex, element);\n\n        /*\n        If the global visualization has been set, we use that.\n        */\n      } else if (globalVisualizationIndex != undefined && _config2.default.visualizations.available[globalVisualizationIndex] != undefined) {\n        addToActiveVisualizations(globalVisualizationIndex, element);\n      } else {\n        /*\n          Grab the first registered visualization. If it exists, use that one.\n        */\n        var firstVisualization = Object.keys(_config2.default.visualizations.available).length > 0 ? Object.keys(_config2.default.visualizations.available)[0] : null;\n\n        if (firstVisualization != null) {\n          addToActiveVisualizations(firstVisualization, element);\n        }\n      }\n    }\n  }\n\n  /**\n   * Add a visualization to the array of active visualizations.\n   *\n   * @param {string} key - The key of the active visualization.\n   * @param {Node} element - The element that the visualization will be applied to.\n   */\n  function addToActiveVisualizations(key, element) {\n    var visualization = new _config2.default.visualizations.available[key][\"object\"]();\n    visualization.setPreferences(_config2.default.visualizations.available[key][\"preferences\"]);\n    visualization.startVisualization(element);\n    _config2.default.visualizations.active.push(visualization);\n  }\n\n  /**\n   * Stops all active visualizations.\n   */\n  function stop() {\n    /*\n      Iterates over all of the visualizations and stop the visualization.\n    */\n    for (var i = 0; i < _config2.default.visualizations.active.length; i++) {\n      _config2.default.visualizations.active[i].stopVisualization();\n    }\n\n    /*\n      Clear the active visualizations.\n    */\n    _config2.default.visualizations.active = [];\n  }\n\n  /**\n   * Registers any visualization we can use.\n   *\n   * @param {object} visualization The visualization object itself\n   * @param {object} preferences User preferences overrides.\n   */\n  function register(visualization, preferences) {\n    /*\n      Initialize the new visualization.\n    */\n    var newVisualization = new visualization();\n\n    /*\n     Adds the visualization to the global config so it knows\n     it can be used when playing songs.\n      getID is a public function for getting a visualization's id.\n     It becomes the key to access the visualization.\n    */\n    _config2.default.visualizations.available[newVisualization.getID()] = new Array();\n    _config2.default.visualizations.available[newVisualization.getID()][\"object\"] = visualization;\n    _config2.default.visualizations.available[newVisualization.getID()][\"preferences\"] = preferences;\n  }\n\n  /**\n   * Displays the backups for the visualizations.\n   */\n  function displayBackups() {\n    /*\n      Get all of the visualization elements on the page\n    */\n    var visualizationElements = document.querySelectorAll(\".amplitude-visualization\");\n\n    if (visualizationElements.length > 0) {\n      for (var x = 0; x < visualizationElements.length; x++) {\n        /*\n          Grab the playlist and song attributes from the visualization to\n          determine which one we run.\n        */\n        var playlist = visualizationElements[x].getAttribute(\"data-amplitude-playlist\");\n        var song = visualizationElements[x].getAttribute(\"data-amplitude-song-index\");\n\n        /*\n          If the playlist and song are null, it's a global visualization element.\n        */\n        if (playlist == null && song == null) {\n          displayGlobalBackup(visualizationElements[x]);\n        }\n\n        /*\n          if the playlist is not null and the song is null it's a playlist visualization\n          element.\n        */\n        if (playlist != null && song == null) {\n          displayPlaylistBackup(visualizationElements[x], playlist);\n        }\n\n        /*\n          If the playlist is null and the song is not null it's a song visualization element.\n        */\n        if (playlist == null && song != null) {\n          displaySongBackup(visualizationElements[x], song);\n        }\n\n        /*\n          If the playlist and song are not null then it's a song in playlist visualization\n          element.\n        */\n        if (playlist != null && song != null) {\n          displaySongInPlaylistBackup(visualizationElements[x], playlist, song);\n        }\n      }\n    }\n  }\n\n  /**\n   * Displays the global backup which is the cover art of the image in the\n   * visualization container.\n   *\n   * @param {node} element  - The element we are adding the background image to.\n   */\n  function displayGlobalBackup(element) {\n    element.style.backgroundImage = \"url(\" + _config2.default.active_metadata.cover_art_url + \")\";\n  }\n\n  /**\n   * Displays the playlist backup which is the cover art of the image in the\n   * visualization container.\n   *\n   * @param {node} element  - The element we are adding the background image to.\n   */\n  function displayPlaylistBackup(element, playlist) {\n    if (_config2.default.active_playlist == playlist) {\n      element.style.backgroundImage = \"url(\" + _config2.default.active_metadata.cover_art_url + \")\";\n    }\n  }\n\n  /**\n   * Displays the song backup which is the cover art of the image in the\n   * visualization container.\n   *\n   * @param {node} element  - The element we are adding the background image to.\n   */\n  function displaySongBackup(element, song) {\n    if (_config2.default.active_index == song) {\n      element.style.backgroundImage = \"url(\" + _config2.default.active_metadata.cover_art_url + \")\";\n    }\n  }\n\n  /**\n   * Displays the song in playlist backup which is the cover art of the image in the\n   * visualization container.\n   *\n   * @param {node} element  - The element we are adding the background image to.\n   */\n  function displaySongInPlaylistBackup(element, playlist, song) {\n    if (_config2.default.active_playlist == playlist && _config2.default.playlists[active_playlist].active_index == song) {\n      element.style.backgroundImage = \"url(\" + _config2.default.active_metadata.cover_art_url + \")\";\n    }\n  }\n\n  /*\n    Returns the public facing methods\n  */\n  return {\n    run: run,\n    stop: stop,\n    register: register\n  };\n}();\n\n/**\n * Imports the debug module\n * @module utilities/Debug\n */\nexports.default = Visualizations;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _init = __webpack_require__(21);\n\nvar _init2 = _interopRequireDefault(_init);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * These helpers wrap around the basic methods of the Soundcloud API\n * and get the information we need from SoundCloud to make the songs\n * streamable through Amplitude\n *\n * @module soundcloud/SoundCloud\n */\n/**\n * Imports the config module\n * @module config\n */\nvar SoundCloud = function () {\n  /**\n   * Defines the temporary user config used while we configure soundcloud\n   * @type {object}\n   */\n  var tempUserConfig = {};\n\n  /**\n   * Loads the soundcloud SDK for use with Amplitude so the user doesn't have\n   * to load it themselves.\n   * With help from: http://stackoverflow.com/questions/950087/include-a-javascript-file-in-another-javascript-file\n   *\n   * @access public\n   * @param {object} userConfig \t- The config defined by the user for AmplitudeJS\n   */\n  function loadSoundCloud(userConfig) {\n    /*\n    Sets the temporary config to the config passed by the user so we can make changes\n    and not break the actual config.\n    */\n    tempUserConfig = userConfig;\n\n    /*\n    Gets the head tag for the document and create a script element.\n    */\n    var head = document.getElementsByTagName(\"head\")[0];\n    var script = document.createElement(\"script\");\n\n    script.type = \"text/javascript\";\n\n    /*\n    URL to the remote soundcloud SDK\n    */\n    script.src = \"https://connect.soundcloud.com/sdk.js\";\n    script.onreadystatechange = initSoundcloud;\n    script.onload = initSoundcloud;\n\n    /*\n    Add the script to the head of the document.\n    */\n    head.appendChild(script);\n  }\n\n  /**\n   * Initializes soundcloud with the key provided.\n   *\n   * @access private\n   */\n  function initSoundcloud() {\n    /*\n    Calls the SoundCloud initialize function\n    from their API and sends it the client_id\n    that the user passed in.\n    */\n    SC.initialize({\n      client_id: _config2.default.soundcloud_client\n    });\n\n    /*\n    Gets the streamable URLs to run through Amplitue. This is\n    VERY important since Amplitude can't stream the copy and pasted\n    link from the SoundCloud page, but can resolve the streaming\n    URLs from the link.\n    */\n    getStreamableURLs();\n  }\n\n  /**\n   * Gets the streamable URL from the URL provided for\n   * all of the soundcloud links.  This will loop through\n   * and set all of the information for the soundcloud\n   * urls.\n   *\n   * @access private\n   */\n  function getStreamableURLs() {\n    /*\n    Define the regex to find the soundcloud URLs\n    */\n    var soundcloud_regex = /^https?:\\/\\/(soundcloud.com|snd.sc)\\/(.*)$/;\n\n    for (var i = 0; i < _config2.default.songs.length; i++) {\n      /*\n      If the URL matches soundcloud, we grab\n      that url and get the streamable link\n      if there is one.\n      */\n      if (_config2.default.songs[i].url.match(soundcloud_regex)) {\n        _config2.default.soundcloud_song_count++;\n        resolveStreamable(_config2.default.songs[i].url, i);\n      }\n    }\n  }\n\n  /**\n   * Resolves an individual streamable URL.\n   *\n   * @param {string} url - The URL of the SoundCloud song to get the streamable URL from.\n   * @param {string} playlist - The playlist we are getting the streamable URL for.\n   * @param {Integer} index - The index of the song in the playlist or the songs array.\n   * @param {boolean} addToShuffleList - Whether we add to the shuffle list for the songs or playlist.\n   *\n   */\n  function resolveIndividualStreamableURL(url, playlist, index) {\n    var addToShuffleList = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    SC.get(\"/resolve/?url=\" + url, function (sound) {\n      /*\n        If streamable we get the url and bind the client ID to the end\n        so Amplitude can just stream the song normally. We then overwrite\n        the url the user provided with the streamable URL.\n      */\n      if (sound.streamable) {\n        if (playlist != null) {\n          _config2.default.playlists[playlist].songs[index].url = sound.stream_url + \"?client_id=\" + _config2.default.soundcloud_client;\n\n          if (addToShuffleList) {\n            _config2.default.playlists[playlist].shuffle_list[index].url = sound.stream_url + \"?client_id=\" + _config2.default.soundcloud_client;\n          }\n          /*\n            If the user want's to use soundcloud art, we overwrite the\n            cover_art_url with the soundcloud artwork url.\n          */\n          if (_config2.default.soundcloud_use_art) {\n            _config2.default.playlists[playlist].songs[index].cover_art_url = sound.artwork_url;\n\n            if (addToShuffleList) {\n              _config2.default.playlists[playlist].shuffle_list[index].cover_art_url = sound.artwork_url;\n            }\n          }\n\n          /*\n            Grab the extra metadata from soundcloud and bind it to the\n            song.  The user can get this through the public function:\n            getActiveSongMetadata\n          */\n          _config2.default.playlists[playlist].songs[index].soundcloud_data = sound;\n\n          if (addToShuffleList) {\n            _config2.default.playlists[playlist].shuffle_list[index].soundcloud_data = sound;\n          }\n        } else {\n          _config2.default.songs[index].url = sound.stream_url + \"?client_id=\" + _config2.default.soundcloud_client;\n\n          if (addToShuffleList) {\n            _config2.default.shuffle_list[index].stream_url + \"?client_id=\" + _config2.default.soundcloud_client;\n          }\n\n          /*\n            If the user want's to use soundcloud art, we overwrite the\n            cover_art_url with the soundcloud artwork url.\n          */\n          if (_config2.default.soundcloud_use_art) {\n            _config2.default.songs[index].cover_art_url = sound.artwork_url;\n\n            if (addToShuffleList) {\n              _config2.default.shuffle_list[index].cover_art_url = sound.artwork_url;\n            }\n          }\n\n          /*\n            Grab the extra metadata from soundcloud and bind it to the\n            song.  The user can get this through the public function:\n            getActiveSongMetadata\n          */\n          _config2.default.songs[index].soundcloud_data = sound;\n\n          if (addToShuffleList) {\n            _config2.default.shuffle_list[index].soundcloud_data = sound;\n          }\n        }\n      } else {\n        if (playlist != null) {\n          AmplitudeHelpers.writeDebugMessage(_config2.default.playlists[playlist].songs[index].name + \" by \" + _config2.default.playlists[playlist].songs[index].artist + \" is not streamable by the Soundcloud API\");\n        } else {\n          /*\n            If not streamable, then we print a message to the user stating\n            that the song with name X and artist X is not streamable. This\n            gets printed ONLY if they have debug turned on.\n          */\n          AmplitudeHelpers.writeDebugMessage(_config2.default.songs[index].name + \" by \" + _config2.default.songs[index].artist + \" is not streamable by the Soundcloud API\");\n        }\n      }\n    });\n  }\n\n  /**\n   * Due to Soundcloud SDK being asynchronous, we need to scope the\n   * index of the song in another function. The privateGetSoundcloudStreamableURLs\n   * function does the actual iteration and scoping.\n   *\n   * @access private\n   * @param {string} url \t\t- URL of the soundcloud song\n   * @param {number} index \t- The index of the soundcloud song in the songs array.\n   */\n  function resolveStreamable(url, index) {\n    SC.get(\"/resolve/?url=\" + url, function (sound) {\n      /*\n      If streamable we get the url and bind the client ID to the end\n      so Amplitude can just stream the song normally. We then overwrite\n      the url the user provided with the streamable URL.\n      */\n      if (sound.streamable) {\n        _config2.default.songs[index].url = sound.stream_url + \"?client_id=\" + _config2.default.soundcloud_client;\n\n        /*\n        If the user want's to use soundcloud art, we overwrite the\n        cover_art_url with the soundcloud artwork url.\n        */\n        if (_config2.default.soundcloud_use_art) {\n          _config2.default.songs[index].cover_art_url = sound.artwork_url;\n        }\n\n        /*\n        Grab the extra metadata from soundcloud and bind it to the\n        song.  The user can get this through the public function:\n        getActiveSongMetadata\n        */\n        _config2.default.songs[index].soundcloud_data = sound;\n      } else {\n        /*\n        If not streamable, then we print a message to the user stating\n        that the song with name X and artist X is not streamable. This\n        gets printed ONLY if they have debug turned on.\n        */\n        AmplitudeHelpers.writeDebugMessage(_config2.default.songs[index].name + \" by \" + _config2.default.songs[index].artist + \" is not streamable by the Soundcloud API\");\n      }\n      /*\n      Increments the song ready counter.\n      */\n      _config2.default.soundcloud_songs_ready++;\n\n      /*\n      When all songs are accounted for, then amplitude is ready\n      to rock and we set the rest of the config.\n      */\n      if (_config2.default.soundcloud_songs_ready == _config2.default.soundcloud_song_count) {\n        _init2.default.setConfig(tempUserConfig);\n      }\n    });\n  }\n\n  /**\n   * Determines if a given URL is a SoundCloud URL.\n   *\n   * @param {string} url - The URL to test if it's a SoundCloud URL.\n   */\n  function isSoundCloudURL(url) {\n    var soundcloud_regex = /^https?:\\/\\/(soundcloud.com|snd.sc)\\/(.*)$/;\n\n    return url.match(soundcloud_regex);\n  }\n\n  /*\n  Returns the publically accessible methods\n  */\n  return {\n    loadSoundCloud: loadSoundCloud,\n    resolveIndividualStreamableURL: resolveIndividualStreamableURL,\n    isSoundCloudURL: isSoundCloudURL\n  };\n}();\n\n/**\n * Imports the initializer\n * @module init/AmplitudeInitializer\n */\nexports.default = SoundCloud;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Defines the Playback Speed Visual Elements Handler\n * @module visual/PlaybackSpeedElements\n */\nvar PlaybackSpeedElements = function () {\n  /**\n   * Sets all of the visual playback speed buttons to have the right class\n   * to display the background image that represents the current playback\n   * speed.\n   *\n   * @access public\n   */\n  function sync() {\n    /*\n    Gets all of the playback speed classes.\n    */\n    var playbackSpeedClasses = document.getElementsByClassName(\"amplitude-playback-speed\");\n\n    /*\n    Iterates over all of the playback speed classes\n    applying the right speed class for visual purposes.\n    */\n    for (var i = 0; i < playbackSpeedClasses.length; i++) {\n      /*\n      Removes all of the old playback speed classes.\n      */\n      playbackSpeedClasses[i].classList.remove(\"amplitude-playback-speed-10\");\n      playbackSpeedClasses[i].classList.remove(\"amplitude-playback-speed-15\");\n      playbackSpeedClasses[i].classList.remove(\"amplitude-playback-speed-20\");\n\n      /*\n      Switch the current playback speed and apply the appropriate\n      speed class.\n      */\n      switch (_config2.default.playback_speed) {\n        case 1:\n          playbackSpeedClasses[i].classList.add(\"amplitude-playback-speed-10\");\n          break;\n        case 1.5:\n          playbackSpeedClasses[i].classList.add(\"amplitude-playback-speed-15\");\n          break;\n        case 2:\n          playbackSpeedClasses[i].classList.add(\"amplitude-playback-speed-20\");\n          break;\n      }\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    sync: sync\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = PlaybackSpeedElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the shuffle elements\n * @module visual/ShuffleElements\n */\nvar ShuffleElements = function () {\n  /**\n   * Syncs the global shuffle button visual state.\n   *\n   * @access public\n   */\n  function syncMain() {\n    /*\n    Gets the shuffle buttons.\n    */\n    var shuffleButtons = document.getElementsByClassName(\"amplitude-shuffle\");\n\n    /*\n    Iterate over all of the shuffle buttons.\n    */\n    for (var i = 0; i < shuffleButtons.length; i++) {\n      /*\n      Ensure the shuffle button doesn't belong to a playlist. We have\n      a separate method for that.\n      */\n      if (shuffleButtons[i].getAttribute(\"data-amplitude-playlist\") == null) {\n        /*\n        If the state of the player is shuffled on, true, then\n        we add the 'amplitude-shuffle-on' class and remove the\n        'amplitude-shuffle-off' class. If the player is not shuffled\n        then we do the opposite.\n        */\n        if (_config2.default.shuffle_on) {\n          shuffleButtons[i].classList.add(\"amplitude-shuffle-on\");\n          shuffleButtons[i].classList.remove(\"amplitude-shuffle-off\");\n        } else {\n          shuffleButtons[i].classList.add(\"amplitude-shuffle-off\");\n          shuffleButtons[i].classList.remove(\"amplitude-shuffle-on\");\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist shuffle button visual state.\n   *\n   * @access public\n   * @param {string} playlist - The playlist string the shuffle button belongs to.\n   */\n  function syncPlaylist(playlist) {\n    /*\n    Gets all of the shuffle buttons.\n    */\n    var shuffleButtons = document.querySelectorAll('.amplitude-shuffle[data-amplitude-playlist=\"' + playlist + '\"]');\n\n    /*\n    Iterate over all of the shuffle buttons\n    */\n    for (var i = 0; i < shuffleButtons.length; i++) {\n      /*\n      If the state of the playlist is shuffled on, true, then\n      we add the 'amplitude-shuffle-on' class and remove the\n      'amplitude-shuffle-off' class. If the player is not shuffled\n      then we do the opposite.\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        shuffleButtons[i].classList.add(\"amplitude-shuffle-on\");\n        shuffleButtons[i].classList.remove(\"amplitude-shuffle-off\");\n      } else {\n        shuffleButtons[i].classList.add(\"amplitude-shuffle-off\");\n        shuffleButtons[i].classList.remove(\"amplitude-shuffle-on\");\n      }\n    }\n  }\n\n  /**\n   * Returns public facing methods\n   */\n  return {\n    syncMain: syncMain,\n    syncPlaylist: syncPlaylist\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = ShuffleElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the syncing of the song played progress elements.\n *\n * @module visual/SongPlayedProgressElements\n */\nvar SongPlayedProgressElements = function () {\n  /**\n   * Syncs the song played progress bars. These are HTML5 progress elements.\n   *\n   * @access private\n   * @param {number} songPlayedPercentage  \t- The percentage of the song that has been played.\n   */\n  function sync(songPlayedPercentage) {\n    syncGlobal(songPlayedPercentage);\n    syncPlaylist(songPlayedPercentage);\n    syncSong(songPlayedPercentage);\n    syncSongInPlaylist(songPlayedPercentage);\n  }\n\n  /**\n   * Sync how much has been played with a progress bar. This is the global progress bar.\n   *\n   * @access private\n   * @param {number} songPlayedPercentage \t- The percent of the song completed.\n   */\n  function syncGlobal(percentage) {\n    /*\n    Ensure that the song completion percentage is a number\n    */\n    if (!isNaN(percentage)) {\n      /*\n      Get all of the song progress bars\n      */\n      var songPlayedProgressBars = document.querySelectorAll(\".amplitude-song-played-progress\");\n\n      for (var i = 0; i < songPlayedProgressBars.length; i++) {\n        var playlist = songPlayedProgressBars[i].getAttribute(\"data-amplitude-playlist\");\n        var songIndex = songPlayedProgressBars[i].getAttribute(\"data-amplitude-song-index\");\n\n        if (playlist == null && songIndex == null) {\n          var max = songPlayedProgressBars[i].max;\n\n          songPlayedProgressBars[i].value = percentage / 100 * max;\n        }\n      }\n    }\n  }\n\n  /**\n   * Sync how much has been played with a progress bar. This is the playlist progress bar.\n   *\n   * @access public\n   * @param {number} songPlayedPercentage \t- The percent of the song completed.\n   */\n  function syncPlaylist(percentage) {\n    /*\n    Ensure that the song completion percentage is a number\n    */\n    if (!isNaN(percentage)) {\n      /*\n      Get all of the song progress bars\n      */\n      var songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n      for (var i = 0; i < songPlayedProgressBars.length; i++) {\n        var song = songPlayedProgressBars[i].getAttribute(\"data-amplitude-song-index\");\n\n        if (song == null) {\n          var max = songPlayedProgressBars[i].max;\n\n          songPlayedProgressBars[i].value = percentage / 100 * max;\n        }\n      }\n    }\n  }\n\n  /**\n   * Sync how much has been played with a progress bar. This is for an individual song.\n   *\n   * @access private\n   * @param {number} songPlayedPercentage \t- The percent of the song completed.\n   */\n  function syncSong(percentage) {\n    if (_config2.default.active_playlist == null) {\n      /*\n      Ensure that the song completion percentage is a number\n      */\n      if (!isNaN(percentage)) {\n        /*\n        Get all of the song progress bars\n        */\n        var songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n        for (var i = 0; i < songPlayedProgressBars.length; i++) {\n          var playlist = songPlayedProgressBars[i].getAttribute(\"data-amplitude-playlist\");\n\n          if (playlist == null) {\n            var max = songPlayedProgressBars[i].max;\n\n            songPlayedProgressBars[i].value = percentage / 100 * max;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Sync how much has been played with a progress bar. This is for an individual song in playlist.\n   *\n   * @access private\n   * @param {number} songPlayedPercentage \t- The percent of the song completed.\n   */\n  function syncSongInPlaylist(percentage) {\n    /*\n    Ensure that the song completion percentage is a number\n    */\n    if (!isNaN(percentage)) {\n      var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n      /*\n      Get all of the song progress bars\n      */\n      var songPlayedProgressBars = document.querySelectorAll('.amplitude-song-played-progress[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n      /*\n        Iterates over all of the song played progress elements\n        and sets them accordingly.\n      */\n      for (var i = 0; i < songPlayedProgressBars.length; i++) {\n        var playlist = songPlayedProgressBars[i].getAttribute(\"data-amplitude-playlist\");\n        var songIndex = songPlayedProgressBars[i].getAttribute(\"data-amplitude-song-index\");\n\n        if (playlist != null && songIndex != null) {\n          var max = songPlayedProgressBars[i].max;\n\n          songPlayedProgressBars[i].value = percentage / 100 * max;\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets all of the song played progress bars to 0\n   *\n   * @access public\n   */\n  function resetElements() {\n    var songPlayedProgressBars = document.getElementsByClassName(\"amplitude-song-played-progress\");\n\n    for (var i = 0; i < songPlayedProgressBars.length; i++) {\n      songPlayedProgressBars[i].value = 0;\n    }\n  }\n\n  return {\n    sync: sync,\n    resetElements: resetElements\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = SongPlayedProgressElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Imports the config module\n                                                                                                                                                                                                                                                                               * @module config\n                                                                                                                                                                                                                                                                               */\n\n\n/**\n * AmplitudeJS Core Module\n * @module core/Core\n */\n\n\n/**\n * AmplitudeJS SoundCloud Module\n * @module soundcloud/SoundCloud\n */\n\n\n/**\n * Imports the utilities used by the main module.\n */\n/**\n * AmplitudeJS Config State Module\n * @module utilities/ConfigState\n */\n\n\n/**\n * AmplitudeJS Debug Module\n * @module utilities/Debug\n */\n\n\n/**\n * AmplitudeJS Checks Module\n * @module utilities/Checks\n */\n\n\n/**\n * AmplitudeJS Shuffler Module\n * @module utilities/Shuffler\n */\n\n\n/**\n * AmplitudeJS Events Module\n * @module events/Events\n */\n\n\n/**\n * AmplitudeJS FX Module\n * @module fx/Fx\n */\n\n\n/**\n * AmplitudeJS Visualizations Module\n * @module fx/Visualizations\n */\n\n\n/**\n * AmplitudeJS WaveForm Module\n * @module fx/WaveForm\n */\n\n\n/**\n * AmplitudeJS Audio Navigation Module.\n * @module utilities/AudioNavigation\n */\n\n\n/**\n * AmplitudeJS Callbacks Module\n * @module utilities/Callbacks\n */\n\n\n/**\n * AmplitudeJS Playlists Initializer Module\n * @module init/Playlists\n */\n\n\n/**\n * Imports the AmplitudeJS Shuffle Elements\n * @module visual/ShuffleElements\n */\n\n\n/**\n * Imports the AmplitudeJS Mute Elements\n * @module visual/MuteElements\n */\n\n\n/**\n * Imports the AmplitudeJS Volume Slider\n * @module visual/VolumeSliderElements\n */\n\n\n/**\n * Imports the AmplitudeJS Time Elements\n * @module visual/TimeElements\n */\n\n\n/**\n * Imports the AmplitudeJS Play/Pause Elements Module.\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the AmplitudeJS MetaData Elements Module.\n * @module visual/MetaDataElements\n */\n\n\n/**\n * Imports the AmplitudeJS PlaybackSpeedElements Module.\n * @module visual/PlayBackSpeedElements\n */\n\n\n/**\n * Imports the AmplitudeJS Repeat Element\n * @module visual/RepeatElements\n */\n\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _soundcloud = __webpack_require__(17);\n\nvar _soundcloud2 = _interopRequireDefault(_soundcloud);\n\nvar _configState = __webpack_require__(6);\n\nvar _configState2 = _interopRequireDefault(_configState);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _shuffler = __webpack_require__(13);\n\nvar _shuffler2 = _interopRequireDefault(_shuffler);\n\nvar _events = __webpack_require__(22);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _fx = __webpack_require__(46);\n\nvar _fx2 = _interopRequireDefault(_fx);\n\nvar _visualizations = __webpack_require__(16);\n\nvar _visualizations2 = _interopRequireDefault(_visualizations);\n\nvar _waveform = __webpack_require__(23);\n\nvar _waveform2 = _interopRequireDefault(_waveform);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _callbacks = __webpack_require__(9);\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _playlists = __webpack_require__(48);\n\nvar _playlists2 = _interopRequireDefault(_playlists);\n\nvar _shuffleElements = __webpack_require__(19);\n\nvar _shuffleElements2 = _interopRequireDefault(_shuffleElements);\n\nvar _muteElements = __webpack_require__(10);\n\nvar _muteElements2 = _interopRequireDefault(_muteElements);\n\nvar _volumeSliderElements = __webpack_require__(11);\n\nvar _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);\n\nvar _timeElements = __webpack_require__(15);\n\nvar _timeElements2 = _interopRequireDefault(_timeElements);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nvar _metaDataElements = __webpack_require__(7);\n\nvar _metaDataElements2 = _interopRequireDefault(_metaDataElements);\n\nvar _playbackSpeedElements = __webpack_require__(18);\n\nvar _playbackSpeedElements2 = _interopRequireDefault(_playbackSpeedElements);\n\nvar _repeatElements = __webpack_require__(8);\n\nvar _repeatElements2 = _interopRequireDefault(_repeatElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Initializer Module. Helps with the handling of all of the\n * initialization for AmplitudeJS.\n *\n * @module init/Initializer\n */\nvar Initializer = function () {\n  /**\n   * The main init function.  The user will call this through\n   * Amplitude.init({}) and pass in their settings.\n   *\n   * Public Accessor: Amplitude.init( user_config_json )\n   * @access public\n   * @param {object} userConfig - A JSON object of user defined values that help configure and initialize AmplitudeJS.\n   */\n  function initialize(userConfig) {\n    var ready = false;\n\n    /*\n    Reset the config on init so we have a clean slate. This is if the\n    user has to re-init.\n    */\n    _configState2.default.resetConfig();\n\n    /*\n    Initialize event handlers on init. This will clear any old\n    event handlers on the amplitude element and re-bind what is\n    necessary.\n    */\n    _events2.default.initialize();\n\n    /*\n      Initialize the callbacks we listen to for the audio object.\n    */\n    _callbacks2.default.initialize();\n\n    /*\n    Initializes debugging right away so we can use it for the rest\n    of the configuration.\n    */\n    _config2.default.debug = userConfig.debug != undefined ? userConfig.debug : false;\n\n    /*\n      Set default artwork, if specified.\n    */\n    setArt(userConfig);\n\n    if (canAmplitudeRun(userConfig)) {\n      ready = true;\n    }\n\n    /*\n    Initializes the audio context. In this method it checks to see if the\n    user wants to use visualizations or not before proceeding.\n    */\n    if (_fx2.default.webAudioAPIAvailable()) {\n      if (_fx2.default.determineUsingAnyFX()) {\n        /*\n          Configure the Web Audio API If It's available.\n        */\n        _fx2.default.configureWebAudioAPI();\n\n        /*\n            Activates the audio context after an event for the user.\n        */\n        document.documentElement.addEventListener(\"mousedown\", function () {\n          if (_config2.default.context.state !== 'running') {\n            _config2.default.context.resume();\n          }\n        });\n\n        document.documentElement.addEventListener(\"keydown\", function () {\n          if (_config2.default.context.state !== 'running') {\n            _config2.default.context.resume();\n          }\n        });\n\n        document.documentElement.addEventListener(\"keyup\", function () {\n          if (_config2.default.context.state !== 'running') {\n            _config2.default.context.resume();\n          }\n        });\n\n        /*\n          Set the user waveform settings if provided.\n        */\n        if (userConfig.waveforms != undefined && userConfig.waveforms.sample_rate != undefined) {\n          _config2.default.waveforms.sample_rate = userConfig.waveforms.sample_rate;\n        }\n\n        /*\n          Initialize the waveform.\n        */\n        _waveform2.default.init();\n\n        /*\n          If the user is registering visualizations on init,\n          we set them right away.\n        */\n        if (userConfig.visualizations != undefined && userConfig.visualizations.length > 0) {\n          /*\n                Iterate over all of the visualizations and\n                register them in our player.\n              */\n          for (var i = 0; i < userConfig.visualizations.length; i++) {\n            _visualizations2.default.register(userConfig.visualizations[i].object, userConfig.visualizations[i].params);\n          }\n        }\n      }\n    } else {\n      _debug2.default.writeMessage(\"The Web Audio API is not available on this platform. We are using your defined backups!\");\n    }\n\n    /*\n      Initialize songs\n    */\n    initializeSongs(userConfig);\n\n    /*\n      Initialize default live settings\n    */\n    initializeDefaultLiveSettings();\n\n    /*\n      Initialize default song indexes\n    */\n    initializeDefaultSongIndexes();\n\n    /*\n    When the preliminary config is ready, we are ready to proceed.\n    */\n    if (ready) {\n      /*\n      Copies over the soundcloud information to the global config\n      which will determine where we go from there.\n      */\n      _config2.default.soundcloud_client = userConfig.soundcloud_client != undefined ? userConfig.soundcloud_client : \"\";\n\n      /*\n      Checks if we want to use the art loaded from soundcloud.\n      */\n      _config2.default.soundcloud_use_art = userConfig.soundcloud_use_art != undefined ? userConfig.soundcloud_use_art : \"\";\n\n      /*\n      If the user provides a soundcloud client then we assume that\n      there are URLs in their songs that will reference SoundCloud.\n      We then copy over the user config they provided to the\n      temp_user_config so we don't mess up the global or their configs\n      and load the soundcloud information.\n      */\n      var tempUserConfig = {};\n\n      /*\n        If there's a soundcloud_client key set, we load the SoundCloud data\n        for all of the songs in the array.\n      */\n      if (_config2.default.soundcloud_client != \"\") {\n        tempUserConfig = userConfig;\n\n        /*\n        Load up SoundCloud for use with AmplitudeJS.\n        */\n        _soundcloud2.default.loadSoundCloud(tempUserConfig);\n      } else {\n        /*\n        The user is not using Soundcloud with Amplitude at this point\n        so we just finish the configuration with the users's preferences.\n        */\n        setConfig(userConfig);\n      }\n    }\n\n    /*\n    Debug out what was initialized with AmplitudeJS.\n    */\n    _debug2.default.writeMessage(\"Initialized With: \");\n    _debug2.default.writeMessage(_config2.default);\n  }\n\n  /**\n   * Rebinds all of the elements in the display.\n   *\n   * Public Accessor: Amplitude.rebindDisplay()\n   * @access public\n   */\n  function rebindDisplay() {\n    _events2.default.initialize();\n    _metaDataElements2.default.displayMetaData();\n  }\n\n  /**\n   * Finishes the initalization of the config. Takes all of the user defined\n   * parameters and makes sure they override the defaults. The important\n   * config information is assigned in the publicInit() function.\n   *\n   * This function can be called from 2 different locations:\n   * \t1. Right away on init after the important settings are defined.\n   *\n   * \t2. After all of the Soundcloud URLs are resolved properly and\n   *\t \tsoundcloud is configured.  We will need the proper URLs from Soundcloud\n   * \t\tto stream through Amplitude so we get those right away before we\n   * \t\tset the information and the active song\n   *\n   * @access public\n   * @param {object} userConfig - A JSON object of user defined values that help configure and initialize AmplitudeJS.\n   */\n  function setConfig(userConfig) {\n    /*\n      Checks if the user has any playlists defined. If they do\n      we have to initialize the functionality for the playlists.\n    */\n    if (userConfig.playlists && countPlaylists(userConfig.playlists) > 0) {\n      _playlists2.default.initialize(userConfig.playlists);\n    }\n\n    /*\n      If there are no songs and no defined starting playlist,\n      then we go with the first song in the first playlist.\n    */\n    if (_config2.default.songs.length == 0 && !userConfig.starting_playlist) {\n      var firstPlaylist = Object.keys(_config2.default.playlists)[0];\n      _audioNavigation2.default.changeSongPlaylist(firstPlaylist, _config2.default.playlists[firstPlaylist].songs[0], 0);\n    }\n\n    /*\n      Check to see if the user entered a start song\n    */\n    if (userConfig.start_song != undefined && userConfig.starting_playlist) {\n      /*\n        Ensure what has been entered is an integer.\n      */\n      if (_checks2.default.isInt(userConfig.start_song)) {\n        _audioNavigation2.default.changeSong(_config2.default.songs[userConfig.start_song], userConfig.start_song);\n      } else {\n        _debug2.default.writeMessage(\"You must enter an integer index for the start song.\");\n      }\n    } else {\n      /*\n        Ensure we have a song to change to. Otherwise we might just\n        only be using playlists.\n      */\n      if (_config2.default.songs.length > 0) {\n        _audioNavigation2.default.changeSong(_config2.default.songs[0], 0);\n      }\n    }\n\n    /*\n      If the shuffle is on by default, shuffle the songs and\n      switch to the shuffled song.\n    */\n    if (_config2.default.songs.length > 0) {\n      if (userConfig.shuffle_on != undefined && userConfig.shuffle_on) {\n        _config2.default.shuffle_on = true;\n        _shuffler2.default.shuffleSongs();\n\n        _audioNavigation2.default.changeSong(_config2.default.shuffle_list[0], 0);\n      }\n    }\n\n    /*\n    Allows the user to set whether they want to continue to the next song\n    when the current song finishes or not. In any scenario that's not a playlist,\n    contining to the next song may not be desired.\n    */\n    _config2.default.continue_next = userConfig.continue_next != undefined ? userConfig.continue_next : true;\n\n    /*\n    If the user defined a playback speed, we copy over their\n    preference here, otherwise we default to normal playback\n    speed of 1.0.\n    */\n    _config2.default.playback_speed = userConfig.playback_speed != undefined ? userConfig.playback_speed : 1.0;\n\n    /*\n    Sets the audio playback speed.\n    */\n    _core2.default.setPlaybackSpeed(_config2.default.playback_speed);\n\n    /*\n    If the user wants the song to be pre-loaded for instant\n    playback, they set it to true. By default it's set to just\n    load the metadata.\n    */\n    _config2.default.audio.preload = userConfig.preload != undefined ? userConfig.preload : \"auto\";\n\n    /*\n    Initializes the user defined callbacks. This should be a JSON\n    object that contains a key->value store of the callback name\n    and the name of the function the user needs to call.\n    */\n    _config2.default.callbacks = userConfig.callbacks != undefined ? userConfig.callbacks : {};\n\n    /*\n    Initializes the user defined key bindings. This should be a JSON\n    object that contains a key->value store of the key event number\n    pressed and the method to be run.\n    */\n    _config2.default.bindings = userConfig.bindings != undefined ? userConfig.bindings : {};\n\n    /*\n    The user can define a starting volume in a range of 0-100 with\n    0 being muted and 100 being the loudest. After the config is set\n    Amplitude sets the active song's volume to the volume defined\n    by the user.\n    */\n    _config2.default.volume = userConfig.volume != undefined ? userConfig.volume : 50;\n\n    /*\n    Sets the delay between songs if the user has it set. This should be in MS.\n    */\n    _config2.default.delay = userConfig.delay != undefined ? userConfig.delay : 0;\n\n    /*\n    The user can set the volume increment and decrement values between 1 and 100\n    for when the volume up or down button is pressed.  The default is an increase\n    or decrease of 5.\n    */\n    _config2.default.volume_increment = userConfig.volume_increment != undefined ? userConfig.volume_increment : 5;\n\n    _config2.default.volume_decrement = userConfig.volume_decrement != undefined ? userConfig.volume_decrement : 5;\n\n    /*\n    Set the volume to what is defined in the config. The user can define this,\n    so we should set it up that way.\n    */\n    _core2.default.setVolume(_config2.default.volume);\n\n    /*\n     Set default artwork, if specified\n     */\n    setArt(userConfig);\n\n    /*\n      Initialize the visual elements\n    */\n    initializeElements();\n\n    /*\n    If the user has selected a starting playlist, we need to set the starting playlist\n    and sync the visuals\n    */\n    if (userConfig.starting_playlist != undefined && userConfig.starting_playlist != \"\") {\n      /*\n      Set the active playlist to the starting playlist by the user\n      */\n      _config2.default.active_playlist = userConfig.starting_playlist;\n\n      /*\n      Check if the user defined a song to start with in the playlist.\n      */\n      if (userConfig.starting_playlist_song != undefined && userConfig.starting_playlist_song != \"\") {\n        /*\n        Ensure the song is a valid index.\n        */\n        if (_typeof(userConfig.playlists[userConfig.starting_playlist].songs[parseInt(userConfig.starting_playlist_song)]) != undefined) {\n          /*\n          Set the player to the song defined by the user.\n          */\n          _audioNavigation2.default.changeSongPlaylist(_config2.default.active_playlist, userConfig.playlists[userConfig.starting_playlist].songs[parseInt(userConfig.starting_playlist_song)], parseInt(userConfig.starting_playlist_song));\n        } else {\n          /*\n          Set the player to the first song in the playlist\n          */\n          _audioNavigation2.default.changeSongPlaylist(_config2.default.active_playlist, userConfig.playlists[userConfig.starting_playlist].songs[0], 0);\n          /*\n          Debug that the song index doesn't exist\n          */\n          _debug2.default.writeMessage(\"The index of \" + userConfig.starting_playlist_song + \" does not exist in the playlist \" + userConfig.starting_playlist);\n        }\n      } else {\n        /*\n        Set the player to the first song in the playlist\n        */\n        _audioNavigation2.default.changeSong(_config2.default.active_playlist, userConfig.playlists[userConfig.starting_playlist].songs[0], 0);\n      }\n\n      /*\n      Sync the main and song play pause buttons.\n      */\n      _playPauseElements2.default.sync();\n    }\n\n    /*\n    Run after init callback\n    */\n    _callbacks2.default.run(\"initialized\");\n  }\n\n  /**\n   * Sets the default_album_art and default_playlist_art from the\n   * user supplied configuration.\n   *\n   * @access public\n   * @param {object} userConfig - A JSON object of user defined values that help configure and initialize AmplitudeJS.\n   */\n  function setArt(userConfig) {\n    /*\n      If the user defines default album art, this image will display if the active\n      song doesn't have album art defined.\n    */\n    if (userConfig.default_album_art != undefined) {\n      _config2.default.default_album_art = userConfig.default_album_art;\n    } else {\n      _config2.default.default_album_art = \"\";\n    }\n\n    /*\n    If the user defines default playlist art, this image will display if the user\n    tries to set up a playlist meta data image tag but doesn't have one defined.\n    */\n    if (userConfig.default_playlist_art != undefined) {\n      _config2.default.default_playlist_art = userConfig.default_playlist_art;\n    } else {\n      _config2.default.default_playlist_art = \"\";\n    }\n  }\n\n  /**\n   * Initializes all of the elements on the page to the default starting point\n   * to build from there.\n   *\n   * @access private\n   */\n  function initializeElements() {\n    /*\n    Visually sync the shuffle statuses\n    */\n    _shuffleElements2.default.syncMain();\n\n    /*\n    Sync Mute Elements.\n    */\n    _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);\n\n    /*\n    Sync Volume Slider Elements\n    */\n    _volumeSliderElements2.default.sync();\n\n    /*\n    Syncs all of the playback speed elements.\n    */\n    _playbackSpeedElements2.default.sync();\n\n    /*\n    Syncs all of the visual time elements to 00.\n    */\n    _timeElements2.default.resetCurrentTimes();\n\n    /*\n    Sets all of the play pause buttons to pause.\n    */\n    _playPauseElements2.default.syncToPause();\n\n    /*\n    Sets the meta data for the songs automatically.\n    */\n    _metaDataElements2.default.syncMetaData();\n\n    /*\n    Sets the repeat buttons automatically.\n    */\n    _repeatElements2.default.syncRepeatSong();\n  }\n\n  /**\n   * Counts the number of playlists the user has configured. This ensures\n   * that the user has at least 1 playlist so we can validate the songs\n   * defined in the playlist are correct and they didn't enter an invalid\n   * ID.\n   *\n   * @access private\n   * @param {object} playlists \t-\n   */\n  function countPlaylists(playlists) {\n    /*\n    Initialize the placeholders to iterate through the playlists\n    and find out how many we have to account for.\n    */\n    var size = 0,\n        key = void 0;\n\n    /*\n    Iterate over playlists and if the user has the playlist defined,\n    increment the size of playlists.\n    */\n    for (key in playlists) {\n      if (playlists.hasOwnProperty(key)) {\n        size++;\n      }\n    }\n\n    /*\n    Debug how many playlists are in the config.\n    */\n    _debug2.default.writeMessage(\"You have \" + size + \" playlist(s) in your config\");\n\n    /*\n    Return the number of playlists in the config.\n    */\n    return size;\n  }\n\n  /**\n   * Initializes the songs\n   * \n   * @access private\n   */\n  function initializeSongs(userConfig) {\n    _config2.default.songs = userConfig.songs ? userConfig.songs : [];\n  }\n\n  /**\n   * Intializes the default live settings for all of the songs.\n   *\n   * @access private\n   */\n  function initializeDefaultLiveSettings() {\n    for (var i = 0; i < _config2.default.songs.length; i++) {\n      if (_config2.default.songs[i].live == undefined) {\n        _config2.default.songs[i].live = false;\n      }\n    }\n  }\n\n  /** \n   * Initializes the index of the song in the songs array so\n   * we can reference it if needed\n   * \n   * @access private\n   */\n  function initializeDefaultSongIndexes() {\n    for (var i = 0; i < _config2.default.songs.length; i++) {\n      _config2.default.songs[i].index = i;\n    }\n  }\n\n  /**\n   * Determines if we can run Amplitude. Amplitude can only run\n   * IF there are songs, playlists or songs and playlists\n   * \n   * @access private\n   */\n  function canAmplitudeRun(userConfig) {\n    // If the user has provided songs, we can run AmplitudeJS\n    if (userConfig.songs && userConfig.songs.length != 0) {\n      return true;\n    }\n\n    // If the user has provided playlists, we can run AmplitudeJS\n    if (userConfig.playlists && countPlaylists(userConfig.playlists) > 0) {\n      return true;\n    }\n\n    _debug2.default.writeMessage(\"Please provide a playlist or some songs for AmplitudeJS to run!\");\n    return false;\n  }\n\n  /*\n  Returns the publicly accessible methods\n  */\n  return {\n    initialize: initialize,\n    setConfig: setConfig,\n    rebindDisplay: rebindDisplay\n  };\n}();\n\nexports.default = Initializer;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _keydown = __webpack_require__(27);\n\nvar _keydown2 = _interopRequireDefault(_keydown);\n\nvar _timeUpdate = __webpack_require__(42);\n\nvar _timeUpdate2 = _interopRequireDefault(_timeUpdate);\n\nvar _ended = __webpack_require__(26);\n\nvar _ended2 = _interopRequireDefault(_ended);\n\nvar _progress = __webpack_require__(35);\n\nvar _progress2 = _interopRequireDefault(_progress);\n\nvar _play = __webpack_require__(31);\n\nvar _play2 = _interopRequireDefault(_play);\n\nvar _pause = __webpack_require__(30);\n\nvar _pause2 = _interopRequireDefault(_pause);\n\nvar _playPause = __webpack_require__(32);\n\nvar _playPause2 = _interopRequireDefault(_playPause);\n\nvar _stop = __webpack_require__(41);\n\nvar _stop2 = _interopRequireDefault(_stop);\n\nvar _mute = __webpack_require__(28);\n\nvar _mute2 = _interopRequireDefault(_mute);\n\nvar _volumeUp = __webpack_require__(45);\n\nvar _volumeUp2 = _interopRequireDefault(_volumeUp);\n\nvar _volumeDown = __webpack_require__(43);\n\nvar _volumeDown2 = _interopRequireDefault(_volumeDown);\n\nvar _songSlider = __webpack_require__(40);\n\nvar _songSlider2 = _interopRequireDefault(_songSlider);\n\nvar _volumeSlider = __webpack_require__(44);\n\nvar _volumeSlider2 = _interopRequireDefault(_volumeSlider);\n\nvar _next = __webpack_require__(29);\n\nvar _next2 = _interopRequireDefault(_next);\n\nvar _prev = __webpack_require__(34);\n\nvar _prev2 = _interopRequireDefault(_prev);\n\nvar _repeat = __webpack_require__(36);\n\nvar _repeat2 = _interopRequireDefault(_repeat);\n\nvar _repeatSong = __webpack_require__(37);\n\nvar _repeatSong2 = _interopRequireDefault(_repeatSong);\n\nvar _playbackSpeed = __webpack_require__(33);\n\nvar _playbackSpeed2 = _interopRequireDefault(_playbackSpeed);\n\nvar _shuffle = __webpack_require__(38);\n\nvar _shuffle2 = _interopRequireDefault(_shuffle);\n\nvar _skipTo = __webpack_require__(39);\n\nvar _skipTo2 = _interopRequireDefault(_skipTo);\n\nvar _waveform = __webpack_require__(23);\n\nvar _waveform2 = _interopRequireDefault(_waveform);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Events Module. Handles all of the events we listen to in\n * AmplitudeJS.\n *\n * @module events/Events\n */\n\n\n/**\n * Imports all of the handler objects used by the events.\n */\nvar Events = function () {\n  /**\n   * Initializes the handlers for the events listened to by Amplitude\n   *\n   * @access public\n   */\n  function initialize() {\n    /*\n    Write out debug message\n    */\n    _debug2.default.writeMessage(\"Beginning initialization of event handlers..\");\n\n    /*\n    Sets flag that the screen is moving and not a tap\n    */\n    document.addEventListener(\"touchmove\", function () {\n      _config2.default.is_touch_moving = true;\n    });\n\n    /*\n    On touch end if it was a touch move event, set moving to\n    false\n    */\n    document.addEventListener(\"touchend\", function () {\n      if (_config2.default.is_touch_moving) {\n        _config2.default.is_touch_moving = false;\n      }\n    });\n\n    /*\n    On time update for the audio element, update visual displays that\n    represent the time on either a visualized element or time display.\n    */\n    bindTimeUpdate();\n\n    /*\n    Binds key down event handlers for matching key codes to functions.\n    */\n    bindKeyDownEventHandlers();\n\n    /*\n    When the audio element has ended playing, we handle the song\n    ending. In a single song or multiple modular song instance,\n    this just synchronizes the visuals for time and song time\n    visualization, but for a playlist it determines whether\n    it should play the next song or not.\n    */\n    bindSongEnded();\n\n    /*\n    Binds progress event so we can see how much of the song is loaded.\n    */\n    bindProgress();\n\n    /*\n    Binds 'amplitude-play' event handlers\n    */\n    bindPlay();\n\n    /*\n    Binds 'amplitude-pause' event handlers.\n    */\n    bindPause();\n\n    /*\n    Binds 'amplitude-play-pause' event handlers.\n    */\n    bindPlayPause();\n\n    /*\n    Binds 'amplitude-stop' event handlers.\n    */\n    bindStop();\n\n    /*\n    Binds 'amplitude-mute' event handlers.\n    */\n    bindMute();\n\n    /*\n    Binds 'amplitude-volume-up' event handlers\n    */\n    bindVolumeUp();\n\n    /*\n    Binds 'amplitude-volume-down' event handlers\n    */\n    bindVolumeDown();\n\n    /*\n    Binds 'amplitude-song-slider' event handlers\n    */\n    bindSongSlider();\n\n    /*\n    Binds 'amplitude-volume-slider' event handlers.\n    */\n    bindVolumeSlider();\n\n    /*\n    Binds 'amplitude-next' event handlers.\n    */\n    bindNext();\n\n    /*\n    Binds 'amplitude-prev' event handlers.\n    */\n    bindPrev();\n\n    /*\n    Binds 'amplitude-shuffle' event handlers.\n    */\n    bindShuffle();\n\n    /*\n    Binds 'amplitude-repeat' event handlers.\n    */\n    bindRepeat();\n\n    /*\n    Binds 'amplitude-repeat-song' event handlers.\n    */\n    bindRepeatSong();\n\n    /*\n    Binds 'amplitude-playback-speed' event handlers.\n    */\n    bindPlaybackSpeed();\n\n    /*\n    Binds 'amplitude-skip-to' event handlers.\n    */\n    bindSkipTo();\n\n    /*\n    Binds `canplaythrough` event to build the waveform.\n    */\n    bindCanPlayThrough();\n  }\n\n  /**\n   * Destroys all of the global audio bindings\n   */\n  function destroyAudioBindings() {\n    _config2.default.audio.removeEventListener(\"timeupdate\", _timeUpdate2.default.handle);\n    _config2.default.audio.removeEventListener(\"durationchange\", _timeUpdate2.default.handle);\n    _config2.default.audio.removeEventListener(\"ended\", _ended2.default.handle);\n    _config2.default.audio.removeEventListener(\"progress\", _progress2.default.handle);\n\n    if (_waveform2.default.determineIfUsingWaveforms()) {\n      _config2.default.audio.removeEventListener(\"canplaythrough\", _waveform2.default.build);\n    }\n  }\n\n  /**\n   * Rebinds all of the global audio bindings\n   */\n  function rebindAudio() {\n    _config2.default.audio.addEventListener(\"durationchange\", _timeUpdate2.default.handle);\n    _config2.default.audio.addEventListener(\"timeupdate\", _timeUpdate2.default.handle);\n    _config2.default.audio.addEventListener(\"ended\", _ended2.default.handle);\n    _config2.default.audio.addEventListener(\"progress\", _progress2.default.handle);\n\n    if (_waveform2.default.determineIfUsingWaveforms()) {\n      _config2.default.audio.addEventListener(\"canplaythrough\", _waveform2.default.build);\n    }\n  }\n\n  /**\n   * On time update for the audio element, update visual displays that\n   * represent the time on either a visualized element or time display.\n   *\n   * @access private\n   */\n  function bindTimeUpdate() {\n    /*\n    Bind for time update\n    */\n    _config2.default.audio.removeEventListener(\"timeupdate\", _timeUpdate2.default.handle);\n    _config2.default.audio.addEventListener(\"timeupdate\", _timeUpdate2.default.handle);\n\n    /*\n    Bind for duration change\n    */\n    _config2.default.audio.removeEventListener(\"durationchange\", _timeUpdate2.default.handle);\n    _config2.default.audio.addEventListener(\"durationchange\", _timeUpdate2.default.handle);\n  }\n\n  /**\n   * On keydown, we listen to what key got pressed so we can map the key to\n   * a function. This allows the user to map pause and play, next, etc. to key\n   * presses.\n   *\n   * @access private\n   */\n  function bindKeyDownEventHandlers() {\n    document.removeEventListener(\"keydown\", _keydown2.default.handle);\n    document.addEventListener(\"keydown\", _keydown2.default.handle);\n  }\n\n  /**\n   * When the audio element has ended playing, we handle the song\n   * ending. In a single song or multiple modular song instance,\n   * this just synchronizes the visuals for time and song time\n   * visualization, but for a playlist it determines whether\n   * it should play the next song or not.\n   *\n   * @access private\n   */\n  function bindSongEnded() {\n    _config2.default.audio.removeEventListener(\"ended\", _ended2.default.handle);\n    _config2.default.audio.addEventListener(\"ended\", _ended2.default.handle);\n  }\n\n  /**\n   * As the audio is loaded, the progress event gets fired. We bind into this\n   * to grab the buffered percentage of the song. We can then add more elements\n   * to show the buffered amount.\n   *\n   * @access private\n   */\n  function bindProgress() {\n    _config2.default.audio.removeEventListener(\"progress\", _progress2.default.handle);\n    _config2.default.audio.addEventListener(\"progress\", _progress2.default.handle);\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS play buttons\n   *\n   * @access private\n   */\n  function bindPlay() {\n    /*\n    Gets all of the elements with the class amplitude-play\n    */\n    var play_classes = document.getElementsByClassName(\"amplitude-play\");\n\n    /*\n    Iterates over all of the play classes and binds the event interaction\n    method to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < play_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        play_classes[i].removeEventListener(\"touchend\", _play2.default.handle);\n        play_classes[i].addEventListener(\"touchend\", _play2.default.handle);\n      } else {\n        play_classes[i].removeEventListener(\"click\", _play2.default.handle);\n        play_classes[i].addEventListener(\"click\", _play2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS pause buttons.\n   *\n   * @access private\n   */\n  function bindPause() {\n    /*\n    Gets all of the elements with the class amplitude-pause\n    */\n    var pause_classes = document.getElementsByClassName(\"amplitude-pause\");\n\n    /*\n    Iterates over all of the pause classes and binds the event interaction\n    method to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < pause_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        pause_classes[i].removeEventListener(\"touchend\", _pause2.default.handle);\n        pause_classes[i].addEventListener(\"touchend\", _pause2.default.handle);\n      } else {\n        pause_classes[i].removeEventListener(\"click\", _pause2.default.handle);\n        pause_classes[i].addEventListener(\"click\", _pause2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS play pause buttons\n   *\n   * @access private\n   */\n  function bindPlayPause() {\n    /*\n    Gets all of the elements with the class amplitude-play-pause\n    */\n    var play_pause_classes = document.getElementsByClassName(\"amplitude-play-pause\");\n\n    /*\n    Iterates over all of the play/pause classes and binds the event interaction\n    method to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < play_pause_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        play_pause_classes[i].removeEventListener(\"touchend\", _playPause2.default.handle);\n        play_pause_classes[i].addEventListener(\"touchend\", _playPause2.default.handle);\n      } else {\n        play_pause_classes[i].removeEventListener(\"click\", _playPause2.default.handle);\n        play_pause_classes[i].addEventListener(\"click\", _playPause2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS stop buttons\n   *\n   * @access private\n   */\n  function bindStop() {\n    /*\n    Gets all of the elements with the class amplitude-stop\n    */\n    var stop_classes = document.getElementsByClassName(\"amplitude-stop\");\n\n    /*\n    Iterates over all of the stop classes and binds the event interaction\n    method to the element.  If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < stop_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        stop_classes[i].removeEventListener(\"touchend\", _stop2.default.handle);\n        stop_classes[i].addEventListener(\"touchend\", _stop2.default.handle);\n      } else {\n        stop_classes[i].removeEventListener(\"click\", _stop2.default.handle);\n        stop_classes[i].addEventListener(\"click\", _stop2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS mute buttons\n   *\n   * @access private\n   */\n  function bindMute() {\n    /*\n    Gets all of the elements with the class amplitue-mute\n    */\n    var mute_classes = document.getElementsByClassName(\"amplitude-mute\");\n\n    /*\n    Iterates over all of the mute classes and binds the event interaction\n    method to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < mute_classes.length; i++) {\n      /*\n      WARNING: If iOS, we don't do anything because iOS does not allow the\n      volume to be adjusted through anything except the buttons on the side of\n      the device.\n      */\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        /*\n        Checks for an iOS device and displays an error message if debugging\n        is turned on.\n        */\n        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          _debug2.default.writeMessage(\"iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4\");\n        } else {\n          mute_classes[i].removeEventListener(\"touchend\", _mute2.default.handle);\n          mute_classes[i].addEventListener(\"touchend\", _mute2.default.handle);\n        }\n      } else {\n        mute_classes[i].removeEventListener(\"click\", _mute2.default.handle);\n        mute_classes[i].addEventListener(\"click\", _mute2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS Volume Up Buttons\n   *\n   * @access private\n   */\n  function bindVolumeUp() {\n    /*\n    Gets all of the elements with the class amplitude-volume-up\n    */\n    var volume_up_classes = document.getElementsByClassName(\"amplitude-volume-up\");\n\n    /*\n    Iterates over all of the volume up classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < volume_up_classes.length; i++) {\n      /*\n      WARNING: If iOS, we don't do anything because iOS does not allow the\n      volume to be adjusted through anything except the buttons on the side of\n      the device.\n      */\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        /*\n        Checks for an iOS device and displays an error message if debugging\n        is turned on.\n        */\n        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          _debug2.default.writeMessage(\"iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4\");\n        } else {\n          volume_up_classes[i].removeEventListener(\"touchend\", _volumeUp2.default.handle);\n          volume_up_classes[i].addEventListener(\"touchend\", _volumeUp2.default.handle);\n        }\n      } else {\n        volume_up_classes[i].removeEventListener(\"click\", _volumeUp2.default.handle);\n        volume_up_classes[i].addEventListener(\"click\", _volumeUp2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS Volume Down Buttons\n   *\n   * @access private\n   */\n  function bindVolumeDown() {\n    /*\n    Gets all of the elements with the class amplitude-volume-down\n    */\n    var volume_down_classes = document.getElementsByClassName(\"amplitude-volume-down\");\n\n    /*\n    Iterates over all of the volume down classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < volume_down_classes.length; i++) {\n      /*\n      WARNING: If iOS, we don't do anything because iOS does not allow the\n      volume to be adjusted through anything except the buttons on the side of\n      the device.\n      */\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        /*\n        Checks for an iOS device and displays an error message if debugging\n        is turned on.\n        */\n        if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n          _debug2.default.writeMessage(\"iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4\");\n        } else {\n          volume_down_classes[i].removeEventListener(\"touchend\", _volumeDown2.default.handle);\n          volume_down_classes[i].addEventListener(\"touchend\", _volumeDown2.default.handle);\n        }\n      } else {\n        volume_down_classes[i].removeEventListener(\"click\", _volumeDown2.default.handle);\n        volume_down_classes[i].addEventListener(\"click\", _volumeDown2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds change and input events for AmplitudeJS Song Slider Inputs\n   *\n   * @access private\n   */\n  function bindSongSlider() {\n    /*\n    Gets browser so if we need to apply overrides, like we usually\n    have to do for anything cool in IE, we can do that.\n    */\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n\n    /*\n    Gets all of the elements with the class amplitude-song-slider\n    */\n    var song_sliders = document.getElementsByClassName(\"amplitude-song-slider\");\n\n    /*\n    Iterates over all of the song slider classes and binds the event interaction\n    methods to the element. If the browser is IE we listen to the change event\n    where if it is anything else, it's the input method.\n    */\n    for (var i = 0; i < song_sliders.length; i++) {\n      if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n        song_sliders[i].removeEventListener(\"change\", _songSlider2.default.handle);\n        song_sliders[i].addEventListener(\"change\", _songSlider2.default.handle);\n      } else {\n        song_sliders[i].removeEventListener(\"input\", _songSlider2.default.handle);\n        song_sliders[i].addEventListener(\"input\", _songSlider2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds change and input events fro AmplitudeJS Volume Slider inputs\n   *\n   * @access private\n   */\n  function bindVolumeSlider() {\n    /*\n    Gets browser so if we need to apply overrides, like we usually\n    have to do for anything cool in IE, we can do that.\n    */\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n\n    /*\n    Gets all of the elements with the class amplitude-volume-slider\n        */\n    var volume_sliders = document.getElementsByClassName(\"amplitude-volume-slider\");\n\n    /*\n    Iterates over all of the volume slider classes and binds the event interaction\n    methods to the element. If the browser is IE we listen to the change event\n    where if it is anything else, it's the input method.\n    */\n    for (var i = 0; i < volume_sliders.length; i++) {\n      /*\n      WARNING: If iOS, we don't do anything because iOS does not allow the\n      volume to be adjusted through anything except the buttons on the side of\n      the device.\n      */\n      if (/iPhone|iPad|iPod/i.test(navigator.userAgent)) {\n        _debug2.default.writeMessage(\"iOS does NOT allow volume to be set through javascript: https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW4\");\n      } else {\n        if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./)) {\n          volume_sliders[i].removeEventListener(\"change\", _volumeSlider2.default.handle);\n          volume_sliders[i].addEventListener(\"change\", _volumeSlider2.default.handle);\n        } else {\n          volume_sliders[i].removeEventListener(\"input\", _volumeSlider2.default.handle);\n          volume_sliders[i].addEventListener(\"input\", _volumeSlider2.default.handle);\n        }\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events fro AmplitudeJS Next buttons\n   *\n   * @access private\n   */\n  function bindNext() {\n    /*\n    Gets all of the elements with the class amplitude-next\n        */\n    var next_classes = document.getElementsByClassName(\"amplitude-next\");\n\n    /*\n    Iterates over all of the next classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < next_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        next_classes[i].removeEventListener(\"touchend\", _next2.default.handle);\n        next_classes[i].addEventListener(\"touchend\", _next2.default.handle);\n      } else {\n        next_classes[i].removeEventListener(\"click\", _next2.default.handle);\n        next_classes[i].addEventListener(\"click\", _next2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS prev buttons.\n   *\n   * @access private\n   */\n  function bindPrev() {\n    /*\n    Gets all of the elements with the class amplitude-prev\n    */\n    var prev_classes = document.getElementsByClassName(\"amplitude-prev\");\n\n    /*\n    Iterates over all of the prev classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < prev_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        prev_classes[i].removeEventListener(\"touchend\", _prev2.default.handle);\n        prev_classes[i].addEventListener(\"touchend\", _prev2.default.handle);\n      } else {\n        prev_classes[i].removeEventListener(\"click\", _prev2.default.handle);\n        prev_classes[i].addEventListener(\"click\", _prev2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS shuffle buttons.\n   *\n   * @access private\n   */\n  function bindShuffle() {\n    /*\n    Gets all of the elements with the class amplitude-shuffle\n    */\n    var shuffle_classes = document.getElementsByClassName(\"amplitude-shuffle\");\n\n    /*\n    Iterates over all of the shuffle classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < shuffle_classes.length; i++) {\n      /*\n      Since we are re-binding everything we remove any classes that signify\n      a state of the shuffle control.\n      */\n      shuffle_classes[i].classList.remove(\"amplitude-shuffle-on\");\n      shuffle_classes[i].classList.add(\"amplitude-shuffle-off\");\n\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        shuffle_classes[i].removeEventListener(\"touchend\", _shuffle2.default.handle);\n        shuffle_classes[i].addEventListener(\"touchend\", _shuffle2.default.handle);\n      } else {\n        shuffle_classes[i].removeEventListener(\"click\", _shuffle2.default.handle);\n        shuffle_classes[i].addEventListener(\"click\", _shuffle2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS repeat buttons.\n   *\n   * @access private\n   */\n  function bindRepeat() {\n    /*\n    Gets all of the elements with the class amplitude-repeat\n    */\n    var repeat_classes = document.getElementsByClassName(\"amplitude-repeat\");\n\n    /*\n    Iterates over all of the repeat classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < repeat_classes.length; i++) {\n      /*\n      Since we are re-binding everything we remove any classes that signify\n      a state of the repeat control.\n      */\n      repeat_classes[i].classList.remove(\"amplitude-repeat-on\");\n      repeat_classes[i].classList.add(\"amplitude-repeat-off\");\n\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        repeat_classes[i].removeEventListener(\"touchend\", _repeat2.default.handle);\n        repeat_classes[i].addEventListener(\"touchend\", _repeat2.default.handle);\n      } else {\n        repeat_classes[i].removeEventListener(\"click\", _repeat2.default.handle);\n        repeat_classes[i].addEventListener(\"click\", _repeat2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS repeat song buttons.\n   *\n   * @access private\n   */\n  function bindRepeatSong() {\n    /*\n    Gets all of the elements with the class amplitude-repeat-song\n    */\n    var repeat_song_classes = document.getElementsByClassName(\"amplitude-repeat-song\");\n\n    /*\n    Iterates over all of the repeat song classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < repeat_song_classes.length; i++) {\n      /*\n      Since we are re-binding everything we remove any classes that signify\n      a state of the repeat control.\n      */\n      repeat_song_classes[i].classList.remove(\"amplitude-repeat-on\");\n      repeat_song_classes[i].classList.add(\"amplitude-repeat-off\");\n\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        repeat_song_classes[i].removeEventListener(\"touchend\", _repeatSong2.default.handle);\n        repeat_song_classes[i].addEventListener(\"touchend\", _repeatSong2.default.handle);\n      } else {\n        repeat_song_classes[i].removeEventListener(\"click\", _repeatSong2.default.handle);\n        repeat_song_classes[i].addEventListener(\"click\", _repeatSong2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS playback speed buttons\n   *\n   * @access private\n   */\n  function bindPlaybackSpeed() {\n    /*\n    Gets all of the elements with the class amplitude-playback-speed\n    */\n    var playback_speed_classes = document.getElementsByClassName(\"amplitude-playback-speed\");\n\n    /*\n    Iterates over all of the playback speed classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it is click.\n    */\n    for (var i = 0; i < playback_speed_classes.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        playback_speed_classes[i].removeEventListener(\"touchend\", _playbackSpeed2.default.handle);\n        playback_speed_classes[i].addEventListener(\"touchend\", _playbackSpeed2.default.handle);\n      } else {\n        playback_speed_classes[i].removeEventListener(\"click\", _playbackSpeed2.default.handle);\n        playback_speed_classes[i].addEventListener(\"click\", _playbackSpeed2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds click and touchend events for AmplitudeJS skip to buttons.\n   *\n   * @access private\n   */\n  function bindSkipTo() {\n    /*\n    Gets all of the skip to elements with the class 'amplitude-skip-to'\n    */\n    var skipToClasses = document.getElementsByClassName(\"amplitude-skip-to\");\n\n    /*\n    Iterates over all of the skip to classes and binds the event interaction\n    methods to the element. If the browser is mobile, then the event is touchend\n    otherwise it's a click.\n    */\n    for (var i = 0; i < skipToClasses.length; i++) {\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\n        skipToClasses[i].removeEventListener(\"touchend\", _skipTo2.default.handle);\n        skipToClasses[i].addEventListener(\"touchend\", _skipTo2.default.handle);\n      } else {\n        skipToClasses[i].removeEventListener(\"click\", _skipTo2.default.handle);\n        skipToClasses[i].addEventListener(\"click\", _skipTo2.default.handle);\n      }\n    }\n  }\n\n  /**\n   * Binds can play through to a song.\n   *\n   * @access private\n   */\n  function bindCanPlayThrough() {\n    if (_waveform2.default.determineIfUsingWaveforms()) {\n      _config2.default.audio.removeEventListener(\"canplaythrough\", _waveform2.default.build);\n      _config2.default.audio.addEventListener(\"canplaythrough\", _waveform2.default.build);\n    }\n  }\n\n  /*\n  Returns the public facing functions.\n  */\n  return {\n    initialize: initialize,\n    destroyAudioBindings: destroyAudioBindings,\n    rebindAudio: rebindAudio\n  };\n}();\n\n/**\n * Imports the utility classes used by the evnets.\n */\n/*\n\tImport the necessary classes and config to use\n\twith the events.\n*/\nexports.default = Events;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Builds a waveform for the current audio.\n * Help from: https://robots.thoughtbot.com/javascript-audio-api\n * https://stackoverflow.com/questions/21347833/html-svg-not-drawing-works-in-other-pages\n */\nvar WaveForm = function () {\n  /*\n    Initialize the local variables used in the Waveform.\n  */\n  var buffer = \"\";\n  var sampleRate = '';\n  var peaks = \"\";\n\n  function init() {\n    sampleRate = _config2.default.waveforms.sample_rate;\n\n    /*\n      Grabs all of the waveform elements on the page.\n    */\n    var waveforms = document.querySelectorAll(\".amplitude-wave-form\");\n\n    /*\n      If there are waveforms, we iterate over them and set them up to display\n      properly.\n    */\n    if (waveforms.length > 0) {\n      /*\n        Iterate over all of the waveforms and build the SVG parts.\n      */\n      for (var i = 0; i < waveforms.length; i++) {\n        /*\n          Clear the inner HTML of the element if we are replacing the waveform.\n        */\n        waveforms[i].innerHTML = \"\";\n\n        /*\n          Inserts an SVG into the element.\n        */\n        var svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        svg.setAttribute(\"viewBox\", \"0 -1 \" + sampleRate + \" 2\");\n        svg.setAttribute(\"preserveAspectRatio\", \"none\");\n\n        /*\n          Add a g component to the SVG\n        */\n        var g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n        svg.appendChild(g);\n\n        /*\n          Add a path component to the g\n        */\n        var path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n        path.setAttribute(\"d\", \"\");\n        path.setAttribute(\"id\", \"waveform\");\n\n        g.appendChild(path);\n\n        /*\n          Append the SVG to the waveform.\n        */\n        waveforms[i].appendChild(svg);\n      }\n    }\n  }\n\n  /**\n   * Builds each waveform for the page.\n   */\n  function build() {\n    if (_config2.default.web_audio_api_available) {\n      /*\n        If we don't have the wave form built, we need to build the waveform by loading\n        the src with an array buffer.\n      */\n      if (_config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split(\"\").reduce(function (a, b) {\n        a = (a << 5) - a + b.charCodeAt(0);\n        return a & a;\n      }, 0))] == undefined) {\n        /*\n          Initializes a new XML Http Request.\n        */\n        var req = new XMLHttpRequest();\n\n        /*\n          Opens the src parameter for the audio file to read in.\n        */\n        req.open(\"GET\", _config2.default.audio.src, true);\n        req.responseType = \"arraybuffer\";\n\n        /*\n          When the ready state changes, check to see if we can render the\n          wave form.\n        */\n        req.onreadystatechange = function (e) {\n          /*\n            When the request is complete, then we begin decoding the\n            audio to build the waveform.\n          */\n          if (req.readyState == 4) {\n            /*\n              If the status is 200 means the response is a success and\n              we decode the audio data.\n            */\n            if (req.status == 200) {\n              /*\n                Decode the audio data and process the waveform.\n              */\n              _config2.default.context.decodeAudioData(req.response, function (bufferedAudio) {\n                /*\n                  Set the buffer to the audio returned.\n                */\n                buffer = bufferedAudio;\n\n                /*\n                  Get the peaks in the audio.\n                */\n                peaks = getPeaks(sampleRate, buffer);\n\n                /*\n                  Build the SVG\n                */\n                process(sampleRate, buffer, peaks);\n              });\n            }\n          }\n        };\n        req.send();\n      } else {\n        /*\n          If we already have a waveform, we grab the waveform that\n          was created for the song and display it. We do a simple hash\n          of the song URL so it's already unique.\n        */\n        displayWaveForms(_config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split(\"\").reduce(function (a, b) {\n          a = (a << 5) - a + b.charCodeAt(0);\n          return a & a;\n        }, 0))]);\n      }\n    }\n  }\n\n  /**\n   * Processes the audio and generates the waveform.\n   *\n   * @param {sampleRate} sampleRate - The rate we should sample the audio.\n   * @param {arraybuffer} buffer - The Web Audio API\n   * @param {array} peaks - The peaks in the audio.\n   */\n  function process(sampleRate, buffer, peaks) {\n    /*\n      If we have a buffer, we find the peaks in the audio.\n    */\n    if (buffer) {\n      /*\n        Get the total peaks in the song.\n      */\n      var totalPeaks = peaks.length;\n\n      /*\n        Figure out the depth of the peak.\n      */\n      var d = \"\";\n      for (var peakNumber = 0; peakNumber < totalPeaks; peakNumber++) {\n        if (peakNumber % 2 === 0) {\n          d += \" M\" + ~~(peakNumber / 2) + \", \" + peaks.shift();\n        } else {\n          d += \" L\" + ~~(peakNumber / 2) + \", \" + peaks.shift();\n        }\n      }\n\n      /*\n        Add the waveform to the built waveforms array.\n      */\n      _config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split(\"\").reduce(function (a, b) {\n        a = (a << 5) - a + b.charCodeAt(0);\n        return a & a;\n      }, 0))] = d;\n\n      /*\n        Display the waveform.\n      */\n      displayWaveForms(_config2.default.waveforms.built[Math.abs(_config2.default.audio.src.split(\"\").reduce(function (a, b) {\n        a = (a << 5) - a + b.charCodeAt(0);\n        return a & a;\n      }, 0))]);\n    }\n  }\n\n  /**\n   * Get the peaks of the audio for the waveform.\n   *\n   * @param {number} length - The sample size of the audio.\n   * @param {array} buffer - The array buffer used to find the peaks in the audio.\n   */\n  function getPeaks(length, buffer) {\n    /*\n      Set the parameters needed to build the SVG.\n    */\n    var sampleSize = buffer.length / length;\n    var sampleStep = ~~(sampleSize / 10) || 1;\n    var numberOfChannels = buffer.numberOfChannels;\n    var mergedPeaks = [];\n\n    /*\n      Iterate over the channels and find the peaks.\n    */\n    for (var channelNumber = 0; channelNumber < numberOfChannels; channelNumber++) {\n      /*\n        Initialize the peaks array and set the channel data to what\n        the buffer has in its channel data.\n      */\n      var _peaks = [];\n      var channelData = buffer.getChannelData(channelNumber);\n\n      /*\n        Iterate over peaks with respect to the sample size.\n      */\n      for (var peakNumber = 0; peakNumber < length; peakNumber++) {\n        /*\n          Gt the start and end peak.\n        */\n        var start = ~~(peakNumber * sampleSize);\n        var end = ~~(start + sampleSize);\n\n        /*\n          Set min and max to the channel data first peak.\n        */\n        var min = channelData[0];\n        var max = channelData[0];\n\n        /*\n          Iterate over the parts of the song starting to the\n          ending to display the waveform.\n        */\n        for (var sampleIndex = start; sampleIndex < end; sampleIndex += sampleStep) {\n          var value = channelData[sampleIndex];\n\n          if (value > max) {\n            max = value;\n          }\n          if (value < min) {\n            min = value;\n          }\n        }\n\n        /*\n          Set the max and min for the peak.\n        */\n        _peaks[2 * peakNumber] = max;\n        _peaks[2 * peakNumber + 1] = min;\n\n        /*\n          Merge the peaks\n        */\n        if (channelNumber === 0 || max > mergedPeaks[2 * peakNumber]) {\n          mergedPeaks[2 * peakNumber] = max;\n        }\n\n        if (channelNumber === 0 || min < mergedPeaks[2 * peakNumber + 1]) {\n          mergedPeaks[2 * peakNumber + 1] = min;\n        }\n      }\n    }\n\n    /*\n      Returns the merged peaks.\n    */\n    return mergedPeaks;\n  }\n\n  /**\n   * Displays all of the waveforms necessary.\n   *\n   * @param {path} svg - The drawing of the waveform.\n   */\n  function displayWaveForms(svg) {\n    var waveformElements = document.querySelectorAll(\".amplitude-wave-form\");\n\n    /*\n      Iterate over all of the waveform elements and\n      display the waveform.\n    */\n    for (var i = 0; i < waveformElements.length; i++) {\n      /*\n        Get the playlist attribute of the waveform element.\n      */\n      var playlist = waveformElements[i].getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        Get the song index attribute of the waveform element.\n      */\n      var song = waveformElements[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        If the playlist is null and the song is null it's a global element.\n      */\n      if (playlist == null && song == null) {\n        displayGlobalWaveform(waveformElements[i], svg);\n      }\n\n      /*\n        If the playlist is defined but the song is null it's a playlist element.\n      */\n      if (playlist != null && song == null) {\n        displayPlaylistWaveform(waveformElements[i], svg, playlist);\n      }\n\n      /*\n        If the playlist is not defined and the song is not null it's a song\n        element.\n      */\n      if (playlist == null && song != null) {\n        displaySongWaveform(waveformElements[i], svg, song);\n      }\n\n      /*\n        If the playlist and song are defined it's a song in the playlist element.\n      */\n      if (playlist != null && song != null) {\n        displaySongInPlaylistWaveform(waveformElements[i], svg, playlist, song);\n      }\n    }\n  }\n\n  /**\n   * Displays a global wave form.\n   *\n   * @param {Node} element - Element to display the waveform in.\n   * @param {SVG} svg - The waveform path.\n   */\n  function displayGlobalWaveform(element, svg) {\n    var waveformPath = element.querySelector(\"svg g path\");\n\n    waveformPath.setAttribute(\"d\", svg);\n  }\n\n  /**\n   * Displays a playlist wave form.\n   *\n   * @param {Node} element - Element to display the waveform in.\n   * @param {SVG} svg - The waveform path.\n   * @param {string} playlist - The playlist we are displaying the waveform for.\n   */\n  function displayPlaylistWaveform(element, svg, playlist) {\n    /*\n      Ensure the playlist is the active playlist.\n    */\n    if (_config2.default.active_playlist == playlist) {\n      var waveformPath = element.querySelector(\"svg g path\");\n\n      waveformPath.setAttribute(\"d\", svg);\n    }\n  }\n\n  /**\n   * Displays a song wave form.\n   *\n   * @param {Node} element - Element to display the waveform in.\n   * @param {SVG} svg - The waveform path.\n   * @param {Integer} song - The index of the song we are displaying the\n   * waveform for.\n   */\n  function displaySongWaveform(element, svg, song) {\n    /*\n      Ensure it's the active song being displayed.\n    */\n    if (_config2.default.active_index == song) {\n      var waveformPath = element.querySelector(\"svg g path\");\n\n      waveformPath.setAttribute(\"d\", svg);\n    }\n  }\n\n  /**\n   * Displays a song in playlist waveform.\n   *\n   * @param {Node} element - Element to display the waveform in.\n   * @param {SVG} svg - The waveform path.\n   * @param {String} playlist - The playlist the waveform is in.\n   * @param {Integer} song - The index of the song we are displaying the waveform for.\n   */\n  function displaySongInPlaylistWaveform(element, svg, playlist, song) {\n    /*\n      Ensure it's the active song in the active playlist.\n    */\n    if (_config2.default.active_playlist == playlist && _config2.default.playlists[_config2.default.active_playlist].active_index == song) {\n      var waveformPath = element.querySelector(\"svg g path\");\n\n      waveformPath.setAttribute(\"d\", svg);\n    }\n  }\n\n  /**\n   * Determines if the user is using waveforms\n   */\n  function determineIfUsingWaveforms() {\n    var waveforms = document.querySelectorAll(\".amplitude-wave-form\");\n\n    if (waveforms.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /*\n    Return the public methods.\n  */\n  return {\n    init: init,\n    build: build,\n    determineIfUsingWaveforms: determineIfUsingWaveforms\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = WaveForm;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The utility to handle the computation of time in AmplitudeJS.\n * @module utilities/Time\n */\nvar Time = function () {\n  /**\n   * Computes the current song time. Breaks down where the song is into\n   * hours, minutes, seconds and formats it to be displayed to the user.\n   *\n   * @access public\n   */\n  function computeCurrentTimes() {\n    /*\n    Initialize the current time object that will be returned.\n    */\n    var currentTime = {};\n\n    /*\n    Computes the current seconds for the song.\n    */\n    var currentSeconds = (Math.floor(_config2.default.audio.currentTime % 60) < 10 ? \"0\" : \"\") + Math.floor(_config2.default.audio.currentTime % 60);\n\n    /*\n    Computes the current minutes for the song.\n    */\n    var currentMinutes = Math.floor(_config2.default.audio.currentTime / 60);\n\n    /*\n    Initialize the current hours variable.\n    */\n    var currentHours = \"00\";\n\n    /*\n    If the current minutes is less than 10, we add a leading 0.\n    */\n    if (currentMinutes < 10) {\n      currentMinutes = \"0\" + currentMinutes;\n    }\n\n    /*\n    If the user is more than 60 minutes into the song, then\n    we extract the hours.\n    */\n    if (currentMinutes >= 60) {\n      currentHours = Math.floor(currentMinutes / 60);\n      currentMinutes = currentMinutes % 60;\n\n      /*\n      If the user is less than 10 minutes in, we append the\n      additional 0 to the minutes.\n      */\n      if (currentMinutes < 10) {\n        currentMinutes = \"0\" + currentMinutes;\n      }\n    }\n\n    /*\n    Build a clean current time object and send back the appropriate information.\n    */\n    currentTime.seconds = currentSeconds;\n    currentTime.minutes = currentMinutes;\n    currentTime.hours = currentHours;\n\n    return currentTime;\n  }\n\n  /**\n   * Computes the current song duration. Breaks down where the song is into\n   * hours, minutes, seconds and formats it to be displayed to the user.\n   *\n   * @access public\n   */\n  function computeSongDuration() {\n    /*\n    Initialize the song duration object that will be returned.\n    */\n    var songDuration = {};\n\n    /*\n    Computes the duration of the song's seconds.\n    */\n    var songDurationSeconds = (Math.floor(_config2.default.audio.duration % 60) < 10 ? \"0\" : \"\") + Math.floor(_config2.default.audio.duration % 60);\n\n    /*\n    Computes the duration of the song's minutes.\n    */\n    var songDurationMinutes = Math.floor(_config2.default.audio.duration / 60);\n\n    /*\n    Initialize the hours duration variable.\n    */\n    var songDurationHours = \"00\";\n\n    /*\n    If the song duration minutes is less than 10, we add a leading 0.\n    */\n    if (songDurationMinutes < 10) {\n      songDurationMinutes = \"0\" + songDurationMinutes;\n    }\n\n    /*\n    If there is more than 60 minutes in the song, then we\n    extract the hours.\n    */\n    if (songDurationMinutes >= 60) {\n      songDurationHours = Math.floor(songDurationMinutes / 60);\n      songDurationMinutes = songDurationMinutes % 60;\n\n      /*\n      If the song duration minutes is less than 10 we append\n      the additional 0.\n      */\n      if (songDurationMinutes < 10) {\n        songDurationMinutes = \"0\" + songDurationMinutes;\n      }\n    }\n\n    /*\n    Build a clean song duration object and send back the appropriate information.\n    */\n    songDuration.seconds = isNaN(songDurationSeconds) ? \"00\" : songDurationSeconds;\n    songDuration.minutes = isNaN(songDurationMinutes) ? \"00\" : songDurationMinutes;\n    songDuration.hours = isNaN(songDurationHours) ? \"00\" : songDurationHours.toString();\n\n    return songDuration;\n  }\n\n  /**\n   * Computes the song completion percentage.\n   *\n   * @access public\n   */\n  function computeSongCompletionPercentage() {\n    return _config2.default.audio.currentTime / _config2.default.audio.duration * 100;\n  }\n\n  /**\n   * Sets the current time for the audio.\n   *\n   * @access public\n   */\n  function setCurrentTime(time) {\n    /*\n      If the song is not live, we can set the current time.\n    */\n    if (!_config2.default.active_metadata.live) {\n      /*\n        Makes sure the number is finite to set the time.\n      */\n      if (isFinite(time)) {\n        _config2.default.audio.currentTime = time;\n      }\n    }\n  }\n\n  /**\n   * Defines what is returned by the module\n   */\n  return {\n    computeCurrentTimes: computeCurrentTimes,\n    computeSongDuration: computeSongDuration,\n    computeSongCompletionPercentage: computeSongCompletionPercentage,\n    setCurrentTime: setCurrentTime\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = Time;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Visual Handler for Buffered Progress Elements\n *\n * @module visual/BufferedProgressElements\n */\nvar BufferedProgressElements = function () {\n  /**\n   * Syncs the buffered progress bars to the current percentage in the config\n   *\n   * @access public\n   */\n  function sync() {\n    syncGlobal();\n    syncPlaylist();\n    syncSong();\n    syncSongInPlaylist();\n  }\n\n  /**\n   * Sync the global song buffered progress elements.\n   */\n  function syncGlobal() {\n    /*\n    Gets all of the song buffered progress bars.\n    */\n    var songBufferedProgressBars = document.getElementsByClassName(\"amplitude-buffered-progress\");\n\n    /*\n    Iterate over all of the song buffered progress bar and\n    set them to 0 which is like re-setting them.\n    */\n    for (var i = 0; i < songBufferedProgressBars.length; i++) {\n      var playlist = songBufferedProgressBars[i].getAttribute(\"data-amplitude-playlist\");\n      var song = songBufferedProgressBars[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && song == null && !isNaN(_config2.default.buffered)) {\n        songBufferedProgressBars[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);\n      }\n    }\n  }\n\n  /**\n   * Sync the playlist song buffered progress elements.\n   */\n  function syncPlaylist() {\n    /*\n    Gets all of the song buffered progress bars.\n    */\n    var songBufferedProgressBarsPlaylist = document.querySelectorAll('.amplitude-buffered-progress[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n    Iterate over all of the song buffered progress bar and\n    set them to 0 which is like re-setting them.\n    */\n    for (var i = 0; i < songBufferedProgressBarsPlaylist.length; i++) {\n      var song = songBufferedProgressBarsPlaylist[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (song == null && !isNaN(_config2.default.buffered)) {\n        songBufferedProgressBarsPlaylist[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);\n      }\n    }\n  }\n\n  /**\n   * Sync the song song buffered progress elements.\n   */\n  function syncSong() {\n    /*\n    Gets all of the song buffered progress bars.\n    */\n    var songBufferedProgressBarsSongs = document.querySelectorAll('.amplitude-buffered-progress[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n    /*\n    Iterate over all of the song buffered progress bar and\n    set them to 0 which is like re-setting them.\n    */\n    for (var i = 0; i < songBufferedProgressBarsSongs.length; i++) {\n      var playlist = songBufferedProgressBarsSongs[i].getAttribute(\"data-amplitude-playlist\");\n\n      if (playlist == null && !isNaN(_config2.default.buffered)) {\n        songBufferedProgressBarsSongs[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);\n      }\n    }\n  }\n\n  /**\n   * Sync the song in playlist song buffered progress elements.\n   */\n  function syncSongInPlaylist() {\n    var activePlaylistIndex = _config2.default.active_playlist != null && _config2.default.active_playlist != \"\" ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    /*\n    Gets all of the song buffered progress bars.\n    */\n    var songBufferedProgressBarsSongsInPlaylist = document.querySelectorAll('.amplitude-buffered-progress[data-amplitude-song-index=\"' + activePlaylistIndex + '\"][data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n    Iterate over all of the song buffered progress bar and\n    set them to 0 which is like re-setting them.\n    */\n    for (var i = 0; i < songBufferedProgressBarsSongsInPlaylist.length; i++) {\n      if (!isNaN(_config2.default.buffered)) {\n        songBufferedProgressBarsSongsInPlaylist[i].value = parseFloat(parseFloat(_config2.default.buffered) / 100);\n      }\n    }\n  }\n\n  /**\n   * Sets all of the song buffered progress bars to 0\n   *\n   * @access public\n   */\n  function reset() {\n    /*\n    Gets all of the song buffered progress bars.\n    */\n    var songBufferedProgressBars = document.getElementsByClassName(\"amplitude-buffered-progress\");\n\n    /*\n    Iterate over all of the song buffered progress bar and\n    set them to 0 which is like re-setting them.\n    */\n    for (var i = 0; i < songBufferedProgressBars.length; i++) {\n      songBufferedProgressBars[i].value = 0;\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    sync: sync,\n    reset: reset\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = BufferedProgressElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Ended Module. Handles the ended event on the audio.\n *\n * @module events/Ended\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/Core\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Ended = function () {\n  /**\n   * When the song has ended, handles what to do next\n   *\n   * HANDLER FOR: ended\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      Sets the time out for song ended. This determines if\n      we should go to the next song or delay between songs.\n    */\n    setTimeout(function () {\n      /*\n        If we continue next, we should move to the next song in the playlist.\n      */\n      if (_config2.default.continue_next) {\n        /*\n        If the active playlist is not set, we set the\n        next song that's in the songs array.\n        */\n        if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n          _audioNavigation2.default.setNext(true);\n        } else {\n          _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist, true);\n        }\n      } else {\n        if (!_config2.default.is_touch_moving) {\n          /*\n          Stops the active song.\n          */\n          _core2.default.stop();\n\n          /*\n            Sync the play pause elements.\n          */\n          _playPauseElements2.default.sync();\n        }\n      }\n    }, _config2.default.delay);\n  }\n\n  /*\n    Returns the public facing methods.\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Play Pause Elements\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\nexports.default = Ended;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _shuffler = __webpack_require__(13);\n\nvar _shuffler2 = _interopRequireDefault(_shuffler);\n\nvar _repeater = __webpack_require__(12);\n\nvar _repeater2 = _interopRequireDefault(_repeater);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _repeatElements = __webpack_require__(8);\n\nvar _repeatElements2 = _interopRequireDefault(_repeatElements);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Key Down event handler\n *\n * @module events/KeyDown\n */\n\n\n/**\n * Imports the Repeat Elements Visual Handler\n * @module visual/RepeatElements\n */\n\n\n/**\n * Imports the Repeater Utility\n * @module utilities/Repeater\n */\n\n\n/**\n * Imports the core of AmplitudeJS\n * @module core/Core\n */\nvar KeyDown = function () {\n  /**\n   * When the keydown event is fired, we determine which function should be run\n   * based on what was passed in.\n   *\n   * HANDLER FOR: keydown\n   *\n   * @access public\n   * @prop {object} event The event object being passed in.\n   */\n  function handle(event) {\n    runKeyEvent(event.which);\n  }\n\n  /**\n   * Runs an event on key down\n   *\n   * @access public\n   * @param {number} key \t- The key code the event is bound to.\n   */\n  function runKeyEvent(key) {\n    /*\n    Checks to see if the user bound an event to the code pressed.\n    */\n    if (_config2.default.bindings[key] != undefined) {\n      /*\n      Determine which event should be run if bound.\n      */\n      switch (_config2.default.bindings[key]) {\n        /*\n        Fires a play pause event.\n        */\n        case \"play_pause\":\n          runPlayPauseKeyDownEvent();\n          break;\n\n        /*\n        Fires a next event.\n        */\n        case \"next\":\n          runNextKeyDownEvent();\n          break;\n\n        /*\n        Fires a previous event.\n        */\n        case \"prev\":\n          runPrevKeyDownEvent();\n          break;\n\n        /*\n        Fires a stop event.\n        */\n        case \"stop\":\n          runStopKeyDownEvent();\n          break;\n\n        /*\n        Fires a shuffle event.\n        */\n        case \"shuffle\":\n          runShuffleKeyDownEvent();\n          break;\n\n        /*\n        Fires a repeat event.\n        */\n        case \"repeat\":\n          runRepeatKeyDownEvent();\n          break;\n      }\n    }\n  }\n\n  /**\n   * Runs the play pause method for key down.\n   */\n  function runPlayPauseKeyDownEvent() {\n    /*\n      If the song is paused, we play the song. If the song is playing,\n      we pause the song.\n    */\n    if (_config2.default.audio.paused) {\n      _core2.default.play();\n    } else {\n      _core2.default.pause();\n    }\n\n    /*\n      Now we sync all the elements to match the state of the audio.\n      We don't need to do any checks on new songs or changed playlists\n      in the global since it's whatever song is playing.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Runs the next method for key down.\n   */\n  function runNextKeyDownEvent() {\n    /*\n      Check to see if the current state of the player\n      is in playlist mode or not playlist mode.\n    */\n    if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n      _audioNavigation2.default.setNext();\n    } else {\n      _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist);\n    }\n  }\n\n  /**\n   * Runs the previous method for key down.\n   */\n  function runPrevKeyDownEvent() {\n    /*\n      Check to see if the current playlist has been set\n      or null and set the previous song.\n    */\n    if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n      _audioNavigation2.default.setPrevious();\n    } else {\n      _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);\n    }\n  }\n\n  /**\n   * Runs the stop method for key down.\n   */\n  function runStopKeyDownEvent() {\n    /*\n      Syncs all of the play pause elements to pause.\n    */\n    _playPauseElements2.default.syncToPause();\n\n    /*\n      Stops the active song.\n    */\n    _core2.default.stop();\n  }\n\n  /**\n   * Runs the shuffle method for key down.\n   */\n  function runShuffleKeyDownEvent() {\n    /*\n      Check to see if the current playlist has been set\n      or null and set the previous song.\n    */\n    if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n      _shuffler2.default.toggleShuffle();\n    } else {\n      _shuffler2.default.toggleShufflePlaylist(_config2.default.active_playlist);\n    }\n  }\n\n  /**\n   * Run the repeat method for key down.\n   */\n  function runRepeatKeyDownEvent() {\n    /*\n      Toggles the repeat\n    */\n    _repeater2.default.setRepeat(!_config2.default.repeat);\n\n    /*\n      Visually sync repeat\n    */\n    _repeatElements2.default.syncRepeat();\n  }\n\n  /**\n   * Returns the public methods for the handler.\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the Play Pause Elements Visual Handler\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\n\n\n/**\n * Imports the Shuffle Utility\n * @module utilities/Shuffle\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = KeyDown;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _muteElements = __webpack_require__(10);\n\nvar _muteElements2 = _interopRequireDefault(_muteElements);\n\nvar _volumeSliderElements = __webpack_require__(11);\n\nvar _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all events for a mute event.\n * @module events/Mute\n */\n\n\n/**\n * Imports the AmplitudeJS Visual Mute Elements\n * @module visual/MuteElements\n */\n/**\n * Imports the config to use the values\n */\nvar Mute = function () {\n  /**\n   * Handles an event for a mute element\n   *\n   * HANDLER FOR:       class=\"amplitude-mute\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      We don't fire this if the user is touching the screen and it's moving.\n      This could lead to a mis-fire\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n      If the current volume in the config is 0, we set the volume to the\n      pre_mute level.  This means that the audio is already muted and\n      needs to be restored to the pre_mute level.\n      Otherwise, we set pre_mute volume to the current volume\n      and set the config volume to 0, muting the audio.\n      */\n      if (_config2.default.volume == 0) {\n        _core2.default.setVolume(_config2.default.pre_mute_volume);\n      } else {\n        _config2.default.pre_mute_volume = _config2.default.volume;\n        _core2.default.setVolume(0);\n      }\n\n      /*\n        Sync Mute Elements.\n      */\n      _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);\n\n      /*\n      Syncs the volume sliders so the visuals align up with the functionality.\n      If the volume is at 0, then the sliders should represent that so the user\n      has the right starting point.\n      */\n      _volumeSliderElements2.default.sync();\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Visual Volume Slider Elements\n * @module visual/VolumeSliderElements\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/core\n */\nexports.default = Mute;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nvar _callbacks = __webpack_require__(9);\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Next Event Handler\n *\n * @module events/Next\n */\n\n\n/**\n * Imports the Amplitude Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\n\n\n/**\n * Imports the Play Pause Elements Module.\n * @module visual/PlayPauseElements\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Next = function () {\n  /**\n   * Handles an event on the next button\n   *\n   * HANDLER FOR:       class=\"amplitude-next\"\n   *\n   * GLOBAL:            class=\"amplitude-next\"\n   * PLAYLIST:          class=\"amplitude-next\" amplitude-playlist=\"playlist_key\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      We don't fire this if the user is touching the screen and it's moving.\n      This could lead to a mis-fire\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Gets the playlist attribute from the element.\n      */\n      var playlist = this.getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        If the playlist is null, we handle the global next.\n      */\n      if (playlist == null) {\n        handleGlobalNext();\n      }\n\n      /*\n        If the playlist is set, we handle the playlist next.\n      */\n      if (playlist != null) {\n        handlePlaylistNext(playlist);\n      }\n    }\n  }\n\n  /**\n   * Handles an event on a global enxt button.\n   *\n   * @access private\n   */\n  function handleGlobalNext() {\n    /*\n      Check to see if the current state of the player\n      is in playlist mode or not playlist mode. If we are in playlist mode,\n      we set next on the playlist.\n    */\n    if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n      _audioNavigation2.default.setNext();\n    } else {\n      _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist);\n    }\n  }\n\n  /**\n   * Handles an event on a next playlist button.\n   *\n   * @access private\n   * @prop {string} playlist  - The playlist we are handling the next for.\n   */\n  function handlePlaylistNext(playlist) {\n    /*\n      Ensure the playlist is the same as the active playlist. To get to change\n      the scope to a new playlist, you need to play that playlist.\n    */\n    if (playlist == _config2.default.active_playlist) {\n      _audioNavigation2.default.setNextPlaylist(playlist);\n    } else {\n      _debug2.default.writeMessage(\"You can not go to the next song on a playlist that is not being played!\");\n    }\n  }\n\n  /*\n    Returns the public facing methods.\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * AmplitudeJS Debug Module\n * @module utilities/Debug\n */\n\n\n/**\n * Imports the Callbacks Module\n * @module utilities/Callbacks\n */\n\n\n/**\n * Imports the AmplitudeJS Core module.\n * @module core/core\n */\nexports.default = Next;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _configState = __webpack_require__(6);\n\nvar _configState2 = _interopRequireDefault(_configState);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the pause events\n * @module events/Pause\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/Core\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Pause = function () {\n  /**\n   * Handles an event on a pause button\n   *\n   * HANDLER FOR:       class=\"amplitude-pause\"\n   *\n   * GLOBAL:            class=\"amplitude-pause\"\n   * PLAYLIST:          class=\"amplitude-pause\" amplitude-playlist=\"playlist_key\"\n   * SONG:              class=\"amplitude-pause\" amplitude-song-index=\"song_index\"\n   * SONG IN PLAYLIST:  class=\"amplitude-pause\" amplitude-playlist=\"playlist-key\" amplitude-song-index=\"playlist_index\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If the touch is moving, we do not want to accidentally touch the play\n      pause element and fire an event.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Gets the attribute for song index so we can check if\n        there is a need to change the song.  In some scenarios\n        there might be multiple pause classes on the page. In that\n        case it is possible the user could click a different pause\n        class.\n      */\n      var songIndexAttribute = this.getAttribute(\"data-amplitude-song-index\");\n      var playlistAttribute = this.getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        Handle a global pause button.\n      */\n      if (playlistAttribute == null && songIndexAttribute == null) {\n        handleGlobalPause();\n      }\n\n      /*\n        Handle a playlist pause button.\n      */\n      if (playlistAttribute != null && songIndexAttribute == null) {\n        handlePlaylistPause(playlistAttribute);\n      }\n\n      /*\n        Handle a song pause button.\n      */\n      if (playlistAttribute == null && songIndexAttribute != null) {\n        handleSongPause(songIndexAttribute);\n      }\n\n      /*\n        Handle a song in playlist pause button.\n      */\n      if (playlistAttribute != null && songIndexAttribute != null) {\n        handleSongInPlaylistPause(playlistAttribute, songIndexAttribute);\n      }\n\n      _configState2.default.setPlayerState();\n    }\n  }\n\n  /**\n   * Handles global pause button which pauses whatever song is\n   * active.\n   *\n   * @access private\n   */\n  function handleGlobalPause() {\n    /*\n      Pauses the song.\n    */\n    _core2.default.pause();\n\n    /*\n      Sync the play pause elements.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Handles the playlist pause.\n   *\n   * @access private\n   * @param {string} playlist The playlist the pause button belongs to.\n   */\n  function handlePlaylistPause(playlist) {\n    /*\n      Checks to see if the active playlist is the same\n    */\n    if (_config2.default.active_playlist == playlist) {\n      /*\n        Pauses the song.\n      */\n      _core2.default.pause();\n\n      /*\n        Sync the play pause elements.\n      */\n      _playPauseElements2.default.sync();\n    }\n  }\n\n  /**\n   * Handles the song pause.\n   *\n   * @access private\n   * @param {integer} song The song the pause button belongs to.\n   */\n  function handleSongPause(song) {\n    /*\n      Checks to see if the active playlist is null and the song matches\n      the active index.\n    */\n    if ((_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) && _config2.default.active_index == song) {\n      /*\n        Pauses the song.\n      */\n      _core2.default.pause();\n\n      /*\n        Sync the play pause elements.\n      */\n      _playPauseElements2.default.sync();\n    }\n  }\n\n  /**\n   * Handles the song in playlist pause.\n   *\n   * @access private\n   * @param {string} playlist The playlist the pause button belongs to.\n   * @param {integer} song The song the pause button belongs to.\n   */\n  function handleSongInPlaylistPause(playlist, song) {\n    /*\n      Checks to see if the active song matches the song and the\n      active playlist matches the playlist. This means the pause button is\n      for the song in the playlist.\n    */\n    if (_config2.default.active_playlist == playlist && _config2.default.playlists[playlist].active_index == song) {\n      /*\n        Pauses the song.\n      */\n      _core2.default.pause();\n\n      /*\n        Sync the play pause elements.\n      */\n      _playPauseElements2.default.sync();\n    }\n  }\n\n  /*\n    Returns the public facing elements\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Play Pause Elements\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the ConfigState module.\n * @module utilities/ConfigState\n */\nexports.default = Pause;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _configState = __webpack_require__(6);\n\nvar _configState2 = _interopRequireDefault(_configState);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the play events\n * @module events/Play\n */\n\n\n/**\n * Imports the AmplitudeJS Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/Core\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Play = function () {\n  /**\n   * Handles an event on a play button in Amplitude.\n   *\n   * HANDLER FOR:       class=\"amplitude-play\"\n   *\n   * GLOBAL:            class=\"amplitude-play\"\n   * PLAYLIST:          class=\"amplitude-play\" amplitude-playlist=\"playlist_key\"\n   * SONG:              class=\"amplitude-play\" amplitude-song-index=\"song_index\"\n   * SONG IN PLAYLIST:  class=\"amplitude-play\" amplitude-playlist=\"playlist-key\" amplitude-song-index=\"playlist_index\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If the touch is moving, we do not want to accidentally touch the play\n      pause element and fire an event.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Gets the attribute for song index so we can check if\n        there is a need to change the song.  In some scenarios\n        there might be multiple play classes on the page. In that\n        case it is possible the user could click a different play\n        class and change the song.\n      */\n      var songIndexAttribute = this.getAttribute(\"data-amplitude-song-index\");\n      var playlistAttribute = this.getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        Handle a global play button.\n      */\n      if (playlistAttribute == null && songIndexAttribute == null) {\n        handleGlobalPlay();\n      }\n\n      /*\n        Handle a playlist play button.\n      */\n      if (playlistAttribute != null && songIndexAttribute == null) {\n        handlePlaylistPlay(playlistAttribute);\n      }\n\n      /*\n        Handle a song play button.\n      */\n      if (playlistAttribute == null && songIndexAttribute != null) {\n        handleSongPlay(songIndexAttribute);\n      }\n\n      /*\n        Handle a song in playlist play button.\n      */\n      if (playlistAttribute != null && songIndexAttribute != null) {\n        handleSongInPlaylistPlay(playlistAttribute, songIndexAttribute);\n      }\n\n      _configState2.default.setPlayerState();\n    }\n  }\n\n  /**\n   * Handles global play button which plays whatever song is\n   * active.\n   *\n   * @access private\n   */\n  function handleGlobalPlay() {\n    /*\n      Plays the song\n    */\n    _core2.default.play();\n\n    /*\n      Sync the play pause elements.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Handle the playlist play.\n   *\n   * @access private\n   * @param {string} playlist The playlist the play button belongs to.\n   */\n  function handlePlaylistPlay(playlist) {\n    /*\n      Checks if we have a new playlist.\n    */\n    if (_checks2.default.newPlaylist(playlist)) {\n      /*\n        Sets the active playlist to what belongs to the playlist.\n      */\n      _audioNavigation2.default.setActivePlaylist(playlist);\n\n      /*\n        Play first song in the playlist since we just\n        switched playlists, we start from the first song.\n         If the user has shuffle on for the playlist, then\n        we go from the first song in the shuffle playlist array.\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].shuffle_list[0], 0);\n      } else {\n        _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[0], 0);\n      }\n    }\n\n    /*\n      Plays the song.\n    */\n    _core2.default.play();\n\n    /*\n      Syncs the play pause elements since they are dependent upon this state\n      of the player.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Handles the song play button.\n   *\n   * @access private\n   * @param {integer} song The index of the song we are playing.\n   */\n  function handleSongPlay(song) {\n    /*\n      There can be multiple playlists on the page and there can be\n      multiple songs on the page AND there can be songs in multiple\n      playlists, so we have some checking to do.\n    */\n\n    /*\n      Check to see if the playlist has changed. Essentially, if we are moving\n      out of a playlist context.\n    */\n    if (_checks2.default.newPlaylist(null)) {\n      /*\n        We've moved out of the playlist context, so we set the active playlist\n        to null\n      */\n      _audioNavigation2.default.setActivePlaylist(null);\n\n      /*\n        We then change the song to the index selected.\n      */\n      _audioNavigation2.default.changeSong(_config2.default.songs[song], song);\n    }\n\n    /*\n      Check to see if the song has changed. If it has,\n      set the active song. If it was in a playlist, the\n      song wouldn't change here, since we already set the\n      song when we checked for a playlist.\n    */\n    if (_checks2.default.newSong(null, song)) {\n      /*\n        The song selected is different, so we change the\n        song.\n      */\n      _audioNavigation2.default.changeSong(_config2.default.songs[song], song);\n    }\n\n    /*\n      Plays the song\n    */\n    _core2.default.play();\n\n    /*\n      Syncs the play pause elements since they are dependent upon this state\n      of the player.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Handles the song in playlist play.\n   *\n   * @access private\n   * @param {string} playlist The playlist the play button belongs to.\n   * @param {integer} song The song the play button belongs to.\n   */\n  function handleSongInPlaylistPlay(playlist, song) {\n    /*\n    There can be multiple playlists on the page and there can be\n    multiple songs on the page AND there can be songs in multiple\n    playlists, so we have some checking to do.\n    */\n\n    /*\n    Check to see if the playlist has changed. Essentially, if we are moving\n      out of a playlist context.\n    */\n    if (_checks2.default.newPlaylist(playlist)) {\n      /*\n        We've moved out of the playlist context, so we set the active playlist\n        to null\n      */\n      _audioNavigation2.default.setActivePlaylist(playlist);\n\n      /*\n      We then change the song to the index selected.\n      */\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song);\n    }\n\n    /*\n    Check to see if the song has changed. If it has,\n    set the active song. If it was in a playlist, the\n    song wouldn't change here, since we already set the\n    song when we checked for a playlist.\n    */\n    if (_checks2.default.newSong(playlist, song)) {\n      /*\n      The song selected is different, so we change the\n      song.\n      */\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song);\n    }\n\n    /*\n      Plays the song\n    */\n    _core2.default.play();\n\n    /*\n      Now we sync all the elements to match the state of the audio.\n      We don't need to do any checks on new songs or changed playlists\n      in the global since it's whatever song is playing.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /*\n    Returns the public facing elements\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Play Pause Elements\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the AmplitudeJS Checks Utility\n * @module utilities/Checks\n */\n\n\n/**\n * Imports the config state utility.\n * @module utilities/ConfigState\n */\nexports.default = Play;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _configState = __webpack_require__(6);\n\nvar _configState2 = _interopRequireDefault(_configState);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the play pause events\n * @module events/PlayPause\n */\n\n\n/**\n * Imports the AmplitudeJS Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/Core\n */\n/**\n * Imports the config module\n * @module config\n */\nvar PlayPause = function () {\n  /**\n   * Handles an event on a play/pause button\n   *\n   * HANDLER FOR:       class=\"amplitude-play-pause\"\n   *\n   * GLOBAL:            class=\"amplitude-play-pause\"\n   * PLAYLIST:          class=\"amplitude-play-pause\" amplitude-playlist=\"playlist_key\"\n   * SONG:              class=\"amplitude-play-pause\" amplitude-song-index=\"song_index\"\n   * SONG IN PLAYLIST:  class=\"amplitude-play-pause\" amplitude-playlist=\"playlist-key\" amplitude-song-index=\"playlist_index\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If the touch is moving, we do not want to accidentally touch the play\n      pause element and fire an event.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Get the playlist and song from the element. It's alright if these\n        are null.\n      */\n      var playlist = this.getAttribute(\"data-amplitude-playlist\");\n      var song = this.getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Handle a global play pause button\n      */\n      if (playlist == null && song == null) {\n        handleGlobalPlayPause();\n      }\n\n      /*\n        Handle a playlist play pause button\n      */\n      if (playlist != null && song == null) {\n        handlePlaylistPlayPause(playlist);\n      }\n\n      /*\n        Handle a song play pause button\n      */\n      if (playlist == null && song != null) {\n        handleSongPlayPause(song);\n      }\n\n      /*\n        Handle a song in playlist play pause button\n      */\n      if (playlist != null && song != null) {\n        handleSongInPlaylistPlayPause(playlist, song);\n      }\n\n      _configState2.default.setPlayerState();\n    }\n  }\n\n  /**\n   * Sets the main play pause buttons to the current state of the song.\n   * @access private\n   */\n  function handleGlobalPlayPause() {\n    /*\n      If the song is paused, we play the song. If the song is playing,\n      we pause the song.\n    */\n    if (_config2.default.audio.paused) {\n      _core2.default.play();\n    } else {\n      _core2.default.pause();\n    }\n\n    /*\n      Now we sync all the elements to match the state of the audio.\n      We don't need to do any checks on new songs or changed playlists\n      in the global since it's whatever song is playing.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Sets the playlist main play pause buttons to the current state of the song.\n   * @access private\n   * @param {string} playlist The playlist the main play pause button controls\n   */\n  function handlePlaylistPlayPause(playlist) {\n    /*\n      The only thing that can change when you click a playlist\n      play pause is the playlist. Main play pauses have no change\n      in song, song play pauses can change playlist and song.\n    */\n    if (_checks2.default.newPlaylist(playlist)) {\n      /*\n        If there's a new playlist, then we set the new playlist.\n      */\n      _audioNavigation2.default.setActivePlaylist(playlist);\n\n      /*\n        Play first song in the playlist since we just\n        switched playlists, we start from the first song.\n         If the user has shuffle on for the playlist, then\n        we go from the first song in the shuffle playlist array.\n      */\n      if (_config2.default.playlists[playlist].shuffle) {\n        _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].shuffle_list[0], 0, true);\n      } else {\n        _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[0], 0, true);\n      }\n    }\n\n    /*\n      If the song is paused, we play the song. If the song is playing,\n      we pause the song.\n    */\n    if (_config2.default.audio.paused) {\n      _core2.default.play();\n    } else {\n      _core2.default.pause();\n    }\n\n    /*\n      Now we sync all the elements to match the state of the audio.\n      We don't need to do any checks on new songs or changed playlists\n      in the global since it's whatever song is playing.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Sets the playlist main play pause buttons to the current state of the song.\n   * @access private\n   * @param {string} song The index of the song being played/paused\n   */\n  function handleSongPlayPause(song) {\n    /*\n    There can be multiple playlists on the page and there can be\n    multiple songs on the page AND there can be songs in multiple\n    playlists, so we have some checking to do.\n    */\n\n    /*\n    Check to see if the playlist has changed. Essentially, if we are moving\n      out of a playlist context.\n    */\n    if (_checks2.default.newPlaylist(null)) {\n      /*\n        We've moved out of the playlist context, so we set the active playlist\n        to null\n      */\n      _audioNavigation2.default.setActivePlaylist(null);\n\n      /*\n      We then change the song to the index selected.\n      */\n      _audioNavigation2.default.changeSong(_config2.default.songs[song], song, true);\n    }\n\n    /*\n    Check to see if the song has changed. If it has,\n    set the active song. If it was in a playlist, the\n    song wouldn't change here, since we already set the\n    song when we checked for a playlist.\n    */\n    if (_checks2.default.newSong(null, song)) {\n      /*\n      The song selected is different, so we change the\n      song.\n      */\n      _audioNavigation2.default.changeSong(_config2.default.songs[song], song, true);\n    }\n\n    /*\n      If the song is paused, we play the song. If the song is playing,\n      we pause the song.\n    */\n    if (_config2.default.audio.paused) {\n      _core2.default.play();\n    } else {\n      _core2.default.pause();\n    }\n\n    /*\n      Now we sync all the elements to match the state of the audio.\n      We don't need to do any checks on new songs or changed playlists\n      in the global since it's whatever song is playing.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Sets the song in playlist play pause buttons to the current\n   * state of the song.\n   * @access private\n   * @param {string} playlist The playlist the song is a part of\n   * @param {number} song The index of the song being played/paused\n   */\n  function handleSongInPlaylistPlayPause(playlist, song) {\n    /*\n    There can be multiple playlists on the page and there can be\n    multiple songs on the page AND there can be songs in multiple\n    playlists, so we have some checking to do.\n    */\n\n    /*\n    Check to see if the playlist has changed. Essentially, if we are moving\n      out of a playlist context.\n    */\n    if (_checks2.default.newPlaylist(playlist)) {\n      /*\n        We've moved out of the playlist context, so we set the active playlist\n        to null\n      */\n      _audioNavigation2.default.setActivePlaylist(playlist);\n\n      /*\n      We then change the song to the index selected.\n      */\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song, true);\n    }\n\n    /*\n    Check to see if the song has changed. If it has,\n    set the active song. If it was in a playlist, the\n    song wouldn't change here, since we already set the\n    song when we checked for a playlist.\n    */\n    if (_checks2.default.newSong(playlist, song)) {\n      /*\n      The song selected is different, so we change the\n      song.\n      */\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[song], song, true);\n    }\n\n    /*\n      If the song is paused, we play the song. If the song is playing,\n      we pause the song.\n    */\n    if (_config2.default.audio.paused) {\n      _core2.default.play();\n    } else {\n      _core2.default.pause();\n    }\n\n    /*\n      Now we sync all the elements to match the state of the audio.\n      We don't need to do any checks on new songs or changed playlists\n      in the global since it's whatever song is playing.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Play Pause Elements\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the AmplitudeJS Checks Utility\n * @module utilities/Checks\n */\n\n\n/**\n * Import the config state utility.\n * @module utilities/configState\n */\nexports.default = PlayPause;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _playbackSpeedElements = __webpack_require__(18);\n\nvar _playbackSpeedElements2 = _interopRequireDefault(_playbackSpeedElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Playback Speed Event Handler\n *\n * @module events/PlaybackSpeed\n */\n\n\n/**\n * Imports the Amplitude Core module\n * @module core/Core\n */\nvar PlaybackSpeed = function () {\n  /**\n   * Handles an event on the playback speed button\n   *\n   * HANDLER FOR:       class=\"amplitude-playback-speed\"\n   *\n   * @access public\n   */\n  function handle() {\n    if (!_config2.default.is_touch_moving) {\n      /*\n      We increment the speed by .5 everytime we click\n      the button to change the playback speed. Once we are\n      actively playing back at 2, we start back at 1 which\n      is normal speed.\n      */\n      switch (_config2.default.playback_speed) {\n        case 1:\n          _core2.default.setPlaybackSpeed(1.5);\n          break;\n        case 1.5:\n          _core2.default.setPlaybackSpeed(2);\n          break;\n        case 2:\n          _core2.default.setPlaybackSpeed(1);\n          break;\n      }\n\n      /*\n      Visually sync the playback speed.\n      */\n      _playbackSpeedElements2.default.sync();\n    }\n  }\n\n  /*\n    Returns public facing methods\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the Playback Speed Visual Elements\n * @module visual/PlaybackSpeedElements\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = PlaybackSpeed;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Prev Event Handler\n *\n * @module events/Prev\n */\n\n\n/**\n * Imports the Amplitude Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\nvar Prev = function () {\n  /**\n   * Handles an event on the previous button\n   *\n   * HANDLER FOR:       class=\"amplitude-prev\"\n   *\n   * GLOBAL:            class=\"amplitude-prev\"\n   * PLAYLIST:          class=\"amplitude-prev\" amplitude-playlist=\"playlist_key\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      We don't fire this if the user is touching the screen and it's moving.\n      This could lead to a mis-fire\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Gets the playlist attribute from the element.\n      */\n      var playlist = this.getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        If the playlist is null, we handle the global prev.\n      */\n      if (playlist == null) {\n        handleGlobalPrev();\n      }\n\n      /*\n        If the playlist is set, we handle the playlist prev.\n      */\n      if (playlist != null) {\n        handlePlaylistPrev(playlist);\n      }\n    }\n  }\n\n  /**\n   * Handles an event on a global previous button.\n   *\n   * @access private\n   */\n  function handleGlobalPrev() {\n    /*\n      Check to see if the current state of the player\n      is in playlist mode or not playlist mode. If we are in playlist mode,\n      we set prev on the playlist.\n    */\n    if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n      _audioNavigation2.default.setPrevious();\n    } else {\n      _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);\n    }\n  }\n\n  /**\n   * Handles an event on a previous playlist button.\n   *\n   * @access private\n   * @prop {string} playlist  - The playlist we are handling the previous for.\n   */\n  function handlePlaylistPrev(playlist) {\n    /*\n      Ensure the playlist is the same as the active playlist. To get to change\n      the scope to a new playlist, you need to play that playlist.\n    */\n    if (playlist == _config2.default.active_playlist) {\n      _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);\n    } else {\n      _debug2.default.writeMessage(\"You can not go to the previous song on a playlist that is not being played!\");\n    }\n  }\n\n  /*\n    Returns the public facing methods.\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * AmplitudeJS Debug Module\n * @module utilities/Debug\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = Prev;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _bufferedProgressElements = __webpack_require__(25);\n\nvar _bufferedProgressElements2 = _interopRequireDefault(_bufferedProgressElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Event Handler for progress\n *\n * @module events/Progress\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Progress = function () {\n  /**\n   * As the song is buffered, we can display the buffered percentage in\n   * a progress bar.\n   *\n   * HANDLER FOR: progress\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      Help from: http://jsbin.com/badimipi/1/edit?html,js,output\n    */\n    if (_config2.default.audio.buffered.length - 1 >= 0) {\n      var bufferedEnd = _config2.default.audio.buffered.end(_config2.default.audio.buffered.length - 1);\n      var duration = _config2.default.audio.duration;\n\n      /*\n        Set the computed song buffered value to the config.\n      */\n      _config2.default.buffered = bufferedEnd / duration * 100;\n    }\n\n    /*\n      Sync the buffered progress bars.\n    */\n    _bufferedProgressElements2.default.sync();\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the BufferedProgressElements visual handler\n * @module visual/bufferedProgressElements.js\n */\nexports.default = Progress;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _repeater = __webpack_require__(12);\n\nvar _repeater2 = _interopRequireDefault(_repeater);\n\nvar _repeatElements = __webpack_require__(8);\n\nvar _repeatElements2 = _interopRequireDefault(_repeatElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Repeat Event Handler\n *\n * @module events/Repeat\n */\n\n\n/**\n * Imports the repeater utility module.\n * @module utilities/Repeater\n */\nvar Repeat = function () {\n  /**\n   * Handles an event on the repeat button\n   *\n   * HANDLER FOR:       class=\"amplitude-repeat\"\n   *\n   * GLOBAL:            class=\"amplitude-repeat\"\n   * PLAYLIST:          class=\"amplitude-repeat\" amplitude-playlist=\"playlist_key\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      We don't fire this if the user is touching the screen and it's moving.\n      This could lead to a mis-fire\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Gets the playlist attribute from the element.\n      */\n      var playlist = this.getAttribute(\"data-amplitude-playlist\");\n\n      /*\n        If the playlist is null, we handle the global repeat.\n      */\n      if (playlist == null) {\n        handleGlobalRepeat();\n      }\n\n      /*\n        If the playlist is set, we handle the playlist repeat.\n      */\n      if (playlist != null) {\n        handlePlaylistRepeat(playlist);\n      }\n    }\n  }\n\n  /**\n   * Handles an event on a global repeat button.\n   *\n   * @access private\n   */\n  function handleGlobalRepeat() {\n    /*\n      Sets repeat to the opposite of what it was set to\n    */\n    _repeater2.default.setRepeat(!_config2.default.repeat);\n\n    /*\n      Visually sync repeat\n    */\n    _repeatElements2.default.syncRepeat();\n  }\n\n  /**\n   * Handles an event on a playlist repeat button.\n   *\n   * @access private\n   * @prop {string} playlist - The playlist we are handling the repeat store.\n   */\n  function handlePlaylistRepeat(playlist) {\n    /*\n      Sets repeat to the opposite of what it was set to for the playlist.\n    */\n    _repeater2.default.setRepeatPlaylist(!_config2.default.playlists[playlist].repeat, playlist);\n\n    /*\n      Visually sync playlist repeat\n    */\n    _repeatElements2.default.syncRepeatPlaylist(playlist);\n  }\n\n  /*\n    Returns the public facing methods.\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the visual repeat elements module\n * @module visual/RepeatElements\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = Repeat;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _repeater = __webpack_require__(12);\n\nvar _repeater2 = _interopRequireDefault(_repeater);\n\nvar _repeatElements = __webpack_require__(8);\n\nvar _repeatElements2 = _interopRequireDefault(_repeatElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles an event on the Amplitude Repeat Song.\n *\n * @module events/RepeatSong\n */\n\n\n/**\n * Imports the repeat utility\n * @module utilities/Repeater\n */\nvar RepeatSong = function () {\n  /**\n   * Handles an event on the repeat song button\n   *\n   * HANDLER FOR: 'amplitude-repeat-song'\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If the touch is moving, we do not want to accidentally touch the play\n      pause element and fire an event.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n      Sets repeat song to the opposite of what it was set to\n      */\n      _repeater2.default.setRepeatSong(!_config2.default.repeat_song);\n\n      /*\n      Visually sync repeat song\n      */\n      _repeatElements2.default.syncRepeatSong();\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Repeat Element\n * @module visual/RepeatElements\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = RepeatSong;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _shuffler = __webpack_require__(13);\n\nvar _shuffler2 = _interopRequireDefault(_shuffler);\n\nvar _shuffleElements = __webpack_require__(19);\n\nvar _shuffleElements2 = _interopRequireDefault(_shuffleElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the shuffle events\n * @module events/Shuffle\n */\n\n\n/**\n * Imports the shuffler utility\n * @module utilities/Shuffler\n */\nvar Shuffle = function () {\n  /**\n   * Handles an event on the shuffle button\n   *\n   * HANDLER FOR:       class=\"amplitude-shuffle\"\n   *\n   * GLOBAL:            class=\"amplitude-shuffle\"\n   * PLAYLIST:          class=\"amplitude-shuffle\" amplitude-playlist=\"playlist_key\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If the touch is moving, we do not want to accidentally touch the play\n      pause element and fire an event.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Get the playlist attribute\n      */\n      var playlist = this.getAttribute(\"data-amplitude-playlist\");\n\n      /*\n      Check to see if the shuffle button belongs to a playlist\n      */\n      if (playlist == null) {\n        handleGlobalShuffle();\n      } else {\n        handlePlaylistShuffle(playlist);\n      }\n    }\n  }\n\n  /**\n   * Handles the event on the global shuffle button.\n   */\n  function handleGlobalShuffle() {\n    /*\n      Either shuffles or removes shuffle on the global state.\n    */\n    _shuffler2.default.toggleShuffle();\n\n    /*\n      Visualize the shuffle state change.\n    */\n    _shuffleElements2.default.syncMain(_config2.default.shuffle_on);\n  }\n\n  /**\n   * Handles the event on the playlist shuffle button.\n   *\n   * @param {string} playlist - The playlist string the shuffle button belongs to.\n   */\n  function handlePlaylistShuffle(playlist) {\n    /*\n      Either shuffles or removes shuffle on the playlist state.\n    */\n    _shuffler2.default.toggleShufflePlaylist(playlist);\n\n    /*\n      Visually sync the playlist shuffle statuses.\n    */\n    _shuffleElements2.default.syncPlaylist(playlist);\n  }\n\n  /**\n   * Returns public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the visual shuffle elements\n * @module visual/ShuffleElements\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = Shuffle;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the skip to event.\n *\n * @module events/SkipTo\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/Core\n */\n\n\n/**\n * Imports the AmplitudeJS Audio Navigation Utility\n * @module utilities/AudioNavigation\n */\n/**\n * Imports the config module\n * @module config\n */\nvar SkipTo = function () {\n  /**\n   * Handles an event on a skip to button.\n   *\n   * HANDLER FOR:       class=\"amplitude-skip-to\"\n   *\n   * GLOBAL:            class=\"amplitude-skip-to\" amplitude-song-index=\"song_index\" amplitude-location=\"seconds\"\n   * PLAYLIST:          class=\"amplitude-skip-to\" amplitude-playlist=\"playlist_key\" amplitude-song-index=\"song_index\" amplitude-location=\"seconds\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If the touch is moving, we do not want to accidentally touch the play\n      pause element and fire an event.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n        Extracts the needed attributes from the element.\n      */\n      var playlist = this.getAttribute(\"data-amplitude-playlist\");\n      var songIndex = this.getAttribute(\"data-amplitude-song-index\");\n      var location = this.getAttribute(\"data-amplitude-location\");\n\n      /*\n        If the location is null, write a message. We can't skip to a location\n        that is null\n      */\n      if (location == null) {\n        _debug2.default.writeMessage(\"You must add an 'data-amplitude-location' attribute in seconds to your 'amplitude-skip-to' element.\");\n      }\n\n      /*\n        If the song index is null, write a debug message. We can't skip to a location\n        of a null song.\n      */\n      if (songIndex == null) {\n        _debug2.default.writeMessage(\"You must add an 'data-amplitude-song-index' attribute to your 'amplitude-skip-to' element.\");\n      }\n\n      /*\n        If the location and song index are set, continue.\n      */\n      if (location != null && songIndex != null) {\n        /*\n        Determines if the skip to button is in the scope of a playlist.\n        */\n        if (playlist == null) {\n          handleSkipToSong(parseInt(songIndex), parseInt(location));\n        } else {\n          handleSkipToPlaylist(playlist, parseInt(songIndex), parseInt(location));\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles the skipping to a specific song\n   *\n   * @access private\n   * @param {string} songIndex  - The index of the song being skipped to\n   * @param {number} location   - The seconds location of the song in the playlist.\n   */\n  function handleSkipToSong(songIndex, location) {\n    /*\n      Changes the song to where it's being skipped and then\n      play the song.\n    */\n    _audioNavigation2.default.changeSong(_config2.default.songs[songIndex], songIndex);\n    _core2.default.play();\n\n    /*\n      Syncs all of the play pause buttons now that we've skipped.\n    */\n    _playPauseElements2.default.syncGlobal();\n    _playPauseElements2.default.syncSong();\n\n    /*\n      Skip to the location in the song.\n    */\n    _core2.default.skipToLocation(location);\n  }\n\n  /**\n   * Handles the skipping to a song that's in a playlist.\n   *\n   * @access private\n   * @param {string} playlist   - The playlist being skipped to\n   * @param {string} songIndex  - The index of the song in the playlist\n   * @param {number} location   - The seconds location of the song in the playlist.\n   */\n  function handleSkipToPlaylist(playlist, songIndex, location) {\n    /*\n      Checks if we are skipping to a new playlist\n    */\n    if (_checks2.default.newPlaylist(playlist)) {\n      _audioNavigation2.default.setActivePlaylist(playlist);\n    }\n\n    /*\n      Changes the song to where it's being skipped and then\n      play the song.\n    */\n    _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[songIndex], songIndex);\n    _core2.default.play();\n\n    /*\n      Sync all of the play pause elements.\n    */\n    _playPauseElements2.default.syncGlobal();\n    _playPauseElements2.default.syncPlaylist();\n    _playPauseElements2.default.syncSong();\n\n    /*\n      Skip to the location in the song.\n    */\n    _core2.default.skipToLocation(location);\n  }\n\n  /**\n   * Return public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS play pause elements.\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Imports the AmplitudeJS Checks Utility\n * @module utilities/Checks\n */\n\n\n/**\n * Imports AmplitudeJS Debug Utility\n * @module utilities/debug\n */\nexports.default = SkipTo;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _time = __webpack_require__(24);\n\nvar _time2 = _interopRequireDefault(_time);\n\nvar _songSliderElements = __webpack_require__(14);\n\nvar _songSliderElements2 = _interopRequireDefault(_songSliderElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the song slider to event.\n *\n * @module events/SongSlider\n */\n\n\n/**\n * Imports the time utility\n * @module utilities/Time\n */\nvar SongSlider = function () {\n  /**\n   * Handles a song slider element.\n   *\n   * HANDLER FOR:       class=\"amplitude-song-slider\"\n   *\n   * GLOBAL:            class=\"amplitude-song-slider\"\n   * PLAYLIST:          class=\"amplitude-song-slider\" amplitude-playlist=\"playlist_key\"\n   * SONG:              class=\"amplitude-song-slider\" amplitude-song-index=\"song_index\"\n   * SONG IN PLAYLIST:  class=\"amplitude-song-slider\" amplitude-playlist=\"playlist_key\" amplitude-song-index=\"song_index\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n    Gets the percentage of the song we will be setting the location for.\n    */\n    var locationPercentage = this.value;\n\n    /*\n      Computes the time in seconds for the current song.\n    */\n    var computedTime = _config2.default.audio.duration * (locationPercentage / 100);\n\n    /*\n      Gets the attributes for playlist and index for the element.\n    */\n    var playlist = this.getAttribute(\"data-amplitude-playlist\");\n    var song = this.getAttribute(\"data-amplitude-song-index\");\n\n    /*\n      If no playlist or song is defined, then it's a global song slider.\n    */\n    if (playlist == null && song == null) {\n      handleGlobalSongSlider(computedTime, locationPercentage);\n    }\n\n    /*\n      If a playlist but no song is defined, then it's playlist slider.\n    */\n    if (playlist != null && song == null) {\n      handlePlaylistSongSlider(computedTime, locationPercentage, playlist);\n    }\n\n    /*\n      If no playlist but a song is defined, then it's a song slider.\n    */\n    if (playlist == null && song != null) {\n      handleSongSongSlider(computedTime, locationPercentage, song);\n    }\n\n    /*\n      If playlist and song are defined then it's a song in a playlist\n      slider.\n    */\n    if (playlist != null && song != null) {\n      handleSongInPlaylistSongSlider(computedTime, locationPercentage, playlist, song);\n    }\n  }\n\n  /**\n   * Handles a change on a global audio slider\n   *\n   * @access private\n   * @param {integer} computedTime  - The time we will set the audio to.\n   * @param {float}   locationPercentage - The percent through the song.\n   */\n  function handleGlobalSongSlider(computedTime, locationPercentage) {\n    /*\n    If the active song is not live, set the current time and adjust the slider.\n    */\n    if (!_config2.default.active_metadata.live) {\n      _time2.default.setCurrentTime(computedTime);\n\n      /*\n        Sync song slider elements.\n      */\n      _songSliderElements2.default.sync(locationPercentage, _config2.default.active_playlist, _config2.default.active_index);\n    }\n  }\n\n  /**\n   * Handles a change on a playlist audio slider\n   *\n   * @access private\n   * @param {integer} computedTime  - The time we will set the audio to.\n   * @param {float}   locationPercentage - The percent through the song.\n   * @param {string}  playlist = The playlist the song slider belongs to.\n   */\n  function handlePlaylistSongSlider(computedTime, locationPercentage, playlist) {\n    /*\n    We don't want to song slide a playlist that's not the\n    active placylist.\n    */\n    if (_config2.default.active_playlist == playlist) {\n      /*\n      If the active song is not live, set the current time\n      */\n      if (!_config2.default.active_metadata.live) {\n        _time2.default.setCurrentTime(computedTime);\n\n        /*\n          Sync song slider elements.\n        */\n        _songSliderElements2.default.sync(locationPercentage, playlist, _config2.default.active_index);\n      }\n    }\n  }\n\n  /**\n   * Handles a change on a song audio slider\n   *\n   * @access private\n   * @param {integer} computedTime  - The time we will set the audio to.\n   * @param {float}   locationPercentage - The percent through the song.\n   * @param {integer} songIndex = The song being navigated.\n   */\n  function handleSongSongSlider(computedTime, locationPercentage, songIndex) {\n    /*\n      We only want to move the slider if the active song is the\n      same as the song being selected.\n    */\n    if (_config2.default.active_index == songIndex && _config2.default.active_playlist == null) {\n      /*\n      If the active song is not live, set the current time\n      */\n      if (!_config2.default.active_metadata.live) {\n        _time2.default.setCurrentTime(computedTime);\n\n        /*\n          Sync song slider elements.\n        */\n        _songSliderElements2.default.sync(locationPercentage, _config2.default.active_playlist, songIndex);\n      }\n    }\n  }\n\n  /**\n   * Handles a change on a song audio slider\n   *\n   * @access private\n   * @param {integer} computedTime  - The time we will set the audio to.\n   * @param {float}   locationPercentage - The percent through the song.\n   * @param {integer} playlist = The playlist the song belongs to.\n   * @param {integer} songIndex = The song being navigated.\n   */\n  function handleSongInPlaylistSongSlider(computedTime, locationPercentage, playlist, songIndex) {\n    /*\n      We only want to move the slider if the active song is the\n      same as the song being selected and the active playlist is the same\n      as the playlist selected.\n    */\n    if (_config2.default.playlists[playlist].active_index == songIndex && _config2.default.active_playlist == playlist) {\n      /*\n      If the active song is not live, set the current time\n      */\n      if (!_config2.default.active_metadata.live) {\n        _time2.default.setCurrentTime(computedTime);\n\n        /*\n          Sync song slider elements.\n        */\n        _songSliderElements2.default.sync(locationPercentage, playlist, songIndex);\n      }\n    }\n  }\n\n  /*\n    Return public facing methods\n  */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the song slider elements.\n * @module visual/SongSliderElements\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = SongSlider;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _configState = __webpack_require__(6);\n\nvar _configState2 = _interopRequireDefault(_configState);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the stop events\n * @module events/Stop\n */\n\n\n/**\n * Imports the AmplitudeJS Play Pause Elements\n * @module visual/PlayPauseElements\n */\n/**\n * Imports the config module\n * @module config\n */\nvar Stop = function () {\n  /**\n   * Handles an event on a stop element.\n   *\n   * HANDLER FOR:       class=\"amplitude-stop\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      If touch is not moving, we run. We don't want to accidentally press\n      stop if touch is moving.\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n      Sets all of the play/pause buttons to pause\n      */\n      _playPauseElements2.default.syncToPause();\n\n      /*\n      Stops the active song.\n      */\n      _core2.default.stop();\n\n      /*\n        Set the state of the player.\n      */\n      _configState2.default.setPlayerState();\n    }\n  }\n\n  /**\n   * Returns public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/Core\n */\n\n\n/**\n * Imports the config state module.\n * @module utilities/configState\n */\nexports.default = Stop;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _bufferedProgressElements = __webpack_require__(25);\n\nvar _bufferedProgressElements2 = _interopRequireDefault(_bufferedProgressElements);\n\nvar _timeElements = __webpack_require__(15);\n\nvar _timeElements2 = _interopRequireDefault(_timeElements);\n\nvar _songSliderElements = __webpack_require__(14);\n\nvar _songSliderElements2 = _interopRequireDefault(_songSliderElements);\n\nvar _songPlayedProgressElements = __webpack_require__(20);\n\nvar _songPlayedProgressElements2 = _interopRequireDefault(_songPlayedProgressElements);\n\nvar _time = __webpack_require__(24);\n\nvar _time2 = _interopRequireDefault(_time);\n\nvar _callbacks = __webpack_require__(9);\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS Event Handler for Time Update\n *\n * @module events/TimeUpdate\n */\n\n\n/**\n * Imports the Time utility class\n * @module utilities/Time\n */\n\n\n/**\n * Imports the Song Slider Elements visual class.\n * @module visual/songSliderElements\n */\n\n\n/**\n * Imports the Buffered Progress Elements visual class\n * @module visual/bufferedProgressElements\n */\nvar TimeUpdate = function () {\n  /**\n   * When the time updates on the active song, we sync the current time displays\n   *\n   * HANDLER FOR: timeupdate\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      Computes the buffered time.\n    */\n    computeBufferedTime();\n\n    /*\n      Sync the buffered progress elements.\n    */\n    _bufferedProgressElements2.default.sync();\n\n    /*\n      Updates the current time information.\n    */\n    updateTimeInformation();\n\n    /*\n      Run time callbacks\n    */\n    runTimeCallbacks();\n  }\n\n  /**\n   * Computes the buffered time\n   */\n  function computeBufferedTime() {\n    /*\n      Help from: http://jsbin.com/badimipi/1/edit?html,js,output\n    */\n    if (_config2.default.audio.buffered.length - 1 >= 0) {\n      var bufferedEnd = _config2.default.audio.buffered.end(_config2.default.audio.buffered.length - 1);\n      var duration = _config2.default.audio.duration;\n\n      _config2.default.buffered = bufferedEnd / duration * 100;\n    }\n  }\n\n  /**\n   * Updates the current time information.\n   * @access private\n   */\n  function updateTimeInformation() {\n    /*\n      If the current song is not live, then\n      we can update the time information. Otherwise the\n      current time updates wouldn't mean much since the time\n      is infinite.\n    */\n    if (!_config2.default.active_metadata.live) {\n      /*\n        Compute the current time\n      */\n      var currentTime = _time2.default.computeCurrentTimes();\n\n      /*\n        Compute the song completion percentage\n      */\n      var songCompletionPercentage = _time2.default.computeSongCompletionPercentage();\n\n      /*\n        Computes the song duration\n      */\n      var songDuration = _time2.default.computeSongDuration();\n\n      /*\n        Sync the current time elements with the current\n        location of the song and the song duration elements with\n        the duration of the song.\n      */\n      _timeElements2.default.syncCurrentTimes(currentTime);\n\n      /*\n        Sync the song slider elements.\n      */\n      _songSliderElements2.default.sync(songCompletionPercentage, _config2.default.active_playlist, _config2.default.active_index);\n\n      /*\n        Sync the song played progress elements.\n      */\n      _songPlayedProgressElements2.default.sync(songCompletionPercentage);\n\n      /*\n        Sync the duration time elements.\n      */\n      _timeElements2.default.syncDurationTimes(currentTime, songDuration);\n    }\n  }\n\n  /**\n   * Runs a callback at a certain time in the song.\n   */\n  function runTimeCallbacks() {\n    /*\n      Gets the current seconds into the song.\n    */\n    var currentSeconds = Math.floor(_config2.default.audio.currentTime);\n\n    /*\n      Checks to see if there is a callback at the certain seconds into the song.\n    */\n    if (_config2.default.active_metadata.time_callbacks != undefined && _config2.default.active_metadata.time_callbacks[currentSeconds] != undefined) {\n      /*\n        Checks to see if the callback has been run. Since the time updates more than\n        one second, we don't want the callback to run X times.\n      */\n      if (!_config2.default.active_metadata.time_callbacks[currentSeconds].run) {\n        _config2.default.active_metadata.time_callbacks[currentSeconds].run = true;\n        _config2.default.active_metadata.time_callbacks[currentSeconds]();\n      }\n    } else {\n      /*\n        Iterate over all of the callbacks for a song. If the song has one, we flag\n        the run as false. This occurs because we have passed the active second for\n        the callback, so we flag it as not run. It will either run again if the user\n        seeks back or not run in the future.\n      */\n      for (var seconds in _config2.default.active_metadata.time_callbacks) {\n        if (_config2.default.active_metadata.time_callbacks.hasOwnProperty(seconds)) {\n          _config2.default.active_metadata.time_callbacks[seconds].run = false;\n        }\n      }\n    }\n  }\n  /**\n   * Returns public functions\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the Callback utility class\n * @module utilities/Callbacks\n */\n\n\n/**\n * Imports the Song Played Progress Elements visual class.\n * @module visual/songPlayedProgressElements\n */\n\n\n/**\n * Imports the Time Elements visual class.\n * @module visual/timeElements\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = TimeUpdate;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _muteElements = __webpack_require__(10);\n\nvar _muteElements2 = _interopRequireDefault(_muteElements);\n\nvar _volumeSliderElements = __webpack_require__(11);\n\nvar _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all events for a volume down event.\n * @module events/VolumeDown\n */\n\n\n/**\n * Imports the AmplitudeJS Visual Mute Elements\n * @module visual/MuteElements\n */\n/**\n * Imports the config to use the values\n */\nvar VolumeDown = function () {\n  /**\n   * Handles a click on a volume down element.\n   *\n   * HANDLER FOR:       class=\"amplitude-volume-down\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      We don't fire this if the user is touching the screen and it's moving.\n      This could lead to a mis-fire\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n      The volume range is from 0 to 1 for an audio element. We make this\n      a base of 100 for ease of working with.\n      If the new value is less than 100, we use the new calculated\n      value which gets converted to the proper unit for the audio element.\n      If the new value is greater than 100, we set the volume to 1 which\n      is the max for the audio element.\n      */\n      var volume = null;\n\n      if (_config2.default.volume - _config2.default.volume_increment > 0) {\n        volume = _config2.default.volume - _config2.default.volume_increment;\n      } else {\n        volume = 0;\n      }\n\n      /*\n      Calls the core function to set the volume to the computed value\n      based on the user's intent.\n      */\n      _core2.default.setVolume(volume);\n\n      /*\n        Sync Mute Elements.\n      */\n      _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);\n\n      /*\n        Sync Volume Slider Elements\n      */\n      _volumeSliderElements2.default.sync();\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Visual Volume Slider Elements\n * @module visual/VolumeSliderElements\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/core\n */\nexports.default = VolumeDown;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _muteElements = __webpack_require__(10);\n\nvar _muteElements2 = _interopRequireDefault(_muteElements);\n\nvar _volumeSliderElements = __webpack_require__(11);\n\nvar _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all events for a volume up event.\n * @module events/VolumeSlider\n */\n\n\n/**\n * Imports the AmplitudeJS Visual Mute Elements\n * @module visual/MuteElements\n */\n/**\n * Imports the config to use the values\n */\nvar VolumeSlider = function () {\n  /**\n   * Handles a change on the volume slider\n   *\n   * HANDLER FOR:       class=\"amplitude-volume-slider\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n    Calls the core function to set the volume to the computed value\n    based on the user's intent.\n    */\n    _core2.default.setVolume(this.value);\n\n    /*\n      Sync Mute Elements.\n    */\n    _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);\n\n    /*\n    Sync the volume slider locations\n    */\n    _volumeSliderElements2.default.sync();\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Visual Volume Slider Elements\n * @module visual/VolumeSliderElements\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/core\n */\nexports.default = VolumeSlider;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _muteElements = __webpack_require__(10);\n\nvar _muteElements2 = _interopRequireDefault(_muteElements);\n\nvar _volumeSliderElements = __webpack_require__(11);\n\nvar _volumeSliderElements2 = _interopRequireDefault(_volumeSliderElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all events for a volume up event.\n * @module events/VolumeUp\n */\n\n\n/**\n * Imports the AmplitudeJS Visual Mute Elements\n * @module visual/MuteElements\n */\n/**\n * Imports the config to use the values\n */\nvar VolumeUp = function () {\n  /**\n   * Handles a click on a volume up element.\n   *\n   * HANDLER FOR:       class=\"amplitude-volume-up\"\n   *\n   * @access public\n   */\n  function handle() {\n    /*\n      We don't fire this if the user is touching the screen and it's moving.\n      This could lead to a mis-fire\n    */\n    if (!_config2.default.is_touch_moving) {\n      /*\n      The volume range is from 0 to 1 for an audio element. We make this\n      a base of 100 for ease of working with.\n      If the new value is less than 100, we use the new calculated\n      value which gets converted to the proper unit for the audio element.\n      If the new value is greater than 100, we set the volume to 1 which\n      is the max for the audio element.\n      */\n      var volume = null;\n\n      if (_config2.default.volume + _config2.default.volume_increment <= 100) {\n        volume = _config2.default.volume + _config2.default.volume_increment;\n      } else {\n        volume = 100;\n      }\n\n      /*\n      Calls the core function to set the volume to the computed value\n      based on the user's intent.\n      */\n      _core2.default.setVolume(volume);\n\n      /*\n        Sync Mute Elements.\n      */\n      _muteElements2.default.setMuted(_config2.default.volume == 0 ? true : false);\n\n      /*\n        Sync Volume Slider Elements\n      */\n      _volumeSliderElements2.default.sync();\n    }\n  }\n\n  /**\n   * Returns the public facing methods\n   */\n  return {\n    handle: handle\n  };\n}();\n\n/**\n * Imports the AmplitudeJS Visual Volume Slider Elements\n * @module visual/VolumeSliderElements\n */\n\n\n/**\n * Imports the AmplitudeJS Core Methods\n * @module core/core\n */\nexports.default = VolumeUp;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * AmplitudeJS FX Module. Helps with configuring and setting up visualizations\n * and any other features of the Web Audio API that Amplitude takes advantage\n * of.\n *\n * @module fx/FX\n */\nvar Fx = function () {\n  /**\n   * Configures the Web Audio API to work with AmplitudeJS\n   */\n  function configureWebAudioAPI() {\n    /*\n    Gets the context for the browser. If this is null, the Web Audio\n    API is unavailable.\n    */\n    var browserContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext;\n\n    /*\n    If we have a context, the Web Audio API is available and we can continue,\n    otherwise, we alert the user if they have debug turned on.\n    */\n    if (browserContext) {\n      /*\n      Web Audio API is available, set the context in our config.\n      */\n      _config2.default.context = new browserContext();\n\n      /*\n      Create an analyzer that we will use in the context.\n      */\n      _config2.default.analyser = _config2.default.context.createAnalyser();\n\n      /*\n      Set cross origin to anonymous so we have a better chance of being able\n      to use the power of the Web Audio API.\n      */\n      _config2.default.audio.crossOrigin = \"anonymous\";\n\n      /*\n      Bind the source to the Javascript Audio Element.\n      */\n      _config2.default.source = _config2.default.context.createMediaElementSource(_config2.default.audio);\n\n      /*\n      Connect the analyser to the source\n      */\n      _config2.default.source.connect(_config2.default.analyser);\n\n      /*\n      Connect the context destination to the analyser.\n      */\n      _config2.default.analyser.connect(_config2.default.context.destination);\n    } else {\n      AmplitudeHelpers.writeDebugMessage(\"Web Audio API is unavailable! We will set any of your visualizations with your back up definition!\");\n    }\n  }\n\n  /**\n   * Determines if the web audio API is available or not.\n   */\n  function webAudioAPIAvailable() {\n    /*\n    Gets the context for the browser. If this is null, the Web Audio\n    API is unavailable.\n    */\n    var browserContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.oAudioContext || window.msAudioContext;\n    _config2.default.web_audio_api_available = false;\n\n    /*\n    Determines if the Web Audio API is available or not.\n    */\n    if (browserContext) {\n      /*\n      Set the flag in the config that the Web Audio API is available\n      */\n      _config2.default.web_audio_api_available = true;\n      return true;\n    } else {\n      /*\n      Set the flag in the config that the Web Audio API is not available\n      */\n      _config2.default.web_audio_api_available = false;\n      return false;\n    }\n  }\n\n  /**\n   * Determines if the user is using any of the web audio API features.\n   */\n  function determineUsingAnyFX() {\n    var waveforms = document.querySelectorAll(\".amplitude-wave-form\");\n    var visualizationElements = document.querySelectorAll(\".amplitude-visualization\");\n\n    if (waveforms.length > 0 || visualizationElements.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /*\n  Returns the publicly accessible methods\n  */\n  return {\n    configureWebAudioAPI: configureWebAudioAPI,\n    webAudioAPIAvailable: webAudioAPIAvailable,\n    determineUsingAnyFX: determineUsingAnyFX\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = Fx;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _init = __webpack_require__(21);\n\nvar _init2 = _interopRequireDefault(_init);\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _core = __webpack_require__(1);\n\nvar _core2 = _interopRequireDefault(_core);\n\nvar _shuffler = __webpack_require__(13);\n\nvar _shuffler2 = _interopRequireDefault(_shuffler);\n\nvar _configState = __webpack_require__(6);\n\nvar _configState2 = _interopRequireDefault(_configState);\n\nvar _audioNavigation = __webpack_require__(3);\n\nvar _audioNavigation2 = _interopRequireDefault(_audioNavigation);\n\nvar _repeater = __webpack_require__(12);\n\nvar _repeater2 = _interopRequireDefault(_repeater);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _visualizations = __webpack_require__(16);\n\nvar _visualizations2 = _interopRequireDefault(_visualizations);\n\nvar _shuffleElements = __webpack_require__(19);\n\nvar _shuffleElements2 = _interopRequireDefault(_shuffleElements);\n\nvar _repeatElements = __webpack_require__(8);\n\nvar _repeatElements2 = _interopRequireDefault(_repeatElements);\n\nvar _songSliderElements = __webpack_require__(14);\n\nvar _songSliderElements2 = _interopRequireDefault(_songSliderElements);\n\nvar _songPlayedProgressElements = __webpack_require__(20);\n\nvar _songPlayedProgressElements2 = _interopRequireDefault(_songPlayedProgressElements);\n\nvar _timeElements = __webpack_require__(15);\n\nvar _timeElements2 = _interopRequireDefault(_timeElements);\n\nvar _playPauseElements = __webpack_require__(2);\n\nvar _playPauseElements2 = _interopRequireDefault(_playPauseElements);\n\nvar _metaDataElements = __webpack_require__(7);\n\nvar _metaDataElements2 = _interopRequireDefault(_metaDataElements);\n\nvar _playbackSpeedElements = __webpack_require__(18);\n\nvar _playbackSpeedElements2 = _interopRequireDefault(_playbackSpeedElements);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _soundcloud = __webpack_require__(17);\n\nvar _soundcloud2 = _interopRequireDefault(_soundcloud);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Amplitude should just be an interface to the public functions.\n * Everything else should be handled by other objects\n *\n * @module Amplitude\n */\n\n\n/**\n * Meta Data Elements\n * @module visual/MetaDataElements\n */\n\n\n/**\n * Time Elements\n * @module visual/TimeElements\n */\n\n\n/**\n * Song Slider Elements\n * @module visual/SongSliderElements\n */\n\n\n/****************************************************\n * Elements\n ****************************************************/\n/**\n * Visual Shuffle Elements\n * @module visual/ShuffleElements\n */\n\n\n/**\n * Imports the checks\n * @module utilities/Checks\n */\n\n\n/**\n * Imports the audio navigation\n * @module utilities/AudioNavigation\n */\n\n\n/****************************************************\n * Utilities\n ****************************************************/\n/**\n * Shuffler Module\n * @module utilities/Shuffler\n */\n\n\n/****************************************************\n * Config\n ****************************************************/\n/**\n * Imports the config module\n * @module config\n */\nvar Amplitude = function () {\n  /**\n   * The main init function.  The user will call this through\n   * Amplitude.init({}) and pass in their settings.\n   *\n   * Public Accessor: Amplitude.init( user_config_json );\n   *\n   * @access public\n   * @param {object} userConfig \t- A JSON object of user defined values that helps configure and initialize AmplitudeJS.\n   */\n  function init(userConfig) {\n    _init2.default.initialize(userConfig);\n  }\n\n  /**\n   * Returns the current config for AmplitudeJS\n   */\n  function getConfig() {\n    return _config2.default;\n  }\n\n  /**\n   * Binds new elements that were added to the page.\n   *\n   * Public Accessor: Amplitude.bindNewElements()\n   *\n   * @access public\n   */\n  function bindNewElements() {\n    _init2.default.rebindDisplay();\n  }\n\n  /**\n   * Returns the active playlist.\n   *\n   * Public Accessor: Amplitude.getActivePlaylist()\n   *\n   * @access public\n   */\n  function getActivePlaylist() {\n    return _config2.default.active_playlist;\n  }\n\n  /**\n   * Returns the current playback speed.\n   *\n   * Public Accessor: Amplitude.getPlaybackSpeed()\n   *\n   * @access public\n   */\n  function getPlaybackSpeed() {\n    return _config2.default.playback_speed;\n  }\n\n  /**\n   * Sets the playback speed\n   * \n   * Public Accessor: Amplitude.setPlaybackSpeed( speed )\n   * \n   * @access public\n   */\n  function setPlaybackSpeed(speed) {\n    /*\n      Increments are set in .5 We only accept values\n      1, 1.5, 2\n       1 -> Regular Speed\n      1.5 -> 50% faster\n      2 -> Twice as fast\n    */\n    _core2.default.setPlaybackSpeed(speed);\n\n    /*\n      Visually sync the playback speed.\n    */\n    _playbackSpeedElements2.default.sync();\n  }\n\n  /**\n   * Gets the repeat state of the player.\n   *\n   * Public Accessor: Amplitude.getRepeat()\n   *\n   * @access public\n   */\n  function getRepeat() {\n    return _config2.default.repeat;\n  }\n\n  /**\n   * Gets the repeat state for a playlist\n   *\n   * Public Accessor: Amplitude.getRepeatPlaylist()\n   *\n   * @access public\n   */\n  function getRepeatPlaylist(playlistKey) {\n    return _config2.default.playlists[playlistKey].repeat;\n  }\n\n  /**\n   * Returns the shuffle state of the player.\n   *\n   * Public Accessor: Amplitude.getShuffle()\n   *\n   * @access public\n   */\n  function getShuffle() {\n    return _config2.default.shuffle_on;\n  }\n\n  /**\n   * Returns the shuffle state of the playlist.\n   *\n   * Public Accessor: Amplitude.getShufflePlaylist( playlist )\n   *\n   * @access public\n   * @param {string} playlist \t- The key representing the playlist ID to see if it's shuffled or not.\n   */\n  function getShufflePlaylist(playlist) {\n    return _config2.default.playlists[playlist].shuffle;\n  }\n\n  /**\n   * Sets the shuffle state for the player.\n   *\n   * Public Accessor: Amplitude.setShuffle()\n   *\n   * @param {boolean} shuffle  \t- True when we are shuffling the songs, false when we turn off shuffle.\n   *\n   * @access public\n   */\n  function setShuffle(shuffle) {\n    _shuffler2.default.setShuffle(shuffle);\n\n    _shuffleElements2.default.syncMain();\n  }\n\n  /**\n   * Sets the shuffle state for the playlist\n   *\n   * Public Accessor: Amplitude.setShufflePlaylist( playlist )\n   *\n   * @access public\n   * @param {string} playlist \t- The key representing the playlist ID to to shuffle the playlist.\n   * @param {boolean} shuffle \t- True when we are shuffling the playlist, false when we turn off shuffle.\n   */\n  function setShufflePlaylist(playlist, shuffle) {\n    _shuffler2.default.setShufflePlaylist(playlist, shuffle);\n\n    _shuffleElements2.default.syncMain();\n    _shuffleElements2.default.syncPlaylist(playlist);\n  }\n\n  /**\n   * Sets the repeat state for the player.\n   *\n   * Public Accessor: Amplitude.setRepeat()\n   *\n   * @access public\n   * @param {boolean} repeatState \t- The state you want the repeat song to be in.\n   */\n  function setRepeat(repeatState) {\n    _repeater2.default.setRepeat(repeatState);\n    _repeatElements2.default.syncRepeat();\n  }\n\n  /**\n   * Sets the repeat state for a playlist.\n   *\n   * Public Accessor: Amplitude.setRepeatPlaylist( playlistKey )\n   *\n   * @access public\n   * @param {string} playlist \t- The key representing the playlist ID to to shuffle the playlist.\n   * @param {boolean} repeatState - The state you want the repeat playlist to be in.\n   */\n  function setRepeatPlaylist(playlist, repeatState) {\n    _repeater2.default.setRepeatPlaylist(repeatState, playlist);\n    _repeatElements2.default.syncRepeatPlaylist(playlist);\n  }\n\n  /**\n   * Sets the repeat state for the song.\n   *\n   * Public Accessor: Amplitude.setRepeatSong()\n   *\n   * @access public\n   * @param {boolean} repeatState \t- The state you want the repeat song status to be in.\n   */\n  function setRepeatSong(repeatState) {\n    if (!_config2.default.is_touch_moving) {\n      /*\n      Sets repeat to the opposite of what it was set to\n      */\n      _repeater2.default.setRepeatSong(!_config2.default.repeat_song);\n\n      /*\n      Visually sync repeat song\n      */\n      _repeatElements2.default.syncRepeatSong();\n    }\n  }\n\n  /**\n   * Gets the default album art for the player\n   *\n   * Public Accessor: Amplitude.getDefaultAlbumArt()\n   *\n   * @access public\n   */\n  function getDefaultAlbumArt() {\n    return _config2.default.default_album_art;\n  }\n\n  /**\n   * Gets the default playlist art for the playlists\n   *\n   * Public Accessor: Amplitude.getDefaultPlaylistArt()\n   *\n   * @access public\n   */\n  function getDefaultPlaylistArt() {\n    return _config2.default.default_playlist_art;\n  }\n\n  /**\n   * Sets the default album art for the player\n   *\n   * Public Accessor: Amplitude.setDefaultAlbumArt( url )\n   *\n   * @access public\n   * @param {string} url \t- A string representing the URL of the new default album art.\n   */\n  function setDefaultAlbumArt(url) {\n    _config2.default.default_album_art = url;\n  }\n\n  /**\n   * Sets the default playlist art for the player\n   *\n   * Public Accessor: Amplitude.setDefaultPlaylistArt( url )\n   *\n   * @access public\n   * @param {string} url - A string representing the URL of the new default playlist art.\n   */\n  function setDefaultPlaylistArt(url) {\n    _config2.default.default_plalist_art = url;\n  }\n\n  /**\n   * Allows the user to get the percentage of the song played.\n   *\n   * Public Accessor: Amplitude.getSongPlayedPercentage();\n   *\n   * @access public\n   */\n  function getSongPlayedPercentage() {\n    /*\n    Returns the percentage of the song played.\n    */\n    return _config2.default.audio.currentTime / _config2.default.audio.duration * 100;\n  }\n\n  /**\n   * Allows the user to get the amount of seconds the song has played.\n   *\n   * Public Accessor: Amplitude.getSongPlayed();\n   *\n   * @access public\n   */\n  function getSongPlayedSeconds() {\n    /*\n    Returns the amount of seconds the song has played.\n    */\n    return _config2.default.audio.currentTime;\n  }\n\n  /**\n   * Allows the user to get the duration of the current song\n   *\n   * Public Accessor: Amplitude.getSongPlayed();\n   *\n   * @access public\n   */\n  function getSongDuration() {\n    /*\n    Returns the duration of the current song\n    */\n    return _config2.default.audio.duration;\n  }\n\n  /**\n   * Allows the user to set how far into the song they want to be. This is\n   * helpful for implementing custom range sliders. Only works on the current song.\n   *\n   * Public Accessor: Amplitude.setSongPlayedPercentage( float );\n   *\n   * @access public\n   * @param {number} percentage \t- The percentage of the song played\n   */\n  function setSongPlayedPercentage(percentage) {\n    /*\n    Ensures the percentage is a number and is between 0 and 100.\n    */\n    if (typeof percentage == \"number\" && percentage > 0 && percentage < 100) {\n      /*\n      Sets the current time of the song to the percentage.\n      */\n      _config2.default.audio.currentTime = _config2.default.audio.duration * (percentage / 100);\n    }\n  }\n\n  /**\n   * Allows the user to turn on debugging.\n   *\n   * Public Accessor: Amplitude.setDebug( bool );\n   *\n   * @access public\n   * @param {boolean} state \t\t- Turns debugging on and off.\n   */\n  function setDebug(state) {\n    /*\n    Sets the global config debug on or off.\n    */\n    _config2.default.debug = state;\n  }\n\n  /**\n   * Returns the active song meta data for the user to do what is\n   * needed.\n   *\n   * Public Accessor: Amplitude.getActiveSongMetadata();\n   *\n   * @access public\n   * @returns {object} JSON Object with the active song information\n   */\n  function getActiveSongMetadata() {\n    return _config2.default.active_metadata;\n  }\n\n  /**\n   * Returns the active playlist meta data for the for the user to use.\n   *\n   * Public Accessor: Amplitude.getActivePlaylistMetadata();\n   *\n   * @access public\n   * @returns {object} JSON representation for the active playlist\n   */\n  function getActivePlaylistMetadata() {\n    return _config2.default.playlists[_config2.default.active_playlist];\n  }\n\n  /**\n   * Returns a song in the songs array at that index\n   *\n   * Public Accessor: Amplitude.getSongAtIndex( song_index )\n   *\n   * @access public\n   * @param {number} index \t- The integer for the index of the song in the songs array.\n   * @returns {object} JSON representation for the song at a specific index.\n   */\n  function getSongAtIndex(index) {\n    return _config2.default.songs[index];\n  }\n\n  /**\n   * Returns a song at a playlist index\n   *\n   * Public Accessor: Amplitude.getSongAtPlaylistIndex( playlist, index\n   *\n   * @access public\n   * @param {number} index \t\t\t- The integer for the index of the song in the playlist.\n   * @param {string} playlist\t\t- The key of the playlist we are getting the song at the index for\n   * @returns {object} JSON representation for the song at a specific index.\n   */\n  function getSongAtPlaylistIndex(playlist, index) {\n    var song = _config2.default.playlists[playlist].songs[index];\n\n    return song;\n  }\n\n  /**\n   * Adds a song to the end of the config array.  This will allow Amplitude\n   * to play the song in a playlist type setting.\n   *\n   * Public Accessor: Amplitude.addSong( song_json )\n   *\n   * @access public\n   * @param {object} song \t- JSON representation of a song.\n   * @returns {number} New index of the song.\n   */\n  function addSong(song) {\n    /*\n    Ensures we have a songs array to push to.\n    */\n    if (_config2.default.songs == undefined) {\n      _config2.default.songs = [];\n    }\n\n    _config2.default.songs.push(song);\n\n    if (_config2.default.shuffle_on) {\n      _config2.default.shuffle_list.push(song);\n    }\n\n    if (_soundcloud2.default.isSoundCloudURL(song.url)) {\n      _soundcloud2.default.resolveIndividualStreamableURL(song.url, null, _config2.default.songs.length - 1, _config2.default.shuffle_on);\n    }\n\n    return _config2.default.songs.length - 1;\n  }\n\n  /**\n   * Adds a song to the beginning of the config array.\n   * This will allow Amplitude to play the song in a \n   * playlist type setting.\n   *\n   * Public Accessor: Amplitude.addSong( song_json )\n   *\n   * @access public\n   * @param {object} song \t- JSON representation of a song.\n   * @returns {number} New index of the song (0)\n   */\n  function prependSong(song) {\n    /*\n    Ensures we have a songs array to push to.\n    */\n    if (_config2.default.songs == undefined) {\n      _config2.default.songs = [];\n    }\n\n    _config2.default.songs.unshift(song);\n\n    if (_config2.default.shuffle_on) {\n      _config2.default.shuffle_list.unshift(song);\n    }\n\n    if (_soundcloud2.default.isSoundCloudURL(song.url)) {\n      _soundcloud2.default.resolveIndividualStreamableURL(song.url, null, _config2.default.songs.length - 1, _config2.default.shuffle_on);\n    }\n\n    return 0;\n  }\n\n  /**\n   * Adds a song to a playlist. This will allow Amplitude to play the song in the\n   * playlist\n   *\n   * Public Accessor: Amplitude.addSongToPlaylist( song_json, playlist_key )\n   *\n   * @access public\n   * @param {object} song \t\t\t- JSON representation of a song.\n   * @param {string} playlist\t\t- Playlist we are adding the song to.\n   * @returns {mixed} New index of song in playlist or null if no playlist exists\n   */\n  function addSongToPlaylist(song, playlist) {\n    if (_config2.default.playlists[playlist] != undefined) {\n      _config2.default.playlists[playlist].songs.push(song);\n\n      if (_config2.default.playlists[playlist].shuffle) {\n        _config2.default.playlists[playlist].shuffle_list.push(song);\n      }\n\n      if (_soundcloud2.default.isSoundCloudURL(song.url)) {\n        _soundcloud2.default.resolveIndividualStreamableURL(song.url, playlist, _config2.default.playlists[playlist].songs.length - 1, _config2.default.playlists[playlist].shuffle);\n      }\n\n      return _config2.default.playlists[playlist].songs.length - 1;\n    } else {\n      _debug2.default.writeMessage(\"Playlist doesn't exist!\");\n      return null;\n    }\n  }\n\n  /**\n   * Adds a playlist to Amplitude.\n   *\n   * @param {string} key  - The key of the playlist we are adding.\n   * @param {object} data - The data relating to the playlist\n   * @param {array} songs - The songs to add to the playlist\n   */\n  function addPlaylist(key, data, songs) {\n    /*\n      Ensures the playlist is not already defined.\n    */\n    if (_config2.default.playlists[key] == undefined) {\n      /*\n        Initialize the new playlist object.\n      */\n      _config2.default.playlists[key] = {};\n\n      /*\n        Define the ignored keys that we don't want to copy over.\n      */\n      var ignoredKeys = [\"repeat\", \"shuffle\", \"shuffle_list\", \"songs\", \"src\"];\n\n      /*\n        Iterate over all of the keys defined by the user and\n        set them on the playlist.\n      */\n      for (var dataKey in data) {\n        if (ignoredKeys.indexOf(dataKey) < 0) {\n          _config2.default.playlists[key][dataKey] = data[dataKey];\n        }\n      }\n\n      /*\n        Initialize the default parameters for the playlist and set the songs.\n      */\n      _config2.default.playlists[key].songs = songs;\n      _config2.default.playlists[key].active_index = null;\n      _config2.default.playlists[key].repeat = false;\n      _config2.default.playlists[key].shuffle = false;\n      _config2.default.playlists[key].shuffle_list = [];\n\n      return _config2.default.playlists[key];\n    } else {\n      _debug2.default.writeMessage(\"A playlist already exists with that key!\");\n      return null;\n    }\n  }\n\n  /**\n   * Removes a song from the song array\n   *\n   * Public Accessor: Amplitude.removeSong( index )\n   *\n   * @access public\n   * @param {integer} index - Index of the song being removed\n   * @returns {boolean} True if removed false if not.\n   */\n  function removeSong(index) {\n    _config2.default.songs.splice(index, 1);\n  }\n\n  /**\n   * Removes a song from the playlist\n   *\n   * Public Accessor: Amplitude.removeSongFromPlaylist( index, playlist )\n   *\n   * @access public\n   * @param {integer} index \t\t\t- Index of the song being removed from the playlist.\n   * @param {string} playlist\t\t\t- Playlist we are removing the song from.\n   * @returns {boolean} True if removed false if not.\n   */\n  function removeSongFromPlaylist(index, playlist) {\n    if (_config2.default.playlists[playlist] != undefined) {\n      _config2.default.playlists[playlist].songs.splice(index, 1);\n    }\n  }\n\n  /**\n   * When you pass a song object it plays that song right awawy.  It sets\n   * the active song in the config to the song you pass in and synchronizes\n   * the visuals.\n   *\n   * Public Accessor: Amplitude.playNow( song )\n   *\n   * @access public\n   * @param {object} song \t- JSON representation of a song.\n   */\n  function playNow(song) {\n    /*\n    Makes sure the song object has a URL associated with it\n    or there will be nothing to play.\n    */\n    if (song.url) {\n      _config2.default.audio = new Audio();\n      _config2.default.audio.src = song.url;\n      _config2.default.active_metadata = song;\n      _config2.default.active_album = song.album;\n    } else {\n      /*\n      Write error message since the song passed in doesn't\n      have a URL.\n      */\n      _debug2.default.writeMessage(\"The song needs to have a URL!\");\n    }\n\n    /*\n    Plays the song.\n    */\n    _core2.default.play();\n\n    /*\n    Sets the main song control status visual\n    */\n    _playPauseElements2.default.sync();\n\n    /*\n    Update the song meta data\n    */\n    _metaDataElements2.default.displayMetaData();\n\n    /*\n    Reset the song sliders, song progress bar info, and\n    reset times. This ensures everything stays in sync.\n    */\n    _songSliderElements2.default.resetElements();\n\n    /*\n    Reset the song played progress elements.\n    */\n    _songPlayedProgressElements2.default.resetElements();\n\n    /*\n    Reset all of the current time elements.\n    */\n    _timeElements2.default.resetCurrentTimes();\n\n    /*\n    Reset all of the duration time elements.\n    */\n    _timeElements2.default.resetDurationTimes();\n\n    /*\n      Sets the state of the player.\n    */\n    _configState2.default.setPlayerState();\n  }\n\n  /**\n   * Plays a song at the index passed in from the songs array.\n   *\n   * Public Accessor: Amplitude.playSongAtIndex( index )\n   *\n   * @access public\n   * @param {number} index \t- The number representing the song in the songs array.\n   */\n  function playSongAtIndex(index) {\n    /*\n    Stop the current song.\n    */\n    _core2.default.stop();\n\n    /*\n    Determine if there is a new playlist, if so set the active playlist and change the song.\n    */\n    if (_checks2.default.newPlaylist(null)) {\n      _audioNavigation2.default.setActivePlaylist(null);\n\n      _audioNavigation2.default.changeSong(_config2.default.songs[index], index);\n    }\n\n    /*\n    Check if the song is new. If so, change the song.\n    */\n    if (_checks2.default.newSong(null, index)) {\n      _audioNavigation2.default.changeSong(_config2.default.songs[index], index);\n    }\n\n    /*\n    Play the song\n    */\n    _core2.default.play();\n\n    /*\n      Sets the state of the player.\n    */\n    _configState2.default.setPlayerState();\n\n    /*\n    Sync all of the play pause buttons.\n    */\n    _playPauseElements2.default.sync();\n  }\n\n  /**\n   * Plays a song at the index passed in for the playlist provided. The index passed\n   * in should be the index of the song in the playlist and not the songs array.\n   *\n   * @access public\n   * @param {number} index \t\t- The number representing the song in the playlist array.\n   * @param {string} playlist - The key string representing the playlist we are playing the song from.\n   *\n   */\n  function playPlaylistSongAtIndex(index, playlist) {\n    _core2.default.stop();\n\n    /*\n    Determine if there is a new playlist, if so set the active playlist and change the song.\n    */\n    if (_checks2.default.newPlaylist(playlist)) {\n      _audioNavigation2.default.setActivePlaylist(playlist);\n\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[index], index);\n    }\n\n    /*\n    Check if the song is new. If so, change the song.\n    */\n    if (_checks2.default.newSong(playlist, index)) {\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[index], index);\n    }\n\n    /*\n    Sync all of the play pause buttons.\n    */\n    _playPauseElements2.default.sync();\n\n    /*\n    Play the song\n    */\n    _core2.default.play();\n\n    /*\n    Set the state of the player\n    */\n    _configState2.default.setPlayerState();\n  }\n\n  /**\n   * Allows the user to play whatever the active song is directly\n   * through Javascript. Normally ALL of Amplitude functions that access\n   * the core features are called through event handlers.\n   *\n   * Public Accessor: Amplitude.play();\n   *\n   * @access public\n   */\n  function play() {\n    _core2.default.play();\n\n    _configState2.default.setPlayerState();\n  }\n\n  /**\n   * Allows the user to pause whatever the active song is directly\n   * through Javascript. Normally ALL of Amplitude functions that access\n   * the core features are called through event handlers.\n   *\n   * Public Accessor: Amplitude.pause();\n   *\n   * @access public\n   */\n  function pause() {\n    _core2.default.pause();\n\n    _configState2.default.setPlayerState();\n  }\n\n  /**\n   * Allows the user to stop whatever the active song is directly\n   * through Javascript.\n   * \n   * Public Accessor: Amplitude.stop();\n   * \n   * @access public\n   */\n  function stop() {\n    _core2.default.stop();\n\n    _configState2.default.setPlayerState();\n  }\n\n  /**\n   * Returns the audio object used to play the audio\n   *\n   * Public Accessor: Amplitude.getAudio();\n   *\n   * @access public\n   */\n  function getAudio() {\n    return _config2.default.audio;\n  }\n\n  /**\n   * Returns the Web Audio API ANalyser used for visualizations.\n   *\n   * Public Accessor: Amplitude.getAnalyser()\n   *\n   * @access public\n   */\n  function getAnalyser() {\n    return _config2.default.analyser;\n  }\n\n  /**\n   * Plays the next song either in the playlist or globally.\n   *\n   * Public Accessor: Amplitude.next( playlist );\n   *\n   * @access public\n   * @param {string} [playlist = null \t- The playlist key\n   */\n  function next() {\n    var playlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    var nextData = {};\n    /*\n    If the playlist is empty or null, then we check the active\n    playlist\n    */\n    if (playlist == \"\" || playlist == null) {\n      /*\n      If the active playlist is null, then we set the next global\n      song or we set the next in the playlist.\n      */\n      if (_config2.default.active_playlist == null || _config2.default.active_playlist == \"\") {\n        _audioNavigation2.default.setNext();\n      } else {\n        _audioNavigation2.default.setNextPlaylist(_config2.default.active_playlist);\n      }\n    } else {\n      _audioNavigation2.default.setNextPlaylist(playlist);\n    }\n  }\n\n  /**\n   * Plays the prev song either in the playlist or globally.\n   *\n   * Public Accessor: Amplitude.prev( playlist );\n   *\n   * @access public\n   * @param {string} [playlist = null] \t- The playlist key\n   */\n  function prev() {\n    var playlist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    var prevData = {};\n\n    /*\n    If the playlist is empty or null, then we check the active\n    playlist\n    */\n    if (playlist == \"\" || playlist == null) {\n      /*\n      If the active playlist is null, then we set the prev global\n      song or we set the prev in the playlist.\n      */\n      if (_config2.default.active_playlist == null || _config2.default.active_playlist == \"\") {\n        _audioNavigation2.default.setPrevious();\n      } else {\n        _audioNavigation2.default.setPreviousPlaylist(_config2.default.active_playlist);\n      }\n    } else {\n      _audioNavigation2.default.setPreviousPlaylist(playlist);\n    }\n  }\n\n  /**\n   * Gets all of the songs in the songs array\n   *\n   * Public Accessor: Amplitude.getSongs( );\n   *\n   * @access public\n   */\n  function getSongs() {\n    return _config2.default.songs;\n  }\n\n  /**\n   * Gets all of the songs in a playlist\n   *\n   * Public Accessor: Amplitude.getSongsInPlaylist( playlist );\n   *\n   * @access public\n   * @param {string} playlist \t- The playlist key\n   */\n  function getSongsInPlaylist(playlist) {\n    return _config2.default.playlists[playlist].songs;\n  }\n\n  /**\n   * Get current state of songs. If shuffled, this will return the shuffled\n   * songs.\n   *\n   * Public Accessor: Amplitude.getSongsState();\n   *\n   * @access public\n   */\n  function getSongsState() {\n    if (_config2.default.shuffle_on) {\n      return _config2.default.shuffle_list;\n    } else {\n      return _config2.default.songs;\n    }\n  }\n\n  /**\n   * Get current state of songs in playlist. If shuffled, this will return the\n   * shuffled songs.\n   *\n   * Public Accessor: Amplitude.getSongsStatePlaylist( playlist );\n   *\n   * @access public\n   * @param {string} playlist \t- The playlist key\n   */\n  function getSongsStatePlaylist(playlist) {\n    if (_config2.default.playlists[playlist].shuffle) {\n      return _config2.default.playlists[playlist].shuffle_list;\n    } else {\n      return _config2.default.playlists[playlist].songs;\n    }\n  }\n\n  /**\n   * Gets the active index of the player\n   *\n   * Public Accessor: Amplitude.getActiveIndex()\n   *\n   * @access public\n   */\n  function getActiveIndex() {\n    return parseInt(_config2.default.active_index);\n  }\n\n  /**\n   * Get the version of AmplitudeJS\n   *\n   * Public Accessor: Amplitude.getVersion()\n   *\n   * @access public\n   */\n  function getVersion() {\n    return _config2.default.version;\n  }\n\n  /**\n   * Get the buffered amount for the current song\n   *\n   * Public Accessor: Amplitude.getBuffered()\n   *\n   * @access public\n   */\n  function getBuffered() {\n    return _config2.default.buffered;\n  }\n\n  /**\n   * Skip to a certain location in a selected song.\n   *\n   * Public Accessor: Amplitude.getBuffered()\n   *\n   * @access public\n   * @param {number} seconds \t\t\t\t\t\t- The amount of seconds we should skip to in the song.\n   * @param {number} songIndex \t\t\t\t\t- The index of the song in the songs array.\n   * @param {string} [playlist = null]\t- The playlist the song we are skipping to belogns to.\n   */\n  function skipTo(seconds, songIndex) {\n    var playlist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    seconds = parseInt(seconds);\n\n    if (playlist != null) {\n      /*\n        Checks if we are skipping to a new playlist\n      */\n      if (_checks2.default.newPlaylist(playlist)) {\n        _audioNavigation2.default.setActivePlaylist(playlist);\n      }\n\n      /*\n        Changes the song to where it's being skipped and then\n        play the song.\n      */\n      _audioNavigation2.default.changeSongPlaylist(playlist, _config2.default.playlists[playlist].songs[songIndex], songIndex);\n      _core2.default.play();\n\n      /*\n        Sync all of the play pause elements.\n      */\n      _playPauseElements2.default.syncGlobal();\n      _playPauseElements2.default.syncPlaylist();\n      _playPauseElements2.default.syncSong();\n\n      /*\n        Skip to the location in the song.\n      */\n      _core2.default.skipToLocation(seconds);\n    } else {\n      /*\n        Changes the song to where it's being skipped and then\n        play the song.\n      */\n      _audioNavigation2.default.changeSong(_config2.default.songs[songIndex], songIndex);\n      _core2.default.play();\n\n      /*\n        Syncs all of the play pause buttons now that we've skipped.\n      */\n      _playPauseElements2.default.syncGlobal();\n      _playPauseElements2.default.syncSong();\n\n      /*\n        Skip to the location in the song.\n      */\n      _core2.default.skipToLocation(seconds);\n    }\n  }\n\n  /**\n   * Sets the meta data for a song in the songs array. This will set any\n   * meta data for a song besides the URL. The URL could cause issues if the\n   * song was playing.\n   *\n   * Public Accessor: Amplitude.setSongMetaData()\n   *\n   * @access public\n   * @param {number} index\t\t\t\t\t- The index of the song in the songs array.\n   * @param {object} metaData \t\t\t- The object containing the meta data we are updating.\n   * @param {string} playlist       - The playlist we are updating the song meta data for.\n   */\n  function setSongMetaData(index, metaData) {\n    var playlist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    /*\n      Update the meta data for a song in a playlist.\n    */\n    if (playlist != \"\" && playlist != null && _config2.default.playlists[playlist] != undefined) {\n      /*\n        Set all of the defined meta data properties\n      */\n      for (var key in metaData) {\n        if (metaData.hasOwnProperty(key)) {\n          if (key != \"url\" && key != \"URL\" && key != \"live\" && key != \"LIVE\") {\n            _config2.default.playlists[playlist].songs[index][key] = metaData[key];\n          }\n        }\n      }\n    } else {\n      /*\n        Update the meta data for a song.\n      */\n      for (var key in metaData) {\n        if (metaData.hasOwnProperty(key)) {\n          if (key != \"url\" && key != \"URL\" && key != \"live\" && key != \"LIVE\") {\n            _config2.default.songs[index][key] = metaData[key];\n          }\n        }\n      }\n    }\n\n    /*\n      Display the updates on the screen.\n    */\n    _metaDataElements2.default.displayMetaData();\n    _metaDataElements2.default.syncMetaData();\n  }\n\n  function setPlaylistMetaData(playlist, metaData) {\n    if (_config2.default.playlists[playlist] != undefined) {\n      /*\n      These are the ignored keys that we won't be worrying about displaying.\n      Every other key in the playlist object can be displayed.\n      */\n      var ignoredKeys = [\"repeat\", \"shuffle\", \"shuffle_list\", \"songs\", \"src\"];\n\n      for (var key in metaData) {\n        if (metaData.hasOwnProperty(key)) {\n          if (ignoredKeys.indexOf(key) < 0) {\n            _config2.default.playlists[playlist][key] = metaData[key];\n          }\n        }\n      }\n\n      _metaDataElements2.default.displayPlaylistMetaData();\n    } else {\n      _debug2.default.writeMessage(\"You must provide a valid playlist key!\");\n    }\n  }\n\n  /**\n   * Sets the delay between the songs when they are finished.\n   *\n   * Public Accessor: Amplitude.setDelay()\n   *\n   * @access public\n   * @param {number} delay \t- The millisecond delay time between songs\n   */\n  function setDelay(time) {\n    _config2.default.delay = time;\n  }\n\n  /**\n   * Returns the current delay between songs.\n   *\n   * Public Accessor: Amplitude.getDelay()\n   *\n   * @access public\n   */\n  function getDelay() {\n    return _config2.default.delay;\n  }\n\n  /**\n   * Returns the state of the player.\n   *\n   * Public Accessor: Amplitude.getPlayerState();\n   */\n  function getPlayerState() {\n    return _config2.default.player_state;\n  }\n\n  /**\n   * Registers a visualization and sets that visualization's\n   * preferences. When creating a visualization, you can set certain\n   * preferences that the user can overwrite similar to Amplitude.\n   * Public Accessor: Amplitude.registerVisualization( visualization, preferences )\n   *\n   * @param {object} visualzation A visualization object that gets registered\n   * with Amplitude\n   *\n   * @param {object} preferences A JSON object of preferences relating to the\n   * visualization\n   */\n  function registerVisualization(visualization, preferences) {\n    _visualizations2.default.register(visualization, preferences);\n  }\n\n  /**\n   * Set the visualization for the playlist\n   *\n   * @param {string} playlist - The playlist we are setting the visualization for.\n   * @param {string} visualizationKey - The key of the visualization we are adding to the playlist.\n   */\n  function setPlaylistVisualization(playlist, visualizationKey) {\n    if (_config2.default.playlists[playlist] != undefined) {\n      if (_config2.default.visualizations.available[visualizationKey] != undefined) {\n        _config2.default.playlists[playlist].visualization = visualizationKey;\n      } else {\n        _debug2.default.writeMessage(\"A visualization does not exist for the key provided.\");\n      }\n    } else {\n      _debug2.default.writeMessage(\"The playlist for the key provided does not exist\");\n    }\n  }\n\n  /**\n   * Set a visualization for the song.\n   *\n   * @param {number} songIndex - The index of the song in the songs array we are setting the visualization for.\n   * @param {string} visualizationKey - The key of the visualization we are adding to the playlist.\n   */\n  function setSongVisualization(songIndex, visualizationKey) {\n    if (_config2.default.songs[songIndex]) {\n      if (_config2.default.visualizations.available[visualizationKey] != undefined) {\n        _config2.default.songs[songIndex].visualization = visualizationKey;\n      } else {\n        _debug2.default.writeMessage(\"A visualization does not exist for the key provided.\");\n      }\n    } else {\n      _debug2.default.writeMessage(\"A song at that index is undefined\");\n    }\n  }\n\n  /**\n   * Set song in playlist visualization.\n   *\n   * @param {string} playlist - The playlist we are setting the song visualization for.\n   * @param {number} songIndex - The index we are setting the visualization for.\n   * @param {strong} visualizationKey - The key of the visualization we are adding to the song in the playlist.\n   */\n  function setSongInPlaylistVisualization(playlist, songIndex, visualizationKey) {\n    if (_config2.default.playlists[playlist].songs[songIndex] != undefined) {\n      if (_config2.default.visualizations.available[visualizationKey] != undefined) {\n        _config2.default.playlists[playlist].songs[songIndex].visualization = visualizationKey;\n      } else {\n        _debug2.default.writeMessage(\"A visualization does not exist for the key provided.\");\n      }\n    } else {\n      _debug2.default.writeMessage(\"The song in the playlist at that key is not defined\");\n    }\n  }\n\n  /**\n   * Sets the global visualization default.\n   */\n  function setGlobalVisualization(visualizationKey) {\n    if (_config2.default.visualizations.available[visualizationKey] != undefined) {\n      _config2.default.visualization = visualizationKey;\n    } else {\n      _debug2.default.writeMessage(\"A visualization does not exist for the key provided.\");\n    }\n  }\n\n  /**\n   * Sets the active volume.\n   * @param {number} volumeLevel - A number between 1 and 100 as a percentage of\n   * min to max for a volume level.\n   */\n  function setVolume(volumeLevel) {\n    _core2.default.setVolume(volumeLevel);\n  }\n\n  /**\n   * Gets the active volume.\n   */\n  function getVolume() {\n    return _config2.default.volume;\n  }\n\n  /*\n  Returns all of the publically accesible methods.\n  */\n  return {\n    init: init,\n    getConfig: getConfig,\n    bindNewElements: bindNewElements,\n    getActivePlaylist: getActivePlaylist,\n    getPlaybackSpeed: getPlaybackSpeed,\n    setPlaybackSpeed: setPlaybackSpeed,\n    getRepeat: getRepeat,\n    getRepeatPlaylist: getRepeatPlaylist,\n    getShuffle: getShuffle,\n    getShufflePlaylist: getShufflePlaylist,\n    setShuffle: setShuffle,\n    setShufflePlaylist: setShufflePlaylist,\n    setRepeat: setRepeat,\n    setRepeatSong: setRepeatSong,\n    setRepeatPlaylist: setRepeatPlaylist,\n    getDefaultAlbumArt: getDefaultAlbumArt,\n    setDefaultAlbumArt: setDefaultAlbumArt,\n    getDefaultPlaylistArt: getDefaultPlaylistArt,\n    setDefaultPlaylistArt: setDefaultPlaylistArt,\n    getSongPlayedPercentage: getSongPlayedPercentage,\n    setSongPlayedPercentage: setSongPlayedPercentage,\n    getSongPlayedSeconds: getSongPlayedSeconds,\n    getSongDuration: getSongDuration,\n    setDebug: setDebug,\n    getActiveSongMetadata: getActiveSongMetadata,\n    getActivePlaylistMetadata: getActivePlaylistMetadata,\n    getSongAtIndex: getSongAtIndex,\n    getSongAtPlaylistIndex: getSongAtPlaylistIndex,\n    addSong: addSong,\n    prependSong: prependSong,\n    addSongToPlaylist: addSongToPlaylist,\n    removeSong: removeSong,\n    removeSongFromPlaylist: removeSongFromPlaylist,\n    playNow: playNow,\n    playSongAtIndex: playSongAtIndex,\n    playPlaylistSongAtIndex: playPlaylistSongAtIndex,\n    play: play,\n    pause: pause,\n    stop: stop,\n    getAudio: getAudio,\n    getAnalyser: getAnalyser,\n    next: next,\n    prev: prev,\n    getSongs: getSongs,\n    getSongsInPlaylist: getSongsInPlaylist,\n    getSongsState: getSongsState,\n    getSongsStatePlaylist: getSongsStatePlaylist,\n    getActiveIndex: getActiveIndex,\n    getVersion: getVersion,\n    getBuffered: getBuffered,\n    skipTo: skipTo,\n    setSongMetaData: setSongMetaData,\n    setPlaylistMetaData: setPlaylistMetaData,\n    setDelay: setDelay,\n    getDelay: getDelay,\n    getPlayerState: getPlayerState,\n    addPlaylist: addPlaylist,\n    registerVisualization: registerVisualization,\n    setPlaylistVisualization: setPlaylistVisualization,\n    setSongVisualization: setSongVisualization,\n    setSongInPlaylistVisualization: setSongInPlaylistVisualization,\n    setGlobalVisualization: setGlobalVisualization,\n    getVolume: getVolume,\n    setVolume: setVolume\n  };\n}();\n\n/** \n * Playback Speed Elements\n * @module visual/PlaybackSpeedElements\n */\n\n\n/**\n * Play Pause Elements\n * @module visual/PlayPauseElements\n */\n\n\n/**\n * Song Played Progress Elements\n * @module visual/SongPlayedProgressElements\n */\n\n\n/**\n * Visual Repeat Elements\n * @module visual/RepeatElements\n */\n\n\n/****************************************************\n * FX Modules\n ****************************************************/\n/**\n * Imports the visualizations module\n * @module fx/Visualizations\n */\n\n\n/**\n * Repeater Module\n *\n * @module utilities/Repeater\n */\n\n\n/**\n * Imports the config state module.\n * @module ConfigState\n */\n\n\n/****************************************************\n * Core\n ****************************************************/\n/**\n * AmplitudeJS Core Module\n *\n * @module core/Core\n */\n/**\n * @name \t\tAmplitude.js\n * @author \tDan Pastori (521 Dimensions) <opensource@521dimensions.com>\n */\n/**\n * AmplitudeJS Initializer Module\n *\n * @module init/AmplitudeInitializer\n */\nexports.default = Amplitude;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _debug = __webpack_require__(4);\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _checks = __webpack_require__(5);\n\nvar _checks2 = _interopRequireDefault(_checks);\n\nvar _metaDataElements = __webpack_require__(7);\n\nvar _metaDataElements2 = _interopRequireDefault(_metaDataElements);\n\nvar _soundcloud = __webpack_require__(17);\n\nvar _soundcloud2 = _interopRequireDefault(_soundcloud);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles the initialization of the playlists.\n *\n * @module init/PlaylistsInitializer\n */\n\n\n/**\n * AmplitudeJS Visual Meta Data Elements Module\n * @module visual/MetaDataElements\n */\n\n\n/**\n * AmplitudeJS Debug Module\n * @module utilities/Debug\n */\nvar PlaylistsInitializer = function () {\n  /**\n   * Initializes the playlists for AmplitudeJS\n   *\n   * @param {Object} playlists - The playlists defined by the user.\n   */\n  function initialize(playlists) {\n    /*\n      Copy the playlists over to Amplitude\n    */\n    _config2.default.playlists = playlists;\n\n    /*\n      Copy songs over from songs array.\n    */\n    copySongsToPlaylists();\n\n    /*\n      Grab any SoundCloud Data for the playlist songs if needed.\n    */\n    grabSoundCloudData();\n\n    /*\n      Initialize a scoped active index for each playlist.\n    */\n    initializePlaylistActiveIndexes();\n\n    /*\n      Initialize the shuffle status of the playlists.\n    */\n    initializePlaylistShuffleStatuses();\n\n    /*\n      Initialize the repeat status for the playlits.\n    */\n    initializePlaylistsRepeatStatuses();\n\n    /*\n      Initialize temporary place holders for shuffle lists.\n    */\n    initializePlaylistShuffleLists();\n\n    /*\n      Initializes the first song in the playlist\n    */\n    initializeFirstSongInPlaylistMetaData();\n  }\n\n  /**\n   * Initializes a scoped active index for each playlist.\n   *\n   * @access private\n   */\n  function initializePlaylistActiveIndexes() {\n    /*\n    Iterate over all of the playlists defined by the user\n      and add an active index.\n    */\n    for (var key in _config2.default.playlists) {\n      _config2.default.playlists[key].active_index = null;\n    }\n  }\n\n  /**\n   * Ensures the indexes in the playlists are valid indexes. The song has\n   * to exist in the Amplitude config to be played correctly. If the index\n   * is an integer, we ensure it exists and coy it to the array.\n   *\n   * @access private\n   */\n  function copySongsToPlaylists() {\n    /*\n      Iterate over all of the config's playlists\n    */\n    for (var key in _config2.default.playlists) {\n      /*\n        Checks if the playlist key is accurate.\n      */\n      if (_config2.default.playlists.hasOwnProperty(key)) {\n        /*\n          Checks if the playlist has songs.\n        */\n        if (_config2.default.playlists[key].songs) {\n          /*\n            Iterate over all of the songs in the playlist\n          */\n          for (var i = 0; i < _config2.default.playlists[key].songs.length; i++) {\n            if (_checks2.default.isInt(_config2.default.playlists[key].songs[i])) {\n              _config2.default.playlists[key].songs[i] = _config2.default.songs[_config2.default.playlists[key].songs[i]];\n\n              _config2.default.playlists[key].songs[i].index = i;\n            }\n            /*\n              Check to see if the index for the song in the playlist\n              exists in the songs config.\n            */\n            if (_checks2.default.isInt(_config2.default.playlists[key].songs[i]) && !_config2.default.songs[_config2.default.playlists[key].songs[i]]) {\n              _debug2.default.writeMessage(\"The song index: \" + _config2.default.playlists[key].songs[i] + \" in playlist with key: \" + key + \" is not defined in your songs array!\");\n            }\n\n            /*\n              If not an int, then is a dedicated song, just set the index.\n            */\n            if (!_checks2.default.isInt(_config2.default.playlists[key].songs[i])) {\n              _config2.default.playlists[key].songs[i].index = i;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Grabs the SoundCloud data for any song in the playlist that\n   * the user needs to grab data for.\n   *\n   * @access private\n   */\n  function grabSoundCloudData() {\n    /*\n      Iterate over all of the config's playlists\n    */\n    for (var key in _config2.default.playlists) {\n      /*\n        Checks if the playlist key is accurate.\n      */\n      if (_config2.default.playlists.hasOwnProperty(key)) {\n        /*\n          Iterate over all of the songs in the playlist and see if\n          they need to grab the SoundCloud data for the song.\n        */\n        for (var i = 0; i < _config2.default.playlists[key].songs.length; i++) {\n          /*\n            Only Grab the data if the URL is a SoundCloud URL.\n          */\n          if (_soundcloud2.default.isSoundCloudURL(_config2.default.playlists[key].songs[i].url)) {\n            /*\n              Only grab the data if the SoundCloud data has not already been\n              grabbed for the audio. This could happen if the user defined the\n              song in the songs array and was grabbed before.\n            */\n            if (_config2.default.playlists[key].songs[i].soundcloud_data == undefined) {\n              _soundcloud2.default.resolveIndividualStreamableURL(_config2.default.playlists[key].songs[i].url, key, i);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes the shuffle statuses for each of the playlists. These will\n   * be referenced when we shuffle individual playlists.\n   *\n   * @access private\n   */\n  function initializePlaylistShuffleStatuses() {\n    /*\n    Iterate over all of the playlists the user defined adding\n    the playlist key to the shuffled playlist array and creating\n    and empty object to house the statuses.\n    */\n    for (var key in _config2.default.playlists) {\n      _config2.default.playlists[key].shuffle = false;\n    }\n  }\n\n  /**\n   * Initializes the repeat statuses for each of the playlists.  These will\n   * be referenced when we repeat individual playlits.\n   *\n   * @access private\n   */\n  function initializePlaylistsRepeatStatuses() {\n    /*\n      Iterate over all of the playlists the user defined adding\n      the playlist key to the repeated playlist array and creating\n      and empty object to house the statuses.\n    */\n    for (var key in _config2.default.playlists) {\n      _config2.default.playlists[key].repeat = false;\n    }\n  }\n\n  /**\n   * Initializes the shuffled playlist placeholders. These will be set for\n   * playlists that are shuffled and contain the shuffled songs.\n   *\n   * @access private\n   */\n  function initializePlaylistShuffleLists() {\n    /*\n    Iterate over all of the playlists the user defined adding\n    the playlist key to the shuffled playlists array and creating\n    and empty object to house the shuffled playlists\n    */\n    for (var key in _config2.default.playlists) {\n      _config2.default.playlists[key].shuffle_list = [];\n    }\n  }\n\n  /**\n   * Intializes the display for the first song in the playlist meta data.\n   *\n   * @access private\n   */\n  function initializeFirstSongInPlaylistMetaData() {\n    /*\n    Iterates over all of the playlists setting the meta data for the\n    first song.\n    */\n    for (var key in _config2.default.playlists) {\n      _metaDataElements2.default.setFirstSongInPlaylist(_config2.default.playlists[key].songs[0], key);\n    }\n  }\n\n  /*\n    Returns the public facing methods\n  */\n  return {\n    initialize: initialize\n  };\n}();\n\n/**\n * AmplitudeJS SoundCloud Meta module\n * @module soundcloud/Soundcloud\n */\n\n\n/**\n * AmplitudeJS Checks Utility.\n * @module utilities/Checks\n */\n/**\n * Imports the config module\n * @module config\n */\nexports.default = PlaylistsInitializer;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the container elements.\n *\n * @param visual/ContainerElements\n */\nvar ContainerElements = function () {\n  /**\n   * Applies the class 'amplitude-active-song-container' to the element\n   * containing visual information regarding the active song.\n   *\n   * @prop {boolean} direct - Determines if it was a direct click on the song. We\n   *      then don't care if shuffle is on or not.\n   * \n   * @access public\n   */\n  function setActive(direct) {\n    /*\n      Gets all of the song container elements.\n    */\n    var songContainers = document.getElementsByClassName(\"amplitude-song-container\");\n\n    /*\n    Removes all of the active song containrs.\n    */\n    for (var i = 0; i < songContainers.length; i++) {\n      songContainers[i].classList.remove(\"amplitude-active-song-container\");\n    }\n\n    /*\n    Finds the active index and adds the active song container to the element\n    that represents the song at the index.\n    */\n    if (_config2.default.active_playlist == \"\" || _config2.default.active_playlist == null) {\n\n      var activeIndex = '';\n\n      /*\n        If we click directly on the song element, we ignore\n        whether it's in shuffle or not.\n      */\n      if (direct) {\n        activeIndex = _config2.default.active_index;\n      } else {\n        if (_config2.default.shuffle_on) {\n          activeIndex = _config2.default.shuffle_list[_config2.default.active_index].index;\n        } else {\n          activeIndex = _config2.default.active_index;\n        }\n      }\n\n      if (document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index=\"' + activeIndex + '\"]')) {\n        var _songContainers = document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index=\"' + activeIndex + '\"]');\n\n        for (var _i = 0; _i < _songContainers.length; _i++) {\n          if (!_songContainers[_i].hasAttribute(\"data-amplitude-playlist\")) {\n            _songContainers[_i].classList.add(\"amplitude-active-song-container\");\n          }\n        }\n      }\n    } else {\n      /*\n        If we have an active playlist or the action took place directly on the\n        song element, we ignore the shuffle.\n      */\n      if (_config2.default.active_playlist != null && _config2.default.active_playlist != '' || direct) {\n        var activePlaylistIndex = _config2.default.playlists[_config2.default.active_playlist].active_index;\n      } else {\n        var activePlaylistIndex = '';\n\n        if (_config2.default.playlists[_config2.default.active_playlist].shuffle) {\n          activePlaylistIndex = _config2.default.playlists[_config2.default.active_playlist].shuffle_list[_config2.default.playlists[_config2.default.active_playlist].active_index].index;\n        } else {\n          activePlaylistIndex = _config2.default.playlists[_config2.default.active_playlist].active_index;\n        }\n      }\n\n      if (document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index=\"' + activePlaylistIndex + '\"][data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]')) {\n        var _songContainers2 = document.querySelectorAll('.amplitude-song-container[data-amplitude-song-index=\"' + activePlaylistIndex + '\"][data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n        for (var _i2 = 0; _i2 < _songContainers2.length; _i2++) {\n          _songContainers2[_i2].classList.add(\"amplitude-active-song-container\");\n        }\n      }\n    }\n  }\n\n  return {\n    setActive: setActive\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = ContainerElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the current time hour elements.\n *\n * @module visual/time/CurrentHourElements\n */\nvar CurrentHourElements = function () {\n  function sync(hours) {\n    syncGlobal(hours);\n    syncPlaylist(hours);\n    syncSong(hours);\n    syncSongInPlaylist(hours);\n  }\n\n  /**\n   * Updates any elements that display the current hour for the song.\n   *\n   * @access public\n   * @param {number} hours \t- An integer conaining how many hours into the song.\n   */\n  function syncGlobal(hours) {\n    /*\n    Get all of the hour selectors\n    */\n    var currentHourSelectors = document.querySelectorAll(\".amplitude-current-hours\");\n\n    /*\n    Set the current hour selector's inner html to hours passed in.\n    */\n    for (var i = 0; i < currentHourSelectors.length; i++) {\n      var playlist = currentHourSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = currentHourSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Updates the current hour selector for a global display.\n      */\n      if (playlist == null && songIndex == null) {\n        currentHourSelectors[i].innerHTML = hours;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist current hour elements.\n   *\n   * @param {Integer} hour - The current audio hour.\n   */\n  function syncPlaylist(hours) {\n    /*\n    Get all of the hour selectors\n    */\n    var currentHourPlaylistSelectors = document.querySelectorAll('.amplitude-current-hours[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n    Set the current hour selector's inner html to hours passed in.\n    */\n    for (var i = 0; i < currentHourPlaylistSelectors.length; i++) {\n      var songIndex = currentHourPlaylistSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Updates the current hour selector for a global display.\n      */\n      if (songIndex == null) {\n        currentHourPlaylistSelectors[i].innerHTML = hours;\n      }\n    }\n  }\n\n  /**\n   * Syncs the song hour elements.\n   *\n   * @param {Integer} hour - The current audio hour.\n   */\n  function syncSong(hours) {\n    if (_config2.default.active_playlist == null) {\n      /*\n      Get all of the hour selectors\n      */\n      var currentHourSongSelectors = document.querySelectorAll('.amplitude-current-hours[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      /*\n      Set the current hour selector's inner html to hours passed in.\n      */\n      for (var i = 0; i < currentHourSongSelectors.length; i++) {\n        var playlist = currentHourSongSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        /*\n          Updates the current hour selector for a global display.\n        */\n        if (playlist == null) {\n          currentHourSongSelectors[i].innerHTML = hours;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song in playlist song hour elements.\n   *\n   * @param {Integer} hour - The current audio hour.\n   */\n  function syncSongInPlaylist(hours) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n    /*\n    Get all of the hour selectors\n    */\n    var currentHourPlaylistSongSelectors = document.querySelectorAll('.amplitude-current-hours[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    /*\n    Set the current hour selector's inner html to hours passed in.\n    */\n    for (var i = 0; i < currentHourPlaylistSongSelectors.length; i++) {\n      currentHourPlaylistSongSelectors[i].innerHTML = hours;\n    }\n  }\n\n  /**\n   * Reset the current hour elements.\n   */\n  function resetTimes() {\n    /*\n      Gets the hour display elements\n    */\n    var hourSelectors = document.querySelectorAll(\".amplitude-current-hours\");\n\n    /*\n      Iterates over all of the hour selectors and sets the inner HTML\n      to 00.\n    */\n    for (var i = 0; i < hourSelectors.length; i++) {\n      hourSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = CurrentHourElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the current time minutes elements.\n *\n * @module visual/time/CurrentMinuteElements\n */\nvar CurrentMinuteElements = function () {\n  /**\n   * Syncs the current minutes elements.\n   *\n   * @param {Integer} minutes - The current audio minutes.\n   */\n  function sync(minutes) {\n    syncGlobal(minutes);\n    syncPlaylist(minutes);\n    syncSong(minutes);\n    syncSongInPlaylist(minutes);\n  }\n\n  /**\n   * Syncs the global current minutes elements.\n   *\n   * @param {Integer} minutes - The current audio minutes.\n   */\n  function syncGlobal(minutes) {\n    /*\n    Get all of the minute selectors\n    */\n    var currentMinuteSelectors = document.querySelectorAll(\".amplitude-current-minutes\");\n\n    /*\n    Set the current minute selector's inner html to minutes passed in.\n    */\n    for (var i = 0; i < currentMinuteSelectors.length; i++) {\n      var playlist = currentMinuteSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = currentMinuteSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Updates the current minute selector for a global display.\n      */\n      if (playlist == null && songIndex == null) {\n        currentMinuteSelectors[i].innerHTML = minutes;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist minutes elements.\n   *\n   * @param {Integer} minutes - The current audio minutes.\n   */\n  function syncPlaylist(minutes) {\n    /*\n    Get all of the minute selectors\n    */\n    var currentMinutePlaylistSelectors = document.querySelectorAll('.amplitude-current-minutes[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n    Set the current minute selector's inner html to minutes passed in.\n    */\n    for (var i = 0; i < currentMinutePlaylistSelectors.length; i++) {\n      var songIndex = currentMinutePlaylistSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Updates the current minute selector for a global display.\n      */\n      if (songIndex == null) {\n        currentMinutePlaylistSelectors[i].innerHTML = minutes;\n      }\n    }\n  }\n\n  /**\n   * Syncs the current song minutes elements.\n   *\n   * @param {Integer} minutes - The current audio minutes.\n   */\n  function syncSong(minutes) {\n    if (_config2.default.active_playlist == null) {\n      /*\n      Get all of the minute selectors\n      */\n      var currentMinuteSongSelectors = document.querySelectorAll('.amplitude-current-minutes[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      /*\n      Set the current minute selector's inner html to minutes passed in.\n      */\n      for (var i = 0; i < currentMinuteSongSelectors.length; i++) {\n        var playlist = currentMinuteSongSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        /*\n          Updates the current minute selector for a global display.\n        */\n        if (playlist == null) {\n          currentMinuteSongSelectors[i].innerHTML = minutes;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the current song in playlist minutes elements.\n   *\n   * @param {Integer} minutes - The current audio minutes.\n   */\n  function syncSongInPlaylist(minutes) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    /*\n    Get all of the minute selectors\n    */\n    var currentMinutePlaylistSongSelectors = document.querySelectorAll('.amplitude-current-minutes[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    /*\n    Set the current minute selector's inner html to minutes passed in.\n    */\n    for (var i = 0; i < currentMinutePlaylistSongSelectors.length; i++) {\n      currentMinutePlaylistSongSelectors[i].innerHTML = minutes;\n    }\n  }\n\n  /**\n   * Reset the current times.\n   */\n  function resetTimes() {\n    /*\n      Gets the minute display elements\n    */\n    var minuteSelectors = document.querySelectorAll(\".amplitude-current-minutes\");\n\n    /*\n      Iterates over all of the minute selectors and sets the inner HTML\n      to 00.\n    */\n    for (var i = 0; i < minuteSelectors.length; i++) {\n      minuteSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = CurrentMinuteElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the current time seconds elements.\n *\n * @module visual/time/CurrentSecondElements\n */\nvar CurrentSecondElements = function () {\n  /**\n   * Syncs the current seconds elements.\n   *\n   * @param {Integer} seconds - The current audio seconds.\n   */\n  function sync(seconds) {\n    syncGlobal(seconds);\n    syncPlaylist(seconds);\n    syncSong(seconds);\n    syncSongInPlaylist(seconds);\n  }\n\n  /**\n   * Syncs the global current seconds elements.\n   *\n   * @param {Integer} seconds - The current audio seconds.\n   */\n  function syncGlobal(seconds) {\n    /*\n    Get all of the second selectors\n    */\n    var currentSecondSelectors = document.querySelectorAll(\".amplitude-current-seconds\");\n\n    /*\n    Set the current second selector's inner html to seconds passed in.\n    */\n    for (var i = 0; i < currentSecondSelectors.length; i++) {\n      var playlist = currentSecondSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = currentSecondSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Updates the current second selector for a global display.\n      */\n      if (playlist == null && songIndex == null) {\n        currentSecondSelectors[i].innerHTML = seconds;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist seconds elements.\n   *\n   * @param {Integer} seconds - The current audio seconds.\n   */\n  function syncPlaylist(seconds) {\n    /*\n    Get all of the second selectors\n    */\n    var currentSecondPlaylistSelectors = document.querySelectorAll('.amplitude-current-seconds[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n    Set the current second selector's inner html to seconds passed in.\n    */\n    for (var i = 0; i < currentSecondPlaylistSelectors.length; i++) {\n      var songIndex = currentSecondPlaylistSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      /*\n        Updates the current second selector for a global display.\n      */\n      if (songIndex == null) {\n        currentSecondPlaylistSelectors[i].innerHTML = seconds;\n      }\n    }\n  }\n\n  /**\n   * Syncs the current song seconds elements.\n   *\n   * @param {Integer} seconds - The current audio seconds.\n   */\n  function syncSong(seconds) {\n    if (_config2.default.active_playlist == null) {\n      /*\n      Get all of the second selectors\n      */\n      var currentSecondSongSelectors = document.querySelectorAll('.amplitude-current-seconds[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      /*\n      Set the current second selector's inner html to seconds passed in.\n      */\n      for (var i = 0; i < currentSecondSongSelectors.length; i++) {\n        var playlist = currentSecondSongSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        /*\n          Updates the current second selector for a global display.\n        */\n        if (playlist == null) {\n          currentSecondSongSelectors[i].innerHTML = seconds;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the current song in playlist seconds elements.\n   *\n   * @param {Integer} seconds - The current audio seconds.\n   */\n  function syncSongInPlaylist(seconds) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n    /*\n    Get all of the second selectors\n    */\n    var currentSecondPlaylistSongSelectors = document.querySelectorAll('.amplitude-current-seconds[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    /*\n    Set the current second selector's inner html to seconds passed in.\n    */\n    for (var i = 0; i < currentSecondPlaylistSongSelectors.length; i++) {\n      currentSecondPlaylistSongSelectors[i].innerHTML = seconds;\n    }\n  }\n\n  /**\n   * Reset the current seconds elements.\n   */\n  function resetTimes() {\n    /*\n      Gets the second display elements\n    */\n    var secondSelectors = document.querySelectorAll(\".amplitude-current-seconds\");\n\n    /*\n      Iterates over all of the second selectors and sets the inner HTML\n      to 00.\n    */\n    for (var i = 0; i < secondSelectors.length; i++) {\n      secondSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = CurrentSecondElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * These methods help sync visual time elements.\n *\n * @module visual/CurrentTimeElements\n */\nvar CurrentTimeElements = function () {\n  /**\n   * Visually displays the current time on the screen. This is called on\n   * time update for the current song.\n   *\n   * @access public\n   * @param {object} currentTime \t\t\t\t\t- An object containing the current time for the song in seconds, minutes, and hours.\n   */\n  function sync(currentTime) {\n    /*\n    Set current time display.\n    */\n    syncGlobal(currentTime);\n    syncPlaylist(currentTime);\n    syncSong(currentTime);\n    syncSongInPlaylist(currentTime);\n  }\n\n  /**\n   * Updates any elements that display the current time for the song. This\n   * is a computed field that will be commonly used.\n   *\n   * @access public\n   * @param {object} time \t- A json object conaining the parts for the current time for the song.\n   */\n  function syncGlobal(time) {\n    /*\n    Get all of the time selectors.\n    */\n    var currentTimeSelectors = document.querySelectorAll(\".amplitude-current-time\");\n\n    /*\n    Set the time selector's inner html to the current time for the song. The current\n    time is computed by joining minutes and seconds.\n    */\n    var timeText = time.minutes + \":\" + time.seconds;\n\n    if (time.hours > 0) {\n      timeText = time.hours + \":\" + timeText;\n    }\n\n    for (var i = 0; i < currentTimeSelectors.length; i++) {\n      var playlist = currentTimeSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = currentTimeSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && songIndex == null) {\n        currentTimeSelectors[i].innerHTML = timeText;\n      }\n    }\n  }\n\n  /**\n   * Updates any elements that display the current time for the song. This\n   * is a computed field that will be commonly used.\n   *\n   * @access public\n   * @param {object} time \t- A json object conaining the parts for the current time for the song.\n   */\n  function syncPlaylist(time) {\n    /*\n    Get all of the time selectors.\n    */\n    var currentTimeSelectors = document.querySelectorAll('.amplitude-current-time[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    /*\n    Set the time selector's inner html to the current time for the song. The current\n    time is computed by joining minutes and seconds.\n    */\n    var timeText = time.minutes + \":\" + time.seconds;\n\n    if (time.hours > 0) {\n      timeText = time.hours + \":\" + timeText;\n    }\n\n    for (var i = 0; i < currentTimeSelectors.length; i++) {\n      var songIndex = currentTimeSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (songIndex == null) {\n        currentTimeSelectors[i].innerHTML = timeText;\n      }\n    }\n  }\n\n  /**\n   * Updates any elements that display the current time for the song. This\n   * is a computed field that will be commonly used.\n   *\n   * @access public\n   * @param {object} time \t- A json object conaining the parts for the current time for the song.\n   */\n  function syncSong(time) {\n    if (_config2.default.active_playlist == null) {\n      /*\n      Get all of the time selectors.\n      */\n      var currentTimeSelectors = document.querySelectorAll('.amplitude-current-time[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      /*\n      Set the time selector's inner html to the current time for the song. The current\n      time is computed by joining minutes and seconds.\n      */\n      var timeText = time.minutes + \":\" + time.seconds;\n\n      if (time.hours > 0) {\n        timeText = time.hours + \":\" + timeText;\n      }\n\n      for (var i = 0; i < currentTimeSelectors.length; i++) {\n        var playlist = currentTimeSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        if (playlist == null) {\n          currentTimeSelectors[i].innerHTML = timeText;\n        }\n      }\n    }\n  }\n\n  /**\n   * Updates any elements that display the current time for the song. This\n   * is a computed field that will be commonly used.\n   *\n   * @access public\n   * @param {object} time \t- A json object conaining the parts for the current time for the song.\n   */\n  function syncSongInPlaylist(time) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n    /*\n    Get all of the time selectors.\n    */\n    var currentTimeSelectors = document.querySelectorAll('.amplitude-current-time[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    /*\n    Set the time selector's inner html to the current time for the song. The current\n    time is computed by joining minutes and seconds.\n    */\n    var timeText = time.minutes + \":\" + time.seconds;\n\n    if (time.hours > 0) {\n      timeText = time.hours + \":\" + timeText;\n    }\n\n    for (var i = 0; i < currentTimeSelectors.length; i++) {\n      currentTimeSelectors[i].innerHTML = timeText;\n    }\n  }\n\n  /**\n   * Resets the current time displays to 00:00\n   *\n   * @access public\n   */\n  function resetTimes() {\n    /*\n    Gets the time selector display elements\n    */\n    var timeSelectors = document.querySelectorAll(\".amplitude-current-time\");\n\n    /*\n    Iterates over all of the time selectors and sets the inner HTML\n    to 00.\n    */\n    for (var i = 0; i < timeSelectors.length; i++) {\n      timeSelectors[i].innerHTML = \"00:00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = CurrentTimeElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the duration countdown elements.\n *\n * @module visual/time/DurationCountDownTimeElements.\n */\nvar DurationCountDownTimeElements = function () {\n  /**\n   * Syncs all of the countdown time elements.\n   *\n   * @param {object} countDownTime - The current time of the audio.\n   * @param {object} songDuration - The song duration of the audio.\n   */\n  function sync(countDownTime, songDuration) {\n    var timeRemaining = computeTimeRemaining(countDownTime, songDuration);\n\n    syncGlobal(timeRemaining);\n    syncPlaylist(timeRemaining);\n    syncSong(timeRemaining);\n    syncSongInPlaylist(timeRemaining);\n  }\n\n  /**\n   * Syncs the global count down time elements.\n   *\n   * @param {string} timeRemaining - The time remaining for the audio.\n   */\n  function syncGlobal(timeRemaining) {\n    var durationTimeRemainingSelectors = document.querySelectorAll(\".amplitude-time-remaining\");\n\n    for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {\n      var playlist = durationTimeRemainingSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = durationTimeRemainingSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && songIndex == null) {\n        durationTimeRemainingSelectors[i].innerHTML = timeRemaining;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist count down time elements.\n   *\n   * @param {string} timeRemaining - The time remaining for the audio.\n   */\n  function syncPlaylist(timeRemaining) {\n    var durationTimeRemainingSelectors = document.querySelectorAll('.amplitude-time-remaining[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {\n      var songIndex = durationTimeRemainingSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (songIndex == null) {\n        durationTimeRemainingSelectors[i].innerHTML = timeRemaining;\n      }\n    }\n  }\n\n  /**\n   * Syncs the song count down time elements.\n   *\n   * @param {string} timeRemaining - The time remaining for the audio.\n   */\n  function syncSong(timeRemaining) {\n    if (_config2.default.active_playlist == null) {\n      var durationTimeRemainingSelectors = document.querySelectorAll('.amplitude-time-remaining[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {\n        var playlist = durationTimeRemainingSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        if (playlist == null) {\n          durationTimeRemainingSelectors[i].innerHTML = timeRemaining;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song in playlist count down time elements.\n   *\n   * @param {string} timeRemaining - The time remaining for the audio.\n   */\n  function syncSongInPlaylist(timeRemaining) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    var durationTimeRemainingSelectors = document.querySelectorAll('.amplitude-time-remaining[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {\n      durationTimeRemainingSelectors[i].innerHTML = timeRemaining;\n    }\n  }\n\n  /**\n   * Resets the count down times.\n   */\n  function resetTimes() {\n    var durationTimeRemainingSelectors = document.querySelectorAll(\".amplitude-time-remaining\");\n\n    for (var i = 0; i < durationTimeRemainingSelectors.length; i++) {\n      durationTimeRemainingSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Computes the time remaining for the audio.\n   *\n   * @param {object} currentTime - The current time of the audio.\n   * @param {object} songDuration - The duration of the audio.\n   */\n  function computeTimeRemaining(currentTime, songDuration) {\n    var timeRemaining = \"00:00\";\n\n    /*\n      Initialize the total current seconds and total duration seconds\n    */\n    var totalCurrentSeconds = parseInt(currentTime.seconds) + parseInt(currentTime.minutes) * 60 + parseInt(currentTime.hours) * 60 * 60;\n    var totalDurationSeconds = parseInt(songDuration.seconds) + parseInt(songDuration.minutes) * 60 + parseInt(songDuration.hours) * 60 * 60;\n\n    /*\n      If the two variables are numbers we continue the computing.\n    */\n    if (!isNaN(totalCurrentSeconds) && !isNaN(totalDurationSeconds)) {\n      /*\n        Find the total remaining seconds.\n      */\n      var timeRemainingTotalSeconds = totalDurationSeconds - totalCurrentSeconds;\n\n      var remainingHours = Math.floor(timeRemainingTotalSeconds / 3600);\n      var remainingMinutes = Math.floor((timeRemainingTotalSeconds - remainingHours * 3600) / 60);\n      var remainingSeconds = timeRemainingTotalSeconds - remainingHours * 3600 - remainingMinutes * 60;\n\n      timeRemaining = (remainingMinutes < 10 ? \"0\" + remainingMinutes : remainingMinutes) + \":\" + (remainingSeconds < 10 ? \"0\" + remainingSeconds : remainingSeconds);\n\n      if (remainingHours > 0) {\n        timeRemaining = remainingHours + \":\" + timeRemaining;\n      }\n    }\n\n    return timeRemaining;\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = DurationCountDownTimeElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the duration hours elements.\n *\n * @module visual/time/DurationHourElements.\n */\nvar DurationHourElements = function () {\n  /**\n   * Sync the duration hours elements.\n   *\n   * @param {Integer} hours - The duration hours for the audio.\n   */\n  function sync(hours) {\n    syncGlobal(hours);\n    syncPlaylist(hours);\n    syncSong(hours);\n    syncSongInPlaylist(hours);\n  }\n\n  /**\n   * Syncs the global duration hours elements.\n   *\n   * @param {Integer} hours - the duration hours for the audio.\n   */\n  function syncGlobal(hours) {\n    var durationHourSelectors = document.querySelectorAll(\".amplitude-duration-hours\");\n\n    for (var i = 0; i < durationHourSelectors.length; i++) {\n      var playlist = durationHourSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = durationHourSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && songIndex == null) {\n        durationHourSelectors[i].innerHTML = hours;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist duration hours for the audio.\n   *\n   * @param {Integer} hours - The duration hours for the audio.\n   */\n  function syncPlaylist(hours) {\n    var durationHourSelectors = document.querySelectorAll('.amplitude-duration-hours[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    for (var i = 0; i < durationHourSelectors.length; i++) {\n      var songIndex = durationHourSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (songIndex == null) {\n        durationHourSelectors[i].innerHTML = hours;\n      }\n    }\n  }\n\n  /**\n   * Syncs the song duration hours.\n   *\n   * @param {Integer} hours - The duration hours for the audio.\n   */\n  function syncSong(hours) {\n    if (_config2.default.active_playlist == null) {\n      var durationHourSelectors = document.querySelectorAll('.amplitude-duration-hours[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      for (var i = 0; i < durationHourSelectors.length; i++) {\n        var playlist = durationHourSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        if (playlist == null) {\n          durationHourSelectors[i].innerHTML = hours;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song in playlist duration hours.\n   *\n   * @param {Integer} hours - The duration hours of the audio.\n   */\n  function syncSongInPlaylist(hours) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    var durationHourSelectors = document.querySelectorAll('.amplitude-duration-hours[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    for (var i = 0; i < durationHourSelectors.length; i++) {\n      durationHourSelectors[i].innerHTML = hours;\n    }\n  }\n\n  /**\n   * Resets the duration shours elements to '00'\n   */\n  function resetTimes() {\n    var durationHourSelectors = document.querySelectorAll(\".amplitude-duration-hours\");\n\n    for (var i = 0; i < durationHourSelectors.length; i++) {\n      durationHourSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = DurationHourElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the duration minutes elements.\n *\n * @module visual/time/DurationMinuteElements.\n */\nvar DurationMinuteElements = function () {\n  /**\n   * Sync the duration minutes elements.\n   *\n   * @param {Integer} minutes - The duration minutes for the audio.\n   */\n  function sync(minutes) {\n    syncGlobal(minutes);\n    syncPlaylist(minutes);\n    syncSong(minutes);\n    syncSongInPlaylist(minutes);\n  }\n\n  /**\n   * Syncs the global duration minutes elements.\n   *\n   * @param {Integer} minutes - the duration minutes for the audio.\n   */\n  function syncGlobal(minutes) {\n    var durationMinuteSelectors = document.querySelectorAll(\".amplitude-duration-minutes\");\n\n    for (var i = 0; i < durationMinuteSelectors.length; i++) {\n      var playlist = durationMinuteSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = durationMinuteSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && songIndex == null) {\n        durationMinuteSelectors[i].innerHTML = minutes;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist duration minutes for the audio.\n   *\n   * @param {Integer} minutes - The duration minutes for the audio.\n   */\n  function syncPlaylist(minutes) {\n    var durationMinuteSelectors = document.querySelectorAll('.amplitude-duration-minutes[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    for (var i = 0; i < durationMinuteSelectors.length; i++) {\n      var songIndex = durationMinuteSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (songIndex == null) {\n        durationMinuteSelectors[i].innerHTML = minutes;\n      }\n    }\n  }\n\n  /**\n   * Syncs the song duration minutes.\n   *\n   * @param {Integer} minutes - The duration minutes for the audio.\n   */\n  function syncSong(minutes) {\n    if (_config2.default.active_playlist == null) {\n      var durationMinuteSelectors = document.querySelectorAll('.amplitude-duration-minutes[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      for (var i = 0; i < durationMinuteSelectors.length; i++) {\n        var playlist = durationMinuteSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        if (playlist == null) {\n          durationMinuteSelectors[i].innerHTML = minutes;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song in playlist duration minutes.\n   *\n   * @param {Integer} minutes - The duration minutes of the audio.\n   */\n  function syncSongInPlaylist(minutes) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    var durationMinuteSelectors = document.querySelectorAll('.amplitude-duration-minutes[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    for (var i = 0; i < durationMinuteSelectors.length; i++) {\n      durationMinuteSelectors[i].innerHTML = minutes;\n    }\n  }\n\n  /**\n   * Resets the duration minutes elements to '00'\n   */\n  function resetTimes() {\n    var durationMinuteSelectors = document.querySelectorAll(\".amplitude-duration-minutes\");\n\n    for (var i = 0; i < durationMinuteSelectors.length; i++) {\n      durationMinuteSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = DurationMinuteElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the duration seconds elements.\n *\n * @module visual/time/DurationSecondElements.\n */\nvar DurationSecondElements = function () {\n  /**\n   * Sync the duration seconds elements.\n   *\n   * @param {Integer} seconds - The duration seconds for the audio.\n   */\n  function sync(seconds) {\n    syncGlobal(seconds);\n    syncPlaylist(seconds);\n    syncSong(seconds);\n    syncSongInPlaylist(seconds);\n  }\n\n  /**\n   * Syncs the global duration seconds elements.\n   *\n   * @param {Integer} seconds - the duration seconds for the audio.\n   */\n  function syncGlobal(seconds) {\n    var durationSecondSelectors = document.querySelectorAll(\".amplitude-duration-seconds\");\n\n    for (var i = 0; i < durationSecondSelectors.length; i++) {\n      var playlist = durationSecondSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = durationSecondSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && songIndex == null) {\n        durationSecondSelectors[i].innerHTML = seconds;\n      }\n    }\n  }\n\n  /**\n   * Syncs the playlist duration seconds for the audio.\n   *\n   * @param {Integer} seconds - The duration seconds for the audio.\n   */\n  function syncPlaylist(seconds) {\n    var durationSecondSelectors = document.querySelectorAll('.amplitude-duration-seconds[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    for (var i = 0; i < durationSecondSelectors.length; i++) {\n      var songIndex = durationSecondSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (songIndex == null) {\n        durationSecondSelectors[i].innerHTML = seconds;\n      }\n    }\n  }\n\n  /**\n   * Syncs the song duration seconds.\n   *\n   * @param {Integer} seconds - The duration seconds for the audio.\n   */\n  function syncSong(seconds) {\n    if (_config2.default.active_playlist == null) {\n      var durationSecondSelectors = document.querySelectorAll('.amplitude-duration-seconds[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      for (var i = 0; i < durationSecondSelectors.length; i++) {\n        var playlist = durationSecondSelectors[i].getAttribute(\"data--amplitude-playlist\");\n\n        if (playlist == null) {\n          durationSecondSelectors[i].innerHTML = seconds;\n        }\n      }\n    }\n  }\n\n  /**\n   * Syncs the song in playlist duration seconds.\n   *\n   * @param {Integer} seconds - The duration seconds of the audio.\n   */\n  function syncSongInPlaylist(seconds) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    var durationSecondSelectors = document.querySelectorAll('.amplitude-duration-seconds[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    for (var i = 0; i < durationSecondSelectors.length; i++) {\n      durationSecondSelectors[i].innerHTML = seconds;\n    }\n  }\n\n  /**\n   * Resets the duration seconds elements to '00'\n   */\n  function resetTimes() {\n    var durationSecondSelectors = document.querySelectorAll(\".amplitude-duration-seconds\");\n\n    for (var i = 0; i < durationSecondSelectors.length; i++) {\n      durationSecondSelectors[i].innerHTML = \"00\";\n    }\n  }\n\n  /**\n   * Returns the publically facing methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = DurationSecondElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _config = __webpack_require__(0);\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Handles all of the duration time elements.\n *\n * @module visual/time/DurationTimeElements.\n */\nvar DurationTimeElements = function () {\n  /**\n   * Syncs the duration time for all elements.\n   *\n   * @param {Object} durationTime - The object containing all of the song duration times.\n   */\n  function sync(durationTime) {\n    var durationText = computeDurationText(durationTime);\n\n    syncGlobal(durationText);\n    syncPlaylist(durationText);\n    syncSong(durationText);\n    syncSongInPlaylist(durationText);\n  }\n\n  /**\n   * Sync the global song duration elements.\n   *\n   * @param {Object} durationText - The text for the song duration.\n   */\n  function syncGlobal(durationText) {\n    var durationTimeSelectors = document.querySelectorAll(\".amplitude-duration-time\");\n\n    for (var i = 0; i < durationTimeSelectors.length; i++) {\n      var playlist = durationTimeSelectors[i].getAttribute(\"data-amplitude-playlist\");\n      var songIndex = durationTimeSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (playlist == null && songIndex == null) {\n        durationTimeSelectors[i].innerHTML = durationText;\n      }\n    }\n  }\n\n  /**\n   * Sync the playlist duration times.\n   *\n   * @param {Object} durationText - The text for the song duration.\n   */\n  function syncPlaylist(durationText) {\n    var durationTimeSelectors = document.querySelectorAll('.amplitude-duration-time[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"]');\n\n    for (var i = 0; i < durationTimeSelectors.length; i++) {\n      var songIndex = durationTimeSelectors[i].getAttribute(\"data-amplitude-song-index\");\n\n      if (songIndex == null) {\n        durationTimeSelectors[i].innerHTML = durationText;\n      }\n    }\n  }\n\n  /**\n   * Sync the song duration times.\n   *\n   * @param {Object} durationText - The text for the song duration.\n   */\n  function syncSong(durationText) {\n    if (_config2.default.active_playlist == null) {\n      var durationTimeSelectors = document.querySelectorAll('.amplitude-duration-time[data-amplitude-song-index=\"' + _config2.default.active_index + '\"]');\n\n      for (var i = 0; i < durationTimeSelectors.length; i++) {\n        var playlist = durationTimeSelectors[i].getAttribute(\"data-amplitude-playlist\");\n\n        if (playlist == null) {\n          durationTimeSelectors[i].innerHTML = durationText;\n        }\n      }\n    }\n  }\n\n  /**\n   * Sync the song in playlist duration times.\n   *\n   * @param {Object} durationText - An object containing the duration text.\n   */\n  function syncSongInPlaylist(durationText) {\n    var activePlaylistIndex = _config2.default.active_playlist != \"\" && _config2.default.active_playlist != null ? _config2.default.playlists[_config2.default.active_playlist].active_index : null;\n\n    var durationTimeSelectors = document.querySelectorAll('.amplitude-duration-time[data-amplitude-playlist=\"' + _config2.default.active_playlist + '\"][data-amplitude-song-index=\"' + activePlaylistIndex + '\"]');\n\n    for (var i = 0; i < durationTimeSelectors.length; i++) {\n      durationTimeSelectors[i].innerHTML = durationText;\n    }\n  }\n\n  /**\n   * Resets all of the duration times to empty.\n   */\n  function resetTimes() {\n    var durationTimeSelectors = document.querySelectorAll(\".amplitude-duration-time\");\n\n    for (var i = 0; i < durationTimeSelectors.length; i++) {\n      durationTimeSelectors[i].innerHTML = \"00:00\";\n    }\n  }\n\n  /**\n   * Computes the duration text\n   *\n   * @param {Object} durationTime - An object containint the duration times.\n   */\n  function computeDurationText(durationTime) {\n    var durationText = \"00:00\";\n\n    if (!isNaN(durationTime.minutes) && !isNaN(durationTime.seconds)) {\n      durationText = durationTime.minutes + \":\" + durationTime.seconds;\n      if (!isNaN(durationTime.hours) && durationTime.hours > 0) {\n        durationText = durationTime.hours + \":\" + durationText;\n      }\n    }\n\n    return durationText;\n  }\n\n  /**\n   * Return publically accessible methods.\n   */\n  return {\n    sync: sync,\n    resetTimes: resetTimes\n  };\n}(); /**\n      * Imports the config module\n      * @module config\n      */\nexports.default = DurationTimeElements;\nmodule.exports = exports[\"default\"];\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports) {\n\nmodule.exports = {\"name\":\"amplitudejs\",\"version\":\"5.2.0\",\"description\":\"A JavaScript library that allows you to control the design of your media controls in your webpage -- not the browser. No dependencies (jQuery not required) https://521dimensions.com/open-source/amplitudejs\",\"main\":\"dist/amplitude.js\",\"devDependencies\":{\"babel-core\":\"^6.26.3\",\"babel-loader\":\"^7.1.5\",\"babel-plugin-add-module-exports\":\"0.2.1\",\"babel-polyfill\":\"^6.26.0\",\"babel-preset-es2015\":\"^6.18.0\",\"husky\":\"^1.3.1\",\"jest\":\"^23.6.0\",\"prettier\":\"1.15.1\",\"pretty-quick\":\"^1.11.1\",\"watch\":\"^1.0.2\",\"webpack\":\"^2.7.0\"},\"directories\":{\"doc\":\"docs\"},\"files\":[\"dist\"],\"funding\":{\"type\":\"opencollective\",\"url\":\"https://opencollective.com/amplitudejs\"},\"scripts\":{\"build\":\"node_modules/.bin/webpack\",\"watch\":\"watch 'node_modules/.bin/webpack' dist\",\"prettier\":\"npx pretty-quick\",\"test\":\"jest\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/521dimensions/amplitudejs.git\"},\"keywords\":[\"webaudio\",\"html5\",\"javascript\",\"audio-player\"],\"author\":\"521 Dimensions (https://521dimensions.com)\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/521dimensions/amplitudejs/issues\"},\"homepage\":\"https://github.com/521dimensions/amplitudejs#readme\"}\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=amplitude.js.map\n\n//# sourceURL=webpack:///./node_modules/amplitudejs/dist/amplitude.js?");

/***/ }),

/***/ "./node_modules/asciidoctor/index.js":
/*!*******************************************!*\
  !*** ./node_modules/asciidoctor/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! @asciidoctor/core */ \"./node_modules/@asciidoctor/core/dist/browser/asciidoctor.js\")\n\n\n//# sourceURL=webpack:///./node_modules/asciidoctor/index.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack:///./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack:///./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack:///./node_modules/isarray/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./script/UI.class.js":
/*!****************************!*\
  !*** ./script/UI.class.js ***!
  \****************************/
/*! exports provided: UI */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UI\", function() { return UI; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar asciidoctor = __webpack_require__(/*! asciidoctor */ \"./node_modules/asciidoctor/index.js\")();\n\nvar UI =\n/*#__PURE__*/\nfunction () {\n  function UI() {\n    _classCallCheck(this, UI);\n  }\n\n  _createClass(UI, null, [{\n    key: \"run\",\n    value: function run(config) {\n      console.info(config);\n      UI.processLoadAsciidoc(config[\"url\"]);\n    }\n  }, {\n    key: \"processLoadAsciidoc\",\n    value: function processLoadAsciidoc(url) {\n      fetch(url.substring(0, url.length - 3) + \"adoc\").then(function (response) {\n        return response.text();\n      }).then(function (data) {\n        document.getElementById('content').innerHTML = asciidoctor.convert(data);\n      });\n    }\n  }]);\n\n  return UI;\n}();\n\n//# sourceURL=webpack:///./script/UI.class.js?");

/***/ }),

/***/ "./script/zenikast.js":
/*!****************************!*\
  !*** ./script/zenikast.js ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _UI_class__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./UI.class */ \"./script/UI.class.js\");\nvar Amplitude = __webpack_require__(/*! amplitudejs */ \"./node_modules/amplitudejs/dist/amplitude.js\");\n\n\n\nvar refresh = function refresh() {\n  _UI_class__WEBPACK_IMPORTED_MODULE_0__[\"UI\"].run(Amplitude.getConfig()['active_metadata']);\n};\n\nwindow.onkeydown = function (e) {\n  return !(e.keyCode == 32);\n};\n/*\r\n  Handles a click on the down button to slide down the playlist.\r\n*/\n\n\ndocument.getElementsByClassName('down-header')[0].addEventListener('click', function () {\n  var list = document.getElementById('list');\n  list.style.height = parseInt(document.getElementById('flat-black-player-container').offsetHeight) - 135 + 'px';\n  document.getElementById('list-screen').classList.remove('slide-out-top');\n  document.getElementById('list-screen').classList.add('slide-in-top');\n  document.getElementById('list-screen').style.display = \"block\";\n});\n/*\r\n  Handles a click on the up arrow to hide the list screen.\r\n*/\n\ndocument.getElementsByClassName('hide-playlist')[0].addEventListener('click', function () {\n  document.getElementById('list-screen').classList.remove('slide-in-top');\n  document.getElementById('list-screen').classList.add('slide-out-top');\n  document.getElementById('list-screen').style.display = \"none\";\n});\n/*\r\n  Handles a click on the song played progress bar.\r\n*/\n\ndocument.getElementById('song-played-progress').addEventListener('click', function (e) {\n  var offset = this.getBoundingClientRect();\n  var x = e.pageX - offset.left;\n  Amplitude.setSongPlayedPercentage(parseFloat(x) / parseFloat(this.offsetWidth) * 100);\n});\ndocument.querySelector('img[data-amplitude-song-info=\"cover_art_url\"]').style.height = document.querySelector('img[data-amplitude-song-info=\"cover_art_url\"]').offsetWidth + 'px';\nAmplitude.init({\n  \"bindings\": {\n    37: 'prev',\n    39: 'next',\n    32: 'play_pause'\n  },\n  \"songs\": [{\n    \"name\": \"00 - Intro\",\n    \"artist\": \"Kevin\",\n    \"album\": \"Zenika\",\n    \"url\": \"./medias/POD_ARK_00_Intro.mp3\",\n    \"cover_art_url\": \"./medias/zenika.png\",\n    \"time_callbacks\": {\n      1: function _() {\n        console.log(\"1 second into the song\");\n      },\n      90: function _() {\n        console.log(\"1 minute 30 seconds into the song\");\n      },\n      110: function _() {\n        console.log(\"1 minute 50 seconds into the song\");\n      }\n    }\n  }, {\n    \"name\": \"01 - Pourquoi l'agilité ?\",\n    \"artist\": \"Kevin\",\n    \"album\": \"Zenika\",\n    \"url\": \"./medias/POD_ARK_01_Pourquoi_L_Agilite.mp3\",\n    \"cover_art_url\": \"./medias/zenika.png\",\n    \"time_callbacks\": {\n      1: function _() {\n        console.log(\"1 second into the song\");\n      },\n      90: function _() {\n        console.log(\"1 minute 30 seconds into the song\");\n      },\n      110: function _() {\n        console.log(\"1 minute 50 seconds into the song\");\n      }\n    }\n  }],\n  \"default_album_art\": \"./medias/zenika.png\",\n  callbacks: {\n    loadstart: function loadstart() {\n      refresh();\n    }\n  }\n});\n\n//# sourceURL=webpack:///./script/zenikast.js?");

/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./script/zenikast.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./script/zenikast.js */\"./script/zenikast.js\");\n\n\n//# sourceURL=webpack:///multi_./script/zenikast.js?");

/***/ })

/******/ });